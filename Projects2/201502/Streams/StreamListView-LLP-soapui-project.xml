<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="StreamListViewLLP" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\StreamListView"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\Reports\Reports 1.0.6 Patch 2\LP1_R3\Stream List View"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE StreamCreate API" type="rest" id="e8d8593c-70d3-4bdf-a7c5-929bbe22a53e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="7ce2232c-bb0b-4a20-8ea9-b1c96112a425"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="ccee026a-5616-4a8a-8996-dcb7ae4e570c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="cfe0247c-3025-41ff-9f65-5ddc9bc841e8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamListView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" id="6b9feffd-7a70-4246-9aa6-75586d630abf"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="86e0c157-4d9a-4138-8ccb-b768e4bf7c39"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Streams</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>500 400 401 404 409 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:StreamList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403 500</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamListView" mediaType="application/xml" id="ce70a987-dd34-46f5-99fb-d9b77a22c965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken" id="45571e64-eda1-494b-8e6f-0c12df3ae165"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="582ae345-a288-499c-9b0e-4ddd4c85708b"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500 404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404 401 500 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="RightsTokenCreate" mediaType="application/xml" postQueryString="false" id="7c913954-7a39-45a6-84ff-1f0389b44f63"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#alid}" ContentID="${#Project#cid}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <ns4:SoldAs>
                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
<!--                    <ns4:BundleID>urn:dece:cho</ns4:BundleID>-->
            </ns4:SoldAs>
            <ns4:RightsProfiles>
                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                    <ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining>
                    <ns4:CanDownload>true</ns4:CanDownload>
                    <ns4:CanStream>true</ns4:CanStream>
                </ns4:PurchaseProfile>
                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                    <ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">2</ns4:DiscreteMediaRightsRemaining>
                    <ns4:CanDownload>true</ns4:CanDownload>
                    <ns4:CanStream>true</ns4:CanStream>
                </ns4:PurchaseProfile>                
                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                    <ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">2</ns4:DiscreteMediaRightsRemaining>
                    <ns4:CanDownload>true</ns4:CanDownload>
                    <ns4:CanStream>true</ns4:CanStream>
                </ns4:PurchaseProfile>
                <ns4:RentalProfile>
                    <ns4:AbsoluteExpiration>2011-09-17T15:12:03</ns4:AbsoluteExpiration>
                    <ns4:DownloadToPlayMax>P5Y2M7DT1H10M0S</ns4:DownloadToPlayMax>
                    <ns4:PlayDurationMax>P2Y1M8DT1H10M0S</ns4:PlayDurationMax>
                </ns4:RentalProfile>
            </ns4:RightsProfiles>
            <ns4:ResourceStatus>
                <ns4:Current CreationDate="2011-02-17T15:12:03" CreatedBy="urn:dece:iby" DeletionDate="2012-02-22T15:12:03" DeletedBy="urn:dece:" ModificationDate="2011-06-29T15:12:03" ModifiedBy="urn:dece:">
                    <ns4:Value>urn:dece:type:status:blocked:eula</ns4:Value>
                    <ns4:Description>dnFu.WQ2R06AV900TAEZEw</ns4:Description>
                </ns4:Current>
                <ns4:History>
                    <ns4:Prior ModificationDate="2011-11-01T15:12:03" ModifiedBy="urn:dece:uq">
                        <ns4:Value>urn:dece:type:status:deleted</ns4:Value>
                        <ns4:Description>RiF67oz2tfdzfJyDq5GM17oEm</ns4:Description>
                    </ns4:Prior>
                    <ns4:Prior ModificationDate="2011-02-18T15:12:03" ModifiedBy="urn:dece:">
                        <ns4:Value>urn:dece:type:status:archived</ns4:Value>
                        <ns4:Description>AXvGDbjiIc9q35QeTtD81-FY</ns4:Description>
                    </ns4:Prior>
                </ns4:History>
            </ns4:ResourceStatus>
    <ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc>
            <ns4:FulfillmentWebLoc>
                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                <ns4:Preference>1</ns4:Preference>
            </ns4:FulfillmentWebLoc>
            <ns4:FulfillmentWebLoc>
                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                <ns4:Preference>2</ns4:Preference>
            </ns4:FulfillmentWebLoc>
            <ns4:FulfillmentManifestLoc>
                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                <ns4:Preference>3</ns4:Preference>
            </ns4:FulfillmentManifestLoc>
            <ns4:FulfillmentManifestLoc>
                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                <ns4:Preference>4</ns4:Preference>
            </ns4:FulfillmentManifestLoc>
        <ns4:PurchaseInfo>
            <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
            <ns4:RetailerTransaction>RetailerTransaction_1</ns4:RetailerTransaction>
            <ns4:PurchaseAccount>${#TestCase#assertionAccountIdFULL}</ns4:PurchaseAccount>
            <ns4:PurchaseUser>${#TestCase#assertionUserIdFULL}</ns4:PurchaseUser>
            <ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime>
        </ns4:PurchaseInfo>
        <ns4:ViewControl>
            <ns4:AllowedUser>${#TestCase#assertionUserIdFULL}</ns4:AllowedUser>
        </ns4:ViewControl>
</ns4:RightsTokenData>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="5d66e029-ad89-492a-814d-5affec81771a"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="11d227a0-126b-4cf7-8935-9674af39f79d"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 404 400 500 403</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500 404 502</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:StreamCreate-resp</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamCreate" mediaType="application/xml" accept="" postQueryString="false" id="a70ad676-bfb9-49b2-8590-943a25c0ed81"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>
 <RequestingUserID>${#TestCase#assertionUserIdFULL}</RequestingUserID>
 <RightsTokenID>${#TestCase#rightstokenidFULL}</RightsTokenID>
</Stream>

]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="a4e06100-336b-485f-9ad1-34f93eed6c23"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="e8312f3b-c4b6-4d5a-99d8-43fad96876ba"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 502 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201 0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS" mediaType="application/xml" postQueryString="false" id="2649c135-238d-40b8-a205-9c6f5b73e947"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS Get" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="2502de79-5b04-412c-8cc7-9cdf14f6c2be"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="a57ed856-49a1-4b4a-a72d-40b70a23a2e1"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="STS Get" mediaType="application/xml" id="faee3374-2407-48ad-ae87-5967131c67aa"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="515a7f09-ec21-45a9-a73d-ab063b866759"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="PUT" method="PUT" id="fa82caaa-b57e-49b1-aef5-6a48cf10cfc7"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:Stream</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="13570ea0-7ea0-479d-9586-05e259a58526"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET" method="PUT" id="91b2959b-9e30-4e01-9210-dda1d39e980b"><con:settings/><con:parameters/><con:request name="StreamRenew" mediaType="application/xml" id="39376562-9f83-4137-9a1c-3b494c530976"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamListView1" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" id="b585baeb-08d7-4fd3-961b-50c27a247689"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="HEAD" method="HEAD" id="16a4ab09-edc8-4429-86ae-5baa9e5d77d9"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Streams</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>500 400 401 404 409 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamListView" mediaType="application/xml" id="25a8c3e0-dadb-45a6-97f1-c224a4824827"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamListViewQHost" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" id="3d3546dc-a401-448d-abb2-d02dee678cde"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="e7983034-c739-4b87-bb1e-a3b38af88222"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Streams</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>500 400 401 404 409 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamListView" mediaType="application/xml" id="9468eac1-532b-4653-a796-596c6bf86d3c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Coordinator APIs" type="rest" basePath="" id="1441975b-edb4-4183-add6-0f15f7559f90" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyGet I" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="401858fd-150d-4ba5-a3ff-f7a44a69bebc"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="2f6762f6-43df-4795-be43-074f2b85537a"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet I" mediaType="application/xml" id="2ef57908-05c6-46a0-a76c-88b0bf69814f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="e7e54774-cf13-496b-b840-8d6997850906"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE" id="c5ed752c-722c-43ff-ab32-e3472d76034d"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="StreamDelete I" mediaType="application/xml" id="662d5787-a0b9-4b36-bf5f-b5c0d4f1b7b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="098e61f7-4a13-44ad-b656-4637fcbaf6ef"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="11cd2a0f-c888-487e-81b7-45e33946ef20"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet I" mediaType="application/xml" id="973e699a-0e2e-49a1-9ee1-ab2d16cd6e7b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy Create" type="rest" basePath="" id="b19aa0ed-0a05-4f9e-8f58-c54715b931b8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="88174ee8-e536-4b26-8b83-7639e3f3e1b4"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="394c039c-2a6c-45ef-8c8e-cd162ce9bc1d"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreate I" mediaType="application/xml" postQueryString="false" id="e37725af-7d9c-4720-b8dc-3d7c36a78fa9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="6557abf6-f58c-480e-9642-973a0367a351"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="4fcd426c-c1b8-42b9-87bb-7976a86967c9"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:request name="PolicyCreate User" mediaType="application/xml" postQueryString="false" id="3b8441db-ba0c-4f77-ab67-67889879e318"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="StreamDelete" type="rest" id="8da2ee46-9bd1-4a2b-a5b3-5557f32b807b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="2984b4c4-2ef6-484f-b0e8-98a147773595"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE" id="b814fb35-dbc0-4f6f-9e7c-0ca8d187f79e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/082012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="c45a5338-77f3-401a-b45f-29880b91f317"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy Get" type="rest" basePath="" id="b7ca0308-0ac3-4900-a9bf-8e34c285eea1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyGet User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="24a69715-25b2-4173-bb82-fffb3ee7a2c7"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="e752c836-423d-4fd7-844a-55936276ea84"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:PolicyList</con:element></con:representation><con:request name="PolicyGet User" mediaType="application/xml" id="150768de-6b9f-4aef-ac26-2c603ab192d8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="088259a6-4990-471c-90b6-35d74456d7de"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="228c8b60-74c2-4928-9b01-f71b3c60b31c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:PolicyList</con:element></con:representation><con:request name="PolicyGet Account" mediaType="application/xml" id="1c0254a2-027c-4a9c-9f48-64d08dd56ca0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy Delete" type="rest" basePath="" id="9fb71725-cb76-4cfe-947b-52d8cb96692c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Policy Delete for User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="68ae7e6b-b912-417f-9ae3-9c142bb42777"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="b54399e4-93bf-4713-98fa-e8cd76f5c7fd"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="PolicyDelete for User" mediaType="application/xml" id="efaee60e-4e77-4edb-b4ba-e8192785f254"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDeleteForAccount" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="c3edf632-36ea-444b-8804-61170cad621c"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="44fa49b3-7c35-4e99-9ea3-cae14425bb15"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="9b40f004-9d70-45d9-832b-8e567dc26fc6"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="" id="73666e04-048d-4b22-b674-374d266e082c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountCreate" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="cf6ca364-dbc1-44a4-aef8-d13dca44ec7b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="b93c5bcc-3563-486f-accd-3c7330e8f529"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="39e8107e-8f75-4f2a-9cd9-8579f6992fa7" mediaType="application/json" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="238ee70c-839f-4820-a19b-a6cd514fb242"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="7792ce37-884c-4233-86b5-dbd4ec9af0c4"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="85158d81-1226-4d8a-ad4a-484bf16be2ad" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="3a9f3e09-e693-4088-8be7-b8884d7ee1db"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="152924d7-a23e-435b-a680-861371deca2d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ab664950-efbc-4858-a34d-43de9543c979" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="942dbbe9-e9ce-429d-9403-c988ca61e444"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="592ac52a-e3b3-4ff6-9598-13e6a435633b"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="45a924b2-bc3e-4785-801d-162ebcf66fab" mediaType="application/json"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="086de33e-fad2-465c-aa9a-0d1ce5d0635d"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="30ecd9fc-6c68-49cc-87ee-95e09ee8851d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" id="e1a449ae-d6f7-47b5-ae5c-14da289a0108" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="300c46eb-d3ee-4c1e-83e6-ecd4331152e7"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="5322098e-1817-4274-b29c-5cecefd9075f"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d685a925-a629-4f05-bc50-13757be1109a" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUserCreate" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="238ee70c-839f-4820-a19b-a6cd514fb242"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountUserCreate" method="POST" id="7792ce37-884c-4233-86b5-dbd4ec9af0c4"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="85158d81-1226-4d8a-ad4a-484bf16be2ad" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="00SetupScripts" id="0929a3fb-2a8d-4b2a-9513-acbb4c8d8479"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="bf673663-2b24-496b-a72c-bc8a9be87e4b"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="110f50eb-a80d-4dd7-b34f-cd30a56aa232"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();

	log.info("Set Environment properties!!!");
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def projectPath = groovyUtils.projectPath
	log.info("Project Path : '" + projectPath + "'");

	def eNV = context.expand( '${#Project#ENV}' )
	log.info("Environment: '" + eNV+ "'");

	def propertiesPath = null;

	if (System.properties['os.name'].toLowerCase().contains('windows')) 
		{
				log.info "it's Windows OS!!";
				File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
				propertiesPath = temp.getCanonicalPath();
		} 
	else 
		{
				log.info "it's Linux OS!!";
				File temp = new File(projectPath + "/../../../Properties/");
				propertiesPath = temp.getCanonicalPath();
		}
		
	log.info("Properties File Location : '" + propertiesPath+ "'");


	def propMap=[:]
	BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
	log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
	String line;
	while ((line = reader.readLine()) != null)
		{
			if (line.trim().length()==0) continue;
			if (line.charAt(0)=='#') continue;

			int delimPosition = line.indexOf("=");
			String key = line.substring(0, delimPosition-0).trim();
			String value = line.substring(delimPosition+1).trim();
			propMap.put(key, value);
		}

	propMap.each{ k, v -> tP.setPropertyValue(k,v)}

	tP.setPropertyValue("APID",tP.getPropertyValue("Streams_APID"));
tP.setPropertyValue("ALID",tP.getPropertyValue("Streams_ALID"));
tP.setPropertyValue("CID",tP.getPropertyValue("Streams_CID"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="fb20598a-c9bb-435c-b60f-05fcbf3a8830"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;

//a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));
//assert a.cidSetStatusActive('urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I')==1</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="6150e4b5-4b57-45f5-bb9c-d81b0df16c63"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="00659e56-afea-4153-b084-2971cd9ddc26"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true" id="8e0237ec-d4e5-4a63-ac85-5ee84bce39c8"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="63b0fffb-69db-4fae-9d53-0dd63ff42ca7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:testStep type="groovy" name="MicroService Enable/Disable Testcases" id="e551f164-8875-464a-962b-792f1a2ffcd5"><con:settings/><con:config><script><![CDATA[
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList<String> Suit_lst=new ArrayList<String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}

//log.info "suit"+Suit_lst.get(1);





ArrayList<String> Tstep=new ArrayList<String>();

def TStep1  = "Remove Account's StreamHandles";
def TStep2 = "Verify STREAM_DATA_HISTORY row";
def TStep3 = "Verify STREAM_DATA, STREAM_HISTORY row counts for the Account";
def TStep4 = "Post Test Cleanup";
def TStep5 ="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts"
def TStep6 ="Verify STREAM_DATA row"
def TStep7 = "Remove account's stream handles"
def TStep8 =  "Post Test Execution cleanup"

Tstep.add(TStep1);
Tstep.add(TStep2);
Tstep.add(TStep3);
Tstep.add(TStep4);
Tstep.add(TStep5);
Tstep.add(TStep6);
Tstep.add(TStep7);
Tstep.add(TStep8);

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i <= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
                if(targetTestCase.isDisabled() == false)
                {
                                for(j = 0; j <= testStepCount - 1; j++)
                                {              
                                	      def q=0;  
                                                try
                                                {     
                                                          for (String T_step : Tstep)	
					                                {
                                                                if (testStepList[j].name == T_step) {
                                                                                
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                //targetTestCase.removeTestStep(targetTestStep);
                                                                                if(microService=="ON")
																				{  
																				   targetTestStep.setDisabled(true)
																				   log.info "Disabled Step " + testStepList[j].name;
																				}
																				else
																				{  
																				   targetTestStep.setDisabled(false)
																				   log.info "Enabled Step " + testStepList[j].name;
																				}
                                                                         }
													q++;
																  
												}
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
                }
    } 
}                                                                                             
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Identify Flaky Testcases" id="49a2975e-f81e-4390-bbf9-99c98033dfc8"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();
log.info tc_condition

tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
             if(tc_condition.toLowerCase()=="all")
             {
                                
                 if(it.getName().toLowerCase().contains("migrated"))
                       it.setDisabled(true);  
                   else 
                         if (!it.isDisabled()) {
                               it.setDisabled(false);
                           }
                                                                                                              
                }
                                                                
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                                                it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
                else
                {
                   if(it.getName().toLowerCase().contains("migrated") || it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                        if (!it.isDisabled()) {
                                it.setDisabled(false);
                                 }
 
                }
           }
        }
}

</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>396d1d6b-33dd-48d6-b41d-40fc4be4bc57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="P0_LASP Linked Test Cases" id="a38d2609-0e84-48ee-8326-fa804979e213"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10000 - StreamListView - LLP - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c30bcc2d-ec2a-42c9-9e95-25f493d03876"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Create data for retailer,lasp and non lasp" id="3ed0b8d6-34ae-49b6-ba27-494e13b9abb7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTC = myTS.run( null , false )

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("StreamCreateCount","0");
tP.setPropertyValue("StreamDeleteCount","0");
tP.setPropertyValue("StreamDeleteList","");
tP.setPropertyValue("accountList","");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish TestCase Properties" id="02c51039-9dfc-4008-aa3b-56091ed2e49a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","STREAM_ACCOUNTID_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");

tP.setPropertyValue("StreamCreateCount","0"); 
tP.setPropertyValue("StreamDeleteCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="f0ff1fe4-4979-4cbe-8277-9c06342b8d5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS to 'active'" id="44725c5f-7127-4b3f-93f4-127667966bbc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS to 'active'" id="5e137a7a-90d2-4afb-89ab-7cd29701768c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set CIDs Rating to G" id="6958439b-fa7f-4614-bdf3-ed1be12c3942"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

String cid     = tP.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = "G";

this.log.info "rating[$rating]";

assert a.sqlSetRating(cid,region,country,system,rating) == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="- Remove all Parental Control Policies Clean-up" id="7adfbe5b-ef9e-4a83-a7bd-3a794a3fe64d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Account Stream Handles" id="a28958a1-09c6-4466-9887-9562d78cccd5" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150430_033417</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4803DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23B19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gEvAEZszfF7eEpEDSlJuMkNcgYmQjyUDy9JUMOEBIPtpeeXa92j3aXZ3dK47mke16nAMTJKaF9Tyi3M20NS1l1I0RJ9ylaA7cFdgdeDdd1y6aLtod0Qp+q6Y9gWOF5hgcvYTDku4EVlUfh3Cpo6oTlipOiMJxWZpynoJPuUBU1DTbtMq6KY+YQ8t0Tcstl4oVxx5phQdgXPqWJkVT24Ja85o2FSJxDWO1WhVXpWLMJoZtmpbxeNMd4CnMkVa/2twoC8TqW3tcDABDFOEijufGlXFgcxVwd0AmFImUwTZW8FEs0zCrhrQJOJl80fKzEPg0jDOxiWhMCUYReUUqPzcgpnFQ8KJJzIiYzj+8hGUqxzqssY4th37RjENoZzo6QMg40vkUWVtffQiBAcVQuO/7Ne3LeVXLjg4ZojyM2Zwfin+GB+gSojiBQOe7a22hne/wRKbqV4Bdn+Io5WQJPdWsCcLAt9UEfL6rwh2DkKy7hMsGXXOFztiHdyRustEiE+Dibwq0V5yNkwcUpVBvYM75sjK6sW/A+tVfyIytLl57jXs8qWUA9o0zRV7ajXjUlHkTbU7w+8ev0eOz07gOkLDj7445Ho3/I8nDTDhWZzX21pRd9P3K2HAa6JKVp128CkLcrVTTH+VGc/HiMY8FvYZIv9qlznX3wX9e+H7bG/yE0Wup99jpNmcdcxmRaDQcTCmZscue8+3m+zUWVTqfXdyvb7+J3uin8yN9QZ0wNcz7X6XAJ+1xf230KoPX12oCF9Ng+Yxr+XX28B/qdm9+kI5ngMVOVG3gtwodWSUkPiczpSGBHmambqLIhwugQqurU4o73FTSHQlcWcONbDntjt2yyy275FnVdqttlkvmZbVqdUzPaXgXO5LZoDiC2IxpSFQsRbmbtvkcIJ67HGgATF/GqWQ6rn3isYUEKvi0Lx9BTDkMY0nPVnWJq4kIOYOXWWBOqJmMkxmxJCf3YnFLb5kXCmCHnFw64OQ+YJIQUMSt+prLxuZC5mKBlqmIrOISFSmkktqZYlnXdiplg5N5EoFCaszjII2gmEyTLDMG33xtHWGeafvt4ZOdvbcPb3b8b5cEaRMQZcDVbRogCwknxouzu8q7K1+cHEM7914aEPW0ZEYFI3iD5PDXW6OoDsm7pNX1BndP9g52bv0np5uDv3bQ/afw3X8Nn1X0/Vnjk6waxwXNQwVLshd4t33IOSaZr75ryAUqLorpcplmLXhpmrbBpHtDtYIhhQHgVHLzyzB+BmrkXoyzBmEO/Ch4rj+EmIopHQgkYC7fTCETz9h8BsDV5uPLx74+d606CClTJ2AtTumakdzaFOJPFzvsYmUn1Xfys4pZ8FaxE7724sh7ysVHEDpRkhqCLx90Bo6lWyLpO2b7zk85OBX8UJknOcciZEONUwEf/ykoXq5pCOM4pcJvaZlif1ZkOMVLAu6b0Ts32TjK91Py/wuqTrIWwCC3Wk4y/2rNcNUToJO9ebMNemLkWO2Wc2mWWs1s5JS3I6fZquZJOUBXf6d+r9nL03GP138D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value>0</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value>0</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>82974</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>be78245f-b07a-43db-a51f-221ff1cf409e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_16520 - StreamListView - LLP - Full User can view stream created by Full User - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4f8f5fc8-ed9f-4f56-8c8c-fdf222a65029"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="eafbf5d6-7d22-4989-a37d-48fac7ba1130"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1"));
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="c00d95f0-2b83-4ba4-a9da-9d7bad598d4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6028738d-f3a4-4e06-a9bf-33d399a83ec8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="28652b69-88de-458d-92a0-4dc61c6bf83f"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4df28841-1ef8-4ce3-9712-cc559c413c50"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="76710607-e529-40ef-a629-3355e3eb5d54"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9aee6c06-1c94-4320-9d8c-ed47a08ec2aa" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="cf2b2b54-57ff-447a-a9a1-41929951f248" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="dd4145bd-60b4-4a0e-b796-186f08337efe" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_024729</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BFF14A377EBC4388B36A9FB10F299E13</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE85C279B559E0E05307991F0ADE8D</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE85C94FF859E8E05307991F0AE836</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMZaNudgTmCFApvSQywGapnnpKPIalNgSSDIQfv2RDLhASA5tnzy7Xu1+2v20uxcSp4kXtqUEoShnpVWaMBnm2qaVCRZyLKkMGU5BhoqEo/b1IPTKKMS7I1ap321aP5HXeMKxF9m+7yLbhyCycQwVGwIUeKReh4pb16ZSZtBnUmGmmpaH3KqNfLuCxigI3WqIquXAqz5apXsQUvvWJmVkbUGtZNOaKjULHWe5XJaXlTIXE8dDyHUergcjMoUUW62LzY3yQKK1tSflCAgkCSkTnjoXzoHNRSTDEZ0wrDIB21jRe7GQgwJH20SSTj5ZxVmI+izmudjBjDNKcELX2OTnGtSUR6V2MuGCqmn67iVcZBzbsCI2cX32yXIOoZ3p6AChkNiWU+xufQ0hBgGMQOnbsN+0Pp1XtfzoWGAmYy5SeSj+Hh5gC0j4DCJb7q61hXa+wxOZal0ACfuMJJmkC7gxZJ1hAnJbTSDnuyrdCYjpakClJuhKGnTOPrwjcZONLp2AVH9SoL3ibJzc4ySDllPht8ntoPZjtFr9mLdvXtbCdWuV8fIZNXMA+8a5oijtRjwiZUGizYm7FWZXD6offLkb4X7sr/vJteKsqzpE0cfa9WNt2aCPOrw3+PK193WeMN8LXDKaZwNEsun97PJZ9aYTuBPk++rpnsXPKMb/tNHj5+Wa9NLX6W278aP67/wbv75/eEqxQvTr2uug9jjGNek/9ZbDhvu94dx2Hj4n/LJef0iv0DpKxcT73HDcyjfpPa9vFnE8fGkW19nDf6jbvflR9vQMRO1EQ4N+t3Slq4TVx83MaGhkx7lpODPNRypgymqZU6Z3hJludzQKdQ03suv3eo1qJ/CvrurVoNfooWoF1YPAvULtXqNS2zWZDYojiB3OYmpimZa7oc3HAEkaSmARCHvBM93ppPWBxy5WuNRnQ/0IOJMw5ro9T+vpayqIt/Li9PWFpCKKakF1ObVKN1zdslvRjhWIg5bsegcteQiEziiYvm1oLTWvpdKpmONFphK3vMBlBpnu7MI02dDzG1VH0nSWgAHqpDzKEijPprM8MY7cfD0bE5lrh73xTy9/bu9e7PjfLgfaJqLGQJrbXIKuI7yZLn5Y3V3lzZVrJ6fQzn07i6h5WTqhSlCyQXL46xdPDEEKknQH7dHdT28Hu7D+ndOd0R87GPxV+MHfhs8r+vas80FWneOCFqGiBd0LvFs+9BjTja+1I+Qcl+flbLHIcgrWEfIcod07hgqOFkZAMt2aX8f8BZhTeHHOmoMF8KPghf4QYqambKSwglS/mVIunrH4jECaxaev3/rq3K3qIKROnYKVOqXrJHppM4g/3OtISIydVt/pz5KL6FfFTvjai6PvqfceRdnESGYGvr7DDMK1W6q7Nxf7zk85OBX8UFkkucCiNKGeMgXv/ymZtty0MCE8Y6rftXLF/qjIcarXGYS/jN64yadRsZ7S/99PbZpTgIBeaiXN/ZstIzRPgE32xs026ImJ49WDS19PHLQ/cbq9RrdIygG61hv1W81eno453voP</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE85C94FF759E8E05307991F0AE836</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE85C279B459E0E05307991F0ADE8D</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE85C279BC59E0E05307991F0ADE8D</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EE85C94FF759E8E05307991F0AE836</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EE85C279B459E0E05307991F0ADE8D</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE8698574F59D4E05307991F0A9047</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EE8698574F59D4E05307991F0A9047</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BFF14A377EBC4388B36A9FB10F299E13</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BFF14A377EBC4388B36A9FB10F299E13</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BFF14A377EBC4388B36A9FB10F299E13</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:16:21</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EE85C94FF759E8E05307991F0AE836</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EE8698574F59D4E05307991F0A9047</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EE85C94FF759E8E05307991F0AE836</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EE8698574F59D4E05307991F0A9047</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE85C279BC59E0E05307991F0ADE8D</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EE8698574F59D4E05307991F0A9047</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EE8698574F59D4E05307991F0A9047</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="LASP Linked Test Cases" id="91c8fd68-d076-4e69-9374-7abd76486300"><con:description/><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\ashwin.tikle\Desktop\Reports\reports 1.0.6.1.N\LP1_R3\Stream List View</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10000 - StreamListView - LLP - Test Suite Staging" searchProperties="true" id="e3a89aa7-c878-44e4-87f4-c64557836fe7" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish TestCase Properties" id="fece5b73-5a97-45cb-a4fe-be3d864a0706"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","STREAM_ACCOUNTID_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="6784d3db-479e-4d03-9581-bbef7cf29686"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS to 'active'" id="cd5c8836-cbae-46a7-8d4c-43f603817e2d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS to 'active'" id="6654eeb2-522d-453a-a1e9-3fa5fb8f7b8e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set CIDs Rating to G" id="72689b88-f118-43b5-b4ad-575d07c6be88"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

String cid     = tP.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = "G";

this.log.info "rating[$rating]";

assert a.sqlSetRating(cid,region,country,system,rating) == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="- Remove all Parental Control Policies Clean-up" id="c2f6b7bd-018b-46d2-a772-41c12597c85e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Account Stream Handles" id="83483392-4257-4158-9359-ac805697db1e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150430_033417</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4803DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23B19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gEvAEZszfF7eEpEDSlJuMkNcgYmQjyUDy9JUMOEBIPtpeeXa92j3aXZ3dK47mke16nAMTJKaF9Tyi3M20NS1l1I0RJ9ylaA7cFdgdeDdd1y6aLtod0Qp+q6Y9gWOF5hgcvYTDku4EVlUfh3Cpo6oTlipOiMJxWZpynoJPuUBU1DTbtMq6KY+YQ8t0Tcstl4oVxx5phQdgXPqWJkVT24Ja85o2FSJxDWO1WhVXpWLMJoZtmpbxeNMd4CnMkVa/2twoC8TqW3tcDABDFOEijufGlXFgcxVwd0AmFImUwTZW8FEs0zCrhrQJOJl80fKzEPg0jDOxiWhMCUYReUUqPzcgpnFQ8KJJzIiYzj+8hGUqxzqssY4th37RjENoZzo6QMg40vkUWVtffQiBAcVQuO/7Ne3LeVXLjg4ZojyM2Zwfin+GB+gSojiBQOe7a22hne/wRKbqV4Bdn+Io5WQJPdWsCcLAt9UEfL6rwh2DkKy7hMsGXXOFztiHdyRustEiE+Dibwq0V5yNkwcUpVBvYM75sjK6sW/A+tVfyIytLl57jXs8qWUA9o0zRV7ajXjUlHkTbU7w+8ev0eOz07gOkLDj7445Ho3/I8nDTDhWZzX21pRd9P3K2HAa6JKVp128CkLcrVTTH+VGc/HiMY8FvYZIv9qlznX3wX9e+H7bG/yE0Wup99jpNmcdcxmRaDQcTCmZscue8+3m+zUWVTqfXdyvb7+J3uin8yN9QZ0wNcz7X6XAJ+1xf230KoPX12oCF9Ng+Yxr+XX28B/qdm9+kI5ngMVOVG3gtwodWSUkPiczpSGBHmambqLIhwugQqurU4o73FTSHQlcWcONbDntjt2yyy275FnVdqttlkvmZbVqdUzPaXgXO5LZoDiC2IxpSFQsRbmbtvkcIJ67HGgATF/GqWQ6rn3isYUEKvi0Lx9BTDkMY0nPVnWJq4kIOYOXWWBOqJmMkxmxJCf3YnFLb5kXCmCHnFw64OQ+YJIQUMSt+prLxuZC5mKBlqmIrOISFSmkktqZYlnXdiplg5N5EoFCaszjII2gmEyTLDMG33xtHWGeafvt4ZOdvbcPb3b8b5cEaRMQZcDVbRogCwknxouzu8q7K1+cHEM7914aEPW0ZEYFI3iD5PDXW6OoDsm7pNX1BndP9g52bv0np5uDv3bQ/afw3X8Nn1X0/Vnjk6waxwXNQwVLshd4t33IOSaZr75ryAUqLorpcplmLXhpmrbBpHtDtYIhhQHgVHLzyzB+BmrkXoyzBmEO/Ch4rj+EmIopHQgkYC7fTCETz9h8BsDV5uPLx74+d606CClTJ2AtTumakdzaFOJPFzvsYmUn1Xfys4pZ8FaxE7724sh7ysVHEDpRkhqCLx90Bo6lWyLpO2b7zk85OBX8UJknOcciZEONUwEf/ykoXq5pCOM4pcJvaZlif1ZkOMVLAu6b0Ts32TjK91Py/wuqTrIWwCC3Wk4y/2rNcNUToJO9ebMNemLkWO2Wc2mWWs1s5JS3I6fZquZJOUBXf6d+r9nL03GP138D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value>0</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value>0</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>82974</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10050 - StreamListView - LLP - AccountIdUnmatched - Node accountid in URL is NULL - 403 Forbidden" searchProperties="true" id="304d4623-880f-4dab-9ec9-836cf21993d4"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish TestCase Properties" id="01487142-5f59-4607-b2d2-1802eb382846"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","STREAM_ACCOUNTID_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="419c9099-c74d-4af2-8eaa-e6602a2e7a15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all the Account's StreamHandles" id="98b810fa-353b-4fb6-91f2-6bd5e4df29ac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Change nodeaccountid" id="782e6b6b-c54c-4ff0-91dd-548fac8a8ec4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

tC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="b58e26ce-46b5-401e-bde8-4d437ab2701b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79675</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15105 - StreamListView - LLP - Account with no STREAM_DATA rows associated - 200 OK - no streams" searchProperties="true" id="1857ee6a-1629-4f23-975b-1e7fdd99181c"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has no active nor deleted streams associated with it. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0d2b5f4e-9128-41ed-b7a1-055393ed9fcc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS_NO_STREAMS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="e223ac10-01f5-4dcf-9203-6067c8dbe94d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="eef347ea-e70c-4218-9b33-fb470d2b4c2a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="67f15667-7b35-4754-9190-84c535b610c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS_NO_STREAMS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79688</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15106 - StreamListView - LLP - Account has single active stream and no deleted streams - 200 OK - 1A" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ebf870b8-0a56-48ee-9462-30313af95ded"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="43792809-96f7-4297-8b6c-e8a64e5b0a78"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBRenewedBy",null);
//tC.setPropertyValue("streamAccountActiveCount","1");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="7c399165-5b7b-4d09-9a26-da069f023ec7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c844413e-bb58-47c8-9d1b-895fe7dc1c2a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e6874dbd-5328-466a-9e60-56f60c7d4fa6"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c0efa220-ad5a-478d-a2d3-6a144d358197"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="420a5b2c-32d7-455c-a83a-5577f002e54b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d0d224d4-22f6-47b5-964b-1ca19eed1b5c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="586f6d54-ba16-4a21-a55d-6b7fa70a74f9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="62526871-102f-4d2f-95f2-4a7cbecf7615" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:46:30</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA09FA2139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA09FA2139E05305991F0AD10D</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE9DA09FA2139E05305991F0AD10D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA09FA2139E05305991F0AD10D</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA09FA2139E05305991F0AD10D</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE9DA09FA2139E05305991F0AD10D</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3BB3222F29E41809979B762267A93AA</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:E3BB3222F29E41809979B762267A93AA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:E3BB3222F29E41809979B762267A93AA</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3BB3222F29E41809979B762267A93AA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79689</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15108 - StreamListView - LLP - Account has single deleted stream and a single active stream - 200 Ok - 1A,1D" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9c0f6c23-d075-489b-849f-699c50502e66"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0720797b-a8e1-4c7e-be1e-dce0df798ce4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
//tC.setPropertyValue("streamAccountActiveCount","1");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="d821b954-f70d-4628-8eb8-2871bce44691"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="07d40b9f-138c-43da-9dab-f6ebdf6b8718" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8f798e8b-480c-4bf1-bee3-a753b6598d8e"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="664a54de-8e94-4eb8-a2d3-4c727bcd1f51"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="a516faef-00f7-4205-964c-a5569abe33cf"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="aff8c4bc-c254-429a-9ba0-2747dc3aa3f7"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="0995bc29-3e4c-4122-97c3-a8ad6a6c74eb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="6f3c129b-823e-4318-989c-333868cbd873"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="55acc31b-cdd7-4ed9-95e1-8e5e3ff3ab53"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8987f603-324f-400d-ad19-9aac04339497" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0c52978b-0d0b-40e3-80d7-7c28a76fa585" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0298A1C396FC45C9AE52842060C31456</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:0298A1C396FC45C9AE52842060C31456</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5EAFBFE96DAA4994BA544470814B31A3</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:0298A1C396FC45C9AE52842060C31456</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5EAFBFE96DAA4994BA544470814B31A3</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0298A1C396FC45C9AE52842060C31456</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:47:45</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:47:58</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:48:13</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EEE9FBB4E42145E05305991F0AFACE</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModofiedBy_1</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15107 - StreamListView - LLP - Account has single deleted stream and no active streams - 200 OK - 1D" searchProperties="true" id="70f7f826-f03a-4162-bf3c-f4fd9714a06b"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and no active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b8536d0a-665d-4b8b-8491-06d26ce7f9e8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS_NO_STREAMS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
					//tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="dd25d5bf-6a1f-4fde-a463-5737a7014579"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5f5f1dee-70fd-45dd-ae22-24c85f45c7a6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="5fabbe08-deab-426f-b614-407c61580b1e"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="22630e22-23cb-4dac-8bd6-7555b6db762e"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c776c8fc-4d18-4ed6-90fb-3b1115920bf1"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="51df48e9-a0a5-400c-ad61-ae92f97d9c32"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="8e9a8ad9-2cf1-4257-89ea-6a5b70103d43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d418e285-1695-4870-a783-5bfb0427360b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3bee13de-4394-466f-a9cc-36bc6081a9b7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2fd35c95-82fc-4237-b408-109672619ff0" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8B77215FD32B45E5B30D11DED801B1CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE9FBB4F22145E05305991F0AFACE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4F22145E05305991F0AFACE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8B77215FD32B45E5B30D11DED801B1CA</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8B77215FD32B45E5B30D11DED801B1CA</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8B77215FD32B45E5B30D11DED801B1CA</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:49:35</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4F22145E05305991F0AFACE</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:49:46</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9FBB4F22145E05305991F0AFACE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79690</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EEE9FBB4F22145E05305991F0AFACE</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EEE9FBB4F22145E05305991F0AFACE</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15110 - StreamListView - LLP - Account has two deleted streams and two active streams - 200 Ok - 2A,2D" searchProperties="true" id="33ca0455-9c32-4e43-896b-d015239c5495"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has two deleted  (historical)  streams and seven active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f1decc68-6ccf-4e28-a328-8e0f2be48b46"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","4");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="b443e8a8-fdb7-491c-9bc5-56a00d54b48b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="7e54b227-ba08-446f-b2bd-c8dde3667213" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

if (tC.getPropertyValue("userIndex") == null) {
	tC.setPropertyValue("userIndex","0")
}

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Account Stream Handles" id="ba912b02-7e9b-44a9-a430-ece6d9552905"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3c0db3c6-069e-465b-b49e-9bf855faf4c8"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="30a7d2e8-0590-4e54-81d7-0c2f6c0377e4"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="a66892b7-189c-4476-980f-8c532b47f010"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="045e415a-a77b-4504-b5d7-6934a4c64138"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 2) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="eb30fbac-e5b4-4d32-9015-6a10699d9dc3"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Increment loop counter &amp; save Stream Handle" id="bf5cff2e-1dcc-44ea-add1-587fdcf99ac3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context to DLP" id="b35179e0-4072-4142-8d5d-0b792a75dd83" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid31").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="79694e87-4c3d-47b1-9cec-3d6e809b7339"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f86877cd-2ffb-4b5f-822b-074808ca7fd0" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="bd6cb62d-f5f7-4863-ab68-61c3a6fd6d15" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FD48B8981B3D4BA3BB697401F96FFC8C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FD48B8981B3D4BA3BB697401F96FFC8C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:4E81A20CF067468BB6E0417C401E4E8A</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:6B761F40A2064D839EA2F761B06D995D</con:value></con:property><con:property><con:name>rightstokenFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:3426A133344340D6A16DA74086BB7E88</con:value></con:property><con:property><con:name>rightstokenFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FD48B8981B3D4BA3BB697401F96FFC8C</con:value></con:property><con:property><con:name>rightstokenFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4E81A20CF067468BB6E0417C401E4E8A</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:55:42</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:55:55</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6B761F40A2064D839EA2F761B06D995D</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:56:08</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>expectDBStatus2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:56:21</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3426A133344340D6A16DA74086BB7E88</con:value></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:56:35</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>streamhandle_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FD48B8981B3D4BA3BB697401F96FFC8C</con:value></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:56:51</con:value></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79693</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EEF1E0E5E92141E05305991F0AA40A</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b35179e0-4072-4142-8d5d-0b792a75dd83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7e54b227-ba08-446f-b2bd-c8dde3667213</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15124 - StreamListView - LLP - Active stream associated with RIGHTS_TOKEN.STATUS_ID of deleted is displayed - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b4b66731-c887-43e8-a1ba-191238648aa4"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of deleted will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Create data for retailer,lasp and non lasp" id="57e7b56f-639e-44ea-8d25-1c0a1c731e4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTC = myTS.run( null , false )

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("StreamCreateCount","0");
tP.setPropertyValue("StreamDeleteCount","0");
tP.setPropertyValue("StreamDeleteList","");
tP.setPropertyValue("accountList","");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="7ad17e6f-7311-48f9-962a-3d7d73884258"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="2cf1eef3-9904-4cb9-9d87-7a25cac639ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a5f65e8f-0354-46be-8d16-bf3dc95f340e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d600bb30-9c5a-40a7-8b3d-ecd9d85a8fd1"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="bc43fe46-062e-426e-8713-63c2fd4b38a4"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS to 'deleted'" id="0cd709ad-0832-4454-9cbc-3f2e8f7587fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusDeleted(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="15df8ead-d4cd-4b91-a153-8886de8097e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7616464e-fe78-454f-8e83-e614c45b340a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="19f9db76-3392-4288-96f0-91cbfa444404" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="77ae7116-af44-420b-b820-3bdd7d3bca43" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_033417</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:6C84F7F082064A6B916D7B7869E1AC1E</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4803DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23B19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gEvAEZszfF7eEpEDSlJuMkNcgYmQjyUDy9JUMOEBIPtpeeXa92j3aXZ3dK47mke16nAMTJKaF9Tyi3M20NS1l1I0RJ9ylaA7cFdgdeDdd1y6aLtod0Qp+q6Y9gWOF5hgcvYTDku4EVlUfh3Cpo6oTlipOiMJxWZpynoJPuUBU1DTbtMq6KY+YQ8t0Tcstl4oVxx5phQdgXPqWJkVT24Ja85o2FSJxDWO1WhVXpWLMJoZtmpbxeNMd4CnMkVa/2twoC8TqW3tcDABDFOEijufGlXFgcxVwd0AmFImUwTZW8FEs0zCrhrQJOJl80fKzEPg0jDOxiWhMCUYReUUqPzcgpnFQ8KJJzIiYzj+8hGUqxzqssY4th37RjENoZzo6QMg40vkUWVtffQiBAcVQuO/7Ne3LeVXLjg4ZojyM2Zwfin+GB+gSojiBQOe7a22hne/wRKbqV4Bdn+Io5WQJPdWsCcLAt9UEfL6rwh2DkKy7hMsGXXOFztiHdyRustEiE+Dibwq0V5yNkwcUpVBvYM75sjK6sW/A+tVfyIytLl57jXs8qWUA9o0zRV7ajXjUlHkTbU7w+8ev0eOz07gOkLDj7445Ho3/I8nDTDhWZzX21pRd9P3K2HAa6JKVp128CkLcrVTTH+VGc/HiMY8FvYZIv9qlznX3wX9e+H7bG/yE0Wup99jpNmcdcxmRaDQcTCmZscue8+3m+zUWVTqfXdyvb7+J3uin8yN9QZ0wNcz7X6XAJ+1xf230KoPX12oCF9Ng+Yxr+XX28B/qdm9+kI5ngMVOVG3gtwodWSUkPiczpSGBHmambqLIhwugQqurU4o73FTSHQlcWcONbDntjt2yyy275FnVdqttlkvmZbVqdUzPaXgXO5LZoDiC2IxpSFQsRbmbtvkcIJ67HGgATF/GqWQ6rn3isYUEKvi0Lx9BTDkMY0nPVnWJq4kIOYOXWWBOqJmMkxmxJCf3YnFLb5kXCmCHnFw64OQ+YJIQUMSt+prLxuZC5mKBlqmIrOISFSmkktqZYlnXdiplg5N5EoFCaszjII2gmEyTLDMG33xtHWGeafvt4ZOdvbcPb3b8b5cEaRMQZcDVbRogCwknxouzu8q7K1+cHEM7914aEPW0ZEYFI3iD5PDXW6OoDsm7pNX1BndP9g52bv0np5uDv3bQ/afw3X8Nn1X0/Vnjk6waxwXNQwVLshd4t33IOSaZr75ryAUqLorpcplmLXhpmrbBpHtDtYIhhQHgVHLzyzB+BmrkXoyzBmEO/Ch4rj+EmIopHQgkYC7fTCETz9h8BsDV5uPLx74+d606CClTJ2AtTumakdzaFOJPFzvsYmUn1Xfys4pZ8FaxE7724sh7ysVHEDpRkhqCLx90Bo6lWyLpO2b7zk85OBX8UJknOcciZEONUwEf/ykoXq5pCOM4pcJvaZlif1ZkOMVLAu6b0Ts32TjK91Py/wuqTrIWwCC3Wk4y/2rNcNUToJO9ebMNemLkWO2Wc2mWWs1s5JS3I6fZquZJOUBXf6d+r9nL03GP138D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF3F281CA332D2E05307991F0A8279</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3F281CA332D2E05307991F0A8279</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6C84F7F082064A6B916D7B7869E1AC1E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:6C84F7F082064A6B916D7B7869E1AC1E</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6C84F7F082064A6B916D7B7869E1AC1E</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:18:55</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3F281CA332D2E05307991F0A8279</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3F281CA332D2E05307991F0A8279</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79706</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EF3F281CA332D2E05307991F0A8279</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EF3F281CA332D2E05307991F0A8279</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>709805fe-5245-4d2b-91b5-cb60ccdcd749</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15125 - StreamListView - LLP - Active stream associated with RIGHTS_TOKEN.STATUS_ID of pending is displayed - 200 OK" searchProperties="true" id="10e4bf4e-0334-42b0-960e-64bb3e64cb58"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of pending will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="07477b5f-c292-4d35-b9af-71a1c7f54022"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="b9920d87-dfbf-4eb6-a844-07242d0fafc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="83a47fc8-1758-4139-9892-879007f8f11b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cccd03cf-0ef1-435d-ab95-df21309966a9"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="be687c09-00a3-49c7-85fc-3098a298d26f"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS to 'pending'" id="deb9cced-478d-4e96-97f8-8c80683248fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusPending(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="748b455d-76f3-401c-893f-f1791ffe5759"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="033d7ec4-9ac5-4240-b49d-ec6af5355176" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f3771f8e-43b6-4132-8e53-1b54ccc518be" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3eb3c32a-c636-40a6-a83e-eafc47bff6c9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747061710C11E0401F0A07992E03</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747061710C11E0401F0A07992E03</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747F0556EEE4E0401F0A07992E0F</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72747F0556EEE4E0401F0A07992E0F</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747F0556EEE4E0401F0A07992E0F</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:21:11</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747061710C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747061710C11E0401F0A07992E03</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79707</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC72747061710C11E0401F0A07992E03</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC72747061710C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15126 - StreamListView - LLP - Active stream associated with RIGHTS_TOKEN.STATUS_ID of suspended is displayed - 200 OK" searchProperties="true" id="8eb6fc64-1d4a-42ca-8ef5-9933748e77a1"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of suspended will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a31eaab-9a21-4519-a12e-ba2cd7f7f3fd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="b31ca697-6054-4bca-9cb5-fd8d71e82088"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f96363d2-bc96-4c7a-b4aa-43a80a4547cf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ca3a2c21-82e4-4c1f-b41c-771992290971"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="33a92cfd-abf2-4152-9e40-996a6c11d027"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS to 'suspended'" id="230e6859-1cdc-4263-a782-bb38180b0329"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusSuspended(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="47aa869e-4305-4736-a17e-6a776b468cc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="8208fecd-536f-42ac-8f86-ac608b481a19" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f5bad738-60d3-48f0-95d0-8517041d20f7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="404d8b71-df5d-420a-ab05-f6246f6c8628" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747BAD403B71E0401F0A05991171</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747BAD403B71E0401F0A05991171</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC727470617C0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC727470617C0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC727470617C0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:21:18</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747BAD403B71E0401F0A05991171</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747BAD403B71E0401F0A05991171</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79708</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC72747BAD403B71E0401F0A05991171</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC72747BAD403B71E0401F0A05991171</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15127 - StreamListView - LLP - Active stream associated with RIGHTS_TOKEN.STATUS_ID of other is displayed - 200 OK" searchProperties="true" id="a62282c6-d54f-44b5-befa-92d2ea18081b"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="388692cf-c440-41e4-8083-fed5a0c13e4f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="71a908fc-9e79-4cb1-a72c-a84decd71ff4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="0e757505-7410-4381-bbe1-6f38ae5ea585" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="44a5f17d-5990-4635-8287-8901901e2965"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="78efb66a-620a-4e04-8564-8a506a6608bb"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS to 'other'" id="54704504-f003-4043-9561-17540d7dc7d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="98d9e9a1-7cb1-478f-af74-a512f1e23ac1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="bdd3ebd2-91c0-477d-af2e-a4a79986d539" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4b89900c-7a12-4e30-86e8-9466826b2bfa" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="393e6280-3423-4f6e-86c0-b619d830f54c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747AEA2EF6A7E0401F0A05991177</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747AEA2EF6A7E0401F0A05991177</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747A53588147E0401F0A05991167</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72747A53588147E0401F0A05991167</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747A53588147E0401F0A05991167</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:21:32</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747AEA2EF6A7E0401F0A05991177</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747AEA2EF6A7E0401F0A05991177</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79709</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC72747AEA2EF6A7E0401F0A05991177</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC72747AEA2EF6A7E0401F0A05991177</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>57e7b56f-639e-44ea-8d25-1c0a1c731e4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15128 - StreamListView - LLP - Active stream associated with RightsToken with RENTAL_ABSOLUTE_EXPIRATION expired - 200 OK" searchProperties="true" id="f61beb04-52ba-42c3-a81d-d60762cb77bb"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="265c76f0-0aea-4a0d-882d-3c05c18f45d4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="a887e930-081a-40de-8d31-bcc90821b238"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9e1d6d0c-496c-4fcc-9f0a-1edec779b43a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a503b155-b2ad-49cf-a5bc-7dd5f1894928"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="859b0221-6589-4f95-a5ae-fd0ab7027f26"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Expire the RightsToken" id="7087a710-b6b0-4520-9d1d-4c593a0759c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenExpireHours(rt,1) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="3160b65f-4510-41af-8216-3a6caaf52d46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f5fd65d6-e497-4036-b794-273ce2a17ab1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="051b14c0-7d31-4ca8-bb10-b6eba8c0a2ca" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d5432783-5296-4186-9495-4fdb57281979" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747AEA39F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747AEA39F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747A535A8147E0401F0A05991167</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72747A535A8147E0401F0A05991167</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747A535A8147E0401F0A05991167</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:21:44</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747AEA39F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72747AEA39F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79710</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC72747AEA39F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC72747AEA39F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15150 - StreamListView - LLP - &lt;StreamClientNickname> verification when value is NULL - 200 OK" searchProperties="true" id="263c1c3d-69bf-4123-bd46-e5bd22ead6d0"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c1c64052-11ff-4c4b-8456-08a31ea9ecfa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="f4eefcbf-c115-4b6d-bb7b-98129e413b24"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7834eb46-b1a6-4553-a502-a290aa1ab754" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="7d7054f8-1e5b-47e6-8b72-ffd6699f5e0a"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c8d1daaa-bd7e-4c24-bb6f-2d43ee9befaa"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="249f9ca7-e332-4694-af7d-fa831dec97ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7c03fe71-109a-4e43-a525-4f11c55c0ccd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="bca24711-b042-4de6-8f81-8a7be2c77e77" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c81ad848-da99-46be-87af-fa0cec0d6848" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040334</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B1A06253E57E05305991F0A8F13</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B19E00F3E4AE05305991F0AA1FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc+I6DP0rTPaxE+IkfGYKM6GFlltou0C7e/vScR0FvE1siB2g/PprB0iB0l529ykjRT46lmRJ5wLHkeP5QkAiKWeFZRwx4WXahpEmzONYUOExHIPwJPGGfr/nOUXk4e0Ro9C9bBjPQVgq191axazVkWuWHFw2X8DFZvml5tRqpbod2BVlKkQKXSYkZrJhOMgum6hkumhkI8+1PRsVUQk9GYVHSITCViZFZGxILUXDmEg59SxrsVgUF26RJ2PLQci2fvZ7QzKBGBvN8/WNMkdJc2NPigEQiCJSJDy2zq09m/NAeEM6ZlimCWx8BZ/5QhaqW8omEHT8zcjPQtBlIc/EC8w4owRHdIV1fPogJzwo+NGYJ1RO4k8vYSMNbMKSmMQusW+GtU/tRKA9honApphge4M1gBASYAQKD4Nuw/h2Wtayo6MEMxHyJBb74u/xATaHiE8hMMX2WhtqpwMeiVTzHIjXZSRKBZ3DrS7WKSYgNtkEcjpU4T6BkC57VKgCXQrNztqldyCuo3FJxyDknyRoJzlrkEccpdAkgPoOnkT9Xige41YqrrrVhJ7ZLz5pZAR2jTNFntq1eFCUeRGtT+Dh03TkP9ir3sU9Gbdv/OEQvfrW7XwBvYdZX86u7Dpcz6LypNqXDlaA1+OknnQ649o1x/PbnzI6+84sa3Z3vYKrdi/hrw9niwFvD/z7FXlZVR/riC6ufowQ+JOWn4Y0vOn/004tVK0urPvXf6viGiH3qVdD8/E4vCYdupj9kDe1mX3z66bVekMXYbkSY/m93civs8N/X7d988P05RcQuRV1GXQvCx2VJSy/bmZaQwMzzEy9qW4+QgKTRlOf0r3DS1W7o4GncriW7VK7U2vZ9TZCbbdd8tuo7KJyvW53kO/bnda2yaxZHFC84Cyk2pduueuy+ZogiT0BLIDEnPNUdTphfIF4iSUudNlAPQLOBIy4as8Vt25XwwqPuFjYs+mKOkKm82qZGIVbLu/YXeKHEpL9nuzu9eQBEDqloBu3rmuhCltIFYsZnqcysotzXGSQqtae6C7rOaVa2RI0nkagmVoxD9IIitPJNIuMJdZfx8REZNpBe/TsZO/t05sd/tsGQdkEVBsIfZsWqETCkfGCtlf5cOXK0TG0hffTgOqnpSIqE0rWTPZ/vReKrpC8Si57/vD+2dnSzq1/5/TF8I8Ben/lvve37rOMfjxrfRFV6zChuatgTnccb7cPNcdU52tuC3KGi7NiOp+nWQlWEXKsRMFbuhQsJQyBpKo3v434KzArR7FOGoQ58QPnuX6fYionbCixhFi9mUImnrD5DEHozaerHvvy1LVqz6UKnYSlPKa7iNTWphl/udgRj2g7pb5XnwVPgveMHcHa8aPuqRYfSdlYS3oIvn1SGYQrWKraN092wY8BHHO+r8yDnHORqqBeUgmf/ynovtwwMCE8ZbJ7aWSK3VmR8ZRvU/DejT7AZOMo30/p/y+oJs1KgIDaagXN8PWa4eknwMY782bj9MjI8VHFKbntcnV35NQ6tpsHZY9d84P6o2YnToc13vwP</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF8B19E00E3E4AE05305991F0AA1FB</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B19E00E3E4AE05305991F0AA1FB</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B1A06243E57E05305991F0A8F13</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B1A062C3E57E05305991F0A8F13</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF8B1A06243E57E05305991F0A8F13</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B16DC6F3E40E05305991F0A606F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF8B16DC6F3E40E05305991F0A606F</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9AAA3151871947A1A6C6BF03561D9919</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:9AAA3151871947A1A6C6BF03561D9919</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9AAA3151871947A1A6C6BF03561D9919</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:20:18</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3F281CB132D2E05307991F0A8279</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3F281CB132D2E05307991F0A8279</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF8B1A062C3E57E05305991F0A8F13</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EF8B16DC6F3E40E05305991F0A606F</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EF8B16DC6F3E40E05305991F0A606F</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15151 - StreamListView - LLP - &lt;StreamClientNickname> verification when value is single character - 200 OK" searchProperties="true" id="3b36aa96-abad-4b1d-884d-eae3700420ac"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8bd364c-2ff8-4f9b-b851-dc10f3a1772b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("nickname","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="6b2de7ba-6313-4858-8a45-00a7bd4642c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c6db4fdc-b36d-4abd-8ded-42001ec3c49f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="56c52771-43e5-46df-9ded-55502646a27f"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="de7b7d03-8f22-4004-b0b0-a4668b395e9b"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nickname","a");
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="9e04a9c1-dc65-4dd3-8126-dbe935857249"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="cde0ad33-6388-4e2a-804c-95bd3611571f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="681d5a3d-2ea0-40cc-b495-460284bc8cdd" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fe01ddd0-2956-4e24-afe4-edf98dc3568c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23B19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_033417</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D53BE6A9704D48328C96BC0948CCFEF6</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D53BE6A9704D48328C96BC0948CCFEF6</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D53BE6A9704D48328C96BC0948CCFEF6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D53BE6A9704D48328C96BC0948CCFEF6</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3A88F25232BEE05307991F0A479E</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF3A88F25232BEE05307991F0A479E</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">a</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3A88F25232BEE05307991F0A479E</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">a</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:21:24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gEvAEZszfF7eEpEDSlJuMkNcgYmQjyUDy9JUMOEBIPtpeeXa92j3aXZ3dK47mke16nAMTJKaF9Tyi3M20NS1l1I0RJ9ylaA7cFdgdeDdd1y6aLtod0Qp+q6Y9gWOF5hgcvYTDku4EVlUfh3Cpo6oTlipOiMJxWZpynoJPuUBU1DTbtMq6KY+YQ8t0Tcstl4oVxx5phQdgXPqWJkVT24Ja85o2FSJxDWO1WhVXpWLMJoZtmpbxeNMd4CnMkVa/2twoC8TqW3tcDABDFOEijufGlXFgcxVwd0AmFImUwTZW8FEs0zCrhrQJOJl80fKzEPg0jDOxiWhMCUYReUUqPzcgpnFQ8KJJzIiYzj+8hGUqxzqssY4th37RjENoZzo6QMg40vkUWVtffQiBAcVQuO/7Ne3LeVXLjg4ZojyM2Zwfin+GB+gSojiBQOe7a22hne/wRKbqV4Bdn+Io5WQJPdWsCcLAt9UEfL6rwh2DkKy7hMsGXXOFztiHdyRustEiE+Dibwq0V5yNkwcUpVBvYM75sjK6sW/A+tVfyIytLl57jXs8qWUA9o0zRV7ajXjUlHkTbU7w+8ev0eOz07gOkLDj7445Ho3/I8nDTDhWZzX21pRd9P3K2HAa6JKVp128CkLcrVTTH+VGc/HiMY8FvYZIv9qlznX3wX9e+H7bG/yE0Wup99jpNmcdcxmRaDQcTCmZscue8+3m+zUWVTqfXdyvb7+J3uin8yN9QZ0wNcz7X6XAJ+1xf230KoPX12oCF9Ng+Yxr+XX28B/qdm9+kI5ngMVOVG3gtwodWSUkPiczpSGBHmambqLIhwugQqurU4o73FTSHQlcWcONbDntjt2yyy275FnVdqttlkvmZbVqdUzPaXgXO5LZoDiC2IxpSFQsRbmbtvkcIJ67HGgATF/GqWQ6rn3isYUEKvi0Lx9BTDkMY0nPVnWJq4kIOYOXWWBOqJmMkxmxJCf3YnFLb5kXCmCHnFw64OQ+YJIQUMSt+prLxuZC5mKBlqmIrOISFSmkktqZYlnXdiplg5N5EoFCaszjII2gmEyTLDMG33xtHWGeafvt4ZOdvbcPb3b8b5cEaRMQZcDVbRogCwknxouzu8q7K1+cHEM7914aEPW0ZEYFI3iD5PDXW6OoDsm7pNX1BndP9g52bv0np5uDv3bQ/afw3X8Nn1X0/Vnjk6waxwXNQwVLshd4t33IOSaZr75ryAUqLorpcplmLXhpmrbBpHtDtYIhhQHgVHLzyzB+BmrkXoyzBmEO/Ch4rj+EmIopHQgkYC7fTCETz9h8BsDV5uPLx74+d606CClTJ2AtTumakdzaFOJPFzvsYmUn1Xfys4pZ8FaxE7724sh7ysVHEDpRkhqCLx90Bo6lWyLpO2b7zk85OBX8UJknOcciZEONUwEf/ykoXq5pCOM4pcJvaZlif1ZkOMVLAu6b0Ts32TjK91Py/wuqTrIWwCC3Wk4y/2rNcNUToJO9ebMNemLkWO2Wc2mWWs1s5JS3I6fZquZJOUBXf6d+r9nL03GP138D</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4803DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3A88F25232BEE05307991F0A479E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EF3A88F25232BEE05307991F0A479E</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EF3A88F25232BEE05307991F0A479E</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15152 - StreamListView - LLP - &lt;StreamClientNickname> verification when value is max allowed - 200 OK" searchProperties="true" id="a585d91f-f7d4-46e5-a0b3-bba9fd6567e7"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Create data for retailer,lasp and non lasp" id="ae512ce1-2948-44cb-8896-0bbdec122270"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTC = myTS.run( null , false )

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("StreamCreateCount","0");
tP.setPropertyValue("StreamDeleteCount","0");
tP.setPropertyValue("StreamDeleteList","");
tP.setPropertyValue("accountList","");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="c1db12a4-d843-4a55-95fd-e3391fd5c7bd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="d5864ad8-2be5-46d4-bca5-37368bbe8a38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="76865a81-b0c0-49cd-b899-08eb5d25f012" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3d7a1010-419a-478b-8ec0-97fc30ca5159"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="3cb5336e-a3e7-4cec-8749-f923f6d0b3ce"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nickname","aaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIoooo");
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="1aa34214-6628-4616-afdc-7d4e66c8d1b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3bd1421d-4438-41ff-a570-ce3e7d1b7e35" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="83cb462f-69e2-4cf7-b96f-820d7f324acf" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="805ad8a2-e36f-4176-a0b5-22d51caef424" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DF340430C04449BE8106146125299D8A</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0AAE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0AAE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">aaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIoooo</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF340430C04449BE8106146125299D8A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DF340430C04449BE8106146125299D8A</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">aaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIaaaaaaaaaIoooo</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF340430C04449BE8106146125299D8A</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:37:08</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0AAE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0AAE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EFA89C0AAE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EFA89C0AAE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ae512ce1-2948-44cb-8896-0bbdec122270</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15153 - StreamListView - LLP - &lt;StreamClientNickname> verification when value contains XML-allowed special characters - 200 OK" searchProperties="true" id="99d4c45c-69b3-4332-bd0a-8c86ab1e6991"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="7c57a17c-97f8-42ce-acc8-f2d02eb9d75b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="52257362-27d6-4d3e-906d-beba9b8b02c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6d67d06e-ee13-4c5d-8e67-cb159125e0b0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a5a0e166-a329-439d-bc84-ccb4acc35a14"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6f5dc171-0770-419a-9b98-c25e03dc9aa9"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nickname","John &amp;amp; Paul &amp;amp; George &amp;amp; Ringo");
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="0595e633-3d63-4687-9603-3a9a77689fd5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="4ec2a2e8-f696-4f34-b541-7101af777b5f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9005354e-054e-4b50-930b-574246d37929" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="97a16adb-793f-4e4b-a5b7-3083128c58a8" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d8e8d743-de77-4bc3-bd91-4ed52579d211" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:934107FFCF7444AEB3A51922EE244E64</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA925466E33B2E05307991F0AAE6C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA925466E33B2E05307991F0AAE6C</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">John &amp;amp; Paul &amp;amp; George &amp;amp; Ringo</con:value></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">934107FFCF7444AEB3A51922EE244E64</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:934107FFCF7444AEB3A51922EE244E64</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">John &amp;amp; Paul &amp;amp; George &amp;amp; Ringo</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">934107FFCF7444AEB3A51922EE244E64</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:38:20</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA925466E33B2E05307991F0AAE6C</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA925466E33B2E05307991F0AAE6C</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EFA925466E33B2E05307991F0AAE6C</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EFA925466E33B2E05307991F0AAE6C</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_16520 - StreamListView - LLP - Full User can view stream created by Full User - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0591e27c-1fa9-43ee-b7e5-8d308ba6009c"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b3a3009f-fba1-4893-bd7d-dfbec3feebdb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1"));
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="749bbfe1-56d6-47de-bcee-c087e95640cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="04fcb264-9084-4a78-bd84-f2b3882fb982" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1b12c756-4726-4ba3-b90e-b1b4d957aed1"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e9264b4c-8315-422d-a593-b026cb8cd177"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="3eb2e783-f023-4a73-af06-5fbcc471bb2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="62bb8e27-2ef4-4131-87de-517e58b80302" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="bf8330f4-585b-43e7-bf31-f2814a9662cb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b8445791-426e-4a54-b43a-a7dc269a8538" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:07F28ACDC3794713809C61499C74F544</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937E1133B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA8937E1133B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07F28ACDC3794713809C61499C74F544</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:07F28ACDC3794713809C61499C74F544</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07F28ACDC3794713809C61499C74F544</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:39:36</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA8937E1133B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA8937E1133B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937E1133B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA8937E1133B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_16700 - StreamListView - LLP - API invocation after StreamRenew by Full User - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="465933c0-e4bb-4348-838b-751387fcf211"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cb46b200-d89d-4b08-8fab-7cc3db4db31e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="10c92560-694b-4014-bd62-902dde6e9160"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d0beb65d-68bd-4417-8a42-b5a62f7d831c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ae3e9acf-d822-4b54-b657-151582db0db8"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="43c9abcb-b051-4bbc-8e7f-a494f78514c9"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="da1ea005-a0ab-401f-8e4d-64b27073f9e3"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="31548b1f-606e-4ef4-b13c-960f1e438805"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="21defa66-acfc-4985-89d0-cafaa1f2574f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0bb7b7a8-b204-44ab-ae86-d6121d20903b" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="cd84a9b0-6224-4a7d-b853-90618ec06277" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BFC473505DFA411F850B0377D44C1F20</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFEEA223E71F84E05307991F0A755B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFEEA223E71F84E05307991F0A755B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BFC473505DFA411F850B0377D44C1F20</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BFC473505DFA411F850B0377D44C1F20</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BFC473505DFA411F850B0377D44C1F20</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:55:29</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFEEA223E71F84E05307991F0A755B</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBUpdatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:55:42</con:value></con:property><con:property><con:name>expectDBUpdatedTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:55:42</con:value></con:property><con:property><con:name>expectDBRenewedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFEEA223E71F84E05307991F0A755B</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79736</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EFEEA223E71F84E05307991F0A755B</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EFEEA223E71F84E05307991F0A755B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_16720 - StreamListView - LLP - API invocation after two StreamRenew invocations by Full User - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="46f74908-f8eb-469b-b8dc-a2a3dae71942"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1f5915d0-553f-446b-b451-590941d6cf67"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="35d0b2af-758b-4a59-8d0b-1410e9fb0d03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bee71dc7-541d-470f-817f-170a191719bb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="637e648d-1677-44f2-a801-d5e5cb1b5bd8"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="3d8ef3b0-e04f-474e-bc8f-2fea1b6d1795"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="c76ab0a2-e1e6-48f3-b6a2-bf7bf98ff254"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="d1db1763-3281-42d1-9fe8-647996ec8f96"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="523da897-5614-444e-b928-44dece6460dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="3c44d217-945d-4fd4-8c14-408396a95cb4"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal again" id="78e7b5f8-c189-45c6-a5e7-cc24467f855c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+10800000);
	}
else
	{
d=new Date(new Date().getTime()+54000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew II" id="ea1fd283-d27d-403b-a50c-894bfe14f99c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay III" id="2cf2e5ed-4ef4-49d2-8f04-3ae3fd741f37"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="ab30d53b-aaa1-4697-b6a1-1e2c9ebe1302"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7dd566e8-dc3e-4ba5-8a22-71d907c8b4d6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="eb3bb205-40c0-47fe-b77d-a0f4102c1df4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:00:22</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBUpdatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:00:50</con:value></con:property><con:property><con:name>expectDBUpdatedTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:00:50</con:value></con:property><con:property><con:name>expectDBRenewedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79739</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>78e7b5f8-c189-45c6-a5e7-cc24467f855c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19090 - StreamListView - LLP - Stream view by dlp_ManageAccountConsentPresent_OneActiveStreamDLP - 200 OK - 1A,1D" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4e7015ea-b722-44ce-b035-485c6a209ee3"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8e911ca7-23f3-4d5f-a227-61cab3b583bb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="992ab773-9978-463d-a662-1268179d94ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="611bf6ad-8f7a-4f21-832e-f4c6cd215281" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage account consent" id="f4f2c4f0-e21a-4088-b45a-bc50fa71f762"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent" id="55d1533e-db88-4f69-94ac-c8dbacee678e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3604ca3c-744f-410e-b7c4-e1a287949dd3"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="82c37337-80e3-406f-90d9-071407a804c5"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="2af2d178-002f-49e3-a03e-530c53940d5f"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="cc3c0516-187c-47eb-9a48-625281c6ae10"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="00b0b3cd-cbd1-4e34-b483-15973a51bd84"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="427f8ceb-9689-4dfb-a191-d12da5d069d0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context to DLP" id="515727f8-a3ef-4d9b-b7c7-2f5f3eae9968" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="187a6510-9827-4302-8094-90a4d030815a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4f7ed9aa-5de4-43c7-ad83-54e9f9a40328" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e732892f-0a8f-437e-bcef-3bc6157fd6b0" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3BB9773C37C44A22B387C13D88997BC0</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:3BB9773C37C44A22B387C13D88997BC0</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8D92BB7F7B104C0EA83FF9EE26B35768</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:3BB9773C37C44A22B387C13D88997BC0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8D92BB7F7B104C0EA83FF9EE26B35768</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3BB9773C37C44A22B387C13D88997BC0</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:44:33</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:44:46</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:45:00</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EFA89C0ACE33B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>515727f8-a3ef-4d9b-b7c7-2f5f3eae9968</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55d1533e-db88-4f69-94ac-c8dbacee678e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4f2c4f0-e21a-4088-b45a-bc50fa71f762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19091 - StreamListView - LLP - Stream view by dlpcs_ManageAccountConsentPresent_OneActiveStreamDLP_OneActiveStreamDLPCS - 200 OK - 2A,1D" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dc3cd131-789b-4b95-8833-8d27527fe941"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="53462a0e-e0dd-49e0-ad48-a5c9a219b773"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="1cdd3963-11b2-4cc8-85ce-131215589575"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7cf73268-d5e8-4674-93cf-1e174ca7fa9a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent" disabled="true" id="0da2bf4a-7f24-40fc-b650-b3592489f59a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2b48ef7a-1d06-4ae6-8fe5-0e1dd59a6be9"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ec2af63b-aa91-4e6b-b203-ccce7a2a9070"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="39bb4863-c4e7-4aee-a32f-e4fa4566d223"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="a59ed3ea-2ef6-4b08-905c-1c7e399eccf5"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="4981aec1-8a16-49f8-9f13-fa5f91e8b7a5"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="5b597933-9754-43ce-9fd7-243064202213"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context to DLPCS" id="1bffa29b-ca81-4a19-88e9-74a04c0ea7c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage account consent" id="61138658-c5a4-4370-af86-58eb9b0469fc" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent1" id="2612d590-4e41-4806-bcc3-86275ee34584" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate for dlpcs" id="eede15cf-ee2c-4904-88e5-5a4d3f05c565"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="029f2498-0a47-45d4-a8ad-2ee9ab84ad6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="18003a68-7528-414f-bdfb-87f5d850a5a1" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="57aef3b7-4062-4c1e-a09a-af11c8b3e6da" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BBD936EBB41F438585120EC2E0F8A93B</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BBD936EBB41F438585120EC2E0F8A93B</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:351C30A6CDB24F3A99B980973FE5A0B1</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BBD936EBB41F438585120EC2E0F8A93B</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">351C30A6CDB24F3A99B980973FE5A0B1</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BBD936EBB41F438585120EC2E0F8A93B</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:04:32</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:04:45</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:05:22</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14F00F09B56F0B0CE05307991F0ABD72</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>515727f8-a3ef-4d9b-b7c7-2f5f3eae9968</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55d1533e-db88-4f69-94ac-c8dbacee678e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2612d590-4e41-4806-bcc3-86275ee34584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eede15cf-ee2c-4904-88e5-5a4d3f05c565</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61138658-c5a4-4370-af86-58eb9b0469fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19093 - StreamListView - LLP - Stream view by llpcs_ManageAccountConsentPresent_OneActiveStreamDLP_OneActiveStreamLLPCS - 200 OK - 2A" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3f94369e-f903-4e8d-ab74-4d94789b8ef3"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="de97ead5-fe29-475a-8ac7-d463ac77fd1e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS_NO_STREAMS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="d76c043f-b02e-4987-a95f-f54593cd3584"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ad798779-80e0-45b4-b20a-89bb0c3f1caf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent" disabled="true" id="e6101f9a-aedb-4a4b-a2ce-21ca6c5e781b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2baec3d5-7a96-4bca-9f91-9a990bc236f2"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="21a46a3c-5593-48b2-bbfa-35aa7801e43f"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="9785f0ba-fc13-4bd2-bee8-850b3348fdb2"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="2eceb738-de7b-45f7-8ebb-a52895e3412b"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="2b716637-b8e7-4b16-a2c1-c15c80ebef2c"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="054da732-8446-43da-8edf-6b152cdf3395"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context to LLPCS" id="0e9d5c59-9d81-4aff-a284-d30f90601b03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage account consent" id="0ad955e2-9a76-4397-8e0d-ed6824a59c5d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent1" id="05f8abc7-278e-41d1-b975-cabe36cc7db9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate for llpcs" id="3971722e-6d5d-46b4-8cbb-64231036d7bd"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="d4239a1c-aa11-44df-9ffb-e66a4fd394b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="13f17fc3-746e-4102-83f5-b8b53e3985d9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ee62eb45-dec5-4c99-bfe4-87ade8838d4a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS_NO_STREAMS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B8FB5453074C478BAF1891AD365964AF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:B8FB5453074C478BAF1891AD365964AF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2E1B90337054108B09BE51B23109820</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:B8FB5453074C478BAF1891AD365964AF</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C2E1B90337054108B09BE51B23109820</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B8FB5453074C478BAF1891AD365964AF</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:06:02</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:06:15</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:06:53</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14F00F29D9410B06E05307991F0ADCEB</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>515727f8-a3ef-4d9b-b7c7-2f5f3eae9968</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55d1533e-db88-4f69-94ac-c8dbacee678e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2612d590-4e41-4806-bcc3-86275ee34584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3971722e-6d5d-46b4-8cbb-64231036d7bd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0ad955e2-9a76-4397-8e0d-ed6824a59c5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19050 - StreamListView - LLP - AccountNotActive - ACCOUNT.STATUS of deleted status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="df8d619e-13bd-46fd-8245-1f312f090e43"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9c33c3cb-96ca-4f29-a40a-617ab8d436e4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","ACCOUNT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="c68a3202-9062-42e5-9dd4-6a522fe359d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="242e8d3c-f456-4b86-995c-fd0a9d2b3ed0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e5750b03-e16e-441a-b569-c5b6d56b1fd9"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9dd2f1b8-c0ec-4a78-8037-479f294c2c41"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="583cb43a-3997-4db5-89cd-de0e39e737bd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"deleted") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="93948c6d-b003-4966-99e2-6601af0b9723"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="a44fa924-9c01-47b0-86e2-ab4947ef6fff"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d563ffa6-f0c9-4784-99d8-30e4089c37f5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="60b6fb33-2e94-46e0-95af-b9d11c7b55d5" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="cd0cb199-bbed-4e2e-9ae2-0999cb1e84f5" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BD6A6F2140674D5B8583C72F3C34C121</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD633B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ACCOUNT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14F02603EBA94F85E05305991F0A450B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F02603EBA94F85E05305991F0A450B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BD6A6F2140674D5B8583C72F3C34C121</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BD6A6F2140674D5B8583C72F3C34C121</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BD6A6F2140674D5B8583C72F3C34C121</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:13:25</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F02603EBA94F85E05305991F0A450B</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F02603EBA94F85E05305991F0A450B</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EFA8937DDD33B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14F02603EBA94F85E05305991F0A450B</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14F02603EBA94F85E05305991F0A450B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15123 - StreamListView - LLP - Verify descending stream order based on STREAM_DATA.CREATED_DATE - 200 OK" searchProperties="true" id="6b99dd15-fddf-4eb7-8031-d45c4eb37777"><con:description> This test case will verify the returned stream list will be order by the stream's STREAM_DATA.CREATED_DATE column; descending order.

1.      All Streams in the list bust be sorted by Stream_Data.created_date in descending order, that is recent one will be first in the returned list. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3602ddc0-9214-42e5-9341-284b99fd37cc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="b5971b28-f4eb-4601-a05f-a5bc6aacd777" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

if (tC.getPropertyValue("userIndex") == null) {
	tC.setPropertyValue("userIndex","0")
}

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="8cc1477d-7b19-4d44-96fb-efbb2e8c3971"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Account Stream Handles" id="97483aaa-edac-4cf9-83cb-92f4c6bacff3" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="21fc90f8-c516-470d-bdbf-f655fd86c7ad"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b577c8b9-4c3c-4d7d-98a4-42c928c8b5fa"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Random delay milliseconds" id="b1acfc62-5d1b-42d0-bfd3-4e539270986d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Random rand = new Random();

def v = rand.nextInt((10000-5000)+1)+5000;

tC.setPropertyValue("delay",v.toString());


</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="dfc987ff-f2f5-4dcf-8340-bdacdb391160"><con:settings/><con:config><delay>${#TestCase#delay}</delay></con:config></con:testStep><con:testStep type="groovy" name="Increment loop counter &amp; save Stream Handle" id="1588c124-e31f-4857-a6be-17bdcf349e7f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="dbeb360e-4a29-4e05-8de3-bfa5724a925c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ddd31640-cc91-48b8-b636-fe74696d0985" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="efdaeb08-9f61-4d1a-b073-0db606bc6d96" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_033417</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:326583C5DCDE4B2E93D8D182C48A6CD2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4803DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23B19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gEvAEZszfF7eEpEDSlJuMkNcgYmQjyUDy9JUMOEBIPtpeeXa92j3aXZ3dK47mke16nAMTJKaF9Tyi3M20NS1l1I0RJ9ylaA7cFdgdeDdd1y6aLtod0Qp+q6Y9gWOF5hgcvYTDku4EVlUfh3Cpo6oTlipOiMJxWZpynoJPuUBU1DTbtMq6KY+YQ8t0Tcstl4oVxx5phQdgXPqWJkVT24Ja85o2FSJxDWO1WhVXpWLMJoZtmpbxeNMd4CnMkVa/2twoC8TqW3tcDABDFOEijufGlXFgcxVwd0AmFImUwTZW8FEs0zCrhrQJOJl80fKzEPg0jDOxiWhMCUYReUUqPzcgpnFQ8KJJzIiYzj+8hGUqxzqssY4th37RjENoZzo6QMg40vkUWVtffQiBAcVQuO/7Ne3LeVXLjg4ZojyM2Zwfin+GB+gSojiBQOe7a22hne/wRKbqV4Bdn+Io5WQJPdWsCcLAt9UEfL6rwh2DkKy7hMsGXXOFztiHdyRustEiE+Dibwq0V5yNkwcUpVBvYM75sjK6sW/A+tVfyIytLl57jXs8qWUA9o0zRV7ajXjUlHkTbU7w+8ev0eOz07gOkLDj7445Ho3/I8nDTDhWZzX21pRd9P3K2HAa6JKVp128CkLcrVTTH+VGc/HiMY8FvYZIv9qlznX3wX9e+H7bG/yE0Wup99jpNmcdcxmRaDQcTCmZscue8+3m+zUWVTqfXdyvb7+J3uin8yN9QZ0wNcz7X6XAJ+1xf230KoPX12oCF9Ng+Yxr+XX28B/qdm9+kI5ngMVOVG3gtwodWSUkPiczpSGBHmambqLIhwugQqurU4o73FTSHQlcWcONbDntjt2yyy275FnVdqttlkvmZbVqdUzPaXgXO5LZoDiC2IxpSFQsRbmbtvkcIJ67HGgATF/GqWQ6rn3isYUEKvi0Lx9BTDkMY0nPVnWJq4kIOYOXWWBOqJmMkxmxJCf3YnFLb5kXCmCHnFw64OQ+YJIQUMSt+prLxuZC5mKBlqmIrOISFSmkktqZYlnXdiplg5N5EoFCaszjII2gmEyTLDMG33xtHWGeafvt4ZOdvbcPb3b8b5cEaRMQZcDVbRogCwknxouzu8q7K1+cHEM7914aEPW0ZEYFI3iD5PDXW6OoDsm7pNX1BndP9g52bv0np5uDv3bQ/afw3X8Nn1X0/Vnjk6waxwXNQwVLshd4t33IOSaZr75ryAUqLorpcplmLXhpmrbBpHtDtYIhhQHgVHLzyzB+BmrkXoyzBmEO/Ch4rj+EmIopHQgkYC7fTCETz9h8BsDV5uPLx74+d606CClTJ2AtTumakdzaFOJPFzvsYmUn1Xfys4pZ8FaxE7724sh7ysVHEDpRkhqCLx90Bo6lWyLpO2b7zk85OBX8UJknOcciZEONUwEf/ykoXq5pCOM4pcJvaZlif1ZkOMVLAu6b0Ts32TjK91Py/wuqTrIWwCC3Wk4y/2rNcNUToJO9ebMNemLkWO2Wc2mWWs1s5JS3I6fZquZJOUBXf6d+r9nL03GP138D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">326583C5DCDE4B2E93D8D182C48A6CD2</con:value></con:property><con:property><con:name>delay</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6008</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:92C8B41A24E148CCBE136B1F468DD1AF</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:3D12BEAEA1474CA9939FB586032DDAAE</con:value></con:property><con:property><con:name>rightstokenFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:326583C5DCDE4B2E93D8D182C48A6CD2</con:value></con:property><con:property><con:name>rightstokenFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">92C8B41A24E148CCBE136B1F468DD1AF</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:16:25</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3D12BEAEA1474CA9939FB586032DDAAE</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:16:53</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">326583C5DCDE4B2E93D8D182C48A6CD2</con:value></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:17:19</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79705</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EF3BFF776832CEE05307991F0A9709</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15111 - StreamListView - LLP - Account has eight deleted streams and no active streams - 200 Ok - 8D" searchProperties="true" id="e8427b28-e344-4cee-9984-e8edadddc404"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has eight deleted  (historical)  streams and zero active streams. </con:description><con:settings/><con:testStep type="groovy" name="Create data for retailer,lasp and non lasp" id="709805fe-5245-4d2b-91b5-cb60ccdcd749"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTC = myTS.run( null , false )

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("StreamCreateCount","0");
tP.setPropertyValue("StreamDeleteCount","0");
tP.setPropertyValue("StreamDeleteList","");
tP.setPropertyValue("accountList","");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="e432f284-6418-4809-bd73-b97062cf2ed3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","8");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS_NO_STREAMS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="5f0701af-35e5-4ffa-a22f-62869d46b051"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="7b97b5a7-9a9e-424e-8573-ec1db8ee1bd9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

if (tC.getPropertyValue("userIndex") == null) {
	tC.setPropertyValue("userIndex","0")
}

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Account Stream Handles" id="397b27a2-90d1-4f8c-b823-397531af6673"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d5425128-643d-4186-8ce1-dd0e2df78b33"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="703bda58-16b5-4229-9c68-e03d3d9e4ec0"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="95c17d46-1618-406c-9bb5-18675cce9b51"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c22e7a62-bbe1-499a-b319-5e4469435cd4"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 8) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="fe546a37-1362-45e3-a648-72224183a5dd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Increment loop counter &amp; save Stream Handle" id="63e7e374-6ae5-46e0-88af-a6577828cce1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="81916605-6f33-42d3-bbb2-624b5369c846"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2b663583-ea90-42bf-9496-6ad50b63d422" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3b501f68-2ce5-46cc-b472-eaf9f44b9073" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_033417</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:E6C2402E69C64055A52AD343DB86D420</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4803DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23B19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gEvAEZszfF7eEpEDSlJuMkNcgYmQjyUDy9JUMOEBIPtpeeXa92j3aXZ3dK47mke16nAMTJKaF9Tyi3M20NS1l1I0RJ9ylaA7cFdgdeDdd1y6aLtod0Qp+q6Y9gWOF5hgcvYTDku4EVlUfh3Cpo6oTlipOiMJxWZpynoJPuUBU1DTbtMq6KY+YQ8t0Tcstl4oVxx5phQdgXPqWJkVT24Ja85o2FSJxDWO1WhVXpWLMJoZtmpbxeNMd4CnMkVa/2twoC8TqW3tcDABDFOEijufGlXFgcxVwd0AmFImUwTZW8FEs0zCrhrQJOJl80fKzEPg0jDOxiWhMCUYReUUqPzcgpnFQ8KJJzIiYzj+8hGUqxzqssY4th37RjENoZzo6QMg40vkUWVtffQiBAcVQuO/7Ne3LeVXLjg4ZojyM2Zwfin+GB+gSojiBQOe7a22hne/wRKbqV4Bdn+Io5WQJPdWsCcLAt9UEfL6rwh2DkKy7hMsGXXOFztiHdyRustEiE+Dibwq0V5yNkwcUpVBvYM75sjK6sW/A+tVfyIytLl57jXs8qWUA9o0zRV7ajXjUlHkTbU7w+8ev0eOz07gOkLDj7445Ho3/I8nDTDhWZzX21pRd9P3K2HAa6JKVp128CkLcrVTTH+VGc/HiMY8FvYZIv9qlznX3wX9e+H7bG/yE0Wup99jpNmcdcxmRaDQcTCmZscue8+3m+zUWVTqfXdyvb7+J3uin8yN9QZ0wNcz7X6XAJ+1xf230KoPX12oCF9Ng+Yxr+XX28B/qdm9+kI5ngMVOVG3gtwodWSUkPiczpSGBHmambqLIhwugQqurU4o73FTSHQlcWcONbDntjt2yyy275FnVdqttlkvmZbVqdUzPaXgXO5LZoDiC2IxpSFQsRbmbtvkcIJ67HGgATF/GqWQ6rn3isYUEKvi0Lx9BTDkMY0nPVnWJq4kIOYOXWWBOqJmMkxmxJCf3YnFLb5kXCmCHnFw64OQ+YJIQUMSt+prLxuZC5mKBlqmIrOISFSmkktqZYlnXdiplg5N5EoFCaszjII2gmEyTLDMG33xtHWGeafvt4ZOdvbcPb3b8b5cEaRMQZcDVbRogCwknxouzu8q7K1+cHEM7914aEPW0ZEYFI3iD5PDXW6OoDsm7pNX1BndP9g52bv0np5uDv3bQ/afw3X8Nn1X0/Vnjk6waxwXNQwVLshd4t33IOSaZr75ryAUqLorpcplmLXhpmrbBpHtDtYIhhQHgVHLzyzB+BmrkXoyzBmEO/Ch4rj+EmIopHQgkYC7fTCETz9h8BsDV5uPLx74+d606CClTJ2AtTumakdzaFOJPFzvsYmUn1Xfys4pZ8FaxE7724sh7ysVHEDpRkhqCLx90Bo6lWyLpO2b7zk85OBX8UJknOcciZEONUwEf/ykoXq5pCOM4pcJvaZlif1ZkOMVLAu6b0Ts32TjK91Py/wuqTrIWwCC3Wk4y/2rNcNUToJO9ebMNemLkWO2Wc2mWWs1s5JS3I6fZquZJOUBXf6d+r9nL03GP138D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>9115_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>1914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>alid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EF2D21ED4703DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9115_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E6C2402E69C64055A52AD343DB86D420</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AE1629123A45485E9DDD25236327BC35</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:887DF47522734986BD1D499E0958F0AE</con:value></con:property><con:property><con:name>rightstokenFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8EB1EA9A6C214F48AFCC3E343DF35783</con:value></con:property><con:property><con:name>rightstokenFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BAB388FBD2D14A508767BFD008A59A8F</con:value></con:property><con:property><con:name>rightstokenFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CDF78C9159B5471B9B92C6DFE7572C56</con:value></con:property><con:property><con:name>rightstokenFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:E1FB775FA693487481D998DD59A9A95E</con:value></con:property><con:property><con:name>rightstokenFULL_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5F225ED27378489A85B666138B6A28EA</con:value></con:property><con:property><con:name>rightstokenFULL_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:E6C2402E69C64055A52AD343DB86D420</con:value></con:property><con:property><con:name>rightstokenFULL_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>null_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AE1629123A45485E9DDD25236327BC35</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:03:58</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:04:09</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">887DF47522734986BD1D499E0958F0AE</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:04:22</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:04:34</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8EB1EA9A6C214F48AFCC3E343DF35783</con:value></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:04:46</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:04:58</con:value></con:property><con:property><con:name>streamhandle_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BAB388FBD2D14A508767BFD008A59A8F</con:value></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:05:11</con:value></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:05:23</con:value></con:property><con:property><con:name>streamhandle_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CDF78C9159B5471B9B92C6DFE7572C56</con:value></con:property><con:property><con:name>expectDBCreatedTime_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:05:35</con:value></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:05:46</con:value></con:property><con:property><con:name>streamhandle_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E1FB775FA693487481D998DD59A9A95E</con:value></con:property><con:property><con:name>expectDBCreatedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:05:58</con:value></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:06:10</con:value></con:property><con:property><con:name>streamhandle_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5F225ED27378489A85B666138B6A28EA</con:value></con:property><con:property><con:name>expectDBCreatedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:06:23</con:value></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:06:34</con:value></con:property><con:property><con:name>streamhandle_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E6C2402E69C64055A52AD343DB86D420</con:value></con:property><con:property><con:name>expectDBCreatedTime_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:06:46</con:value></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBStatus8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 10:06:58</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79694</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EF2D21ED4F03DCE05305991F0A4CD9</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EF3621E50832C8E05307991F0A6315</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_3</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_4</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_7</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_8</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7b97b5a7-9a9e-424e-8573-ec1db8ee1bd9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_15109 - StreamListView - LLP - Account has seven deleted streams and two active streams - 200 OK - 2A,7D" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c89dd474-d53e-4887-bc15-899c4746216f"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has seven deleted  (historical)  streams and two active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="00293b48-fb4b-4a32-8c96-3bef96bc5752"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","9");
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="b1376354-0ae1-40e9-a2d7-46025a126e0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="e355974b-a19f-441a-ae6b-495ceb5d5640" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

if (tC.getPropertyValue("userIndex") == null) {
	tC.setPropertyValue("userIndex","0")
}

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Account Stream Handles" id="85a644b6-7086-4667-a19b-6f6b98721030" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cbbfe256-cd9b-454c-9728-390d06c39beb"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="687f1ae9-eb0b-4a96-9490-fe7018af646e"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="70438dcf-52af-414f-99c9-fa734814ffff"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="f8defd59-046e-4b5a-b02c-e56cfcb90079"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 7) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="f3b7daf6-3f64-4141-85fc-0231c241f3e3"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Increment loop counter &amp; save Stream Handle" id="3bf97ad0-2423-4b97-927c-06b410cd77e0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="11f58f1c-f44b-4d1e-b71c-b72d66671f79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ce4b32d1-6273-4acb-8f40-b268d292e91d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert b.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6440684a-51b7-4026-b635-514ddc20c9c1" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24F1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP/SYE9ghgSnJSEhwTRJuekIeQ1KbdmxZOPk6T/JgMtPko+2V55dr3aPdo9295ShODLdHmOQcZLQRhlHlLmVtqPkGXUTxAhzKYqBuRy7fu966JpN3UWbI0pj0O8oP0NLbyPTdtR24ASqbc1mqjNrIzWwEYQBMiwMjjBlLIcBZRxR3lFM3Wipuq1a+kR3XNtwdb1pmdZUadxDxoRvYdLUlTWoknWUBeepq2nL5bK5tJpJNtdMXTe0x+uhjxcQI6V7urpRFSjrru1xMwAMUYSbOIm1U23H5jRgrk/mFPE8g3Ws4L1YuqY7mrAJGJl/UuqzEAxomFTiOaIJJRhF5BXJ/FwDXyRBoxfNk4zwRfzuJQxdOlahxCo2bPpJ0XahHeloB2HGkMoWyFj7GkMIGVAMje/jQUf5dFzVqqOTDFEWJlnMdsU/wwO0gChJIVDZ5lpraMc7fCNT3VPA7oDiKGekgBtJ1hRhYOtqAj7eVeM2g5CUQ8IEQUsm0Wnb8PbEVTb6ZA6M/02BtoqzcnKPohy6T6aO8wfzx+Motczo9Zv25W52Nbx0xrHXqQBsG1eKurQrcY+UNYlWJ+7wNHXyyx8mQ+2r6XjyK8Spc+W9Pj/enfXQ6MEve9/omGpn91bUuhwsR2nqXbXCWRkNiuIEP+PHqRNSh/vQnmv3X+ff8dlXm1xMAM641c6wp3lF8u2HbT9w52n8eHMZLq8etMn4zB9M7u/CPOOobN2M6GJ58XXm2WARZzgdXX9+9e8+P01fe3rLey2ehmEwZZ36Olv4d3WbN+/nsyfAfCNKGgz6jQtRJcQ/bmZSQwI1rEzdVDYfxoFypStPyd7h5qLdkcAVNVzJhu15nnFhtizPNNpG29Nbln7iOMaF3vty3nc2TWaFYg/ieUJDImPJlruizccAcewyoAFkapHkotMx5QOPfcRRY0DH4hEklMEkEe05buWleXKCX37Z5SJIeVq2FnlanCiNm4SP6CjrhRyynZZsmDsteQyYpARk35a0ZoLXjItUPKMi55HRLFCTQi46eyabrGva7ZbGSJxGIIFqcRLkETTTRVolRmOrr6kizCrt2Jv8NKvn9u7F9v9tciBsAiINmLzNGYg6wsF00d3W5ioHV/7y5hTauO/lAZEvSySUZwSvkOz++s0TSZCaJP1hz7/9aW5g19Z/cvrc/2sHw38KP/zX8FVFD89qH2RV2y9oHSooyFbgzfIhxphofN0NIZ9R87mZF0VeUfBE100tE+41SQVNCD7gXLTml0nyC6hWe9GOmoM18L3gtX4XYs4X1OeIQyzeTKMSj1h8fGBy8RmIt14eu1XthBSp41Dyt3TnkVjaJOIP9zrsYmkn1Lfis0yy4HfF3vC1FUfcU+w9nNC5lOQMfHmHGTgRbono3km27fwtB28F31XWSa6xcEGoWc7h/T8N2ZY7CsI4ySkf9JVKsT0qKpz8JQX3t9GBm2oa1esp+f/9VCUVBTCIpZaRyr/cMlz5BOh8a9ysgx5OnH6/b9qemDj69sQx9F6/TsoOuu6B+lCzlad9jnf/Aw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EEE1DDD24E1810E05307991F0A10AD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:50:49</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:51:18</con:value></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:51:48</con:value></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:52:15</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:51:02</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectRightsToken_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectRightsToken_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2E49C1162D334A9F808452F1530BECB5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:2E49C1162D334A9F808452F1530BECB5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5B309D49946F439A8349B20DA5A60954</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:4D93436901BF4DCFBA66C5EE4440B914</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AC7FD0EDF6E04F45BB9947866AB34791</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CDAB0298AF804110971565C9E23E6419</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5B309D49946F439A8349B20DA5A60954</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4D93436901BF4DCFBA66C5EE4440B914</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AC7FD0EDF6E04F45BB9947866AB34791</con:value></con:property><con:property><con:name>streamhandle_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CDAB0298AF804110971565C9E23E6419</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_031315</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1F253E31818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectDBStatus2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:51:32</con:value></con:property><con:property><con:name>expectDBStatus3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:52:01</con:value></con:property><con:property><con:name>expectDBStatus4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:52:28</con:value></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:EEB07FFC702B456382C1FA83368E9825</con:value></con:property><con:property><con:name>streamhandle_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EEB07FFC702B456382C1FA83368E9825</con:value></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:52:42</con:value></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectDBStatus5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:52:54</con:value></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:9DD02168715240D78B933A86B9FD268D</con:value></con:property><con:property><con:name>streamhandle_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9DD02168715240D78B933A86B9FD268D</con:value></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:53:08</con:value></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectDBStatus6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:53:20</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5B6FCF1D295D4A88964EE65463436F75</con:value></con:property><con:property><con:name>streamhandle_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5B6FCF1D295D4A88964EE65463436F75</con:value></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:53:34</con:value></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectDBStatus7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:53:46</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:69EB733F1F434FBD809C6782EE06AFA8</con:value></con:property><con:property><con:name>streamhandle_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">69EB733F1F434FBD809C6782EE06AFA8</con:value></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:53:59</con:value></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:2E49C1162D334A9F808452F1530BECB5</con:value></con:property><con:property><con:name>streamhandle_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2E49C1162D334A9F808452F1530BECB5</con:value></con:property><con:property><con:name>expectNickname_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 09:54:15</con:value></con:property><con:property><con:name>expectRequestingUser_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EEE1F253E21818E05307991F0A6CD9</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79692</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14EEE1DDD2561810E05307991F0A10AD</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:14EEE9DA0A092139E05305991F0AD10D</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_9</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_3</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_4</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_7</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e355974b-a19f-441a-ae6b-495ceb5d5640</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19052 - StreamListView - LLP - AccountNotActive - ACCOUNT.STATUS of pending status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d26da9a8-68fd-4827-b939-b314739e2bfe"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7da693a7-240d-48c6-ab5e-9923bf470a77"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","ACCOUNT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="77158c6e-6683-4869-92f5-d345fc63533f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ff311de1-a719-455d-b4bd-6ecad14b1e01" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4994f046-9f93-424a-ba64-a4f994e06e0e"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6da0087d-f1ad-4e2f-b960-ded8050b3404"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="74e4dfb4-7970-416d-bde9-91f39cb85730"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"pending") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="3440efd1-3ae4-4381-a6c7-7b66ebeb6c46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="cbcefb72-5a18-4fe5-b38c-7a2d2b63d31f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ffaf1900-e4ca-4682-a05d-bd9edc9ed405" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="61fd4be6-8396-4348-aba8-222997a2105f" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b2566ae3-2c1b-47be-9ffd-aaa39f4e3302" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ACCOUNT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB01C5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01C5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C71F5D953E0401F0A079902E1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72E05C71F5D953E0401F0A079902E1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C71F5D953E0401F0A079902E1</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:53:19</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01C5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01C5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB01C5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01C5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19056 - StreamListView - LLP - AccountNotActive - ACCOUNT.STATUS of blocked:tou status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c40ea955-94bd-4314-8753-9f19f502058d"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="41889c4d-aee8-49bc-950c-116f2624d565"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","ACCOUNT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="89355e1d-4bcb-4bb6-9347-dc92c7963b2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3eebe324-82d3-4ec7-bd32-32f9ee5eaea5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c9955168-a63b-43af-853b-5f0e33861fc3"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b49e0230-dc03-42fa-b35a-8dd2dcc9e665"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="7a65158e-9496-420c-bf4c-7fc02bcd7e4b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"blocked:tou") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="51906d13-cde1-487e-90d5-dd1fc49be199"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="117b2342-c556-49f3-a318-e17b81548d3a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

assert a.accountSetStatus(tC.getPropertyValue("accountoid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d359a40c-3819-49a8-b028-b83997f4e08d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b6140e58-9251-43bf-a73e-2e51085e28fe" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7b67c139-3e85-485a-9b0d-47ba4488bdf4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ACCOUNT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB01DDB093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01DDB093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C71F9D953E0401F0A079902E1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72E05C71F9D953E0401F0A079902E1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C71F9D953E0401F0A079902E1</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:54:09</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01DDB093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01DDB093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB01DDB093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01DDB093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19081 - StreamListView - LLP - UserNotActive - User with a deleted status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7e01a8b8-e9f4-4665-b0c1-acf43f82e5d5"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46ebfa20-e758-4c6a-a003-326985cfb399"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","USER_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="d578bb74-9241-4f8b-aff1-a65284aba7e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d648d0c6-ff5f-45f2-9987-b3df3965e26f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6b07c4a1-430b-4915-a6f1-68e591b67e38"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8ab68107-395f-4976-9be7-855e2119edd8"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to deleted" id="a08bd38b-4b3f-49b3-844e-778a5b581998"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"deleted") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="0d400bfe-cd7c-4cda-93bd-58a3856605d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to active" id="d0cc2269-139f-4e0b-9c9f-4171c012547f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ee556151-0d69-4b52-b880-777e6b797b46" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b1b1291c-649b-4ce9-99f7-337407a8a041" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d3906cdb-7175-4f0e-a879-98e3c66d0e22" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">USER_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C380E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C380E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFAD6C1E7B7E0401F0A05990957</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72DFFAD6C1E7B7E0401F0A05990957</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFAD6C1E7B7E0401F0A05990957</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:54:44</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C380E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C380E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C380E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C380E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19082 - StreamListView - LLP - UserNotActive - User with a pending status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6ebb94dc-b208-44f7-b78c-d94c29230fdd"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3fcdb3c9-4671-4ee5-b655-9b20dd4ea647"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","USER_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="955efeb8-e1ac-42d2-9cd3-6be0526f1e60"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="184e816b-d069-4d24-a15e-bcf9dd97eb33" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4cbdc50d-1113-4415-a353-9df92fde1741"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ea74f016-5ae5-476a-8053-780017b1735a"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to pending" id="2654374c-5b9e-4442-b8a5-c3273f0d52bb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"pending") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="2c30728a-bbfd-4e38-a519-0d5da5420a4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to active" id="2f2a9e60-c98f-412d-a20c-eb6792b17241"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="0924024e-4e65-49aa-85b0-a8ce7df21bc8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="731683ee-63f6-49b4-925c-7ea15fa71e19" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fdfd2779-0c4c-45fe-b430-375605b868e6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">USER_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB01F5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01F5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C71FDD953E0401F0A079902E1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72E05C71FDD953E0401F0A079902E1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C71FDD953E0401F0A079902E1</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:54:56</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01F5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01F5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB01F5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72DFFB01F5B093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19084 - StreamListView - LLP - UserNotActive - User with a other status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="941c621e-055e-446c-be36-a917ef38556a"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b40a963f-93b9-4d4c-b87a-aee11bb49c52"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","USER_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="90f6fa79-20df-4ef6-81d3-76fcae2d894f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9fb472d4-8555-48d6-a919-37ad74666823" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a3f78775-4aae-4689-8c68-eeb8371d6832"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2330f154-4334-4152-8983-0dfb0c5460d5"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to other" id="9410e654-b05e-4c79-8ef8-5a39d201c599"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"other") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="63c930af-5c78-47dd-b38c-1f0bde1ae004"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to active" id="1d6c3e35-f287-4211-9743-85ad36256b83"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="8a3a5c69-7f89-487d-be75-d8537ea5a8f6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7d9fe5ba-0808-4480-9f90-df4f5fa25d8c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5da69fc5-b539-451e-b08b-864d33b61d05" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">USER_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E00A85FA707CE0401F0A0599094C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A85FA707CE0401F0A0599094C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB0201B093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72DFFB0201B093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB0201B093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:55:17</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A85FA707CE0401F0A0599094C</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A85FA707CE0401F0A0599094C</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E00A85FA707CE0401F0A0599094C</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A85FA707CE0401F0A0599094C</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19086 - StreamListView - LLP - UserNotActive - User with a blocked:tou status_not_displayed - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6f21d64e-ac3c-4469-8d41-a0f50ea7d712"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="14a5e3ff-742d-4184-bd89-3b54de5f438b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull2Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","USER_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

					tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="93a59219-3101-4db1-81db-dcd8c703f807"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5d477b0e-ae31-4988-bafc-09df88af0ba1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="33e41311-2225-48cc-9fa1-5931ce1b56aa"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2bf8d773-747e-46af-ac50-24cf2d79e355"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to blocked:tou" id="2c47c36e-f6f9-4d93-8036-799c12a3e332"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"blocked:tou") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="ee34da6d-6ca8-47ef-9743-169c5c3098a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update USER.STATUS to active" id="02d9255b-cf4e-4f66-9a5b-c2281c104673"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

assert a.userSetStatus(tC.getPropertyValue("useroid"),"active") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="39a449a7-05ef-48c1-901a-0208990bb66c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="319acd9a-ffd5-48d9-9f4e-9683913238ee" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="a43f4104-1604-4d38-b051-fb04faf39b9e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">USER_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E00A8606707CE0401F0A0599094C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A8606707CE0401F0A0599094C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB0203B093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72DFFB0203B093E0401F0A0599095B</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72DFFB0203B093E0401F0A0599095B</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:55:41</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A8606707CE0401F0A0599094C</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A8606707CE0401F0A0599094C</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E00A8606707CE0401F0A0599094C</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E00A8606707CE0401F0A0599094C</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79727</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>47ab893a-eeb9-4959-95fa-61bbc276a90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237fa981-9000-4737-80ff-b24ffa21d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="LASP Linked Test Cases without MAC" id="7356dfd7-760d-43f4-bfe4-953308e6de9e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19094 - StreamListView - LLP - Stream view by dlp_ManageAccountConsentNotPresent_OneActiveStreamDLP - 200 OK - 1A,1D" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="610f5b01-3ab9-4b49-bc04-817593177dc5"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish data and LLP without MAC" id="d3f8f0cd-7198-45f6-8583-faa4b3a316ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E_without_MAC");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;
tP.setPropertyValue("StreamCreateCount","0");
tP.setPropertyValue("StreamDeleteCount","0");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="5867dac1-b220-42e3-8d03-a86949992232"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="f4dcd66f-61e7-4f16-9028-12116282cc40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a04fa6e3-5462-43e4-9b50-9e39f9774182" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent" disabled="true" id="c3d6f69e-92f3-4bed-9646-662b740d6e9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage account consent" id="d77ab050-c587-4c5f-8b21-f3368509b7c8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2c976771-b52c-473f-a733-2e8427515a76"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a2203b04-d949-423d-b054-c897ae4363e5"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="6b825eab-f54b-4173-83f8-9ef96e8e4883"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="5dbdf7fd-ca36-4428-84b0-2d2c0c5497ab"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="4e1f3356-5d47-44b2-9632-1266efd9ac17"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="f6c24121-d85d-47cb-b3e4-122d397fa4dd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="94957f40-a46f-4f99-a1f6-64b96b511f54"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="792e5729-1a90-402c-9b6f-fa4462665153" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="87338de5-ae7f-4ee3-99c8-0c10ffce24fa" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF104E1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPbxTMiFcMsUZiiUU1roBWjZ05eOcQS4JDaNnRD669cOkHJrD7s7wwxjRZY+SZ8lXXAU+Lbb4BxCQRjNJYFPuZtKa1oUUpchTrhLUQDcFdgdNHpd186bLtpe0XKdVk17xV6hAlZhrFvl4kR3zKqjj81SSS/jUsl0xlXHw7ZU5TyCDuUCUVHTbNMq6qb6DS3TdRzXdPJOsfCi5Z4h5NK2VMmb2gZUwmvaTIiFaxjL5TK/LORZODVs07SMn73uAM8gQFr9Yh1R6iisb/Rx3gMMvo/zmAXGhbGnc+Fxd0CmFIkohI0v7ytfpmFWDanjcTL9oWV3wevQCUuPTUQZJRj55AOp/PRAzJiXa/hTFhIxC74MwjKVYR0SrGPLoT80Yx/amYb2EIYc6XyGrI2tPkwgBIoh99Tv1LQf51UtvToMEeUTFgZ8//h7eIDG4LMFeDrfhrWBdr7BE5mqXwB2OxT7EScx3CmyLhAGvqkm4PNN5R5CmJCkS7gkaMIVOmMX3sFxnY0WmQIXf1KgneKsjTwjP4K6KFVvwkc+Hs/fjSIdJlcrL3b6PaMkiZkC2FVOBVlp18cDUmYkWt+47Ty1upWBiSpzPnq5vpn7nh0syX9Oe1H6Sbl/H9wYw4lXvh2X/dvO4+3jpGInk2hcuGRV/HwLI2/0tvpYLJq3vTKaFWcJMtt319f2w80/Eb0fk0mbBmh+3Uqsf9kNscJEXFn90cv90/TBikp38b0XtkfmY4t36Wz+di0q88vxsNTGUSUB3272evboWkQfzyie17JwdvDvy7ZvfhCN3wCL7VHRoNPKtWWVkPi+mSkJ8fRJquouVPPhAqjQ6uqW6h1uJNsd8VxZw/XZKhYdq9loW+bVpXVVbV6ZxYJZrlatttkwG+XGtsmsURxAbDI6IcqXarlr2nwPEAcuB+pBqMcskp2Oa99YbCGBch3al4+AUQ5DJtuzVSDMXq1Y1SZvkpxOvOSr+GP6oeXumLin92FjIiDcb8mFvZbcB0wWBFTfVrTmktdcyFS8ozgSvpWPUZ5CJDt7qJqsazuVosFJsPBBATUC5kU+5BezRZoYg6//bR1hnkr7V8P0sX0Z1uG3bQakjkeUAlexXIKsIhzNloJb3AZyFHDp5Azamm9EHlHvSqZThASvkex/+mSJokdGkVa3MXjYgs50f+Pua3Pwav2hge5fOO/+rXNZy+Obxjf5NA5LmTnyYrLjdrt0yPElG159S8R3ZOXf81EcRyn3HKdghNK8oUhgmLYxABxJ1q+GbA7UyKwYZ82/DPiB80y+DzESMzoQSEAg30ouPZ6x8AyAq4WnI994cu42tedSpk5AIk7Jmr5c1hTib/c57GKlJ8UP8m/JQu+zYids7fiRccp9RxA6VSc1+1Zf8AIzaZbIrs3CXeOnDJxyvi/MkpxhEZJQ40jA119yqh3XNIQxi6jotLRUsDsiUpxitQD3U+nITDqFsrWU/P9eqpOUAhjkMstJal9tF656AnS6M2Y2Tk9PGqf13aTZR1c/Eh9LdvJ0yPH6Lw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10551E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AD981B5A07C745E28AF29A880FE28269</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9C1259ECFB1846D4AD08CEEC4B76DE80</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AD981B5A07C745E28AF29A880FE28269</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150505_041626</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10EC1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:45:18</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:45:30</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:45:44</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10551E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>515727f8-a3ef-4d9b-b7c7-2f5f3eae9968</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55d1533e-db88-4f69-94ac-c8dbacee678e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2612d590-4e41-4806-bcc3-86275ee34584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d77ab050-c587-4c5f-8b21-f3368509b7c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19096 - StreamListView - LLP - Stream view by llpcs_ManageAccountConsentNotPresent_OneActiveStreamDLP_OneActiveStreamLLPCS_diffOrg - 200 OK - 1A_Cross_ORG_Invalid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="30f1137f-91fe-4d9a-9b18-c19b2d5f13e6" disabled="true"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e49b9bdb-59e0-4ce1-b743-01ac2619e867"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS_NO_STREAMS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="9a8e2c08-daf3-4241-ba1a-6aca786fdd9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="aa66c7ea-0bb4-4d11-ac11-63dcd249bbe8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent" disabled="true" id="fe6377c8-9796-4f72-9420-91995ed0fe2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage account consent" id="afb31723-f4d4-4aed-95da-7278351f5b8c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f11dbf29-fba2-4f53-91b3-5fe978f4cbce"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7c628355-80af-4e9b-a01e-ed7cb9c9e4e1"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="6b2634e7-df6c-4124-885f-38169880a3f8"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="4ca34914-69e0-4db0-85a4-6da235b96622"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="dc02a9d5-ead3-4082-83ba-419e25a9fbef"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="e8cc74be-848c-4827-a31a-239b3a25eb96"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context to LLPCS" id="8323a06c-4186-4dfa-b0f6-d9a99b9d907c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent1" disabled="true" id="da130246-0aec-4b60-afba-6055db52d18b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate for llpcs" id="8ea9e4d5-8672-4efb-91a4-7711a4e8c7b3"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="cf6f5d5e-be93-477b-9b92-5f58a54dec8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1cbfe371-6db2-4161-ab50-3a3c2807bf66" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="287f8d17-f0bb-4cc2-b7e9-f1d503879989" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_2</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS_NO_STREAMS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C374E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> </con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72E05B7D7AD7FAE0401F0A079902D9</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC72E05C374E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05B7D7AD7FAE0401F0A079902D9</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72E05C374E1DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20140905_103946</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:51:03</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:51:07</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014/06/22 19:51:18</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC72E05C37431DD2E0401F0A079902DD</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>515727f8-a3ef-4d9b-b7c7-2f5f3eae9968</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55d1533e-db88-4f69-94ac-c8dbacee678e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2612d590-4e41-4806-bcc3-86275ee34584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d77ab050-c587-4c5f-8b21-f3368509b7c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8ea9e4d5-8672-4efb-91a4-7711a4e8c7b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_19095 - StreamListView - LLP - Stream view by dlpcs_ManageAccountConsentNotPresent_OneActiveStreamDLP_OneActiveStreamDLPCS - 200 OK - 2A,1D" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2f29f3a8-e954-492d-96a4-8c827764a31e"><con:description> This test case will verify proper response to a StreamListView API invocation with an account that has a single deleted  (historical)  stream and a single active streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="994e4de8-72d5-4823-86d8-8df13df91c90"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("deletedCreateCount","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamAccountActiveCount","0");
					
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamAccountActiveCount","0");
tC.setPropertyValue("deletedCreateCount","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="8c151c6e-a808-4848-bac5-03a8468629d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2f4d631e-3eb3-4e37-ad3c-8f5fa2224eaa" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent" disabled="true" id="57dd3c72-6c46-4eb4-b142-1edc2be685fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage account consent" id="4b3b4d29-791e-45ca-8b7a-11cee93e586c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="82ef3dfb-f284-49a9-a650-24632b1c4e86"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="cac85b79-6c77-4161-b099-e219b64ebed6"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="e06ffd57-353f-4973-9350-525bfb570feb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="a472e17b-c7cd-4baf-ade6-e38b541d1d49"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = tC.getPropertyValue("deletedCreateCount").toInteger();

/*
*  Delete only the first stream handle created.
*/
if (tC.getPropertyValue("counter").toInteger() &lt;= 1) {
	i++;
	tC.setPropertyValue("deletedCreateCount",i.toString());
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="delay" name="Delay II" id="589f40a0-9def-4643-ac03-ca7eef1448a9"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Invoke StreamCreate again if Required" id="384a5d7d-a0a2-4897-80e8-a91cb0b46218"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

def loopuntil = tC.getPropertyValue("loopuntil").toInteger();
def counter   = tC.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call StreamCreate");
} 





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context to DLPCS" id="0740abcf-079d-4c45-892b-600fbb751f3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage account consent1" disabled="true" id="d813999d-bcd2-4bb5-8cb4-b299a4a3a081"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate for DLPCS" id="0424cf34-d52a-41de-85c9-d6ef481747c1"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamListView" id="90b0247e-f738-4e5a-8f42-1c42fe51bfb6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d610679a-3834-4053-ab23-a7e243d4400c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");

int count  = tC.getPropertyValue("counter").toInteger();
int dcount = tC.getPropertyValue("deletedCreateCount").toInteger();

log.info "count[$count] - dcount[$dcount]";

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == count;
assert a.streamGetStreamDataHistoryRowCount(acct) == count + dcount;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="05e43cc0-28f6-461d-8901-c160adb3e8c8" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF104E1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPbxTMiFcMsUZiiUU1roBWjZ05eOcQS4JDaNnRD669cOkHJrD7s7wwxjRZY+SZ8lXXAU+Lbb4BxCQRjNJYFPuZtKa1oUUpchTrhLUQDcFdgdNHpd186bLtpe0XKdVk17xV6hAlZhrFvl4kR3zKqjj81SSS/jUsl0xlXHw7ZU5TyCDuUCUVHTbNMq6qb6DS3TdRzXdPJOsfCi5Z4h5NK2VMmb2gZUwmvaTIiFaxjL5TK/LORZODVs07SMn73uAM8gQFr9Yh1R6iisb/Rx3gMMvo/zmAXGhbGnc+Fxd0CmFIkohI0v7ytfpmFWDanjcTL9oWV3wevQCUuPTUQZJRj55AOp/PRAzJiXa/hTFhIxC74MwjKVYR0SrGPLoT80Yx/amYb2EIYc6XyGrI2tPkwgBIoh99Tv1LQf51UtvToMEeUTFgZ8//h7eIDG4LMFeDrfhrWBdr7BE5mqXwB2OxT7EScx3CmyLhAGvqkm4PNN5R5CmJCkS7gkaMIVOmMX3sFxnY0WmQIXf1KgneKsjTwjP4K6KFVvwkc+Hs/fjSIdJlcrL3b6PaMkiZkC2FVOBVlp18cDUmYkWt+47Ty1upWBiSpzPnq5vpn7nh0syX9Oe1H6Sbl/H9wYw4lXvh2X/dvO4+3jpGInk2hcuGRV/HwLI2/0tvpYLJq3vTKaFWcJMtt319f2w80/Eb0fk0mbBmh+3Uqsf9kNscJEXFn90cv90/TBikp38b0XtkfmY4t36Wz+di0q88vxsNTGUSUB3272evboWkQfzyie17JwdvDvy7ZvfhCN3wCL7VHRoNPKtWWVkPi+mSkJ8fRJquouVPPhAqjQ6uqW6h1uJNsd8VxZw/XZKhYdq9loW+bVpXVVbV6ZxYJZrlatttkwG+XGtsmsURxAbDI6IcqXarlr2nwPEAcuB+pBqMcskp2Oa99YbCGBch3al4+AUQ5DJtuzVSDMXq1Y1SZvkpxOvOSr+GP6oeXumLin92FjIiDcb8mFvZbcB0wWBFTfVrTmktdcyFS8ozgSvpWPUZ5CJDt7qJqsazuVosFJsPBBATUC5kU+5BezRZoYg6//bR1hnkr7V8P0sX0Z1uG3bQakjkeUAlexXIKsIhzNloJb3AZyFHDp5Azamm9EHlHvSqZThASvkex/+mSJokdGkVa3MXjYgs50f+Pua3Pwav2hge5fOO/+rXNZy+Obxjf5NA5LmTnyYrLjdrt0yPElG159S8R3ZOXf81EcRyn3HKdghNK8oUhgmLYxABxJ1q+GbA7UyKwYZ82/DPiB80y+DzESMzoQSEAg30ouPZ6x8AyAq4WnI994cu42tedSpk5AIk7Jmr5c1hTib/c57GKlJ8UP8m/JQu+zYids7fiRccp9RxA6VSc1+1Zf8AIzaZbIrs3CXeOnDJxyvi/MkpxhEZJQ40jA119yqh3XNIQxi6jotLRUsDsiUpxitQD3U+nITDqFsrWU/P9eqpOUAhjkMstJal9tF656AnS6M2Y2Tk9PGqf13aTZR1c/Eh9LdvJ0yPH6Lw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10551E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150505_041626</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10EC1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:47:10</con:value></con:property><con:property><con:name>expectRightsToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>expectDBStatus1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:47:35</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:48:17</con:value></con:property><con:property><con:name>expectRightsToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79691</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10551E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>515727f8-a3ef-4d9b-b7c7-2f5f3eae9968</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55d1533e-db88-4f69-94ac-c8dbacee678e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2612d590-4e41-4806-bcc3-86275ee34584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d77ab050-c587-4c5f-8b21-f3368509b7c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0424cf34-d52a-41de-85c9-d6ef481747c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d3f8f0cd-7198-45f6-8583-faa4b3a316ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true" id="089a2c4e-4981-45fd-9023-a0f8877395d0"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" id="b960290e-4b7b-458b-9daf-f1e3afc3ca5e" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f3e91620-6dd4-4d2b-a7ea-dc6af834c4bc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("userIndex",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
//tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("sCbodyStreamClientNickname",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("rightstokenid",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="f44aee8d-706f-4560-8313-ecd9581cd433"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("userIndex",callTC.getPropertyValue("userIndex"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
//tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));
tC.setPropertyValue("sCbodyStreamClientNickname",callTC.getPropertyValue("sCbodyStreamClientNickname"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "") {
	tC.setPropertyValue("streamAccountActiveCount","0");
}
if (tC.getPropertyValue("userIndex") == null || tC.getPropertyValue("userIndex") == "") {
	tC.setPropertyValue("userIndex","0");
}
String count = tC.getPropertyValue("counter").toString();

tC.setPropertyValue("streamhandleFULL_" + count,null);
tC.setPropertyValue("streamhandle_" + count,null);
tC.setPropertyValue("streamhandleFULL_" + count,null);
tC.setPropertyValue("streamhandle_" + count,null);
tC.setPropertyValue("expectNickname_" + count,null);
tC.setPropertyValue("expectDBStatus_" + count,null);
tC.setPropertyValue("expectDBCreatedBy_" + count,null);
tC.setPropertyValue("expectRequestingUser_" + count,null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body" id="448b7ea6-45c6-407c-863a-fa4f6e3504c1"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String b = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");
String sCbodyTransactionidSetting = tC.getPropertyValue("sCbodyTransactionidSetting");
String sCbodyStreamClientNickname = tC.getPropertyValue("sCbodyStreamClientNickname");
String sCbodyRightsTokenID = tC.getPropertyValue("sCbodyRightsTokenID");
String subDivided = tC.getPropertyValue("subDivided").toString();
String calculationmethod = tC.getPropertyValue("calculationmethod").toString();


if (transactionid == "null") {
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

/*
String xmlBody = """<Stream xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%REQUESTINGUSER%%
      <RightsTokenID>$rightstokenidFULL</RightsTokenID>
      %%TRANSACTIONID%%
</Stream>""";
*/

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">\n\n""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";
log.info "sCbodyTransactionidSetting[$sCbodyTransactionidSetting]";
log.info "sCbodyStreamClientNickname[$sCbodyStreamClientNickname]";
log.info "sCbodyRightsTokenID[$sCbodyRightsTokenID]";
log.info "subDivided[$subDivided]";

switch (sCbodyStreamClientNickname) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "    <StreamClientNickname></StreamClientNickname>";
		break;
	default:
		b = "    <StreamClientNickname>$nickname</StreamClientNickname>";
		break;
}

xmlBody = xmlBody + b + "\n";

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "    <RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "    <RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

xmlBody = xmlBody + b + "\n";

switch (sCbodyRightsTokenID) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "    <RightsTokenID>$rightstokenidFULL</RightsTokenID>";
		break;
	default:
		b = "    <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID>";
		break;
}

xmlBody = xmlBody + b + "\n";

switch (sCbodyTransactionidSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "    <TransactionID></TransactionID>";
		break;
	default:
		b = "    <TransactionID>" + transactionid + "</TransactionID>";
		break;
}

xmlBody = xmlBody + b + "\n";

switch (subDivided) {
	

	case "exclude":
		b = "";
		break;
	case "nullContent":
	     //String calculationmethod = "urn:dece:type:geoloc:other";
		b = """<SubDividedGeolocation CalculationMethod="$calculationmethod">$subDivided</SubDividedGeolocation>""";
		break;
		
	default:
	    // String calculationmethod = "urn:dece:type:geoloc:other";
		b = """<SubDividedGeolocation CalculationMethod="$calculationmethod">$subDivided</SubDividedGeolocation>""";
		break;
}

xmlBody = xmlBody + b + "\n";


xmlBody = xmlBody + "\n" + "\n\n</Stream>";

log.info xmlBody;

tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3239c161-d920-4489-9505-fcc4353c329b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="63916a15-467a-4979-a4c7-c99c6470ba81"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#TestCase#requestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Capture Current DB sysdate()" id="e587676a-5a8b-4dbf-9020-cdb89b6d538c"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="b6183f73-cc46-47ff-b72a-940962eda00a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

    if(status=="HTTP/1.1 201 Created")
  {  int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));
   log.info "StreamCreateCount : "+StreamCreateCount;
   StreamCreateCount++;
    log.info "StreamCreateCount : "+StreamCreateCount;
     tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  }
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="36b74f5c-3b96-4854-8442-b1330e9c49c1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Stream Details for List&amp; view" id="3eb6cfa2-4599-497d-9eb2-ab9c8356e362"><con:settings/><con:config><script><![CDATA[import java.util.*;
def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

// countOf_Fullfilment =  Gives count of no of AuthorizedFulfillmentMethod
//List_FullfilmentMethod = List of sorted List_AuthorizedFulfillmentMethod

//StreamClientNickname
//RequestingUserID
//RightsTokenID
//ExpirationDateTime
//SubDividedGeolocation
//streamhandleid

def rawRequest = context.expand( '${POST - StreamCreate#RawRequest}' )
def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' )
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();

String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();



def httpStatus = context.expand( '${#TestCase#httpStatus}' )
String httpLocation = context.expand( '${#TestCase#httpLocation}' ).toString();
def accountList = context.expand( '${#Project#accountList}' ).toString();
int StreamCreateCount = Integer.parseInt(context.expand( '${#Project#StreamCreateCount}' ))

String[] Httplist=httpLocation.split("/");

String StreamHandleID=Httplist[Httplist.length -1];
log.info "StreamHandleID : $StreamHandleID"

//StreamList  testcase property will store list of STREAMS

log.info rawRequest
def StreamList = context.expand( '${#TestCase#StreamList}' ).toString()

if (rawRequest != "" ) 
    {
                
                def myXML = new XmlSlurper().parseText(rawRequest).declareNamespace('dece':tP.getPropertyValue("coordinatorSchema"));
                 log.info "myXML:" + myXML;


                 if(accountList==assertionAccountIdFULL && httpStatus=="HTTP/1.1 201 Created" && StreamCreateCount<=12)
                 {
                    StreamList= StreamList+StreamHandleID+"!"+rightstokenidFULL+","+assertionUserIdFULL+";";
                  
                    tC.setPropertyValue("StreamList",StreamList);
                 	
                 	}
                 else if(httpStatus=="HTTP/1.1 201 Created" && StreamCreateCount<=12)
                 {   
                 	tP.setPropertyValue("accountList",assertionAccountIdFULL);
                 	
                 	StreamList= assertionAccountIdFULL+"#"+StreamHandleID+"!"+rightstokenidFULL+","+assertionUserIdFULL+";";
                  
                 	 tC.setPropertyValue("StreamList",StreamList);
                     	
                 	}
                 else
                 	{ log.info "else block Script issue"
                 		}

    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="aae5fb3b-3963-4f75-acd1-0f4e2a31c8ab"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle attributes" id="8cfbfc43-1269-4d47-a8ff-28aa76dac117"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//if(tC.getPropertyValue("username") == "pjgOrg1Basic1" || tC.getPropertyValue("username") == "pjgOrg1Basic2")
//{
//int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();
//int userIndex = tC.getPropertyValue("userIndex").toInteger();
//tC.setPropertyValue("streamAccountActiveCount",0);
//}
//else
//{
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger()+1;
int userIndex = tC.getPropertyValue("userIndex").toInteger()+1;
//}
String count = tC.getPropertyValue("counter").toString();

tC.setPropertyValue("streamhandleFULL_" + count,null);
tC.setPropertyValue("streamhandle_" + count,null);
tC.setPropertyValue("streamhandleFULL_" + count,tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle_" + count,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectNickname_" + count,tC.getPropertyValue("nickname"));
tC.setPropertyValue("expectDBStatus_" + count,"active");
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectRequestingUser_" + count,tC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("streamAccountActiveCount",streamAccountActiveCount.toString());
tC.setPropertyValue("userIndex",userIndex.toString());
tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
tC.setPropertyValue("expectDBCreatedByNodeType_" + count,tC.getPropertyValue("nodetype"));

callTC.setPropertyValue("userIndex",tC.getPropertyValue("userIndex"));
callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
callTC.setPropertyValue("streamhandleFULL_" + count,tC.getPropertyValue("streamhandleFULL_" + count));
callTC.setPropertyValue("streamhandle_" + count,tC.getPropertyValue("streamhandle_" + count));
callTC.setPropertyValue("expectNickname_" + count,tC.getPropertyValue("expectNickname_" + count));
callTC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
callTC.setPropertyValue("expectDBStatus_" + count,tC.getPropertyValue("expectDBStatus_" + count));
callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
callTC.setPropertyValue("expectDBCreatedBy_" + count,tC.getPropertyValue("expectDBCreatedBy_" + count));
callTC.setPropertyValue("expectDBCreatedTime_" + count,tC.getPropertyValue("currentDBTOD"));
callTC.setPropertyValue("expectRequestingUser",tC.getPropertyValue("expectRequestingUser_" + count));
callTC.setPropertyValue("expectRequestingUser_" + count,tC.getPropertyValue("expectRequestingUser_" + count));
callTC.setPropertyValue("expectRightsToken",tC.getPropertyValue("rightstokenidFULL"));
callTC.setPropertyValue("expectRightsToken_" + count,tC.getPropertyValue("rightstokenidFULL"));
callTC.setPropertyValue("streamAccountActiveCount",tC.getPropertyValue("streamAccountActiveCount"));
callTC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("expectDBCreatedByNodeType"));
callTC.setPropertyValue("expectDBCreatedByNodeType_" + count,tC.getPropertyValue("expectDBCreatedByNodeType_" + count));</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="caa00f26-fd50-4147-a721-39323d12c089"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPbxTMiFcMsUZiiUU1roBWjZ05eOcQS4JDaNnRD669cOkHJrD7s7wwxjRZY+SZ8lXXAU+Lbb4BxCQRjNJYFPuZtKa1oUUpchTrhLUQDcFdgdNHpd186bLtpe0XKdVk17xV6hAlZhrFvl4kR3zKqjj81SSS/jUsl0xlXHw7ZU5TyCDuUCUVHTbNMq6qb6DS3TdRzXdPJOsfCi5Z4h5NK2VMmb2gZUwmvaTIiFaxjL5TK/LORZODVs07SMn73uAM8gQFr9Yh1R6iisb/Rx3gMMvo/zmAXGhbGnc+Fxd0CmFIkohI0v7ytfpmFWDanjcTL9oWV3wevQCUuPTUQZJRj55AOp/PRAzJiXa/hTFhIxC74MwjKVYR0SrGPLoT80Yx/amYb2EIYc6XyGrI2tPkwgBIoh99Tv1LQf51UtvToMEeUTFgZ8//h7eIDG4LMFeDrfhrWBdr7BE5mqXwB2OxT7EScx3CmyLhAGvqkm4PNN5R5CmJCkS7gkaMIVOmMX3sFxnY0WmQIXf1KgneKsjTwjP4K6KFVvwkc+Hs/fjSIdJlcrL3b6PaMkiZkC2FVOBVlp18cDUmYkWt+47Ty1upWBiSpzPnq5vpn7nh0syX9Oe1H6Sbl/H9wYw4lXvh2X/dvO4+3jpGInk2hcuGRV/HwLI2/0tvpYLJq3vTKaFWcJMtt319f2w80/Eb0fk0mbBmh+3Uqsf9kNscJEXFn90cv90/TBikp38b0XtkfmY4t36Wz+di0q88vxsNTGUSUB3272evboWkQfzyie17JwdvDvy7ZvfhCN3wCL7VHRoNPKtWWVkPi+mSkJ8fRJquouVPPhAqjQ6uqW6h1uJNsd8VxZw/XZKhYdq9loW+bVpXVVbV6ZxYJZrlatttkwG+XGtsmsURxAbDI6IcqXarlr2nwPEAcuB+pBqMcskp2Oa99YbCGBch3al4+AUQ5DJtuzVSDMXq1Y1SZvkpxOvOSr+GP6oeXumLin92FjIiDcb8mFvZbcB0wWBFTfVrTmktdcyFS8ozgSvpWPUZ5CJDt7qJqsazuVosFJsPBBATUC5kU+5BezRZoYg6//bR1hnkr7V8P0sX0Z1uG3bQakjkeUAlexXIKsIhzNloJb3AZyFHDp5Azamm9EHlHvSqZThASvkex/+mSJokdGkVa3MXjYgs50f+Pua3Pwav2hge5fOO/+rXNZy+Obxjf5NA5LmTnyYrLjdrt0yPElG159S8R3ZOXf81EcRyn3HKdghNK8oUhgmLYxABxJ1q+GbA7UyKwYZ82/DPiB80y+DzESMzoQSEAg30ouPZ6x8AyAq4WnI994cu42tedSpk5AIk7Jmr5c1hTib/c57GKlJ8UP8m/JQu+zYids7fiRccp9RxA6VSc1+1Zf8AIzaZbIrs3CXeOnDJxyvi/MkpxhEZJQ40jA119yqh3XNIQxi6jotLRUsDsiUpxitQD3U+nITDqFsrWU/P9eqpOUAhjkMstJal9tF656AnS6M2Y2Tk9PGqf13aTZR1c/Eh9LdvJ0yPH6Lw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value>2015/05/05 10:48:17</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_10</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_12</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_13</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_14</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_15</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_16</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_18</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_20</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_21</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_22</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_23</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_24</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_25</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_26</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_28</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_29</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_30</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_31</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_32</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_33</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_34</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_35</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_36</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_37</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_38</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_40</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_9</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_10</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_12</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_14</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_15</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_16</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_17</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBCreatedBy_18</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_19</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_21</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_22</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_23</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_24</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_25</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_27</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_29</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_30</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_32</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_33</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_34</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_36</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_38</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_39</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_40</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_10</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_12</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_13</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_14</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_15</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_16</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_17</con:name><con:value>urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectRequestingUser_18</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_19</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_20</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_21</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_23</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_25</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_27</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_29</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_31</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_32</con:name><con:value>urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>expectRequestingUser_33</con:name><con:value>urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>expectRequestingUser_34</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_35</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_36</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_37</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_38</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_40</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A/Stream/urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79610</con:value></con:property><con:property><con:name>requestBody</con:name><con:value><![CDATA[<Stream xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">

    <StreamClientNickname></StreamClientNickname>
    <RequestingUserID>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</RequestingUserID>
    <RightsTokenID>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</RightsTokenID>
    <TransactionID>1.0.1.3.S</TransactionID>
<SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other">US 20148</SubDividedGeolocation>



</Stream>]]></con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sCbodyStreamClientNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases without MAC</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value>2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>streamhandleFULL_10</con:name><con:value>urn:dece:streamhandleid:org:dece:504435A9D0BF4189A6C292DCAD6D0FAD</con:value></con:property><con:property><con:name>streamhandleFULL_11</con:name><con:value>urn:dece:streamhandleid:org:dece:44C13BDE588444659733BE5A4C41D6D3</con:value></con:property><con:property><con:name>streamhandleFULL_12</con:name><con:value>urn:dece:streamhandleid:org:dece:9E25A29DDBD948508B3478C7610CA6D1</con:value></con:property><con:property><con:name>streamhandleFULL_13</con:name><con:value>urn:dece:streamhandleid:org:dece:5FEF94F4EAFF4BC18384FBA89F5BF3F4</con:value></con:property><con:property><con:name>streamhandleFULL_14</con:name><con:value>urn:dece:streamhandleid:org:dece:86FE554E211B42C1B013E066789175AA</con:value></con:property><con:property><con:name>streamhandleFULL_15</con:name><con:value>urn:dece:streamhandleid:org:dece:DBA5D25318644B5EA0C703384FE6D6A0</con:value></con:property><con:property><con:name>streamhandleFULL_16</con:name><con:value>urn:dece:streamhandleid:org:dece:E9576239081F4D7A8F7438EA2C6F48C3</con:value></con:property><con:property><con:name>streamhandleFULL_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D95E71BE9A12ACD3E0401F0A07990784</con:value></con:property><con:property><con:name>streamhandleFULL_18</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E2AD317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_19</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E2FD317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL_20</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E34D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_21</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E39D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_22</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E3ED317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CD87BC6F0FEF438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_24</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FF4438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_25</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FF9438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_26</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FFE438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_27</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234467FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_28</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C2344B7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_29</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234507FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:326583C5DCDE4B2E93D8D182C48A6CD2</con:value></con:property><con:property><con:name>streamhandleFULL_30</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234557FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_31</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C2345A7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_32</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87CE58313FD124E0401F0A05990DAA</con:value></con:property><con:property><con:name>streamhandleFULL_33</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87CF9B9FB89952E0401F0A079947F1</con:value></con:property><con:property><con:name>streamhandleFULL_34</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CD877D48FF260318E0401F0A079928C0</con:value></con:property><con:property><con:name>streamhandleFULL_35</con:name><con:value>urn:dece:streamhandleid:org:dece:CD877D48FF2B0318E0401F0A079928C0</con:value></con:property><con:property><con:name>streamhandleFULL_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CD87862FA8AE0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_37</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8B30BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_38</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8B80BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_39</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8BD0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:82E31370394F43078A734164E4F4537C</con:value></con:property><con:property><con:name>streamhandleFULL_40</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8C20BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5D1568C521EC4092B367EF34062C32DF</con:value></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:09F8730EBEDD49D0B6703F43B63CA238</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CA2385434FEC47C1BC784713B6513B6E</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D5918794DE6A4F01AAB39CE58ADC34E0</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:678AE1B8725241BB962E4BD14F9AFA38</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>streamhandle_10</con:name><con:value>504435A9D0BF4189A6C292DCAD6D0FAD</con:value></con:property><con:property><con:name>streamhandle_11</con:name><con:value>44C13BDE588444659733BE5A4C41D6D3</con:value></con:property><con:property><con:name>streamhandle_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9E25A29DDBD948508B3478C7610CA6D1</con:value></con:property><con:property><con:name>streamhandle_13</con:name><con:value>5FEF94F4EAFF4BC18384FBA89F5BF3F4</con:value></con:property><con:property><con:name>streamhandle_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">86FE554E211B42C1B013E066789175AA</con:value></con:property><con:property><con:name>streamhandle_15</con:name><con:value>DBA5D25318644B5EA0C703384FE6D6A0</con:value></con:property><con:property><con:name>streamhandle_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9576239081F4D7A8F7438EA2C6F48C3</con:value></con:property><con:property><con:name>streamhandle_17</con:name><con:value>D95E71BE9A12ACD3E0401F0A07990784</con:value></con:property><con:property><con:name>streamhandle_18</con:name><con:value>CD87AA799E2AD317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandle_19</con:name><con:value>CD87AA799E2FD317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandle_20</con:name><con:value>CD87AA799E34D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandle_21</con:name><con:value>CD87AA799E39D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandle_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CD87AA799E3ED317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandle_23</con:name><con:value>CD87BC6F0FEF438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandle_24</con:name><con:value>CD87BC6F0FF4438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandle_25</con:name><con:value>CD87BC6F0FF9438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandle_26</con:name><con:value>CD87BC6F0FFE438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandle_27</con:name><con:value>CD87C4C234467FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandle_28</con:name><con:value>CD87C4C2344B7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandle_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CD87C4C234507FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">326583C5DCDE4B2E93D8D182C48A6CD2</con:value></con:property><con:property><con:name>streamhandle_30</con:name><con:value>CD87C4C234557FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandle_31</con:name><con:value>CD87C4C2345A7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandle_32</con:name><con:value>CD87CE58313FD124E0401F0A05990DAA</con:value></con:property><con:property><con:name>streamhandle_33</con:name><con:value>CD87CF9B9FB89952E0401F0A079947F1</con:value></con:property><con:property><con:name>streamhandle_34</con:name><con:value>CD877D48FF260318E0401F0A079928C0</con:value></con:property><con:property><con:name>streamhandle_35</con:name><con:value>CD877D48FF2B0318E0401F0A079928C0</con:value></con:property><con:property><con:name>streamhandle_36</con:name><con:value>CD87862FA8AE0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandle_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CD87862FA8B30BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandle_38</con:name><con:value>CD87862FA8B80BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandle_39</con:name><con:value>CD87862FA8BD0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandle_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">82E31370394F43078A734164E4F4537C</con:value></con:property><con:property><con:name>streamhandle_40</con:name><con:value>CD87862FA8C20BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandle_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5D1568C521EC4092B367EF34062C32DF</con:value></con:property><con:property><con:name>streamhandle_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09F8730EBEDD49D0B6703F43B63CA238</con:value></con:property><con:property><con:name>streamhandle_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CA2385434FEC47C1BC784713B6513B6E</con:value></con:property><con:property><con:name>streamhandle_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D5918794DE6A4F01AAB39CE58ADC34E0</con:value></con:property><con:property><con:name>streamhandle_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">678AE1B8725241BB962E4BD14F9AFA38</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19095 - StreamListView - LLP - Stream view by dlpcs_ManageAccountConsentNotPresent_OneActiveStreamDLP_OneActiveStreamDLPCS - 200 OK - 2A,1D_FLAKY</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1.0.1.3.S</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150505_041626</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_null</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DB9579AE03D8DFD8E0401F0A059960A6</con:value></con:property><con:property><con:name>streamhandle_null</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DB9579AE03D8DFD8E0401F0A059960A6</con:value></con:property><con:property><con:name>expectNickname_null</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_null</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_null</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectRequestingUser_null</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>subDivided</con:name><con:value>US 20148</con:value></con:property><con:property><con:name>calculationmethod</con:name><con:value>urn:dece:type:geoloc:other</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE072E24F73ADE4DBE0401F0A05994C9A</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_null</con:name><con:value>dlp</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>accountList</con:name><con:value>urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>StreamList</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A#urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80!urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269!urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3eb6cfa2-4599-497d-9eb2-ab9c8356e362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamListView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c20d6eff-f3d5-4f0b-bdef-3b0e8b8fda2a" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3d875160-7247-4e19-8d8a-ab5139d92395"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("expectErrTypeStreamListView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectStreamActiveCnt",null);
tC.setPropertyValue("httpContentEncoding",null);
tC.setPropertyValue("streamAccountActiveCount",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("streamFlagCreateDateOld",null);
tC.setPropertyValue("streamFlagIgnoreCreatedDate",null);
tC.setPropertyValue("expectDBModifiedBy",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="1665db2c-52b3-4837-b324-f305399a1424"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int counter;
String sh;
String rt;
String shCreatedBy;
String shValue;
String shExpireDate;
String nickname;
String expectGenericRightsToken;
String expectRequestingUser;
String expectDBDeletedTime;
String expectDBCreatedTime;
String streamFlagCreateDateOld;
String streamFlagIgnoreCreatedDate;
String streamFlagIgnoreDeletedDate;
String expectDBCreatedByNodeType;

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamListView",callTC.getPropertyValue("expectErrTypeStreamListView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBModifiedBy",callTC.getPropertyValue("expectDBModifiedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("expectStreamAvailCnt",callTC.getPropertyValue("expectStreamAvailCnt"));
tC.setPropertyValue("expectStreamActiveCnt",callTC.getPropertyValue("expectStreamActiveCnt"));
tC.setPropertyValue("expectRequestingUser",callTC.getPropertyValue("expectRequestingUser"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("streamFlagCreateDateOld",callTC.getPropertyValue("streamFlagCreateDateOld"));
tC.setPropertyValue("streamFlagIgnoreCreatedDate",callTC.getPropertyValue("streamFlagIgnoreCreatedDate"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));



if (tC.getPropertyValue("expectErrTypeStreamListView") == null || tC.getPropertyValue("expectErrTypeStreamListView") == "") {
	tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("expectStreamAvailCnt") == null || tC.getPropertyValue("expectStreamAvailCnt") == "") {
	tC.setPropertyValue("expectStreamAvailCnt",tP.getPropertyValue("streamlimit"))
}
if (tC.getPropertyValue("expectStreamActiveCnt") == null || tC.getPropertyValue("expectStreamActiveCnt") == "") {
	tC.setPropertyValue("expectStreamActiveCnt","0")
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "") {
	tC.setPropertyValue("streamAccountActiveCount","0")
}
if (tC.getPropertyValue("streamFlagIgnoreCreatedDate") == null || tC.getPropertyValue("streamFlagIgnoreCreatedDate") == "") {
	tC.setPropertyValue("streamFlagIgnoreCreatedDate","false")
}

if (tC.getPropertyValue("counter") == null ||
    tC.getPropertyValue("counter") == "") {
    		tC.setPropertyValue("counter","1");
    }
    
counter = tC.getPropertyValue("counter").toInteger();

for (int i = 0; i &lt;= counter; i++) {
	
	sh           = "streamhandleFULL_"  + (i + 1);
	rt           = "rightstokenidFULL_"   + (i + 1);
	shid           = "streamhandle_"  + (i + 1);
	shCreatedBy  = "expectDBCreatedBy_" + (i + 1);
	shDeletedBy  = "expectDBDeletedBy_" + (i + 1);	
	shModifiedBy  = "expectDBModifiedBy_" + (i + 1);
	shValue      = "expectDBStatus_"    + (i + 1);
	nickname     = "expectNickname_"    + (i + 1);
	expectRequestingUser = "expectRequestingUser_" + (i + 1);
	expectGenericRightsToken = "expectGenericRightsToken_" + (i + 1);
	expectDBDeletedTime = "expectDBDeletedTime_" + (i + 1);
	expectDBCreatedTime = "expectDBCreatedTime_" + (i + 1);
	streamFlagCreateDateOld = "streamFlagCreateDateOld_" + (i + 1);
	streamFlagIgnoreCreatedDate = "streamFlagIgnoreCreatedDate_" + (i + 1);
	streamFlagIgnoreDeletedDate = "streamFlagIgnoreDeletedDate_" + (i + 1);
	expectDBCreatedByNodeType = "expectDBCreatedByNodeType_" + (i + 1);

     tC.setPropertyValue(shid,callTC.getPropertyValue(shid));     		
	tC.setPropertyValue(sh,callTC.getPropertyValue(sh));
	tC.setPropertyValue(rt,callTC.getPropertyValue(rt));
	tC.setPropertyValue(shValue,callTC.getPropertyValue(shValue));
	tC.setPropertyValue(shCreatedBy,callTC.getPropertyValue(shCreatedBy));
	tC.setPropertyValue(shDeletedBy,callTC.getPropertyValue(shDeletedBy));
	tC.setPropertyValue(shModifiedBy,callTC.getPropertyValue(shModifiedBy));
	tC.setPropertyValue(nickname,callTC.getPropertyValue(nickname));
	tC.setPropertyValue(expectGenericRightsToken,callTC.getPropertyValue(expectGenericRightsToken));
	tC.setPropertyValue(expectRequestingUser,callTC.getPropertyValue(expectRequestingUser));
	tC.setPropertyValue(expectDBDeletedTime,callTC.getPropertyValue(expectDBDeletedTime));
	tC.setPropertyValue(expectDBCreatedTime,callTC.getPropertyValue(expectDBCreatedTime));
	tC.setPropertyValue(streamFlagCreateDateOld,callTC.getPropertyValue(streamFlagCreateDateOld));
	tC.setPropertyValue(streamFlagIgnoreCreatedDate,callTC.getPropertyValue(streamFlagIgnoreCreatedDate));
	tC.setPropertyValue(streamFlagIgnoreDeletedDate,callTC.getPropertyValue(streamFlagIgnoreDeletedDate));
	tC.setPropertyValue(expectDBCreatedByNodeType,callTC.getPropertyValue(expectDBCreatedByNodeType));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3978ddbd-fd2d-4aee-8fcc-5cc98098e296"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamListView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamListView" id="463ec7ef-6883-425e-9c65-f973cd0e08e5"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamListView" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="2fdd9bd2-752e-475b-8c0e-a292ffe47f88"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('GET - StreamListView');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);

def testStep = testRunner.testCase.getTestStepByName( "Validation of List of Streams get as per Details stored at StreamCreate for all" )
 log.info status
if(status=="HTTP/1.1 200 OK")
{  log.info status
   testStep.disabled = false;
}
else
{
	 testStep.disabled = true;
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="f295726c-79e5-4833-b1a8-8f805c9ce21c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamListView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamListView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamListView").toString();
		break;
}


try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="637e2625-a5df-434b-b689-35a4603c2e25" disabled="true"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//------------------------------------------------------//
def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
//------------------------------------------------------//
def getHistoryRecords(sh) {
	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();
	
	log.info "---------IN getHistoryRecords sh[$sh]";
	
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
     String hsh;
     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
     {
	int lastColon = sh.lastIndexOf('%');
     hsh = sh.substring(lastColon +3,sh.length());
     }
     else
     {
     int lastColon = sh.lastIndexOf(':');
     hsh = sh.substring(lastColon +1,sh.length());
     }
	String hresults = null;
	String hsql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh') 
	  order by STATUS
	  """;

	  log.info "hsql is $hsql";

	hresults = a.SelectFromDB(hsql,tP.getPropertyValue("targetSystem").toString());
	log.info hresults;

	/*
	*  If zero length, no need to continue;
	*/
	assert hresults.length() > 0;

	try {
		def hmyXML = new XmlSlurper().parseText(hresults);
		log.info "hmyXML.ResultSet.Row.size() is [" + hmyXML.ResultSet.Row.size() + "]";
		assert hmyXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", hresults);
	}
}
//------------------------------------------------------//


def a = new generalUtils.generalUtils(log);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnerror");
def urnGenericRightsToken = tP.getPropertyValue("urnGenericRightsToken");
def streamMaxDisplayCount = tP.getPropertyValue("streamMaxDisplayCount");
def streamlimit  = tP.getPropertyValue("streamlimit");
def acct  = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def counter = tC.getPropertyValue("counter").toInteger();
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamListView");
def XMLbody = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectModifiedBy = urnnode + tC.getPropertyValue("expectDBModifiedBy");
def expectStatus = tC.getPropertyValue("expectDBStatus");
def expectRT = tC.getPropertyValue("rightstokenidFULL");
def expectSH = tC.getPropertyValue("streamhandleFULL");
def expectNickname = tC.getPropertyValue("expectNickname");
def expectStreamActiveCnt = tC.getPropertyValue("streamAccountActiveCount");
def expectStreamAvailCnt = streamlimit.toInteger() - expectStreamActiveCnt.toInteger();
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String errorHost   = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String availStreamsCnt = "";
String major = tP.getPropertyValue("V1").toString();
String minor = tP.getPropertyValue("V2").toString();
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectDescription = "";
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean XMLbodynull     = false;
boolean doValidations   = true;
int displayStreamCount = 0;
int xmlIndex = 0;
int g = 0;
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();


/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/
if (tP.getPropertyValue("targetURL").length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = "https://qa.q.uvvu.com:" + tP.getPropertyValue("targetPort");
}

switch (errorRespType) {
	case "SUCCESS_NO_STREAMS":
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	

	case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
                                errorReason = "node_status_inactive";
                                errorLink = "$errorHost/deceerrors/error/error_response.html";
break;


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorRespType[$errorRespType]";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

/*
* Content-Length
*/
String httpContentEncoding = tC.getPropertyValue("httpContentEncoding");
String contentLength = tC.getPropertyValue("httpContentLength");
log.info "httpContentEncoding[$httpContentEncoding]";
log.info "contentLength[$contentLength]";
if (httpContentEncoding == "null" || httpContentEncoding == null) {
	log.info "Asserting contentLength.length() > 0";
	assert contentLength.toInteger() > 0;
} else {
	log.info "Asserting httpContentEncoding is chunked";
	assert tC.getPropertyValue("httpContentEncoding") == "chunked";
}

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
//if(tC.getPropertyValue("nodetype")== "llp" )
this.log.info "HTTP Content-Type:  Expect: $expectHTTPcontenttype - Received: " + tC.getPropertyValue("httpContentType");
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" && errorRespType != "SUCCESS_NO_STREAMS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		
	} else if (errorRespType == "SUCCESS_NO_STREAMS") {
		log.info "--------------SUCCESS NO STREAMS---------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit") + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		if (tC.getPropertyValue("streamFlagCreateDateOld") != "true") {
			log.info "Assert ActiveStreamCount == 0 -- streamFlagCreateDateOld[" + tC.getPropertyValue("streamFlagCreateDateOld") + "]";
			assert activeStreamCnt.toInteger() == 0;
			log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger();
		} else {
			log.info "ActiveStreamCount[$activeStreamCnt] == expectStreamActiveCnt[$expectStreamActiveCnt]";
			assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
			log.info "ActiveStreamCount[$availStreamsCnt] == " + streamlimit.toInteger() - activeStreamCnt.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger() - activeStreamCnt.toInteger();
		}
		
		log.info "Assert NO <Stream> Rows Present";
		assert myXML.Stream.size() == myXML.Stream.size();
		log.info "Assert NO <Stream>.<ResourceStatus> Rows Present";
		assert myXML.Stream.ResourceStatus.size() == 0;
		log.info "Assert NO <Stream>.<RightsTokenID> Rows Present";
		assert myXML.Stream.RightsTokenID.size() == 0;
		log.info "Assert NO <Stream>.<ExpirationDateTime> Rows Present";
		assert myXML.Stream.ExpirationDateTime.size() == 0;
			
		/*  AvailableStreams */
		log.info "availStreamsCnt[$availStreamsCnt] - expectStreamAvailCnt[$expectStreamAvailCnt]";
		assert availStreamsCnt.toInteger() == expectStreamAvailCnt.toInteger();

		/* ActiveStreamCount */
		log.info "activeStreamCnt[$activeStreamCnt] - expectStreamActiveCnt[$expectStreamActiveCnt]";
		assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
	} else {
		log.info "--------------STREAM DATA VERIFICATION-----------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		this.log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit")  + "]";
		assert availStreamsCnt.toInteger() <= tP.getPropertyValue("streamlimit").toInteger();

		log.info "Assert ActiveStreamCount == $streamAccountActiveCount";
		assert activeStreamCnt.toInteger() == streamAccountActiveCount;
		log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() - streamAccountActiveCount + "]";
		assert availStreamsCnt.toInteger() == streamlimit.toInteger() - streamAccountActiveCount;
				
		/*
		*  Due to stream ordering we must work backwards from the 
		*  total number of streams created.  The newest created
		*  stream will be the first in the list.
		*/
		g = counter;

		log.info "g[$g] - counter[$counter]";

		/*
		*  By design, we never return more than 30 streams.   
		*  
		*/
		this.log.info "Recv Stream Count [" + myXML.Stream.size() + "] lessThan [$streamMaxDisplayCount]";;
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();

		
		while (g != 0) {
			String expectValue = tC.getPropertyValue("expectDBStatus_" + g);
			String expectcb = urnnode + tC.getPropertyValue("expectDBCreatedBy_" + g);
			String expectdb = urnnode + tC.getPropertyValue("expectDBDeletedBy_" + g);
			String expectmb = urnnode + tC.getPropertyValue("expectDBModifiedBy_" + g);
			String expectsh = tC.getPropertyValue("streamhandleFULL_" + g);
			String expectNick = tC.getPropertyValue("expectNickname_" + g);
			String expectrt  = tC.getPropertyValue("rightstokenFULL_" + g);
			String expectGeneric = tC.getPropertyValue("expectGenericRightsToken_" + g);
			String expectRequestingUser = tC.getPropertyValue("expectRequestingUser_" + g);
			String expectCDate = tC.getPropertyValue("expectDBCreatedTime_" + g);
			String expectDDate = tC.getPropertyValue("expectDBDeletedTime_" + g);
			String streamFlagIgnoreCreatedDate = tC.getPropertyValue("streamFlagIgnoreCreatedDate_" + g);
			String streamFlagIgnoreDeletedDate = tC.getPropertyValue("streamFlagIgnoreDeletedDate_" + g);
			String expectDBCreatedByNodeType = tC.getPropertyValue("expectDBCreatedByNodeType_" + g);
			String baseRightsToken = tC.getPropertyValue("rightstokenidFULL");

			log.info "g[$g]";

			getHistoryRecords(expectsh);

			/* ---------HACKIE SMACKIE 
			*  The requestinguser displayed in streamview is NOT the 
			*  requestinguser supplied during streamcreation.  It is the 
			*  userid associated with security context (saml) which
			*  invoked the request.  Thus, all requestingusers in all
			*  streams displayed will be the same.  We will override
			*  that NOW!  LLP and LLPCS do not display the requestinguser
			*  element.
			*/
			//if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "llpcs") {
			//	expectRequestingUser = "";
			//} else {
				expectRequestingUser = tC.getPropertyValue("assertionUserIdFULL");
			//}
						
			/*
			*  if the nodetype is 'dlp' or 'llp' streams in 'deleted' status
			*   are not displayed.  Thus, we must adjust accordingly.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp") {
				//if (	expectValue == "active") {
				//	doValidations = true;
				//} else {
				//	doValidations = false;
				//}
			//} else {
				doValidations = true;
			}

			/*
			*  Special processing is required for nickname just
			*  incase it contains special xml characters.
			*/
			if (expectNick != null) {
				if (expectNick.length() > 0) {
					expectNick = expectNick.replace('&amp;','&');
					expectNick = expectNick.replace('&lt;','<');
					expectNick = expectNick.replace('&gt;','>');
					expectNick = expectNick.replace('&apos;','\'');
				}
			}

			/*
			*  There maybe one or more rightstokens created by the test
			*  case.  Thus multiple streams maybe have the same 
			*  rights token.  We will assume that if we get a null
			*  rightstokenFULL_count value that only one rightstoken
			*  was created for the test and that will be contained 
			*  in rightstokenfull.
			*/
			if (expectrt == null) {
				log.info "RIGHTSTOKENFULL - Override to the baseRightsToken value [$baseRightsToken]";
				expectrt = baseRightsToken;
			}
			log.info "g[$g] - doValidations [$doValidations] - nodetype[" + tC.getPropertyValue("nodetype") + "] - expectValue[$expectValue]";
			
			if (doValidations) {
				displayStreamCount++;
				log.info "****************************************"+displayStreamCount+"************************************"

				/*  StreamHandleID */
				
				String recvsh = myXML.Stream[xmlIndex].@StreamHandleID.text();
				log.info "xmlIndex[$xmlIndex] - StreamHandleID - recvsh[$recvsh] - expect[$expectsh]";
				assert recvsh == expectsh;
				
				//StreamClientNickname
				if (expectNick != null) {
					String recvnick = myXML.Stream[xmlIndex].StreamClientNickname;
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - recv[$recvnick] - expect[$expectNick]";
					assert expectNick == recvnick;
				} else {
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - Element NOT present";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
				}
				
				// RequestingUserID
				String recvru = myXML.Stream[xmlIndex].RequestingUserID;
				//log.info "xmlIndex[$xmlIndex] - RequestingUserID - recv[$recvru] - expect[$expectRequestingUser] - expectDBCreatedByNodeType[$expectDBCreatedByNodeType]";
				//assert recvru == expectRequestingUser;
		
				//RightsTokenID
				String recvrt = myXML.Stream[xmlIndex].RightsTokenID.text();
				if (expectGeneric == "true") {
					expectrt = urnGenericRightsToken;
				}
				log.info "xmlIndex[$xmlIndex] - RightsTokenID - recvrt[$recvrt] - expectrt[$expectrt] - expectGeneric[$expectGeneric]";
				assert recvrt == expectrt;
				
				//ExpirationDateTime
				String recvet = myXML.Stream[xmlIndex].ExpirationDateTime;
				log.info "xmlIndex[$xmlIndex] - ExpirationDateTime - is NOT null";
				assert recvet.length() > 0;

				//CreatedBy
				String recvcb   = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreatedBy.text();
				log.info "xmlIndex[$xmlIndex] - CreatedBy - recvcb[$recvcb] - expectcb[$expectcb]";
				assert recvcb == expectcb;

				//CreationDate
				if (streamFlagIgnoreCreatedDate != "true") {
					log.info "xmlIndex[$xmlIndex] - CreationDate - is NOT null";
					String recvDate = "";
					String recvcd = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreationDate.text();
					recvDate = formatDate(recvcd);
					def j = a.dateDiff(recvDate,expectCDate,"seconds");
					log.info "xmlIndex[$xmlIndex] - CreationDate - recvDate[$recvDate] - expectCDate[$expectCDate] DIFF [$j]";
					assert recvcd.length() > 0;
					log.info "xmlIndex[$xmlIndex] - CreationDate - Differences less that 10 seconds";
					//assert j <= 10;
				} else {
					log.info "xmlIndex[$xmlIndex] - CreationDate - IGNORED DUE TO streamFlagIgnoreCreatedDate" ;
				}

				//Value
				String recvValue = myXML.Stream[xmlIndex].ResourceStatus.Current.Value;
				log.info "xmlIndex[$xmlIndex] - Value - recvValue[$recvValue] - expectValue[$expectValue]";
				if (expectValue == "active") {
					assert recvValue == "urn:dece:type:status:active";
				} else {
					assert recvValue == "urn:dece:type:status:deleted";
				}

				//Description
				switch (expectValue) {
					case "active":
						expectDescription = "active";
						break;
					default:
						expectDescription = "deleted";
						break;
				}
				String recvDesc = myXML.Stream[xmlIndex].ResourceStatus.Current.Description;
				log.info "xmlIndex[$xmlIndex] - Description - recvDesc[$recvDesc] - expectDesc[$expectDescription]";
				assert recvDesc == expectDescription;

				/*  Nickname validation */
				if (expectNick == null || expectNick == "") {
					log.info "Asserting no <StreamClientNickname> element exists";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
					assert myXML.Stream[xmlIndex].StreamClientNickname.text() == "";
				} else {
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 1;
					String recvNick = myXML.Stream[xmlIndex].StreamClientNickname.text();
					log.info "xmlIndex[$xmlIndex] - recvNick[$recvNick] - expectNick[$expectNick]";
					assert recvNick == expectNick;
				}
									
				/*
				*  If the stream is deleted....
				*/
				log.info "DeletedBy length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length();
				log.info "DeletionDate length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length();
				
				if (	expectValue == "deleted") {
					String recvDeletedBy = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString();
					String recvDeletionDate = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString();
					
					//DeletedBy
					this.log.info "recvDeletedBy[$recvDeletedBy] - expectdb[$expectdb]";
					assert recvDeletedBy == expectdb;
					
					//DeletionDate
					if (streamFlagIgnoreDeletedDate != "true") {
						String recvDate = formatDate(recvDeletionDate);
						def j = a.dateDiff(expectDDate,recvDate,"seconds");
						log.info "xmlIndex[$xmlIndex] - DeletionDate - recvDate[$recvDate] - expectDDate[$expectDDate] DIFF [$j]";
						assert recvDate.length() > 0;
						log.info "xmlIndex[$xmlIndex] - DeletionDate - Difference less that 10 seconds";
						assert j <= 10;
					} else {
						log.info "xmlIndex[$xmlIndex] - DeletionDate - IGNORED DUE TO streamFlagIgnoreDeletedDate" ;
					}
				} else {
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length()    == 0;
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length() == 0;
				}
				/*
				*
				*  History validation
				*
				*/
				def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

				int rCnt = myHistoryXML.ResultSet.Row.size();

				log.info "-------------HISTORY-----------------";
				log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
				if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
					rCnt -= 1;
				} 
				assert myXML.Stream[xmlIndex].ResourceStatus.History.Prior.size() == rCnt;
		
				for (int i = 0; i < rCnt; i++) {
					String hrecvModifiedBy = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModifiedBy.text();
					String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
					log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
					assert hrecvModifiedBy == expectmb;

					String hrecvStatus = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Value;
					String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
					log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
					if (hexpectStatus == "active") {
						assert hrecvStatus == "urn:dece:type:status:active";
					} else {
						assert hrecvStatus == "urn:dece:type:status:deleted";
					}
					
					String hrecvDescription = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Description;
					switch (hexpectStatus) {
						case "active": hexpectDescription = "active"; break;
						case "deleted": hexpectDescription = "deleted"; break;
						default: hexpectDescription = "deleted"; break;
					}
					log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
					assert hrecvDescription == hexpectDescription;
	
					String hrecvModificationDate = formatDate(myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModificationDate.text());
					int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
					String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
					log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
					assert hrecvModificationDate.replace("/","-") == hexpectModificationDate;
					
				}
			
				xmlIndex++;
			}

			/*
			*  By design, we never return more than 30 streams.   So
			*  if we encounter our 30th stream we will break out of 
			*  the XML validation routines and allow size() 
			*  invocations on the xml body to verify no additional
			*  streams were returned.
			*/
			if (displayStreamCount == streamMaxDisplayCount.toInteger()) {
				break;
			}
			
			g--;
		}

		log.info "--------------------FINAL XML size() Validations -------------------";
		log.info "ResourceStatus size: "  + myXML.Stream.ResourceStatus.size();
		log.info "ResourceStatus.Current size: " + myXML.Stream.ResourceStatus.Current.size();
		log.info "ResourceStatus.Value size: " + myXML.Stream.ResourceStatus.Current.Value.size();
		log.info "ResourceStatus.Description size: " + myXML.Stream.ResourceStatus.Current.Description.size();
		log.info "RightsTokenID size: "  + myXML.Stream.RightsTokenID.size();
		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();

		log.info "Stream.size() LTE MAX allowed of " + streamMaxDisplayCount.toInteger();
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		log.info "Stream.size() IS -- recv[" + myXML.Stream.size() + "] Expect[$displayStreamCount]";
		assert myXML.Stream.size() == displayStreamCount;
		
		assert myXML.Stream.ResourceStatus.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Value.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Description.size() == displayStreamCount;
		assert myXML.Stream.RightsTokenID.size()  == displayStreamCount;
		assert myXML.Stream.ExpirationDateTime.size() == displayStreamCount;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Validation of List of Streams get as per Details stored at StreamCreate for all" id="b2a007ea-bac6-4f68-971a-3a1f359d4c95"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamCreate');
def delete_streamTC = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamDelete');

tC.setPropertyValue("StreamDeleted",delete_streamTC.getPropertyValue("StreamDeleted"));

tC.setPropertyValue("StreamList",commonTC.getPropertyValue("StreamList"));

def TpstreamDeleteList = context.expand( '${#Project#StreamDeleteList}' )
int TpStreamDeleteCount=Integer.parseInt(tP.getPropertyValue("StreamDeleteCount"));

def streamCreateCount = context.expand( '${#Project#StreamCreateCount}' )
tC.setPropertyValue("accountList",commonTC.getPropertyValue("accountList"));

tC.setPropertyValue("streamCreateCount",streamCreateCount);

def xMLbody = context.expand( '${#TestCase#XMLbody}' )

def nodeid = context.expand( '${#TestCase#nodeid}' )
def node_flag=true;
def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' ).toString();
def StreamList=context.expand( '${#TestCase#StreamList}' ).toString();
def accountList=context.expand( '${#TestCase#accountList}' ).toString();
log.info "accountList :$accountList"
log.info "assertionAccountIdFULL :$assertionAccountIdFULL"
def rawRequest = context.expand( '${GET - StreamListView#RawRequest}' )

String[] List=StreamList.split("#",2);

String ExpectedAcct=List[0];

String[] ExpStreamLL=List[1].split(";");

HashMap Expstrm = new HashMap();

ArrayList<StreamObj> StmObj=new ArrayList<StreamObj>();
int j=0;


if(nodeid=="LLASP_CS_1" || nodeid=="DLASP" || nodeid=="DLASP_CS_1" || nodeid=="LLASP_CS_2"|| nodeid=="DLASP_CS_2" || nodeid=="LLASP"  || nodeid=="LLASP_2" || nodeid=="DLASP_CS_2")
{
  node_flag=true;
}
else
{ node_flag=false  }

while(j<ExpStreamLL.length)
{   
	String[] str= ExpStreamLL[j].split("!");
	    
	  Expstrm.put(str[0], str[1]);
	  String[] val=str[1].split(",");
//	  log.info "handle id"+str[0] +";" +"property"+ str[1]
	  j++;
//	  log.info val.length;
//	  log.info "Rights :"+val[0]+", User:"+val[1]//+",user:"+val[2]
	  StmObj.add(new StreamObj(str[0],val[0],val[1]));
	
}
//log.info "object :"+StmObj.get(1).getStreamHandleID();
def response = context.expand( '${GET - StreamListView#Response}' )
def myXML;
HashMap Actstrm = new HashMap();

int streamDeleteCount = Integer.parseInt(context.expand( '${#Project#StreamDeleteCount}' ))

def streamDeleted = context.expand( '${#Project#StreamDeleteList}' )
String[] DeletedStream=streamDeleted.split(";");



def ActualStreamHandleIDList="";

log.info "##############  $ActualStreamHandleIDList  #########################"


if(response!="")
{
myXML = new XmlSlurper().parseText(response).declareNamespace('dece':tP.getPropertyValue("coordinatorSchema"));;
  
  int ActualStreamCount=myXML.Stream.size();
  log.info "Expected StreamCount $streamCreateCount plus, Deleted Stream Count $TpStreamDeleteCount ,Actual StreamCount $ActualStreamCount"
  if(node_flag==true)
    {  assert ActualStreamCount==Integer.parseInt(streamCreateCount)+TpStreamDeleteCount;} 
  else
    {  assert ActualStreamCount==Integer.parseInt(streamCreateCount);
    	}
  log.info "ActualStreamCount :"+ ActualStreamCount

  log.info "############## ActualStreamHandleIDList:  $ActualStreamHandleIDList"
   int count=0;
  for(int i=0;i<ActualStreamCount;i++)
  {  
  	def ActualStreamHandleID=myXML.Stream[i].@StreamHandleID.text();
  	def ActualRghtsTokenID=myXML.Stream[i].RightsTokenID.text();
  	def ActualRequestingUserID=myXML.Stream[i].RequestingUserID.text();
  	def ActExpirationDateTime=myXML.Stream[i].ExpirationDateTime.text();
  	def ResourceStatus=myXML.Stream[i].ResourceStatus.Current.Value.text(); 
  	def Description=myXML.Stream[i].ResourceStatus.Current.Description.text(); 
  	def CreationDate=myXML.Stream[i].ResourceStatus.Current.@CreationDate.text();
  	
  if(Description=="active")
    { ActualStreamHandleIDList=ActualStreamHandleIDList+ActualStreamHandleID+";"
    }
  	              	         
  	
  	
  	if(i+1<ActualStreamCount)
  	{
  	def Next_CreationDate=myXML.Stream[i+1].ResourceStatus.Current.@CreationDate.text();
  	
  	log.info "################# CreationDate :$CreationDate  , CreationDate of Next stream in listView: $Next_CreationDate ########################### "
  	log.info "check Streams Order , should be as per  Streams’ created datetime value, in descending order"
  	 assert CreationDate > Next_CreationDate ;
  	}


  	
//  	log.info "ResourceStatus"+Description
  	//urn:dece:type:status:active
     
//     <Value>urn:dece:type:status:deleted</Value>
//                <Description>deleted</Description>
       
     
  	 
  	     for(int s=0; s<StmObj.size();s++)
  	     {
  	         if (ActualStreamHandleID==StmObj.get(s).getStreamHandleID())
  	         {
  	         	
  	           count++;

  	           log.info " Count :$count and  ActualStreamHandleID $ActualStreamHandleID"
   	          def ExpectUser= StmObj.get(s).getUserid()
  	          def ExpectRght= StmObj.get(s).getRightstokenidFULL() ;

                log.info "For StreamID :'$ActualStreamHandleID' Expected rightId :'$ExpectRght' ,ActualRights:'$ActualRghtsTokenID'"
  	           assert ExpectRght==ActualRghtsTokenID;
  	   	     log.info "For StreamID :'$ActualStreamHandleID' Expected USERID :'$ExpectUser' ,Actual userID:'$ActualRequestingUserID '"  	           
  	   	     assert ExpectUser==ActualRequestingUserID;
  	   	   
  	           }  	

  	           int flag=0;
  	              for(int x=0;x<DeletedStream.length;x++)
  	              {
  	              	  if (ActualStreamHandleID==DeletedStream[x])
  	              	     {  
  	              	     	log.info "For StreamID :'$ActualStreamHandleID' expected ResourceStatus :'urn:dece:type:status:deleted' ,Actual resource status:'$ResourceStatus'"
  	              	        assert ResourceStatus=="urn:dece:type:status:deleted"
  	              	         log.info "For StreamID :'$ActualStreamHandleID' expected Description :'deleted' ,Actual Description :'$Description'"
  	              	         assert Description=="deleted"
  	              	          
  	              	         flag=1;
  	              	         break;
  	              	     	}
  	               	}

  	               if(flag==0)
  	               {
  	               	 log.info "For StreamID :'$ActualStreamHandleID' expected ResourceStatus :'urn:dece:type:status:active' ,Actual resource status:'$ResourceStatus'"
  	               	assert ResourceStatus=="urn:dece:type:status:active"
  	              	      log.info "For StreamID :'$ActualStreamHandleID' expected Description :'active' ,Actual Description :'$Description'"  
  	              	      assert Description=="active"
  	              	         
  	               	}
  	   }
  	   tC.setPropertyValue("ActualStreamHandleIDList",ActualStreamHandleIDList);
     }  
  	   if(node_flag==true && count==ActualStreamCount)
  	   {   log.info "nodeid :'$nodeid' will get list of all active and deleted streams"
  	   	 log.info "All streams validated active and deleted streams";
  	   	 assert count==ActualStreamCount;
  	   	}
  	   else if(node_flag==false && streamCreateCount==count.toString())
  	   {
           log.info "nodeid :'$nodeid' not able to get deleted streams"
  	   	log.info "All streams validated  expect deleted streams , Total count of streams details in response $ActualStreamCount";
  	   	log.info " Actual Stream count to be validate '$streamCreateCount' ,expected Stream count :$ActualStreamCount "
  	   	log.error " total Streams validated $count";
  	   	 assert streamCreateCount==ActualStreamCount.toString();
  	   	 assert streamCreateCount==count.toString()

  	   }
  	   else{
  	   	  log.info "nodeid :'$nodeid'"
  	   	 log.error "List view don't have all streams in Account $accountList ";
  	   	 assert count==ActualStreamCount;
  	   	}
  
  
}



class StreamObj
{ 
	private String StreamHandleID;
	private String rightstokenidFULL;
	private String Userid;
	private static int keyLs;

	StreamObj(String StreamHandleID,String rightstokenidFULL,String Userid){
		if(keyLs>0)
		   keyLs++;
		   else
		   keyLs=1;

		   this.StreamHandleID = StreamHandleID;
		   this.rightstokenidFULL = rightstokenidFULL;
		   this.Userid = Userid;
		}

		public String getStreamHandleID() {
		return StreamHandleID;
	}
	public void setStreamHandleID(String StreamHandleID) {
		this.StreamHandleID = StreamHandleID;
	}
	public String getRightstokenidFULL() {
		return rightstokenidFULL;
	}
	public void setRightstokenidFULL(String rightstokenidFULL) {
		this.rightstokenidFULL = rightstokenidFULL;
	}
	public String getUserid() {
		return Userid;
	}
	public void setUserid(String Userid) {
		this.Userid = Userid;
	}
	
	
		

}

]]></script></con:config></con:testStep><con:properties><con:property><con:name>accountList</con:name><con:value>urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>ActualStreamHandleIDList</con:name><con:value>urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884;urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98;</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPbxTMiFcMsUZiiUU1roBWjZ05eOcQS4JDaNnRD669cOkHJrD7s7wwxjRZY+SZ8lXXAU+Lbb4BxCQRjNJYFPuZtKa1oUUpchTrhLUQDcFdgdNHpd186bLtpe0XKdVk17xV6hAlZhrFvl4kR3zKqjj81SSS/jUsl0xlXHw7ZU5TyCDuUCUVHTbNMq6qb6DS3TdRzXdPJOsfCi5Z4h5NK2VMmb2gZUwmvaTIiFaxjL5TK/LORZODVs07SMn73uAM8gQFr9Yh1R6iisb/Rx3gMMvo/zmAXGhbGnc+Fxd0CmFIkohI0v7ytfpmFWDanjcTL9oWV3wevQCUuPTUQZJRj55AOp/PRAzJiXa/hTFhIxC74MwjKVYR0SrGPLoT80Yx/amYb2EIYc6XyGrI2tPkwgBIoh99Tv1LQf51UtvToMEeUTFgZ8//h7eIDG4LMFeDrfhrWBdr7BE5mqXwB2OxT7EScx3CmyLhAGvqkm4PNN5R5CmJCkS7gkaMIVOmMX3sFxnY0WmQIXf1KgneKsjTwjP4K6KFVvwkc+Hs/fjSIdJlcrL3b6PaMkiZkC2FVOBVlp18cDUmYkWt+47Ty1upWBiSpzPnq5vpn7nh0syX9Oe1H6Sbl/H9wYw4lXvh2X/dvO4+3jpGInk2hcuGRV/HwLI2/0tvpYLJq3vTKaFWcJMtt319f2w80/Eb0fk0mbBmh+3Uqsf9kNscJEXFn90cv90/TBikp38b0XtkfmY4t36Wz+di0q88vxsNTGUSUB3272evboWkQfzyie17JwdvDvy7ZvfhCN3wCL7VHRoNPKtWWVkPi+mSkJ8fRJquouVPPhAqjQ6uqW6h1uJNsd8VxZw/XZKhYdq9loW+bVpXVVbV6ZxYJZrlatttkwG+XGtsmsURxAbDI6IcqXarlr2nwPEAcuB+pBqMcskp2Oa99YbCGBch3al4+AUQ5DJtuzVSDMXq1Y1SZvkpxOvOSr+GP6oeXumLin92FjIiDcb8mFvZbcB0wWBFTfVrTmktdcyFS8ozgSvpWPUZ5CJDt7qJqsazuVosFJsPBBATUC5kU+5BezRZoYg6//bR1hnkr7V8P0sX0Z1uG3bQakjkeUAlexXIKsIhzNloJb3AZyFHDp5Azamm9EHlHvSqZThASvkex/+mSJokdGkVa3MXjYgs50f+Pua3Pwav2hge5fOO/+rXNZy+Obxjf5NA5LmTnyYrLjdrt0yPElG159S8R3ZOXf81EcRyn3HKdghNK8oUhgmLYxABxJ1q+GbA7UyKwYZ82/DPiB80y+DzESMzoQSEAg30ouPZ6x8AyAq4WnI994cu42tedSpk5AIk7Jmr5c1hTib/c57GKlJ8UP8m/JQu+zYids7fiRccp9RxA6VSc1+1Zf8AIzaZbIrs3CXeOnDJxyvi/MkpxhEZJQ40jA119yqh3XNIQxi6jotLRUsDsiUpxitQD3U+nITDqFsrWU/P9eqpOUAhjkMstJal9tF656AnS6M2Y2Tk9PGqf13aTZR1c/Eh9LdvJ0yPH6Lw==</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%253Adece%253Aaccountid%253Aorg%253Adece%253AEAF5550F8FC462E6E0401F0A059939D6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_10</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_11</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_12</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_13</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_14</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_15</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_16</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_17</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_19</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_20</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_21</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_22</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_23</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_24</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_25</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_26</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_27</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_28</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_29</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_30</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_31</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_32</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_33</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_35</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_36</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_37</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_38</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_39</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_40</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_9</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_10</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_11</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_12</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_13</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_14</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_15</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_16</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_17</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBCreatedBy_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_19</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_20</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_21</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_22</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_23</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_24</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_25</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_26</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_27</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_28</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_29</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_30</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_31</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_32</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_33</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_35</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_36</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_37</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_38</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_39</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_40</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value>2015/05/05 10:47:10</con:value></con:property><con:property><con:name>expectDBCreatedTime_10</con:name><con:value>2015/04/30 10:12:24</con:value></con:property><con:property><con:name>expectDBCreatedTime_11</con:name><con:value>2015/04/30 10:12:51</con:value></con:property><con:property><con:name>expectDBCreatedTime_12</con:name><con:value>2015/04/30 10:13:19</con:value></con:property><con:property><con:name>expectDBCreatedTime_13</con:name><con:value>2015/04/30 10:13:46</con:value></con:property><con:property><con:name>expectDBCreatedTime_14</con:name><con:value>2015/04/30 10:14:13</con:value></con:property><con:property><con:name>expectDBCreatedTime_15</con:name><con:value>2015/04/30 10:14:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_16</con:name><con:value>2015/04/30 10:15:11</con:value></con:property><con:property><con:name>expectDBCreatedTime_17</con:name><con:value>2012/11/21 07:50:08</con:value></con:property><con:property><con:name>expectDBCreatedTime_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_19</con:name><con:value>2012/11/02 17:45:50</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value>2015/05/05 10:48:17</con:value></con:property><con:property><con:name>expectDBCreatedTime_20</con:name><con:value>2012/11/02 17:46:22</con:value></con:property><con:property><con:name>expectDBCreatedTime_21</con:name><con:value>2012/11/02 17:46:56</con:value></con:property><con:property><con:name>expectDBCreatedTime_22</con:name><con:value>2012/11/02 17:47:29</con:value></con:property><con:property><con:name>expectDBCreatedTime_23</con:name><con:value>2012/11/02 17:48:01</con:value></con:property><con:property><con:name>expectDBCreatedTime_24</con:name><con:value>2012/11/02 17:48:38</con:value></con:property><con:property><con:name>expectDBCreatedTime_25</con:name><con:value>2012/11/02 17:49:10</con:value></con:property><con:property><con:name>expectDBCreatedTime_26</con:name><con:value>2012/11/02 17:49:45</con:value></con:property><con:property><con:name>expectDBCreatedTime_27</con:name><con:value>2012/11/02 17:50:21</con:value></con:property><con:property><con:name>expectDBCreatedTime_28</con:name><con:value>2012/11/02 17:50:55</con:value></con:property><con:property><con:name>expectDBCreatedTime_29</con:name><con:value>2012/11/02 17:51:31</con:value></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_30</con:name><con:value>2012/11/02 17:52:05</con:value></con:property><con:property><con:name>expectDBCreatedTime_31</con:name><con:value>2012/11/02 17:52:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_32</con:name><con:value>2012/11/02 17:53:02</con:value></con:property><con:property><con:name>expectDBCreatedTime_33</con:name><con:value>2012/11/02 17:53:23</con:value></con:property><con:property><con:name>expectDBCreatedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_35</con:name><con:value>2012/11/02 17:32:23</con:value></con:property><con:property><con:name>expectDBCreatedTime_36</con:name><con:value>2012/11/02 17:32:51</con:value></con:property><con:property><con:name>expectDBCreatedTime_37</con:name><con:value>2012/11/02 17:33:18</con:value></con:property><con:property><con:name>expectDBCreatedTime_38</con:name><con:value>2012/11/02 17:33:49</con:value></con:property><con:property><con:name>expectDBCreatedTime_39</con:name><con:value>2012/11/02 17:34:16</con:value></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_40</con:name><con:value>2012/11/02 17:34:45</con:value></con:property><con:property><con:name>expectDBCreatedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_5</con:name><con:value>2015/04/30 10:09:52</con:value></con:property><con:property><con:name>expectDBCreatedTime_6</con:name><con:value>2015/04/30 10:10:22</con:value></con:property><con:property><con:name>expectDBCreatedTime_7</con:name><con:value>2015/04/30 10:10:49</con:value></con:property><con:property><con:name>expectDBCreatedTime_8</con:name><con:value>2015/04/30 10:11:17</con:value></con:property><con:property><con:name>expectDBCreatedTime_9</con:name><con:value>2015/04/30 10:11:57</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value>2015/05/05 10:47:35</con:value></con:property><con:property><con:name>expectDBDeletedTime_10</con:name><con:value>2015/04/30 10:12:38</con:value></con:property><con:property><con:name>expectDBDeletedTime_11</con:name><con:value>2015/04/30 10:13:05</con:value></con:property><con:property><con:name>expectDBDeletedTime_12</con:name><con:value>2015/04/30 10:13:32</con:value></con:property><con:property><con:name>expectDBDeletedTime_13</con:name><con:value>2015/04/30 10:13:59</con:value></con:property><con:property><con:name>expectDBDeletedTime_14</con:name><con:value>2015/04/30 10:14:27</con:value></con:property><con:property><con:name>expectDBDeletedTime_15</con:name><con:value>2015/04/30 10:14:58</con:value></con:property><con:property><con:name>expectDBDeletedTime_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_19</con:name><con:value>2012/11/02 17:46:00</con:value></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_20</con:name><con:value>2012/11/02 17:46:33</con:value></con:property><con:property><con:name>expectDBDeletedTime_21</con:name><con:value>2012/11/02 17:47:05</con:value></con:property><con:property><con:name>expectDBDeletedTime_22</con:name><con:value>2012/11/02 17:47:39</con:value></con:property><con:property><con:name>expectDBDeletedTime_23</con:name><con:value>2012/11/02 17:48:14</con:value></con:property><con:property><con:name>expectDBDeletedTime_24</con:name><con:value>2012/11/02 17:48:48</con:value></con:property><con:property><con:name>expectDBDeletedTime_25</con:name><con:value>2012/11/02 17:49:20</con:value></con:property><con:property><con:name>expectDBDeletedTime_26</con:name><con:value>2012/11/02 17:49:58</con:value></con:property><con:property><con:name>expectDBDeletedTime_27</con:name><con:value>2012/11/02 17:50:32</con:value></con:property><con:property><con:name>expectDBDeletedTime_28</con:name><con:value>2012/11/02 17:51:05</con:value></con:property><con:property><con:name>expectDBDeletedTime_29</con:name><con:value>2012/11/02 17:51:41</con:value></con:property><con:property><con:name>expectDBDeletedTime_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_30</con:name><con:value>2012/11/02 17:52:15</con:value></con:property><con:property><con:name>expectDBDeletedTime_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_35</con:name><con:value>2012/11/02 17:32:34</con:value></con:property><con:property><con:name>expectDBDeletedTime_36</con:name><con:value>2012/11/02 17:33:02</con:value></con:property><con:property><con:name>expectDBDeletedTime_37</con:name><con:value>2012/11/02 17:33:31</con:value></con:property><con:property><con:name>expectDBDeletedTime_38</con:name><con:value>2012/11/02 17:34:00</con:value></con:property><con:property><con:name>expectDBDeletedTime_39</con:name><con:value>2012/11/02 17:34:29</con:value></con:property><con:property><con:name>expectDBDeletedTime_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_40</con:name><con:value>2012/11/02 17:34:56</con:value></con:property><con:property><con:name>expectDBDeletedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_5</con:name><con:value>2015/04/30 10:10:08</con:value></con:property><con:property><con:name>expectDBDeletedTime_6</con:name><con:value>2015/04/30 10:10:36</con:value></con:property><con:property><con:name>expectDBDeletedTime_7</con:name><con:value>2015/04/30 10:11:03</con:value></con:property><con:property><con:name>expectDBDeletedTime_8</con:name><con:value>2015/04/30 10:11:32</con:value></con:property><con:property><con:name>expectDBDeletedTime_9</con:name><con:value>2015/04/30 10:12:10</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_10</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_11</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_12</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_13</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_14</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_15</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_7</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_8</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_9</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>expectGenericRightsToken_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_10</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_11</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_12</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_13</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_14</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_15</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_16</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_17</con:name><con:value>urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectRequestingUser_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_19</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectRequestingUser_20</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_21</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_22</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_23</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_24</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_25</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_26</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_27</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_28</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_29</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_30</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_31</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_32</con:name><con:value>urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>expectRequestingUser_33</con:name><con:value>urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>expectRequestingUser_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_35</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_36</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_37</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_38</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_39</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_40</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectRequestingUser_9</con:name><con:value>urn:dece:userid:org:dece:14EF2D25D23A19EDE05307991F0A4BA6</con:value></con:property><con:property><con:name>expectStreamActiveCnt</con:name><con:value>0</con:value></con:property><con:property><con:name>expectStreamAvailCnt</con:name><con:value>12</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentEncoding</con:name><con:value>chunked</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79611</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rightstokenidFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases without MAC</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value>2</con:value></con:property><con:property><con:name>streamCreateCount</con:name><con:value>2</con:value></con:property><con:property><con:name>StreamDeleted</con:name><con:value>urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03;</con:value></con:property><con:property><con:name>streamFlagCreateDateOld</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate</con:name><con:value>false</con:value></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>streamhandleFULL_10</con:name><con:value>urn:dece:streamhandleid:org:dece:504435A9D0BF4189A6C292DCAD6D0FAD</con:value></con:property><con:property><con:name>streamhandleFULL_11</con:name><con:value>urn:dece:streamhandleid:org:dece:44C13BDE588444659733BE5A4C41D6D3</con:value></con:property><con:property><con:name>streamhandleFULL_12</con:name><con:value>urn:dece:streamhandleid:org:dece:9E25A29DDBD948508B3478C7610CA6D1</con:value></con:property><con:property><con:name>streamhandleFULL_13</con:name><con:value>urn:dece:streamhandleid:org:dece:5FEF94F4EAFF4BC18384FBA89F5BF3F4</con:value></con:property><con:property><con:name>streamhandleFULL_14</con:name><con:value>urn:dece:streamhandleid:org:dece:86FE554E211B42C1B013E066789175AA</con:value></con:property><con:property><con:name>streamhandleFULL_15</con:name><con:value>urn:dece:streamhandleid:org:dece:DBA5D25318644B5EA0C703384FE6D6A0</con:value></con:property><con:property><con:name>streamhandleFULL_16</con:name><con:value>urn:dece:streamhandleid:org:dece:E9576239081F4D7A8F7438EA2C6F48C3</con:value></con:property><con:property><con:name>streamhandleFULL_17</con:name><con:value>urn:dece:streamhandleid:org:dece:CEFD90E77819B152E0401F0A07995384</con:value></con:property><con:property><con:name>streamhandleFULL_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_19</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E2FD317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandleFULL_20</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E34D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_21</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E39D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_22</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E3ED317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_23</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FEF438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_24</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FF4438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_25</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FF9438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_26</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FFE438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_27</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234467FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_28</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C2344B7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_29</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234507FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_30</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234557FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_31</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C2345A7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_32</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87CE58313FD124E0401F0A05990DAA</con:value></con:property><con:property><con:name>streamhandleFULL_33</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87CF9B9FB89952E0401F0A079947F1</con:value></con:property><con:property><con:name>streamhandleFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_35</con:name><con:value>urn:dece:streamhandleid:org:dece:CD877D48FF2B0318E0401F0A079928C0</con:value></con:property><con:property><con:name>streamhandleFULL_36</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8AE0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_37</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8B30BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_38</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8B80BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_39</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8BD0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_40</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8C20BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value>urn:dece:streamhandleid:org:dece:5D1568C521EC4092B367EF34062C32DF</con:value></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value>urn:dece:streamhandleid:org:dece:09F8730EBEDD49D0B6703F43B63CA238</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value>urn:dece:streamhandleid:org:dece:CA2385434FEC47C1BC784713B6513B6E</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value>urn:dece:streamhandleid:org:dece:D5918794DE6A4F01AAB39CE58ADC34E0</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value>urn:dece:streamhandleid:org:dece:678AE1B8725241BB962E4BD14F9AFA38</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>streamhandle_10</con:name><con:value>504435A9D0BF4189A6C292DCAD6D0FAD</con:value></con:property><con:property><con:name>streamhandle_11</con:name><con:value>44C13BDE588444659733BE5A4C41D6D3</con:value></con:property><con:property><con:name>streamhandle_12</con:name><con:value>9E25A29DDBD948508B3478C7610CA6D1</con:value></con:property><con:property><con:name>streamhandle_13</con:name><con:value>5FEF94F4EAFF4BC18384FBA89F5BF3F4</con:value></con:property><con:property><con:name>streamhandle_14</con:name><con:value>86FE554E211B42C1B013E066789175AA</con:value></con:property><con:property><con:name>streamhandle_15</con:name><con:value>DBA5D25318644B5EA0C703384FE6D6A0</con:value></con:property><con:property><con:name>streamhandle_16</con:name><con:value>E9576239081F4D7A8F7438EA2C6F48C3</con:value></con:property><con:property><con:name>streamhandle_17</con:name><con:value>CEFD90E77819B152E0401F0A07995384</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>8EF34ECC1D454BF6AB39BBE9AD642884</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_5</con:name><con:value>5D1568C521EC4092B367EF34062C32DF</con:value></con:property><con:property><con:name>streamhandle_6</con:name><con:value>09F8730EBEDD49D0B6703F43B63CA238</con:value></con:property><con:property><con:name>streamhandle_7</con:name><con:value>CA2385434FEC47C1BC784713B6513B6E</con:value></con:property><con:property><con:name>streamhandle_8</con:name><con:value>D5918794DE6A4F01AAB39CE58ADC34E0</con:value></con:property><con:property><con:name>streamhandle_9</con:name><con:value>678AE1B8725241BB962E4BD14F9AFA38</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StreamList</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A#urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80!urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269!urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19095 - StreamListView - LLP - Stream view by dlpcs_ManageAccountConsentNotPresent_OneActiveStreamDLP_OneActiveStreamDLPCS - 200 OK - 2A,1D_FLAKY</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150505_041626</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<StreamList ActiveStreamCount="2" AvailableStreams="10" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884">
      <RequestingUserID>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</RightsTokenID>
      <TransactionID>1.0.1.3.S</TransactionID>
      <ExpirationDateTime>2015-05-05T16:48:09.807Z</ExpirationDateTime>
      <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
      <ResourceStatus>
         <Current CreationDate="2015-05-05T10:48:09.807Z" CreatedBy="urn:dece:org:org:dece:DLASP_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Current>
      </ResourceStatus>
   </Stream>
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98">
      <RequestingUserID>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</RightsTokenID>
      <TransactionID>1.0.1.3.S</TransactionID>
      <ExpirationDateTime>2015-05-05T16:47:44.040Z</ExpirationDateTime>
      <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
      <ResourceStatus>
         <Current CreationDate="2015-05-05T10:47:44.040Z" CreatedBy="urn:dece:org:org:dece:DLASP_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Current>
      </ResourceStatus>
   </Stream>
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03">
      <RequestingUserID>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</RightsTokenID>
      <TransactionID>1.0.1.3.S</TransactionID>
      <ExpirationDateTime>2015-05-05T16:47:05.410Z</ExpirationDateTime>
      <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
      <ResourceStatus>
         <Current CreationDate="2015-05-05T10:47:05.410Z" CreatedBy="urn:dece:org:org:dece:DLASP_CS_1" DeletionDate="2015-05-05T10:47:37.395Z" DeletedBy="urn:dece:org:org:dece:DLASP_CS_1">
            <Value>urn:dece:type:status:deleted</Value>
            <Description>deleted</Description>
         </Current>
         <History>
            <Prior ModificationDate="2015-05-05T10:47:37.423Z" ModifiedBy="urn:dece:org:org:dece:DLASP_CS_1">
               <Value>urn:dece:type:status:active</Value>
               <Description>active</Description>
            </Prior>
         </History>
      </ResourceStatus>
   </Stream>
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269">
      <RequestingUserID>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</RightsTokenID>
      <TransactionID>1.0.1.3.S</TransactionID>
      <ExpirationDateTime>2015-05-05T16:45:38.839Z</ExpirationDateTime>
      <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
      <ResourceStatus>
         <Current CreationDate="2015-05-05T10:45:38.839Z" CreatedBy="urn:dece:org:org:dece:DLASP_CS_1" DeletionDate="2015-05-05T10:46:30.320Z" DeletedBy="urn:dece:org:org:dece:LLASP">
            <Value>urn:dece:type:status:deleted</Value>
            <Description>deleted</Description>
         </Current>
         <History>
            <Prior ModificationDate="2015-05-05T10:46:30.337Z" ModifiedBy="urn:dece:org:org:dece:LLASP">
               <Value>urn:dece:type:status:active</Value>
               <Description>active</Description>
            </Prior>
         </History>
      </ResourceStatus>
   </Stream>
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80">
      <RequestingUserID>urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A</RightsTokenID>
      <TransactionID>1.0.1.3.S</TransactionID>
      <ExpirationDateTime>2015-05-05T16:45:08.062Z</ExpirationDateTime>
      <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
      <ResourceStatus>
         <Current CreationDate="2015-05-05T10:45:08.062Z" CreatedBy="urn:dece:org:org:dece:DLASP_CS_1" DeletionDate="2015-05-05T10:45:32.427Z" DeletedBy="urn:dece:org:org:dece:DLASP_CS_1">
            <Value>urn:dece:type:status:deleted</Value>
            <Description>deleted</Description>
         </Current>
         <History>
            <Prior ModificationDate="2015-05-05T10:45:32.442Z" ModifiedBy="urn:dece:org:org:dece:DLASP_CS_1">
               <Value>urn:dece:type:status:active</Value>
               <Description>active</Description>
            </Prior>
         </History>
      </ResourceStatus>
   </Stream>
</StreamList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate" searchProperties="true" id="58b5054c-8ba6-49d2-a9bc-20acd15edf3c" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bc6d611f-efb5-4f8e-b923-b8f21d17d8d5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("rtrnodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="2d1e453a-835e-4c17-966b-1410bbda6ed4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("cid",callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid",callTC.getPropertyValue("alid"));
/*
*  Mapping this call only to a retailer node.
*/
if (tC.getPropertyValue("nodeid") != "1912") {
	tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
}
if (tC.getPropertyValue("counter") == null) {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context" id="213b4b9c-734b-4672-8fdb-9c29ae460fdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d99dbfec-26f9-4256-88fa-002c2c77f0cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="3bf4762a-0335-4e37-a14a-430434bd79f3"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#Project#alid}" ContentID="${#Project#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                               
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
				<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">   
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">    
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc>

                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>urn:dece:accountid:org:dece:${#TestCase#assertionAccountId}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="6444f827-d051-40ff-8c1c-8e0dd04c7316"><con:settings/><con:config><script>import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def a = contentLocation.toURL();
def b = contentLocation;
def urlStr = b;

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*")
//contentLocation == urlStr;

//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
int lastColon = urlStr.lastIndexOf('%');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 3);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}
else
{
int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 1);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="2a3b6c3b-426b-4b73-93d6-5b9f80ac08d4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def count = tC.getPropertyValue("counter");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenid_" + count,tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));
callTC.setPropertyValue("rightstokenidFULL_" + count,tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF104E1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPbxTMiFcMsUZiiUU1roBWjZ05eOcQS4JDaNnRD669cOkHJrD7s7wwxjRZY+SZ8lXXAU+Lbb4BxCQRjNJYFPuZtKa1oUUpchTrhLUQDcFdgdNHpd186bLtpe0XKdVk17xV6hAlZhrFvl4kR3zKqjj81SSS/jUsl0xlXHw7ZU5TyCDuUCUVHTbNMq6qb6DS3TdRzXdPJOsfCi5Z4h5NK2VMmb2gZUwmvaTIiFaxjL5TK/LORZODVs07SMn73uAM8gQFr9Yh1R6iisb/Rx3gMMvo/zmAXGhbGnc+Fxd0CmFIkohI0v7ytfpmFWDanjcTL9oWV3wevQCUuPTUQZJRj55AOp/PRAzJiXa/hTFhIxC74MwjKVYR0SrGPLoT80Yx/amYb2EIYc6XyGrI2tPkwgBIoh99Tv1LQf51UtvToMEeUTFgZ8//h7eIDG4LMFeDrfhrWBdr7BE5mqXwB2OxT7EScx3CmyLhAGvqkm4PNN5R5CmJCkS7gkaMIVOmMX3sFxnY0WmQIXf1KgneKsjTwjP4K6KFVvwkc+Hs/fjSIdJlcrL3b6PaMkiZkC2FVOBVlp18cDUmYkWt+47Ty1upWBiSpzPnq5vpn7nh0syX9Oe1H6Sbl/H9wYw4lXvh2X/dvO4+3jpGInk2hcuGRV/HwLI2/0tvpYLJq3vTKaFWcJMtt319f2w80/Eb0fk0mbBmh+3Uqsf9kNscJEXFn90cv90/TBikp38b0XtkfmY4t36Wz+di0q88vxsNTGUSUB3272evboWkQfzyie17JwdvDvy7ZvfhCN3wCL7VHRoNPKtWWVkPi+mSkJ8fRJquouVPPhAqjQ6uqW6h1uJNsd8VxZw/XZKhYdq9loW+bVpXVVbV6ZxYJZrlatttkwG+XGtsmsURxAbDI6IcqXarlr2nwPEAcuB+pBqMcskp2Oa99YbCGBch3al4+AUQ5DJtuzVSDMXq1Y1SZvkpxOvOSr+GP6oeXumLin92FjIiDcb8mFvZbcB0wWBFTfVrTmktdcyFS8ozgSvpWPUZ5CJDt7qJqsazuVosFJsPBBATUC5kU+5BezRZoYg6//bR1hnkr7V8P0sX0Z1uG3bQakjkeUAlexXIKsIhzNloJb3AZyFHDp5Azamm9EHlHvSqZThASvkex/+mSJokdGkVa3MXjYgs50f+Pua3Pwav2hge5fOO/+rXNZy+Obxjf5NA5LmTnyYrLjdrt0yPElG159S8R3ZOXf81EcRyn3HKdghNK8oUhgmLYxABxJ1q+GbA7UyKwYZ82/DPiB80y+DzESMzoQSEAg30ouPZ6x8AyAq4WnI994cu42tedSpk5AIk7Jmr5c1hTib/c57GKlJ8UP8m/JQu+zYids7fiRccp9RxA6VSc1+1Zf8AIzaZbIrs3CXeOnDJxyvi/MkpxhEZJQ40jA119yqh3XNIQxi6jotLRUsDsiUpxitQD3U+nITDqFsrWU/P9eqpOUAhjkMstJal9tF656AnS6M2Y2Tk9PGqf13aTZR1c/Eh9LdvJ0yPH6Lw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases without MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19095 - StreamListView - LLP - Stream view by dlpcs_ManageAccountConsentNotPresent_OneActiveStreamDLP_OneActiveStreamDLPCS - 200 OK - 2A,1D_FLAKY</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150505_041626</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10EC1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>userrowid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>alid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>15541CAF10551E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>15541CAF10551E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79609</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="49650827-5596-4409-827a-913a14a634d4" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ee9bf7dd-1b9d-48b4-b709-e169c4e29862"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c1b34355-8111-400c-b191-30db565effe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="db195ef3-6ba5-48f5-b185-327dc4c867b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID = '$sh'""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="2224618c-796f-43b4-b5cc-304ffb113c59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="e2e32f22-914d-45d2-a976-ac24661c705a"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="914_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="af873c7f-45d4-419d-9c90-ac836a999341"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="71859508-99d5-4b61-8d25-0efa398cc456"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case	"USER_PRIVILEGE_ACCESS_RESTRICTED"
	     errId = "UserPrivilegeAccessRestricted";
		break;

}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="b304aadf-67a3-48d4-8e28-661eccee71b5"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		assert expectStatus == Value;

		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = null;
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			assert hrecvStatus == hexpectStatus;

			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" id="a44f48ac-ae05-418e-b093-c0c7bf8f08df" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" id="2e314026-35a8-49e4-bee2-7cbf222a4ac4" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours" id="2b8cd256-6d2c-47fe-942c-503aae16efa1"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6rKEn73V1iux1TCRVGxklQNFwkqKojXl1M4DBdFUAYE/fV7wGhMVlb22uchZabpy9fdH03PM7Z2AdsBGKM48aOwqkovNYu2G5B1+Mc2yzqPjSayHy3INh5thndaVqvBsiysVVWMU6SGOLHC5KXG0gzzSPOPdMtk6h2O6TCNpxbDrGrVGYox8UxUnuhaNd8FIe6UUV9qaRx2Igv7uBNaO4Q7CexMgDboEM2OdYVUe32+gCwDxq9ekuw7FAWfbARREMAnGO2oZ+qTzrONOxPfDa0kjdF7TBu/1N5tsyx7yupPUexSLE3TFM1TRMfGvvur9lq5GiNbDZ3ochatMAp9aAX+2SpAaSjxIrsKAjeK/cTb/cE1QzF04foR5fARMo3wV436CFCi+0tPn0DG2HrEnsVcnRnIQTEKIapODfWl9uuvGngxNWMrxE4U7/CX839DhMIjCqI9CYSviV3B/b3Hb6r1+oxgRw1hkGL/iIYFS/YWRLg6jpHj5wMfE+7ZuFp2v5rjK8EQ/C8deabucRLY1DeVkXwX4eT/add9qy5eZlaQolepZa9EFA/646Hsb/J5DCjs1I1NNti+lBDulS+gbp1+P3/l6Y1W70aG2j1ogI+msS9J3aa76Q353allPfSoTM7rjYHQ6Odis7lyFpM1m8JdLq9Hmjb2Hto8o2Vn77x2egnn6aqBKlOTaS7sdKU/tI7twZrmt5KapFtL2KVjmk1O4lydwJXn9VbytM7hhA8P+/Z6zGVLPoq5xcBqJ2c/o0DC0eMKx+Ntn15GcZs6bie83YX45SOn+xyKvProVCZZ/L/gaF6yEut2EItB4ZC3M0GvmqpK6VkUwWnigkwVgEv+NmAouNuDt/UVPqMFoOtdIIlCsJEHGtgqgJnKgqeJs5mWi2fQE9zhjBiaFRCsBM2QMylbSjNdf5Mzz7SV2WmtBOnqLA81gEtj0dNkQ55JhilrGoguslyT1kq+0SZapupLqUIcSHK+P9sKnyAl9yGrctqEY5cTLl0tZkTePQ12w+PalANN1BRxclAm6rou6XIPGMs5ZLspsT0PdvuospwKd0a9PdoA1M1oEhOcNXObaeaUHUqGVcrMzzJNVXqajjNRL7NSKnLWm03PH7UQBU20d3Ium2B8qQU0xe6QXi162JpzoWaATHJL476c2aMrEE2ns4p4qdVAzgzZmA67mqFmMihlkpwFeM0OvbXiHWFdz3sm2Nw3RtTleTckz0PjCE/coWIpXbDezRhYNzzoc761iDJ31c4kfdnrRyuVuBkCXRYEHRBANChSI/UXwECYcaO9z7M+GjjdaIe8uKIxUX97POd026+P3PFwzknOtjVW/HHdsj1KDSC7qW+BqiK7z3i6ZRtLypBC/9wc9acL5MfLczLkdKbpt7mKMU+nCykKWvbbYjntP+RLqJuj8WQ6H5/zfHjYtM9B8jYS3uJJT5Pc0RChMYYPFG11BbMtceLybUP45Bg04irA1QQAlI3ryj4hsPC2uZDwzdBkQl6giZkizkVlAhTlQVYFSdedrseMoTJLp8xQU2U7IGU6LRdGUFmJgkQ6RVvz1X7JdumVCezSmd6Qu64+5R56C7TSh4E5S0C2nzkhw9DKXn9ztMyFWsEAW80mAnmLhEqqgqk12vfovD9r0sxBt4PehAfTej5ht/nIc1enrbvakqYs716dpQmCmXnHMZVQbF7RTdnQQPvyvuWaOq0bAZk4+/UO5pJJelYaR6YgG12dnuaSBPoXGTYBm+PlWd5oolzaV0CuWYQWx/XCw8tw6I9MOSWkTe/oslmz9L9yrKBY5TPHDiLQwVeOyReOycA5PKhticFcU9zjeeYKinzQW7NBj9/T+mKwrQgPXcpN/KAxCtuZ2X+YM6es5W30+ZxXJU98CJ2lV18nAm2doY5625biG1spbDaCkzbQdG7qU8GJ3qBDhgeVocqEcj05dyk+Th+E3crfnc/1BjvdjSfpUZ1afcycvPVhzmeb8VuTomLlxJ1bq6PeXURwefmOfB2SN+FljFL3A/bTBL6uXpN0vUEwuR6L77AqVbvk42glP69xhcS3H51StbMvdkGcoDCpvRZWxQrXScmi59sd8uW8nHmh2eRYTgDdZotmOEGmGzTTpQHN8XyDFcF117ug+AJRjELHL2IVy+zlY/0zQLjrrJEVo7j2g6eiTlU1NMj2EYUYmdFL7X88XDNraDf4ZttCjTVjOXa9bvOQ4bl6y2m0Oc6CLbveatZr1WGUjMJRDJwExXe7cvvrrmwg6O99VCzU72sFTkhNDtYxTQL26Wg9hSglG3dcLL2dFk2zFPZ3+wAVyKldZKcBetp7+7JCFL78smT5w6WU5plGue78MdGvz641ITq2XyjgIhcBkX6ib5Z++prIbwmz314Oru5BavvFVkMKnMQ+vCD5/OiDLwVRPsjCMM0r5pvq35kW1fjdlPoBEfW1GLdI9tG/i3u9upBtnCxs5Y0Fk14erKfDU3o8ph/di4l7iqHIfxMEU7JRnsxoi0Lq5oL6m13+BvpL4Jv8M7w08cJJQgbBjjCtWh7//R73yZpUIEF58p1MDMjNrQj+4+UOdmChR8Rj8pNFsf1R+G983cUhkIsh5oducSqW8NPn/r6/IR0YEa8+mWNRfO/7O/vvYn8W3sp1g5IQWqzTBP35SbUYUOQ2DWGUhokq1UrB/dAsMSenPep8KP3mptyC3681+Z/usAy10AYT6KGdVbvp+v+u/OiXjYeIWGG/xPJSy8kFnQQP3bsh/Q7wD3Oa+2lOf87k9Tfx75K7mn5l9us/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">a0d4c2f9-822f-46ed-ac24-d19f7a74222c</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">873</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2011-09-09T20:14:39.086Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2011-09-10T20:14:39.086Z</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:AC8852DAF5E376A5E0401F0A079921B3</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LASP Dynamic Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AC8852DAF5EF76A5E0401F0A079921B3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AC8852DAF5EF76A5E0401F0A079921B3</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_18400 - StreamListListView - DLP - Policy - prohibitexplicitlyrics - US - Cannot view rightstoken when policy present</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pjgorg1full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:AC8852DAF5EF76A5E0401F0A079921B3" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:AC8852DAF5E376A5E0401F0A079921B3</RightsTokenID>
   <ExpirationDateTime>2011-09-10T20:14:39.086Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0914" CreationDate="2011-09-09T20:14:39.086Z">
         <Value>active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>AC8852DAF5F076A5E0401F0A079921B3</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>AC8852DAF5EF76A5E0401F0A079921B3</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>AC8852DAF5E376A5E0401F0A079921B3</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2011-09-10 20:14:39.86</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2011-09-09 20:14:39.86</CREATED_DATE>
      <CREATED_BY_NODE_OID>0914</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79612</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="56a35bc2-7909-4e3c-b305-3628ad007a44" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7c48591d-d3d6-447f-9e47-09bf9d976777"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("deletedCreateCount",null);
tC.setPropertyValue("userIndex",null);
tC.setPropertyValue("currentDBTOD",null);
tC.setPropertyValue("streamAccountActiveCount",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("deletedCreateCount",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="38808692-6ced-48ed-abfa-9160966a0f1b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("deletedCreateCount",callTC.getPropertyValue("deletedCreateCount"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("userIndex",callTC.getPropertyValue("userIndex"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamDelete") == null || tC.getPropertyValue("expectErrTypeStreamDelete") == "null") {
	tC.setPropertyValue("expectErrTypeStreamDelete", "SUCCESS");
}
if (tC.getPropertyValue("deletedCreateCount") == null || tC.getPropertyValue("deletedCreateCount") == "null") {
	tC.setPropertyValue("deletedCreateCount", "0");
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "null") {
	tC.setPropertyValue("streamAccountActiveCount", "0");
}
if (tC.getPropertyValue("userIndex") == null || tC.getPropertyValue("userIndex") == "null") {
	tC.setPropertyValue("userIndex", "0");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e4c24b84-ea1c-4f20-99f4-5e22368a5836"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Delete - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Capture Current DB sysdate()" id="b3bebde2-13ae-43b3-bc80-c8d7e165044d"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete - StreamDelete" id="34e55868-7ce9-432f-9354-f7d668729cb8"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete - StreamDelete" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="bcee0cb8-ed9e-4701-a5f1-811837657c41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Delete - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="c2f7f4f6-9f90-42e0-b55f-a832ead7e167"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Stream Deleted for Listview" id="8379645a-d20c-4d86-93a7-ef56b5e60b75"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def TpstreamDeleteList = context.expand( '${#Project#StreamDeleteList}' )
int StreamDeleteCount=Integer.parseInt(tP.getPropertyValue("StreamDeleteCount"));
def httpStatus = context.expand( '${#TestCase#httpStatus}' )
def streamDeleted = context.expand( '${#TestCase#StreamDeleted}' )
def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' )
int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info httpStatus
def StreamDeleted = context.expand( '${#TestCase#StreamDeleted}' )

if (httpStatus=="HTTP/1.1 200 OK" ) 
{     def streamhandleFULL = context.expand( '${#TestCase#streamhandleFULL}' )
                
            def accountListDLT = context.expand( '${#Project#accountListDLT}' )
               


                 if(accountListDLT==assertionAccountIdFULL && httpStatus=="HTTP/1.1 200 OK" && StreamCreateCount>0)
                 {
                    StreamDeleted= StreamDeleted+streamhandleFULL +";"
                    
                     TpstreamDeleteList=TpstreamDeleteList+streamhandleFULL +";"
                    tC.setPropertyValue("StreamDeleted",StreamDeleted);
                    tP.setPropertyValue("StreamDeleteList",TpstreamDeleteList);
                    
                    StreamCreateCount--;
  				log.info "StreamCreateCount if ; "+StreamCreateCount;
  				 tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  				 
  				 StreamDeleteCount++;
  				 log.info "StreamDeleteCount if  : "+StreamDeleteCount;
  				 tP.setPropertyValue("StreamDeleteCount", StreamDeleteCount.toString()); 

                      log.info "StreamDeleteList for if  : "+tP.getPropertyValue("StreamDeleteList");
  				

                 	}
                 	
                 else if(httpStatus=="HTTP/1.1 200 OK" && StreamCreateCount>0)
                 {   
                 	tP.setPropertyValue("accountListDLT",assertionAccountIdFULL);
                 	StreamDeleted=streamhandleFULL +";"
                  
                    tC.setPropertyValue("StreamDeleted",StreamDeleted);
                    
                       TpstreamDeleteList=streamhandleFULL +";"
                    tP.setPropertyValue("StreamDeleteList",TpstreamDeleteList);
                    
                    StreamCreateCount--;
  				log.info "StreamCreateCount for else if  : "+StreamCreateCount;
  				log.info "StreamDeleteList for else if  : "+tP.getPropertyValue("StreamDeleteList");
  				 tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  				  
  				 tP.setPropertyValue("StreamDeleteCount","1");
  				 
  			}
                 else
                 	{ log.info "else block Script issue"
                 		}

    }
//
//log.info "StreamDeleteList for Normal StreamDelete : "  tP.getPropertyValue("StreamDeleteList")]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="a4defbc4-a2ce-474e-95fe-fe2446881f8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;


this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;

	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;

	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if(errorRespType != "METHOD_NOT_ALLOWED"){

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;

		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} 
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return attributes to calling Test Case" id="88eb57a4-ff7e-4473-bae4-88aee7bfb1c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int deletedCreateCount = tC.getPropertyValue("deletedCreateCount").toInteger()++;
int userIndex = tC.getPropertyValue("userIndex").toInteger();
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();
String count = tC.getPropertyValue("counter").toString();

if (userIndex > 0) {
	userIndex--;
}
if (streamAccountActiveCount > 0) {
	streamAccountActiveCount--;
}

tC.setPropertyValue("expectDBDeletedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus_" + count,"deleted");
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("deletedCreateCount",deletedCreateCount.toString());
tC.setPropertyValue("expectDBStatus","deleted");

callTC.setPropertyValue("deletedCreateCount",tC.getPropertyValue("deletedCreateCount"));
callTC.setPropertyValue("streamAccountActiveCount",streamAccountActiveCount.toString());
callTC.setPropertyValue("userIndex",userIndex.toString());
callTC.setPropertyValue("expectDBStatus_" + count,tC.getPropertyValue("expectDBStatus_" + count));
callTC.setPropertyValue("expectDBStatus" + count,tC.getPropertyValue("expectDBStatus"));
callTC.setPropertyValue("expectDBDeletedBy_" + count,tC.getPropertyValue("expectDBDeletedBy_" + count));
callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
callTC.setPropertyValue("expectDBDeletedTime_" + count,tC.getPropertyValue("currentDBTOD"));
callTC.setPropertyValue("expectDBModifiedBy_" + count,tC.getPropertyValue("expectDBModifiedBy_" + count));
callTC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("expectDBModifiedBy"));</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPbxTMiFcMsUZiiUU1roBWjZ05eOcQS4JDaNnRD669cOkHJrD7s7wwxjRZY+SZ8lXXAU+Lbb4BxCQRjNJYFPuZtKa1oUUpchTrhLUQDcFdgdNHpd186bLtpe0XKdVk17xV6hAlZhrFvl4kR3zKqjj81SSS/jUsl0xlXHw7ZU5TyCDuUCUVHTbNMq6qb6DS3TdRzXdPJOsfCi5Z4h5NK2VMmb2gZUwmvaTIiFaxjL5TK/LORZODVs07SMn73uAM8gQFr9Yh1R6iisb/Rx3gMMvo/zmAXGhbGnc+Fxd0CmFIkohI0v7ytfpmFWDanjcTL9oWV3wevQCUuPTUQZJRj55AOp/PRAzJiXa/hTFhIxC74MwjKVYR0SrGPLoT80Yx/amYb2EIYc6XyGrI2tPkwgBIoh99Tv1LQf51UtvToMEeUTFgZ8//h7eIDG4LMFeDrfhrWBdr7BE5mqXwB2OxT7EScx3CmyLhAGvqkm4PNN5R5CmJCkS7gkaMIVOmMX3sFxnY0WmQIXf1KgneKsjTwjP4K6KFVvwkc+Hs/fjSIdJlcrL3b6PaMkiZkC2FVOBVlp18cDUmYkWt+47Ty1upWBiSpzPnq5vpn7nh0syX9Oe1H6Sbl/H9wYw4lXvh2X/dvO4+3jpGInk2hcuGRV/HwLI2/0tvpYLJq3vTKaFWcJMtt319f2w80/Eb0fk0mbBmh+3Uqsf9kNscJEXFn90cv90/TBikp38b0XtkfmY4t36Wz+di0q88vxsNTGUSUB3272evboWkQfzyie17JwdvDvy7ZvfhCN3wCL7VHRoNPKtWWVkPi+mSkJ8fRJquouVPPhAqjQ6uqW6h1uJNsd8VxZw/XZKhYdq9loW+bVpXVVbV6ZxYJZrlatttkwG+XGtsmsURxAbDI6IcqXarlr2nwPEAcuB+pBqMcskp2Oa99YbCGBch3al4+AUQ5DJtuzVSDMXq1Y1SZvkpxOvOSr+GP6oeXumLin92FjIiDcb8mFvZbcB0wWBFTfVrTmktdcyFS8ozgSvpWPUZ5CJDt7qJqsazuVosFJsPBBATUC5kU+5BezRZoYg6//bR1hnkr7V8P0sX0Z1uG3bQakjkeUAlexXIKsIhzNloJb3AZyFHDp5Azamm9EHlHvSqZThASvkex/+mSJokdGkVa3MXjYgs50f+Pua3Pwav2hge5fOO/+rXNZy+Obxjf5NA5LmTnyYrLjdrt0yPElG159S8R3ZOXf81EcRyn3HKdghNK8oUhgmLYxABxJ1q+GbA7UyKwYZ82/DPiB80y+DzESMzoQSEAg30ouPZ6x8AyAq4WnI994cu42tedSpk5AIk7Jmr5c1hTib/c57GKlJ8UP8m/JQu+zYids7fiRccp9RxA6VSc1+1Zf8AIzaZbIrs3CXeOnDJxyvi/MkpxhEZJQ40jA119yqh3XNIQxi6jotLRUsDsiUpxitQD3U+nITDqFsrWU/P9eqpOUAhjkMstJal9tF656AnS6M2Y2Tk9PGqf13aTZR1c/Eh9LdvJ0yPH6Lw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/05/05 10:47:35</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LASP Linked Test Cases without MAC</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03</con:value></con:property><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_19095 - StreamListView - LLP - Stream view by dlpcs_ManageAccountConsentNotPresent_OneActiveStreamDLP_OneActiveStreamDLPCS - 200 OK - 2A,1D_FLAKY</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150505_041626</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79613</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADBD14C92C6289A31E0401F0A07995885</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15541CAF10EB1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_3</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_4</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_5</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_6</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_7</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_8</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_9</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_10</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_11</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_12</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_13</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_14</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_15</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>accountListDLT</con:name><con:value>urn:dece:accountid:org:dece:14EE5CCF51F65117E05307991F0A296C</con:value></con:property><con:property><con:name>StreamDeleted</con:name><con:value>urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03;</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8379645a-d20c-4d86-93a7-ef56b5e60b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5be18e57-993a-430b-ae63-bb435c7212c6" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="98e68832-12b9-405e-baae-4dc32386ead3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("expectDBModifiedBy",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="769f8f8b-ada8-472f-be45-768f1cff4103"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("expectDBModifiedBy",callTC.getPropertyValue("expectDBModifiedBy"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") != "1") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 

if (tC.getPropertyValue("expectErrTypeStreamRenew") == null || tC.getPropertyValue("expectErrTypeStreamRenew") == "null") {
	tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="87478b16-699c-4c0c-b884-6b1ed1ff68a8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ab938c57-8081-44ea-ac18-f8cc71cf013b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="6d0fb112-6bb9-4d49-a76d-b4af3975d1dd"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="0910_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULL}">              
<RequestingUserID>${#TestCase#assertionUserIdFULL}</RequestingUserID>       
<RightsTokenID>${#TestCase#rightstokenidFULL}</RightsTokenID>   
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>     
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Capture Current DB sysdate()" id="b2d6c12a-2668-49f3-a4ad-9fae441798b8"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d322150d-181a-40eb-8450-82d9412a9aa7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="db3197ef-099d-4e33-8bb3-4e0be242047d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="cad5b386-dc06-4479-bcb5-04c442bf7c96" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;


switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == tC.getPropertyValue("streamhandleFULL");
		//RequestingUserID
		if (tC.getPropertyValue("expectDBCreatedByNodeType") == "llpcs" || tC.getPropertyValue("expectDBCreatedByNodeType") == "dlpcs") {
			log.info "RequestingUserID - expectDBCreatedByNodeType[" + tC.getPropertyValue("expectDBCreatedByNodeType") + "] asserting element not present";
			assert myXML.RequestingUserID.size() == 0;
			assert RequestingUserID == "";
		} else {
			log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
			assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
		}
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBUpdatedBy") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("expectDBUpdatedBy");

		/*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBModifiedBy");

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}

			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Verify the response headers and body" id="a14c7969-723f-44a9-b7f3-6581b08593eb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;


switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			//assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == tC.getPropertyValue("streamhandleFULL");
		//RequestingUserID
		if (tC.getPropertyValue("expectDBCreatedByNodeType") == "llpcs" || tC.getPropertyValue("expectDBCreatedByNodeType") == "dlpcs") {
			log.info "RequestingUserID - expectDBCreatedByNodeType[" + tC.getPropertyValue("expectDBCreatedByNodeType") + "] asserting element not present";
			assert myXML.RequestingUserID.size() == 0;
			assert RequestingUserID == "";
		} else {
			log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
			assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
		}
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBUpdatedBy") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("expectDBUpdatedBy");

		/*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

//		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + tC.getPropertyValue("expectDBModifiedBy");
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
//			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
//				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}

			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
//			assert hrecvDescription == hexpectDescription;
		}
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Assert different between returned Create/Expire time less than 24 hours" disabled="true" id="a1d91a87-7933-411c-adb6-8e8f72d61840"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();

//if(tC.getPropertyValue("expectErrTypeStreamRenew") != "USER_PRIVILEGE_ACCESS_RESTRICTED"){
def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

try {
	
	log.info "recvCdate[$recvCdate]";
	log.info "recvEdate[$recvEdate]";
	
	cDate = formatDate(recvCdate);
	eDate = formatDate(recvEdate);

	def a = new generalUtils.generalUtils(log);
	def j = a.dateDiff(cDate,eDate);
	
	log.info "cDate[$cDate]";
	log.info "eDate[$eDate]";
	log.info "j[$j]";
}
catch (Throwable e) {
	log.info "Matcher Failure: " + e;
}
finally {
	/*
	*  Assert the difference between Creation Time and Expire Time
	*  is less than 24 hours.
	*/
	assert j &lt;= streamMaxCreateExpireTimeDiffhours;
}

//}
/*
try {
	log.info "recvCdate[$recvCdate]";
	log.info "recvEdate[$recvEdate]";
	Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
	Matcher cdateMatcher = datePattern.matcher(recvCdate);
	if (cdateMatcher.find()) {
		cDate = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
			cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
			cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
		log.info "cDate[$cDate]";
	} 
	Matcher edateMatcher = datePattern.matcher(recvEdate);
	if (edateMatcher.find()) {
		cDate = edateMatcher.group(1) + "/" + edateMatcher.group(2) + "/" +
			edateMatcher.group(3) + " " + edateMatcher.group(4) + ":" +
			edateMatcher.group(5) + ":" + edateMatcher.group(6);
		log.info "eDate[$eDate]";
	} 
}
catch (Throwable e) {
	log.info "Matcher Failure: " + e;
}
log.info "cDate[$cDate]";

public class DateMatcher
{
  public DateMatcher()
  {
    String aDate = "date: 12-15-2003";
    Pattern datePattern = Pattern.compile("date: (\\d{2})-(\\d{2})-(\\d{4})");
    Matcher dateMatcher = datePattern.matcher(aDate);
    if (dateMatcher.find())
    {
      System.out.println("Month is: " + dateMatcher.group(1));
      System.out.println("Day is:   " + dateMatcher.group(2));
      System.out.println("Year is:  " + dateMatcher.group(3));
    }
  }

  public static void main(String[] args)
  {
    new DateMatcher();
  }
}
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Return attributes to calling Test Case" id="8eeed0e7-b82d-4b37-a3a1-0e4efb0d1007"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String count = tC.getPropertyValue("counter").toString();


tC.setPropertyValue("expectDBUpdatedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));

callTC.setPropertyValue("expectDBUpdatedBy_" + count,tC.getPropertyValue("expectDBUpdatedBy_" + count));
callTC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("expectDBUpdatedBy"));
callTC.setPropertyValue("expectDBUpdatedTime_" + count,tC.getPropertyValue("currentDBTOD"));
callTC.setPropertyValue("expectDBUpdatedTime",tC.getPropertyValue("currentDBTOD"));
callTC.setPropertyValue("expectDBRenewedBy",tC.getPropertyValue("expectDBRenewedBy"));
callTC.setPropertyValue("expectDBRenewedBy_" + count,tC.getPropertyValue("expectDBRenewedBy_" + count));
callTC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("expectDBModifiedBy"));
callTC.setPropertyValue("expectDBModifiedBy_" + count,tC.getPropertyValue("expectDBModifiedBy_" + count));</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="9d57525e-1078-4d69-b2a6-fbe6dde7d711"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:928598774344423CA166DC385BE9F460" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:14EFFED3B3B351E8E05307991F0A4FB0</RightsTokenID>
   <ExpirationDateTime>2015-04-30T19:33:44.714Z</ExpirationDateTime>
   <SubDividedGeolocation Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current ModificationDate="2015-04-30T11:00:45.326Z" ModifiedBy="urn:dece:org:org:dece:LLASP_2" CreationDate="2015-04-30T11:00:16.768Z" CreatedBy="urn:dece:org:org:dece:LLASP_2">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150430_040848</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_16720 - StreamListView - LLP - API invocation after two StreamRenew invocations by Full User - 200 OK_FLAKY</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LASP Linked Test Cases</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14EFFED3B3B351E8E05307991F0A4FB0</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-04-30T18:26:54.067Z</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-04-30T10:53:42.709Z</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1144</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBRenewedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currentDBTOD</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/30 11:00:50</con:value></con:property><con:property><con:name>counter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79614</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3A928598774344423CA166DC385BE9F460</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/LLASP_2_concat.pem</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>LLASP_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a14c7969-723f-44a9-b7f3-6581b08593eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e54bb187-d10a-4732-b36e-a3effd842511" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9875426b-1248-4194-be01-553abecc95cf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="09242be7-830c-49af-9161-ad4ab02b96ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="ada66c0f-ba61-43e5-9f23-9d523a95626f"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:chvrs:e":   
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

      case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="1eec3827-8124-4609-a4a5-2c540369905d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate User" id="c5f6daec-0a10-4a77-a554-178f6fe37482"><con:settings/><con:config service="Policy Create" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate User" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="0d4c5505-0945-499e-915e-7efd3c54e4f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate User');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="de7f1214-f4ae-4bb8-828f-b52a989d0f00"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:status:active</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EL73V3TqpVPa8mXbAWaQogdFVIrH93hzJiQBIm1Sm5QPf/1JCkVA9MVzZphhst3sPrv7ZHdrHERh0WtyjhNBGNU6fl3/PYRutWpbVaMEsWWUq6Oq4SDXMpzSqOwUHWeIUFnXOpynuEO5AFTU9aJllw3Lkb+BZXlF17OdQtV2n3XtJ064NC1VCpauLaKQci9zW9fThHoMcMI9CiLMPQG9oHnb9aSmB3JMeqO2Qpk5TBoTIWLPNGEBYYjDEBYgi8yauaNTQ9wLyJgCkSZ47RPxur6+O5/PC/NSgSVjs2hZlmm5ptRBnIxP9cZJfhmjDh2x1bkFKKMEgpC8AQXqFosJQ1ozHLOEiEn0iWnbtC1l2sALaEC7TE91891Bhu5ISzsgEw4MPgF2bqyPRzjBFGLtsd+p66fHVXB1d5AAykcsifje+XuQMJ3hkMUYGTyPLEd3vMUD6WrUMPQ6FIYpJzPcUzSJAcRcu0/wiCy6hEvyIa5l5dcWXP5IzjIMv1OWmrmNVUI3D2THJ2PMxd/UbLteKys/QZjiRuC6v64feiPnunrXH7jPbDktV6dsPpvAegZhW3kFalPu9XmfrBturS9dLGAqwP3bGJ0NuuPuZPnw9qNyA81lGTnT+19z9/EMLd2eBV9CdjFFvl92z5ZxPzzjl+30cdirxLc//IfO61XAhieIXM4EqwyawegxYLB3PXgpt5wnOLx7CpPn6Kl3Hsf+9Xn1th9UUYLBdL6w+tO76DGdul3n7epmGE5Er13yr9rpycV86Cdtwa6DZwZuYnhFm/X3mLZj2BXmLSFIhy8Yivyo6NHxtUtZLyC+bi9KQpAxylS9WPUoLjAVekPdUq3FS2UDIsiTxVydJW9Kl457YZdadqVZLrWtSqnku67dtpoVv9XOe9AKxR7EFqMjonypLrviz9cAYeRxTBFOjBlL4QRz/QuLPhBA69C+fByMcjxgsovbs2GCX6bxYjx3pksLTNwXztHwBelaj4k7epc0RwInu627tNO6+xiSmGDV3xXBuWQ4FzIXr2CWitAuzECB4lROgEQ1Ya9YdiomJ1EcYoXUjBhKQ1yIJ3GWGZOv/osGgDyT9tuD7OF9Gtf+tzwFUgcRpcBVLBdYlhEfmEFWHsiHgCsHZ1Vuvpkiot6XzKdICFwh2f30ThPFjw1H/G4zuM9Bb3S/cfd3K/ht/6WB7j847/6rc1nLjzfNL/Jp7pdy4wjNyJbbfA+Qo002vkZOxFdQeC2ks1maUe/cskpmIs2bsrfbZoBhKjvzcsCmmJobE+ZRg3GDes/zRr6LLxUTGgggcCQfipYdj9iKAszVVtSRL3xx7Mq141LmTeCFOCRrhXJ5Uoi/3K+gB5WeFN/LvzlL0Hu5Dtja8iPjlKuQIHSsTmoELj8hBWTSLJE9myXbxg8ZOOR8V7hJ8gaLkGwapgJ//kVTzbiuAwhZSkXH1zPB9oDIcIpljL13pQ9msiG03ioW/NOt4r/bbiBbdQT0jS75f2WDZHSBWFfLS4alri/kkiyd0/HWQFoDPDCTWq1z35Uz6WJ7JhXd0vkmgTuRND6IP0q2crr/Hhp/AA==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0013F89CC7D95A4BE0533D991E0A2937</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UserDataUsageConsent</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;dece:Resource>urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE&lt;/dece:Resource></con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://lp3.qa-web-vip2-s02.uvvu.com:7003/rest/1/11/Account/urn:dece:accountid:org:dece:0013F89CC7D95A4BE0533D991E0A2937/User/urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE/Policy/urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79615</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE072E24F73ADE4DBE0401F0A05994C9A</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE072E24F73AFE4DBE0401F0A05994C9A</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0013F89CC7D95A4BE0533D991E0A2937</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0c15a666-29c6-4163-a822-0c7b4681128b" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2f8d5184-e608-4b80-b335-7cef60358c78"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="537143df-1ab0-4e74-b21e-4e0d26ff0785"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="7393635d-f284-4bcf-90ee-6cb38091fa39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet User" id="9ab22016-726f-4781-94d8-8323337aaab4"><con:settings/><con:config service="Policy Get" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet User" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#TestCase#assertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="321ccd17-34c2-4723-9f86-592dfc0b8450"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet User');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="347d4915-0cba-41b6-b64f-0431f291674f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
		
if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
}



tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="8494f027-494b-4523-9bbf-012185059566"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZdU+o8EL73V3TqpVPa8mXbAWaQogdFVIrH93hzJiQBIm1Sm5QPf/1JCkVA9MVzZphhst3sPrv7ZHdrHERh0WtyjhNBGNU6fl3/PYRutWpbVaMEsWWUq6Oq4SDXMpzSqOwUHWeIUFnXOpynuEO5AFTU9aJllw3Lkb+BZXlF17OdQtV2n3XtJ064NC1VCpauLaKQci9zW9fThHoMcMI9CiLMPQG9oHnb9aSmB3JMeqO2Qpk5TBoTIWLPNGEBYYjDEBYgi8yauaNTQ9wLyJgCkSZ47RPxur6+O5/PC/NSgSVjs2hZlmm5ptRBnIxP9cZJfhmjDh2x1bkFKKMEgpC8AQXqFosJQ1ozHLOEiEn0iWnbtC1l2sALaEC7TE91891Bhu5ISzsgEw4MPgF2bqyPRzjBFGLtsd+p66fHVXB1d5AAykcsifje+XuQMJ3hkMUYGTyPLEd3vMUD6WrUMPQ6FIYpJzPcUzSJAcRcu0/wiCy6hEvyIa5l5dcWXP5IzjIMv1OWmrmNVUI3D2THJ2PMxd/UbLteKys/QZjiRuC6v64feiPnunrXH7jPbDktV6dsPpvAegZhW3kFalPu9XmfrBturS9dLGAqwP3bGJ0NuuPuZPnw9qNyA81lGTnT+19z9/EMLd2eBV9CdjFFvl92z5ZxPzzjl+30cdirxLc//IfO61XAhieIXM4EqwyawegxYLB3PXgpt5wnOLx7CpPn6Kl3Hsf+9Xn1th9UUYLBdL6w+tO76DGdul3n7epmGE5Er13yr9rpycV86Cdtwa6DZwZuYnhFm/X3mLZj2BXmLSFIhy8Yivyo6NHxtUtZLyC+bi9KQpAxylS9WPUoLjAVekPdUq3FS2UDIsiTxVydJW9Kl457YZdadqVZLrWtSqnku67dtpoVv9XOe9AKxR7EFqMjonypLrviz9cAYeRxTBFOjBlL4QRz/QuLPhBA69C+fByMcjxgsovbs2GCX6bxYjx3pksLTNwXztHwBelaj4k7epc0RwInu627tNO6+xiSmGDV3xXBuWQ4FzIXr2CWitAuzECB4lROgEQ1Ya9YdiomJ1EcYoXUjBhKQ1yIJ3GWGZOv/osGgDyT9tuD7OF9Gtf+tzwFUgcRpcBVLBdYlhEfmEFWHsiHgCsHZ1Vuvpkiot6XzKdICFwh2f30ThPFjw1H/G4zuM9Bb3S/cfd3K/ht/6WB7j847/6rc1nLjzfNL/Jp7pdy4wjNyJbbfA+Qo002vkZOxFdQeC2ks1maUe/cskpmIs2bsrfbZoBhKjvzcsCmmJobE+ZRg3GDes/zRr6LLxUTGgggcCQfipYdj9iKAszVVtSRL3xx7Mq141LmTeCFOCRrhXJ5Uoi/3K+gB5WeFN/LvzlL0Hu5Dtja8iPjlKuQIHSsTmoELj8hBWTSLJE9myXbxg8ZOOR8V7hJ8gaLkGwapgJ//kVTzbiuAwhZSkXH1zPB9oDIcIpljL13pQ9msiG03ioW/NOt4r/bbiBbdQT0jS75f2WDZHSBWFfLS4alri/kkiyd0/HWQFoDPDCTWq1z35Uz6WJ7JhXd0vkmgTuRND6IP0q2crr/Hhp/AA==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0013F89CC7D95A4BE0533D991E0A2937</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>804</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://chdecqavap4.nc.neustar.com:8009/rest/1/11/Account/urn:dece:accountid:org:dece:0013F89CC7D95A4BE0533D991E0A2937/User/urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE/Policy/urn:dece:type:policy:UserDataUsageConsent</OriginalRequest>
      <ErrorLink>http://error.decellc.org/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79616</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>00140D7D14AB7B47E0533E991E0A9061</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE072E24F73ADE4DBE0401F0A05994C9A</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE072E24F73AFE4DBE0401F0A05994C9A</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0013F89CC7D95A4BE0533D991E0A2937</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="662db75c-dac1-4808-8dd8-bdaa92b08399" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0eb2eb6a-6bef-4b52-a3c0-d3d27b45d014"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9e9c4b55-e0ff-421c-9874-139438b5748b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="a14fc38d-7cc5-4a6a-8519-8b6821fcc5e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete for User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete for User" id="cbf8dca2-b39c-485a-bc77-f948d3783e98"><con:settings/><con:config service="Policy Delete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete for User" mediaType="application/xml" sslKeystore="dececs_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="bd56efce-3bf6-43b6-814e-569e846f0e2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete for User');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="c284a255-6463-4262-a225-4d4acfe74fad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="49b26494-79ce-4b9e-9e9a-82c7925ec6f2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">40</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdpc6rMEv7ur7B8P1qGRRSxklQNAoqKK65fbuEwLMomw6a//g4mepKcnHPz3ipLnaan++mFnmeeseF7bBdgjOLEDYOqKr3U/tOCjNVi+VajQ1tMg+MssyGYdLtBc60m7FgML9DNWlXFOEVqgBMjSF5qLM00GzTfoBmdYbqtTpduPzGd1r5WXaMYE9NE5YmuVQvfC3D35vallsZBNzSwi7uB4SPcTWB3CbRxl2h2jTum2uvzG8qbw/jVSZKoS1HwyUQQeR58gqFPPVOfdJ5N3F26dmAkaYzefZr4pfa+N8/zp7z5FMY2xdI0TdECRXRM7Nr/1F4r983IVAMrfFv3jCAMXGh47tUoQWkocUKzCjw7jN3E8f9gmqEYujTdQAVsQIYL/qlRvxzc0P3Q0ieQMTYa2DGYu7EFslCMAoiqq4X6UvvnZxV826vHRoCtMPbxl/W/g4SCDHlhhMwGvkd2R/dzi9+k6/UZwa4aQC/FboYmZZtEBkS4OouR5RZjF5PmM3H1Vv5qge8dhuC/Kckz9REngU19kxnJtRFO/p96fazVm5W14aXodT5GZy698h0csUohMvLUVm1p4kwL9eUG4aPyG6hHqd/XXxv10Vfvm/y+dhi1pgm90yxEZwp29PWw7dZd/7Lh/X6+SHZLNRPRZBse6fGxXxQL5zDN1UFw5VpsIuoTQ2Bbg1Nn5UiVReCdde2ATzs7nmXwuLsiJIzqgTNOO2ndGGx2xxYzuwBuYkhNuLHChYrchFnVXbazXZpZno3r/omq63JnVVGu0zzfTXSxdRiLrcIhqX35FdPHGMq4RuhyC7L8v23RgmQkxmPRKyeFRV7PBL1qqtqrS70eQD0b5KoIbFUcX8FEtE9n5+T2hZwWwXylAAlctAXIJXsnrefzkZyb67W3X6uKImoLLh+AnVQhDyS5WEv77ZA2Nvtoxyr0fimK5nYRHprDyByc8oEDJ5qu5RNdvWhHuZjoMr25yeyCrK/aUWOm+qpZ2RxFQVvIuZTfPEpy7kz2m0W0Wwk5vMpzDXB9wKzknqMNdH/NwObCgUd5rIHTTS46Wm+91gpZB7OKaE/WJDa9p+wj6JvRwfecD8YHxLhu9teXQ99L91f5qPXkfm957i/VQ1Oay0Ow2K0Om/XJ2ChZBQ4m4HD36LZcYxvm9r6TS/PdcBTuVSeDEzCXRXEOSLpooKn9IQj7ItA44BbX3lFshz1Tyakhiyt1weu3txf3vMVGn/YMptNhduNNe3ZuS3JQ34/Sw9HRnK0yrY9IT6yERLjucFbP2obLwCKy5lt5kIwKazBfVg4zqdjCQd20h5R3FZRY44cgvl4cT7MXyaY9xZeDa1kbcTvlPN7ytOYisjwruuC6Hs5PMd0WUZOldpdslFSArYkA9I+rozjXxE6ZVFPN5ztNNIAiJym4HtlkxK7Pw0HmwV0ThMVoMz2e3gtjSrksUvlcJm0lVzoSMMsiDJYrWTmClWjbsWjLijiHEpjv1FG+I/laDYjy1zwqtzzasgjk5h60hUGluaKFZJosOQ5cAnEVKIKjnYuN2fZp/ozk8XIScbmGJ1aw34QnzXfjVZwuV6PRZFwc9LR/OpJZZdHLUdbcV+TsFAF3MtKdkxRKxiza7ZKoHsAYJmrka2pxne7xseMefHpYbzHijJYgz678Q77qG/J+FNtLZjRYBLMmL1Rwal0Gfv3YyTd1fdmOeLMXWNLlQu3jNR2CUBEWrbNZsOzJWeXjdm4NwelgsJPCE8SLII/2OswX89Fm6ddblVY2Hvv0Vae4STTNl/2ck+fzetMU9YGOo9jdpR27iKeBye6MpJ3t6XXbjbyTwKYnnYuaa9snxZplZsRrs8qc28K9b/MRHFILKgMyb43V/uVwNa6RP4VvA/TrdHgI3+YH9XGyfBo9d9KxJN2KYHJflgeQKlUVcioYyd8JTClxzYZ1U+1GJQvCCQqS2mu5qyQv3ZRQHNfskiPjbS3TPCvRvEI+ggB6nExzNKPQgOYFoSnyrTvLeUPxBWIvDCy39FXyuLdT6u8Aod/FKDBR3MjCFDoI1/5iscxXVQ0W5PgNA4z0kPBEuakIbV7gmqADWpwo8522xDI8x/V4pcN32Fp1EibTYBoDK0HxZ47IfeKICwTdyEUlkSxPU0yOU5yQlJyNLE085ikzngKUEqoZl2yvy3KdFoVdP/JQCZjyQzP10FPkRLcEUfjtl20YEN+kZXYhvh30f4zw67N7MoiO6ZYKuAxHRKSg6De+y3db91h+i5n7lhffzYPUdMvznGQ2iV34huTzo18NU3bKo1tuXxDfYT+0vwo+Waa+BvVwZmYufLT940ZACCWhHK/3qpyNp/NTmmXprQ58SadiYp5iKLpNLRFMCSe66OEJBdTDBPUjOvpA/cXzQ/4ZX5o4wTIhr7RPuqZ6W/7gLrJEuLyLqKTri59edD65JHlLUJF8J+t55MpSIv7rrQZ2YalHxDPyk4ex+atc39j64IfEWc4wN7DLVUk+L39oDBgSsy6ZY2H80fh3Br5z/ln4SPIDS0K66ZAm6M9PquWAeqkZEIZpkKhS7Sb4ODRvOJNLhLq/lH4zc6N/73y+wH/k81ttvCTjyzdqD133fys33Fu7QER2YfeG5aVWkKspcR7YH4b0O8Dv57Sk/G1Of47k9Tfx75IPOf36Prz+Fw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E072D07F07DF9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E072D07F07F99AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79617</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:E075DAD98C281310E0401F0A0799477E</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE072D07F07DF9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE072D07F07F99AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE075DAD98C281310E0401F0A0799477E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="638b9d79-7f3d-4f0d-9c9b-48c750f0b668" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2e3e2aaa-92cc-40a0-81f6-8448671be93f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="f49dd496-0ab3-415a-ac22-3416396fdf3a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="8b0e4224-04ba-4c54-a49e-5d9abb3aa4a9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:X"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9e8edf7b-19c2-4017-a782-1d475e29534b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account" id="8a72545c-64f7-44de-8125-7a001d334334"><con:settings/><con:config service="Policy Create" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_2_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="c0a74e36-bcb6-4ad5-9388-ebd2898033ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="778264ab-d089-4eac-adf9-6ec1219346ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:status:active</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP_2</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;dece:Resource>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5&lt;/dece:Resource></con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/2015/02/Account/urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79618</con:value></con:property><con:property><con:name>V2</con:name><con:value>06</con:value></con:property><con:property><con:name>V1</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE072D07F07DF9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/LLASP_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d497d5ec-b6fb-4d74-86a8-2ddaf55fa864</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e8edf7b-19c2-4017-a782-1d475e29534b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8a72545c-64f7-44de-8125-7a001d334334</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8a6d1903-74d1-4b69-ad2a-688544fe1e1c" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="df9005b6-3744-4531-95e2-f097e5524eea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8a41df3c-05b5-4c01-bd3a-0c4fd5eba2ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d01448d3-7196-4baf-964a-db019d97398c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet Account" id="74af2312-275b-452b-8110-eab8152074f1"><con:settings/><con:config service="Policy Get" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet Account" mediaType="application/xml" sslKeystore="LLASP_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8f288833-0fd9-47eb-af2b-c6966a2f177c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="73a44495-c259-467e-aebb-2e4338a70e11"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="16db2d55-d238-408f-962e-c4754d0389e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

//if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap2.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">765</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79619</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE072D07F07DF9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/LLASP_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="86b16e03-40c4-4ba3-b759-b2b11b211bd1" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ee060553-a5fd-46ee-a832-8b4fdd98f980"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="02bdb2ca-8d3a-4f16-89a6-ed5fd3edd5a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

//def assertionUserIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionUserIdFULL"),"UTF-8");
//tC.setPropertyValue("assertionUserIdFULLEncoded",assertionUserIdFULLEncoded)

def policyClassEncoded = URLEncoder.encode(tC.getPropertyValue("policyClass"),"UTF-8");
tC.setPropertyValue("policyClassEncoded",policyClassEncoded)
if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d63a11b0-8daf-49e3-bbdb-07013a0b8a86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyDelete" id="098c72da-d8d1-4b16-843d-196c2268e3bc"><con:settings/><con:config service="Policy Delete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyDelete" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="f5479f50-5c24-4513-b348-c45664b6cd86"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="5cf1ff23-5798-45b7-adac-8557bea97acd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="42481049-1971-416c-9464-87899899288e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyClass</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79620</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>098c72da-d8d1-4b16-843d-196c2268e3bc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamListView1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="830a72ee-a601-478c-a051-d3c117f46372" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c450e010-26e6-4d08-a347-ca3beb317083"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamListView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectStreamActiveCnt",null);
tC.setPropertyValue("httpContentEncoding",null);
tC.setPropertyValue("streamAccountActiveCount",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("streamFlagCreateDateOld",null);
tC.setPropertyValue("streamFlagIgnoreCreatedDate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="124d3b28-2f8e-4961-a21b-09aa87016cd3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int counter;
String sh;
String rt;
String shCreatedBy;
String shValue;
String shExpireDate;
String nickname;
String expectGenericRightsToken;
String expectRequestingUser;
String expectDBDeletedTime;
String expectDBCreatedTime;
String streamFlagCreateDateOld;
String streamFlagIgnoreCreatedDate;
String streamFlagIgnoreDeletedDate;
String expectDBCreatedByNodeType;

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamListView",callTC.getPropertyValue("expectErrTypeStreamListView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("expectStreamAvailCnt",callTC.getPropertyValue("expectStreamAvailCnt"));
tC.setPropertyValue("expectStreamActiveCnt",callTC.getPropertyValue("expectStreamActiveCnt"));
tC.setPropertyValue("expectRequestingUser",callTC.getPropertyValue("expectRequestingUser"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("streamFlagCreateDateOld",callTC.getPropertyValue("streamFlagCreateDateOld"));
tC.setPropertyValue("streamFlagIgnoreCreatedDate",callTC.getPropertyValue("streamFlagIgnoreCreatedDate"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

if (tC.getPropertyValue("expectErrTypeStreamListView") == null || tC.getPropertyValue("expectErrTypeStreamListView") == "") {
	tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("expectStreamAvailCnt") == null || tC.getPropertyValue("expectStreamAvailCnt") == "") {
	tC.setPropertyValue("expectStreamAvailCnt",tP.getPropertyValue("streamlimit"))
}
if (tC.getPropertyValue("expectStreamActiveCnt") == null || tC.getPropertyValue("expectStreamActiveCnt") == "") {
	tC.setPropertyValue("expectStreamActiveCnt","0")
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "") {
	tC.setPropertyValue("streamAccountActiveCount","0")
}
if (tC.getPropertyValue("streamFlagIgnoreCreatedDate") == null || tC.getPropertyValue("streamFlagIgnoreCreatedDate") == "") {
	tC.setPropertyValue("streamFlagIgnoreCreatedDate","false")
}

if (tC.getPropertyValue("counter") == null ||
    tC.getPropertyValue("counter") == "") {
    		tC.setPropertyValue("counter","1");
    }
    
counter = tC.getPropertyValue("counter").toInteger();

for (int i = 0; i &lt;= counter; i++) {
	
	sh           = "streamhandleFULL_"  + (i + 1);
	rt           = "rightstokenidFULL_"   + (i + 1);
	shCreatedBy  = "expectDBCreatedBy_" + (i + 1);
	shDeletedBy  = "expectDBDeletedBy_" + (i + 1);
	shValue      = "expectDBStatus_"    + (i + 1);
	nickname     = "expectNickname_"    + (i + 1);
	expectRequestingUser = "expectRequestingUser_" + (i + 1);
	expectGenericRightsToken = "expectGenericRightsToken_" + (i + 1);
	expectDBDeletedTime = "expectDBDeletedTime_" + (i + 1);
	expectDBCreatedTime = "expectDBCreatedTime_" + (i + 1);
	streamFlagCreateDateOld = "streamFlagCreateDateOld_" + (i + 1);
	streamFlagIgnoreCreatedDate = "streamFlagIgnoreCreatedDate_" + (i + 1);
	streamFlagIgnoreDeletedDate = "streamFlagIgnoreDeletedDate_" + (i + 1);
	expectDBCreatedByNodeType = "expectDBCreatedByNodeType_" + (i + 1);
		
	tC.setPropertyValue(sh,callTC.getPropertyValue(sh));
	tC.setPropertyValue(rt,callTC.getPropertyValue(rt));
	tC.setPropertyValue(shValue,callTC.getPropertyValue(shValue));
	tC.setPropertyValue(shCreatedBy,callTC.getPropertyValue(shCreatedBy));
	tC.setPropertyValue(shDeletedBy,callTC.getPropertyValue(shDeletedBy));
	tC.setPropertyValue(nickname,callTC.getPropertyValue(nickname));
	tC.setPropertyValue(expectGenericRightsToken,callTC.getPropertyValue(expectGenericRightsToken));
	tC.setPropertyValue(expectRequestingUser,callTC.getPropertyValue(expectRequestingUser));
	tC.setPropertyValue(expectDBDeletedTime,callTC.getPropertyValue(expectDBDeletedTime));
	tC.setPropertyValue(expectDBCreatedTime,callTC.getPropertyValue(expectDBCreatedTime));
	tC.setPropertyValue(streamFlagCreateDateOld,callTC.getPropertyValue(streamFlagCreateDateOld));
	tC.setPropertyValue(streamFlagIgnoreCreatedDate,callTC.getPropertyValue(streamFlagIgnoreCreatedDate));
	tC.setPropertyValue(streamFlagIgnoreDeletedDate,callTC.getPropertyValue(streamFlagIgnoreDeletedDate));
	tC.setPropertyValue(expectDBCreatedByNodeType,callTC.getPropertyValue(expectDBCreatedByNodeType));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="fcf2a5b2-a9fe-4ec3-940a-d20575eaaf98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamListView" id="e57c5c43-4633-4c64-8a22-f155beda83be"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" methodName="HEAD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamListView" mediaType="application/xml" sslKeystore="5490_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="36f184d1-ef4f-4dc9-bd70-083f6acf9580"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('GET - StreamListView');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="6c4ed5d6-f583-41a5-b6e6-57f687655006"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamListView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamListView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamListView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="838b6c0d-a325-4e91-ab17-4db3f39f5cfe"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//------------------------------------------------------//
def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
//------------------------------------------------------//
def getHistoryRecords(sh) {
	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();
	
	log.info "---------IN getHistoryRecords sh[$sh]";
	
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	int lastColon = sh.lastIndexOf(':');
	String hsh = sh.substring(lastColon +1,sh.length());
	String hresults = null;
	String hsql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh') 
	  order by STATUS
	  """;

	  log.info "hsql is $hsql";

	hresults = a.SelectFromDB(hsql,tP.getPropertyValue("targetSystem").toString());
	log.info hresults;

	/*
	*  If zero length, no need to continue;
	*/
	assert hresults.length() > 0;

	try {
		def hmyXML = new XmlSlurper().parseText(hresults);
		log.info "hmyXML.ResultSet.Row.size() is [" + hmyXML.ResultSet.Row.size() + "]";
		assert hmyXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", hresults);
	}
}
//------------------------------------------------------//


def a = new generalUtils.generalUtils(log);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnerror");
def urnGenericRightsToken = tP.getPropertyValue("urnGenericRightsToken");
def streamMaxDisplayCount = tP.getPropertyValue("streamMaxDisplayCount");
def streamlimit  = tP.getPropertyValue("streamlimit");
def acct  = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def counter = tC.getPropertyValue("counter").toInteger();
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamListView");
def XMLbody = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus = tC.getPropertyValue("expectDBStatus");
def expectRT = tC.getPropertyValue("rightstokenidFULL");
def expectSH = tC.getPropertyValue("streamhandleFULL");
def expectNickname = tC.getPropertyValue("expectNickname");
def expectStreamActiveCnt = tC.getPropertyValue("streamAccountActiveCount");
def expectStreamAvailCnt = streamlimit.toInteger() - expectStreamActiveCnt.toInteger();
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String errorHost   = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String availStreamsCnt = "";
String major = tP.getPropertyValue("V1").toString();
String minor = tP.getPropertyValue("V2").toString();
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectDescription = "";
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean XMLbodynull     = false;
boolean doValidations   = true;
int displayStreamCount = 0;
int xmlIndex = 0;
int g = 0;
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();


/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/
if (tP.getPropertyValue("targetURL").length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = "https://qa.q.uvvu.com:" + tP.getPropertyValue("targetPort");
}

switch (errorRespType) {
	case "SUCCESS_NO_STREAMS":
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;
	case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
                                errorReason = "node_status_inactive";
                                errorLink = "$errorHost/deceerrors/error/error_response.html";
break;


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorRespType[$errorRespType]";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

/*
* Content-Length
*/
String httpContentEncoding = tC.getPropertyValue("httpContentEncoding");
String contentLength = tC.getPropertyValue("httpContentLength");
log.info "httpContentEncoding[$httpContentEncoding]";
log.info "contentLength[$contentLength]";
if (httpContentEncoding == "null" || httpContentEncoding == null) {
	log.info "Asserting contentLength.length() > 0";
	assert contentLength.toInteger() > 0;
} else {
	log.info "Asserting httpContentEncoding is chunked";
	assert tC.getPropertyValue("httpContentEncoding") == "chunked";
}

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
this.log.info "HTTP Content-Type:  Expect: $expectHTTPcontenttype - Received: " + tC.getPropertyValue("httpContentType");
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" && errorRespType != "SUCCESS_NO_STREAMS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
		
	} else if (errorRespType == "SUCCESS_NO_STREAMS") {
		log.info "--------------SUCCESS NO STREAMS---------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit") + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		if (tC.getPropertyValue("streamFlagCreateDateOld") != "true") {
			log.info "Assert ActiveStreamCount == 0 -- streamFlagCreateDateOld[" + tC.getPropertyValue("streamFlagCreateDateOld") + "]";
			assert activeStreamCnt.toInteger() == 0;
			log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger();
		} else {
			log.info "ActiveStreamCount[$activeStreamCnt] == expectStreamActiveCnt[$expectStreamActiveCnt]";
			assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
			log.info "ActiveStreamCount[$availStreamsCnt] == " + streamlimit.toInteger() - activeStreamCnt.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger() - activeStreamCnt.toInteger();
		}
		
		log.info "Assert NO <Stream> Rows Present";
		assert myXML.Stream.size() == myXML.Stream.size();
		log.info "Assert NO <Stream>.<ResourceStatus> Rows Present";
		assert myXML.Stream.ResourceStatus.size() == 0;
		log.info "Assert NO <Stream>.<RightsTokenID> Rows Present";
		assert myXML.Stream.RightsTokenID.size() == 0;
		log.info "Assert NO <Stream>.<ExpirationDateTime> Rows Present";
		assert myXML.Stream.ExpirationDateTime.size() == 0;
			
		/*  AvailableStreams */
		log.info "availStreamsCnt[$availStreamsCnt] - expectStreamAvailCnt[$expectStreamAvailCnt]";
		assert availStreamsCnt.toInteger() == expectStreamAvailCnt.toInteger();

		/* ActiveStreamCount */
		log.info "activeStreamCnt[$activeStreamCnt] - expectStreamActiveCnt[$expectStreamActiveCnt]";
		assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
	} else {
		log.info "--------------STREAM DATA VERIFICATION-----------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		this.log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit")  + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		log.info "Assert ActiveStreamCount == $streamAccountActiveCount";
		assert activeStreamCnt.toInteger() == streamAccountActiveCount;
		log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() - streamAccountActiveCount + "]";
		assert availStreamsCnt.toInteger() == streamlimit.toInteger() - streamAccountActiveCount;
				
		/*
		*  Due to stream ordering we must work backwards from the 
		*  total number of streams created.  The newest created
		*  stream will be the first in the list.
		*/
		g = counter;

		log.info "g[$g] - counter[$counter]";

		/*
		*  By design, we never return more than 30 streams.   
		*  
		*/
		this.log.info "Recv Stream Count [" + myXML.Stream.size() + "] lessThan [$streamMaxDisplayCount]";;
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		while (g != 0) {
			String expectValue = tC.getPropertyValue("expectDBStatus_" + g);
			String expectcb = urnnode + tC.getPropertyValue("expectDBCreatedBy_" + g);
			String expectdb = urnnode + tC.getPropertyValue("expectDBDeletedBy_" + g);
			String expectsh = tC.getPropertyValue("streamhandleFULL_" + g);
			String expectNick = tC.getPropertyValue("expectNickname_" + g);
			String expectrt  = tC.getPropertyValue("rightstokenFULL_" + g);
			String expectGeneric = tC.getPropertyValue("expectGenericRightsToken_" + g);
			String expectRequestingUser = tC.getPropertyValue("expectRequestingUser_" + g);
			String expectCDate = tC.getPropertyValue("expectDBCreatedTime_" + g);
			String expectDDate = tC.getPropertyValue("expectDBDeletedTime_" + g);
			String streamFlagIgnoreCreatedDate = tC.getPropertyValue("streamFlagIgnoreCreatedDate_" + g);
			String streamFlagIgnoreDeletedDate = tC.getPropertyValue("streamFlagIgnoreDeletedDate_" + g);
			String expectDBCreatedByNodeType = tC.getPropertyValue("expectDBCreatedByNodeType_" + g);
			String baseRightsToken = tC.getPropertyValue("rightstokenidFULL");

			log.info "g[$g]";

			getHistoryRecords(expectsh);

			/* ---------HACKIE SMACKIE 
			*  The requestinguser displayed in streamview is NOT the 
			*  requestinguser supplied during streamcreation.  It is the 
			*  userid associated with security context (saml) which
			*  invoked the request.  Thus, all requestingusers in all
			*  streams displayed will be the same.  We will override
			*  that NOW!  LLP and LLPCS do not display the requestinguser
			*  element.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "llpcs") {
				expectRequestingUser = "";
			} else {
				expectRequestingUser = tC.getPropertyValue("assertionUserIdFULL");
			}
						
			/*
			*  if the nodetype is 'dlp' or 'llp' streams in 'deleted' status
			*   are not displayed.  Thus, we must adjust accordingly.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp") {
				if (	expectValue == "active") {
					doValidations = true;
				} else {
					doValidations = false;
				}
			} else {
				doValidations = true;
			}

			/*
			*  Special processing is required for nickname just
			*  incase it contains special xml characters.
			*/
			if (expectNick != null) {
				if (expectNick.length() > 0) {
					expectNick = expectNick.replace('&amp;','&');
					expectNick = expectNick.replace('&lt;','<');
					expectNick = expectNick.replace('&gt;','>');
					expectNick = expectNick.replace('&apos;','\'');
				}
			}

			/*
			*  There maybe one or more rightstokens created by the test
			*  case.  Thus multiple streams maybe have the same 
			*  rights token.  We will assume that if we get a null
			*  rightstokenFULL_count value that only one rightstoken
			*  was created for the test and that will be contained 
			*  in rightstokenfull.
			*/
			if (expectrt == null) {
				log.info "RIGHTSTOKENFULL - Override to the baseRightsToken value [$baseRightsToken]";
				expectrt = baseRightsToken;
			}
			log.info "g[$g] - doValidations [$doValidations] - nodetype[" + tC.getPropertyValue("nodetype") + "] - expectValue[$expectValue]";
			
			if (doValidations) {
				displayStreamCount++;

				/*  StreamHandleID */
				String recvsh = myXML.Stream[xmlIndex].@StreamHandleID.text();
				log.info "xmlIndex[$xmlIndex] - StreamHandleID - recvsh[$recvsh] - expect[$expectsh]";
				assert recvsh == expectsh;

				//StreamClientNickname
				if (expectNick != null) {
					String recvnick = myXML.Stream[xmlIndex].StreamClientNickname;
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - recv[$recvnick] - expect[$expectNick]";
					assert expectNick == recvnick;
				} else {
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - Element NOT present";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
				}
				
				// RequestingUserID
				String recvru = myXML.Stream[xmlIndex].RequestingUserID;
				log.info "xmlIndex[$xmlIndex] - RequestingUserID - recv[$recvru] - expect[$expectRequestingUser] - expectDBCreatedByNodeType[$expectDBCreatedByNodeType]";
				assert recvru == expectRequestingUser;
		
				// RightsTokenID
				String recvrt = myXML.Stream[xmlIndex].RightsTokenID.text();
				if (expectGeneric == "true") {
					expectrt = urnGenericRightsToken;
				}
				log.info "xmlIndex[$xmlIndex] - RightsTokenID - recvrt[$recvrt] - expectrt[$expectrt] - expectGeneric[$expectGeneric]";
				assert recvrt == expectrt;
				
				//ExpirationDateTime
				String recvet = myXML.Stream[xmlIndex].ExpirationDateTime;
				log.info "xmlIndex[$xmlIndex] - ExpirationDateTime - is NOT null";
				assert recvet.length() > 0;

				//CreatedBy
				String recvcb   = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreatedBy.text();
				log.info "xmlIndex[$xmlIndex] - CreatedBy - recvcb[$recvcb] - expectcb[$expectcb]";
				assert recvcb == expectcb;

				//CreationDate
				if (streamFlagIgnoreCreatedDate != "true") {
					log.info "xmlIndex[$xmlIndex] - CreationDate - is NOT null";
					String recvDate = "";
					String recvcd = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreationDate.text();
					recvDate = formatDate(recvcd);
					def j = a.dateDiff(recvDate,expectCDate,"seconds");
					log.info "xmlIndex[$xmlIndex] - CreationDate - recvDate[$recvDate] - expectCDate[$expectCDate] DIFF [$j]";
					assert recvcd.length() > 0;
					log.info "xmlIndex[$xmlIndex] - CreationDate - Differences less that 10 seconds";
					assert j <= 10;
				} else {
					log.info "xmlIndex[$xmlIndex] - CreationDate - IGNORED DUE TO streamFlagIgnoreCreatedDate" ;
				}

				//Value
				String recvValue = myXML.Stream[xmlIndex].ResourceStatus.Current.Value;
				log.info "xmlIndex[$xmlIndex] - Value - recvValue[$recvValue] - expectValue[$expectValue]";
				if (expectValue == "active") {
					assert recvValue == "urn:dece:type:status:active";
				} else {
					assert recvValue == "urn:dece:type:status:deleted";
				}

				//Description
				switch (expectValue) {
					case "active":
						expectDescription = "active";
						break;
					default:
						expectDescription = "deleted";
						break;
				}
				String recvDesc = myXML.Stream[xmlIndex].ResourceStatus.Current.Description;
				log.info "xmlIndex[$xmlIndex] - Description - recvDesc[$recvDesc] - expectDesc[$expectDescription]";
				assert recvDesc == expectDescription;

				/*  Nickname validation */
				if (expectNick == null || expectNick == "") {
					log.info "Asserting no <StreamClientNickname> element exists";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
					assert myXML.Stream[xmlIndex].StreamClientNickname.text() == "";
				} else {
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 1;
					String recvNick = myXML.Stream[xmlIndex].StreamClientNickname.text();
					log.info "xmlIndex[$xmlIndex] - recvNick[$recvNick] - expectNick[$expectNick]";
					assert recvNick == expectNick;
				}
									
				/*
				*  If the stream is deleted....
				*/
				log.info "DeletedBy length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length();
				log.info "DeletionDate length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length();
				
				if (	expectValue == "deleted") {
					String recvDeletedBy = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString();
					String recvDeletionDate = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString();
					
					//DeletedBy
					this.log.info "recvDeletedBy[$recvDeletedBy] - expectdb[$expectdb]";
					assert recvDeletedBy == expectdb;
					
					//DeletionDate
					if (streamFlagIgnoreDeletedDate != "true") {
						String recvDate = formatDate(recvDeletionDate);
						def j = a.dateDiff(expectDDate,recvDate,"seconds");
						log.info "xmlIndex[$xmlIndex] - DeletionDate - recvDate[$recvDate] - expectDDate[$expectDDate] DIFF [$j]";
						assert recvDate.length() > 0;
						log.info "xmlIndex[$xmlIndex] - DeletionDate - Difference less that 10 seconds";
						assert j <= 10;
					} else {
						log.info "xmlIndex[$xmlIndex] - DeletionDate - IGNORED DUE TO streamFlagIgnoreDeletedDate" ;
					}
				} else {
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length()    == 0;
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length() == 0;
				}
				/*
				*
				*  History validation
				*
				*/
				def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

				int rCnt = myHistoryXML.ResultSet.Row.size();

				log.info "-------------HISTORY-----------------";
				log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
				if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
					rCnt -= 1;
				} 
				assert myXML.Stream[xmlIndex].ResourceStatus.History.Prior.size() == rCnt;
		
				for (int i = 0; i < rCnt; i++) {
					String hrecvModifiedBy = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModifiedBy.text();
					String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
					log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
					assert hrecvModifiedBy == hexpectModifiedBy;

					String hrecvStatus = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Value;
					String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
					log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
					if (hexpectStatus == "active") {
						assert hrecvStatus == "urn:dece:type:status:active";
					} else {
						assert hrecvStatus == "urn:dece:type:status:deleted";
					}
					
					String hrecvDescription = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Description;
					switch (hexpectStatus) {
						case "active": hexpectDescription = "active"; break;
						case "deleted": hexpectDescription = "deleted"; break;
						default: hexpectDescription = "deleted"; break;
					}
					log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
					assert hrecvDescription == hexpectDescription;
	
					String hrecvModificationDate = formatDate(myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModificationDate.text());
					int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
					String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
					log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
					assert hrecvModificationDate.replace("/","-") == hexpectModificationDate;
					
				}
			
				xmlIndex++;
			}

			/*
			*  By design, we never return more than 30 streams.   So
			*  if we encounter our 30th stream we will break out of 
			*  the XML validation routines and allow size() 
			*  invocations on the xml body to verify no additional
			*  streams were returned.
			*/
			if (displayStreamCount == streamMaxDisplayCount.toInteger()) {
				break;
			}
			
			g--;
		}

		log.info "--------------------FINAL XML size() Validations -------------------";
		log.info "ResourceStatus size: "  + myXML.Stream.ResourceStatus.size();
		log.info "ResourceStatus.Current size: " + myXML.Stream.ResourceStatus.Current.size();
		log.info "ResourceStatus.Value size: " + myXML.Stream.ResourceStatus.Current.Value.size();
		log.info "ResourceStatus.Description size: " + myXML.Stream.ResourceStatus.Current.Description.size();
		log.info "RightsTokenID size: "  + myXML.Stream.RightsTokenID.size();
		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();

		log.info "Stream.size() LTE MAX allowed of " + streamMaxDisplayCount.toInteger();
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		log.info "Stream.size() IS -- recv[" + myXML.Stream.size() + "] Expect[$displayStreamCount]";
		assert myXML.Stream.size() == displayStreamCount;
		
		assert myXML.Stream.ResourceStatus.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Value.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Description.size() == displayStreamCount;
		assert myXML.Stream.RightsTokenID.size()  == displayStreamCount;
		assert myXML.Stream.ExpirationDateTime.size() == displayStreamCount;
	}
} 

]]></script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_59089 - StreamListView - DECE - Stream list view using HEAD method</con:value></con:property><con:property><con:name>sName</con:name><con:value>DECE Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5490</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dece</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DBD14DB9B2A29C3EE0401F0A079958C7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DBD14DB9B28D9C3EE0401F0A079958C7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:DBD14DB9B28D9C3EE0401F0A079958C7</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_bbaac656-7767-48a9-a553-d3cc543a5aed</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVdZk6LKEn73VxjOo2GziVtMd0SxiooK4vpyA4sSUARkEfTXnwJb2+7pmTPnPnTYleTyZeZHkvUzNo8e3QNxjKLEDfyqIrzW/rfdmiZssa1Gu91qN5ods9swWZZpWAyEbJMxWRNZtaoSxylS/Dgx/eS1RpMU3SDbDaprUFSPJnt086XZbW5q1QWKYuwaq7yQtWp+9Py4V4Z9raWR3wvM2I17vnlEcS+BvRlQRz2s2TPvmGpvP28oy4DRm5MkYY8g4IuFIPI8+AKDI/GT+KTz04p7M9f2zSSN0HtMK36tvdtmWfaSMS9BZBM0SZIE2SWwjhW79o/aW+VujCzF3wW3M2/6ge9C03OvZgFKRYkTWFXg2UHkJs7xN64pgiIL1w2Uwwakmv6PGvERoET3l54+gYxisxE7JnV3pqMdipAPUXWuK6+1H3/XwZutEZl+vAuiY/zl/N8gIf+MvCBEViO+Z3ZH9/cevynX208Ee4oPvTR2z2hc0CQ0IYqr0wjt3Hzkxph8Vlwt21/N4zvDEPwvLflJPOPEsIlvKiO4NoqT/6dfz726eVmYXorejmEQEPud5C244WAC2f0+XJ4CZaYftNcSwrPyDdSj1e/nr0R98OrdaOIIgbUktsZ0HQY0gtNFvs82QtjMwd7dSMNJZ99ehcw6ic7MtK4u+z4j9y+U4fRRvNwsTsOJq2yOC2Cd1FYFDQaiJ1B65hNsu77wbUqkcp9w/WNIwO5cVg/JuDMeELlKB/GaIQbAOmzs/ljZwGAYXML0vHHlFmSHrpdX9pzsjlvqqM6Zy+R4cC6w8/qR03MORV5DdCmTLP5fsWRXMBPzceCLSbHDr2eC3lRFEdIrz4PLzAaZwgEb/+3BmLMPJ+fgyt2M5ICmSUDgOW8vjlRwkAE1FzlH5RcLNeevYMDZ4wU2NCrA23CqLmZCthYWmtYXM8ew5MVlK3vp5iqOVRCXxryjirq4EHRDVFUQ3GS5KmzlfK/O1EzR1kIFOxDEPLxacjdBcu5CWmHVGUuvZ2y6WS2wXLqMjuPz1hA9lVdlfnaSZ8qWETRxAPT1EtJSim2vI0ybynrOPRkNQrQHSMpIHBNcVeOQqcacHgu6WcqMzzJVkQeqFme8VmYlV8RssJhfP2rBcypvHcVcNMD0Vgto8NKY3KwGsblkfVUHmWCXxkMxsyZ3IKpGZhX+VquRmOmiPh9Lqq5kIihlgph58ZYeO1vZOUNGywcG2D83htfEpeTj575+hhf2VDFlCWyPCwoyugNd1jVXQWZvOpmgrQfDYKNgN2OgiRynAQyIBEVquP4cGHELdhK6XdpFo50UHJETVVQqGB7O15zsuMzEno6XrLA7tKeyO2VMyyEUD9J75gAUBVlDytFMS18TuuC719ZkOF8hN1pfkzGrUS23w1b0ZTpfCYHXtvqr9XxYz9dQMybT2Xw5veb5+LTvXL2kP+H60WygCvZkjNA0hnWCNCXO6Agsv+7vMZ92OonYCrBVDgB5b9uiiwnM9fc3EvZ1VcTkBSqfyfySl2dAluuiwgmatpMcagrlRTqnxqoiWh4u02W90r3KhucE3CnSXG7CNS2RGwNYpTOtKUq2NmfrgxXaaGPPWCQgCxc7n6JIOdT6OzWzoVowwFKyGYffIq6SKmBuTsIBmQ8XLZI6aZY3mHXBnMln9CGfOPbmcrA3B9yU9dOrszaAtzCeOKZgii0rmiHqKujc3rdcVeaM7sFjHm6PMBcM3LPSODA4UZc0cp4LAhjeZLEB6DxeX8W9youlfQXkqolpcd6unHjtj92JIaaYtOkTXfZbmvxXjhUUq3zm2IkHGvjKMfHGMRHsTnWlI1Ax2+LDeJnZnCyetPZiNOiGpLYaHSpcXSLsxPWaE7+TGcP6krpkbWevLZddRXD4ur9bO8w24UjzCjU0OLRlVz8IfqvpXdSRqrFzl/Au5B6dsnhUGSuULzLJVSK6UVrnjhv3eL0yTXp+nM7SszI3hzF1cbanZTfbT/stgojkC3ttb86atArg+vYd+TokH8LbGCWeB+ynCXzfvWbpdo9gcj8W32FFqEr442gmf97jColrNXalai8slsE4QX5Seyusih2ul+JNz7V6+Mt5O4NOl6EkUmgxvNRpCYxINkl8BmS7223RfPO+7N1QfIHIB/7OLWIV6+ztY/1ngPDY2yIzQlHtD56KOlUVX8fbR+DHyAheayxLk5IotltAktotsUN1OZ5km3ybpFpNtsPUquMgmfiTCOwSFH1syDT5dUPWEXRDFxVr9PsuESe4ECfznCYe/XI2X3yU4j07KlbdXpskaSJ2j6GHCrjEMbBSD72ETliWhYhvv3TDhHEpZZtdstxxfpvd12f3QmAdyy0U4iIXDuEmom9WfeqeyC8JM99eCe7uQWq5xSqDq5pELrwh+fzogyQFOx4MKVK6Y36o/rUp9asp8QdExNdiPCJZZ/cp7v3CgndwvKWV95QY9/Jkvpxe0vM5/ehehN0TFIH/myGY4jXyYgQH5BMPF8RfbfAP1F8iP+Sf8aWJ488S/PofMdWq5fHfr2+frHEJEpQn38l4D1/YiuB/vNPBHiz0sHiKf7Ig+sjhO19PcTDkYnS5vl2citX78psGwwC7dfH4CqJn5985+C74Z+GjXg8sCSbGNk3Q759Ui7n0WjMhDFI/UYRaKXielSXO5BKi3ofSL27K5ff9NpPHv73NrNTRDDroaNYeuu6/KzfcsvMQYavYLbG81nJ8McfBfftpNr8D/Dye2xLd7kpdPKKblEA9j2cSdFuPAn7K5O0X8a+Sp5p+pfbbPw==</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:A87F279F9F0D41D1E0401F0A07990A96</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:A8931F0D63CF86D3E0401F0A079962C4</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamActiveCnt</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value>1</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full2</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>expectStreamAvailCnt</con:name><con:value>12</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DBD14DB9B2A29C3EE0401F0A079958C7</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:DBD14DB9B28D9C3EE0401F0A079958C7</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013/05/03 13:35:45</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C5AAB62B5BD82DEBE0401F0A05993203</con:value></con:property><con:property><con:name>rightstokenidFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/07/25 16:11:25</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C5AAB62B5BDB2DEBE0401F0A05993203</con:value></con:property><con:property><con:name>rightstokenidFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectDBDeletedTime_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/07/25 16:11:50</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F26EC3521DDD5E0401F0A059963C9</con:value></con:property><con:property><con:name>rightstokenidFULL_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBDeletedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:10</con:value></con:property><con:property><con:name>expectDBCreatedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:01</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F26EC3528DDD5E0401F0A059963C9</con:value></con:property><con:property><con:name>rightstokenidFULL_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBDeletedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:44</con:value></con:property><con:property><con:name>expectDBCreatedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:35</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F2F9D6DC99C1EE0401F0A0799522D</con:value></con:property><con:property><con:name>rightstokenidFULL_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBDeletedTime_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:59:06</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F2F9D6DCC9C1EE0401F0A0799522D</con:value></con:property><con:property><con:name>rightstokenidFULL_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>expectDBDeletedTime_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:59:27</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2557D2BCBF3A8C1E0401F0A0799044C</con:value></con:property><con:property><con:name>rightstokenidFULL_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:15:58</con:value></con:property><con:property><con:name>expectDBCreatedTime_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:15:49</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2557D2BCBF8A8C1E0401F0A0799044C</con:value></con:property><con:property><con:name>rightstokenidFULL_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:16:31</con:value></con:property><con:property><con:name>expectDBCreatedTime_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:16:22</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6CCA1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:02</con:value></con:property><con:property><con:name>expectDBCreatedTime_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:16:53</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6D1A1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:36</con:value></con:property><con:property><con:name>expectDBCreatedTime_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:26</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6D6A1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:18:09</con:value></con:property><con:property><con:name>expectDBCreatedTime_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:59</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6DBA1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:18:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:18:32</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF324194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:14</con:value></con:property><con:property><con:name>expectDBCreatedTime_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:05</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF329194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:46</con:value></con:property><con:property><con:name>expectDBCreatedTime_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:36</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF32E194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:19</con:value></con:property><con:property><con:name>expectDBCreatedTime_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:09</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF333194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:50</con:value></con:property><con:property><con:name>expectDBCreatedTime_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:41</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF338194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:24</con:value></con:property><con:property><con:name>expectDBCreatedTime_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:15</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C81D1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:56</con:value></con:property><con:property><con:name>expectDBCreatedTime_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:47</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C87D1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:22:29</con:value></con:property><con:property><con:name>expectDBCreatedTime_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:22:20</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C8CD1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:02</con:value></con:property><con:property><con:name>expectDBCreatedTime_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:22:53</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C91D1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:36</con:value></con:property><con:property><con:name>expectDBCreatedTime_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:27</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA77AC30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:24:09</con:value></con:property><con:property><con:name>expectDBCreatedTime_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:59</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA77FC30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:24:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:24:31</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA784C30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:17</con:value></con:property><con:property><con:name>expectDBCreatedTime_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:05</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA789C30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:51</con:value></con:property><con:property><con:name>expectDBCreatedTime_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:42</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA78EC30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:26:25</con:value></con:property><con:property><con:name>expectDBCreatedTime_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:26:15</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A9C55FF5D015E0401F0A059924E5</con:value></con:property><con:property><con:name>rightstokenidFULL_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:26:50</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A9C55FF8D015E0401F0A059924E5</con:value></con:property><con:property><con:name>rightstokenidFULL_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectDBDeletedTime_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:27:12</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A9C55FFBD015E0401F0A059924E5</con:value></con:property><con:property><con:name>rightstokenidFULL_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>expectDBDeletedTime_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:27:32</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248EB2BA3145732E0401F0A07993200</con:value></con:property><con:property><con:name>rightstokenidFULL_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:15:46</con:value></con:property><con:property><con:name>expectDBCreatedTime_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:15:37</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248EB2BA3195732E0401F0A07993200</con:value></con:property><con:property><con:name>rightstokenidFULL_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:12</con:value></con:property><con:property><con:name>expectDBCreatedTime_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:02</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CADBAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:36</con:value></con:property><con:property><con:name>expectDBCreatedTime_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:26</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CB2BAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:01</con:value></con:property><con:property><con:name>expectDBCreatedTime_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:51</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CB7BAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:27</con:value></con:property><con:property><con:name>expectDBCreatedTime_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:17</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CBCBAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:53</con:value></con:property><con:property><con:name>expectDBCreatedTime_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:42</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>79611</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA87F279F9F0D41D1E0401F0A07990A96</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamListViewQHost" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="b061c7de-4593-4b1f-ba73-a72a9a52b12e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="25c30008-4bd9-4c5f-8bc5-0885f5690e25"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamListView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectStreamActiveCnt",null);
tC.setPropertyValue("httpContentEncoding",null);
tC.setPropertyValue("streamAccountActiveCount",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("streamFlagCreateDateOld",null);
tC.setPropertyValue("streamFlagIgnoreCreatedDate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8b630537-37b7-4f42-9e9b-958d64dc955f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int counter;
String sh;
String rt;
String shCreatedBy;
String shValue;
String shExpireDate;
String nickname;
String expectGenericRightsToken;
String expectRequestingUser;
String expectDBDeletedTime;
String expectDBCreatedTime;
String streamFlagCreateDateOld;
String streamFlagIgnoreCreatedDate;
String streamFlagIgnoreDeletedDate;
String expectDBCreatedByNodeType;

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamListView",callTC.getPropertyValue("expectErrTypeStreamListView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("expectStreamAvailCnt",callTC.getPropertyValue("expectStreamAvailCnt"));
tC.setPropertyValue("expectStreamActiveCnt",callTC.getPropertyValue("expectStreamActiveCnt"));
tC.setPropertyValue("expectRequestingUser",callTC.getPropertyValue("expectRequestingUser"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("streamFlagCreateDateOld",callTC.getPropertyValue("streamFlagCreateDateOld"));
tC.setPropertyValue("streamFlagIgnoreCreatedDate",callTC.getPropertyValue("streamFlagIgnoreCreatedDate"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

if (tC.getPropertyValue("expectErrTypeStreamListView") == null || tC.getPropertyValue("expectErrTypeStreamListView") == "") {
	tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("expectStreamAvailCnt") == null || tC.getPropertyValue("expectStreamAvailCnt") == "") {
	tC.setPropertyValue("expectStreamAvailCnt",tP.getPropertyValue("streamlimit"))
}
if (tC.getPropertyValue("expectStreamActiveCnt") == null || tC.getPropertyValue("expectStreamActiveCnt") == "") {
	tC.setPropertyValue("expectStreamActiveCnt","0")
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "") {
	tC.setPropertyValue("streamAccountActiveCount","0")
}
if (tC.getPropertyValue("streamFlagIgnoreCreatedDate") == null || tC.getPropertyValue("streamFlagIgnoreCreatedDate") == "") {
	tC.setPropertyValue("streamFlagIgnoreCreatedDate","false")
}

if (tC.getPropertyValue("counter") == null ||
    tC.getPropertyValue("counter") == "") {
    		tC.setPropertyValue("counter","1");
    }
    
counter = tC.getPropertyValue("counter").toInteger();

for (int i = 0; i &lt;= counter; i++) {
	
	sh           = "streamhandleFULL_"  + (i + 1);
	rt           = "rightstokenidFULL_"   + (i + 1);
	shCreatedBy  = "expectDBCreatedBy_" + (i + 1);
	shDeletedBy  = "expectDBDeletedBy_" + (i + 1);
	shValue      = "expectDBStatus_"    + (i + 1);
	nickname     = "expectNickname_"    + (i + 1);
	expectRequestingUser = "expectRequestingUser_" + (i + 1);
	expectGenericRightsToken = "expectGenericRightsToken_" + (i + 1);
	expectDBDeletedTime = "expectDBDeletedTime_" + (i + 1);
	expectDBCreatedTime = "expectDBCreatedTime_" + (i + 1);
	streamFlagCreateDateOld = "streamFlagCreateDateOld_" + (i + 1);
	streamFlagIgnoreCreatedDate = "streamFlagIgnoreCreatedDate_" + (i + 1);
	streamFlagIgnoreDeletedDate = "streamFlagIgnoreDeletedDate_" + (i + 1);
	expectDBCreatedByNodeType = "expectDBCreatedByNodeType_" + (i + 1);
		
	tC.setPropertyValue(sh,callTC.getPropertyValue(sh));
	tC.setPropertyValue(rt,callTC.getPropertyValue(rt));
	tC.setPropertyValue(shValue,callTC.getPropertyValue(shValue));
	tC.setPropertyValue(shCreatedBy,callTC.getPropertyValue(shCreatedBy));
	tC.setPropertyValue(shDeletedBy,callTC.getPropertyValue(shDeletedBy));
	tC.setPropertyValue(nickname,callTC.getPropertyValue(nickname));
	tC.setPropertyValue(expectGenericRightsToken,callTC.getPropertyValue(expectGenericRightsToken));
	tC.setPropertyValue(expectRequestingUser,callTC.getPropertyValue(expectRequestingUser));
	tC.setPropertyValue(expectDBDeletedTime,callTC.getPropertyValue(expectDBDeletedTime));
	tC.setPropertyValue(expectDBCreatedTime,callTC.getPropertyValue(expectDBCreatedTime));
	tC.setPropertyValue(streamFlagCreateDateOld,callTC.getPropertyValue(streamFlagCreateDateOld));
	tC.setPropertyValue(streamFlagIgnoreCreatedDate,callTC.getPropertyValue(streamFlagIgnoreCreatedDate));
	tC.setPropertyValue(streamFlagIgnoreDeletedDate,callTC.getPropertyValue(streamFlagIgnoreDeletedDate));
	tC.setPropertyValue(expectDBCreatedByNodeType,callTC.getPropertyValue(expectDBCreatedByNodeType));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="915030c1-59d4-4338-9886-0a8e2f8c224d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamListView" id="44fa03bf-e816-445a-ab6f-19f40a60d1f1"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamListView" mediaType="application/xml" sslKeystore="9115_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="5e8fed1d-f9a6-436b-ba15-5306d51e6e7c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('GET - StreamListView');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="aecfd747-ebe1-4ea7-853d-c2272be43b21"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamListView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamListView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamListView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="620760c7-d91d-4886-b67d-b7dc21aeb298"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//------------------------------------------------------//
def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
//------------------------------------------------------//
def getHistoryRecords(sh) {
	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();
	
	log.info "---------IN getHistoryRecords sh[$sh]";
	
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	int lastColon = sh.lastIndexOf(':');
	String hsh = sh.substring(lastColon +1,sh.length());
	String hresults = null;
	String hsql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh') 
	  order by STATUS
	  """;

	  log.info "hsql is $hsql";

	hresults = a.SelectFromDB(hsql,tP.getPropertyValue("targetSystem").toString());
	log.info hresults;

	/*
	*  If zero length, no need to continue;
	*/
	assert hresults.length() > 0;

	try {
		def hmyXML = new XmlSlurper().parseText(hresults);
		log.info "hmyXML.ResultSet.Row.size() is [" + hmyXML.ResultSet.Row.size() + "]";
		assert hmyXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", hresults);
	}
}
//------------------------------------------------------//


def a = new generalUtils.generalUtils(log);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnerror");
def urnGenericRightsToken = tP.getPropertyValue("urnGenericRightsToken");
def streamMaxDisplayCount = tP.getPropertyValue("streamMaxDisplayCount");
def streamlimit  = tP.getPropertyValue("streamlimit");
def acct  = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def counter = tC.getPropertyValue("counter").toInteger();
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamListView");
def XMLbody = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus = tC.getPropertyValue("expectDBStatus");
def expectRT = tC.getPropertyValue("rightstokenidFULL");
def expectSH = tC.getPropertyValue("streamhandleFULL");
def expectNickname = tC.getPropertyValue("expectNickname");
def expectStreamActiveCnt = tC.getPropertyValue("streamAccountActiveCount");
def expectStreamAvailCnt = streamlimit.toInteger() - expectStreamActiveCnt.toInteger();
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String errorHost   = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String availStreamsCnt = "";
String major = tP.getPropertyValue("V1").toString();
String minor = tP.getPropertyValue("V2").toString();
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectDescription = "";
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean XMLbodynull     = false;
boolean doValidations   = true;
int displayStreamCount = 0;
int xmlIndex = 0;
int g = 0;
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();


/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/
if (tP.getPropertyValue("targetURL").length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = "https://qa.q.uvvu.com:" + tP.getPropertyValue("targetPort");
}

switch (errorRespType) {
	case "SUCCESS_NO_STREAMS":
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;
	case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
                                errorReason = "node_status_inactive";
                                errorLink = "$errorHost/deceerrors/error/error_response.html";
break;


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorRespType[$errorRespType]";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

/*
* Content-Length
*/
String httpContentEncoding = tC.getPropertyValue("httpContentEncoding");
String contentLength = tC.getPropertyValue("httpContentLength");
log.info "httpContentEncoding[$httpContentEncoding]";
log.info "contentLength[$contentLength]";
if (httpContentEncoding == "null" || httpContentEncoding == null) {
	log.info "Asserting contentLength.length() > 0";
	assert contentLength.toInteger() > 0;
} else {
	log.info "Asserting httpContentEncoding is chunked";
	assert tC.getPropertyValue("httpContentEncoding") == "chunked";
}

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
this.log.info "HTTP Content-Type:  Expect: $expectHTTPcontenttype - Received: " + tC.getPropertyValue("httpContentType");
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" && errorRespType != "SUCCESS_NO_STREAMS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
		
	} else if (errorRespType == "SUCCESS_NO_STREAMS") {
		log.info "--------------SUCCESS NO STREAMS---------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit") + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		if (tC.getPropertyValue("streamFlagCreateDateOld") != "true") {
			log.info "Assert ActiveStreamCount == 0 -- streamFlagCreateDateOld[" + tC.getPropertyValue("streamFlagCreateDateOld") + "]";
			assert activeStreamCnt.toInteger() == 0;
			log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger();
		} else {
			log.info "ActiveStreamCount[$activeStreamCnt] == expectStreamActiveCnt[$expectStreamActiveCnt]";
			assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
			log.info "ActiveStreamCount[$availStreamsCnt] == " + streamlimit.toInteger() - activeStreamCnt.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger() - activeStreamCnt.toInteger();
		}
		
		log.info "Assert NO <Stream> Rows Present";
		assert myXML.Stream.size() == myXML.Stream.size();
		log.info "Assert NO <Stream>.<ResourceStatus> Rows Present";
		assert myXML.Stream.ResourceStatus.size() == 0;
		log.info "Assert NO <Stream>.<RightsTokenID> Rows Present";
		assert myXML.Stream.RightsTokenID.size() == 0;
		log.info "Assert NO <Stream>.<ExpirationDateTime> Rows Present";
		assert myXML.Stream.ExpirationDateTime.size() == 0;
			
		/*  AvailableStreams */
		log.info "availStreamsCnt[$availStreamsCnt] - expectStreamAvailCnt[$expectStreamAvailCnt]";
		assert availStreamsCnt.toInteger() == expectStreamAvailCnt.toInteger();

		/* ActiveStreamCount */
		log.info "activeStreamCnt[$activeStreamCnt] - expectStreamActiveCnt[$expectStreamActiveCnt]";
		assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
	} else {
		log.info "--------------STREAM DATA VERIFICATION-----------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		this.log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit")  + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		log.info "Assert ActiveStreamCount == $streamAccountActiveCount";
		assert activeStreamCnt.toInteger() == streamAccountActiveCount;
		log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() - streamAccountActiveCount + "]";
		assert availStreamsCnt.toInteger() == streamlimit.toInteger() - streamAccountActiveCount;
				
		/*
		*  Due to stream ordering we must work backwards from the 
		*  total number of streams created.  The newest created
		*  stream will be the first in the list.
		*/
		g = counter;

		log.info "g[$g] - counter[$counter]";

		/*
		*  By design, we never return more than 30 streams.   
		*  
		*/
		this.log.info "Recv Stream Count [" + myXML.Stream.size() + "] lessThan [$streamMaxDisplayCount]";;
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		while (g != 0) {
			String expectValue = tC.getPropertyValue("expectDBStatus_" + g);
			String expectcb = urnnode + tC.getPropertyValue("expectDBCreatedBy_" + g);
			String expectdb = urnnode + tC.getPropertyValue("expectDBDeletedBy_" + g);
			String expectsh = tC.getPropertyValue("streamhandleFULL_" + g);
			String expectNick = tC.getPropertyValue("expectNickname_" + g);
			String expectrt  = tC.getPropertyValue("rightstokenFULL_" + g);
			String expectGeneric = tC.getPropertyValue("expectGenericRightsToken_" + g);
			String expectRequestingUser = tC.getPropertyValue("expectRequestingUser_" + g);
			String expectCDate = tC.getPropertyValue("expectDBCreatedTime_" + g);
			String expectDDate = tC.getPropertyValue("expectDBDeletedTime_" + g);
			String streamFlagIgnoreCreatedDate = tC.getPropertyValue("streamFlagIgnoreCreatedDate_" + g);
			String streamFlagIgnoreDeletedDate = tC.getPropertyValue("streamFlagIgnoreDeletedDate_" + g);
			String expectDBCreatedByNodeType = tC.getPropertyValue("expectDBCreatedByNodeType_" + g);
			String baseRightsToken = tC.getPropertyValue("rightstokenidFULL");

			log.info "g[$g]";

			getHistoryRecords(expectsh);

			/* ---------HACKIE SMACKIE 
			*  The requestinguser displayed in streamview is NOT the 
			*  requestinguser supplied during streamcreation.  It is the 
			*  userid associated with security context (saml) which
			*  invoked the request.  Thus, all requestingusers in all
			*  streams displayed will be the same.  We will override
			*  that NOW!  LLP and LLPCS do not display the requestinguser
			*  element.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "llpcs") {
				expectRequestingUser = "";
			} else {
				expectRequestingUser = tC.getPropertyValue("assertionUserIdFULL");
			}
						
			/*
			*  if the nodetype is 'dlp' or 'llp' streams in 'deleted' status
			*   are not displayed.  Thus, we must adjust accordingly.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp") {
				if (	expectValue == "active") {
					doValidations = true;
				} else {
					doValidations = false;
				}
			} else {
				doValidations = true;
			}

			/*
			*  Special processing is required for nickname just
			*  incase it contains special xml characters.
			*/
			if (expectNick != null) {
				if (expectNick.length() > 0) {
					expectNick = expectNick.replace('&amp;','&');
					expectNick = expectNick.replace('&lt;','<');
					expectNick = expectNick.replace('&gt;','>');
					expectNick = expectNick.replace('&apos;','\'');
				}
			}

			/*
			*  There maybe one or more rightstokens created by the test
			*  case.  Thus multiple streams maybe have the same 
			*  rights token.  We will assume that if we get a null
			*  rightstokenFULL_count value that only one rightstoken
			*  was created for the test and that will be contained 
			*  in rightstokenfull.
			*/
			if (expectrt == null) {
				log.info "RIGHTSTOKENFULL - Override to the baseRightsToken value [$baseRightsToken]";
				expectrt = baseRightsToken;
			}
			log.info "g[$g] - doValidations [$doValidations] - nodetype[" + tC.getPropertyValue("nodetype") + "] - expectValue[$expectValue]";
			
			if (doValidations) {
				displayStreamCount++;

				/*  StreamHandleID */
				String recvsh = myXML.Stream[xmlIndex].@StreamHandleID.text();
				log.info "xmlIndex[$xmlIndex] - StreamHandleID - recvsh[$recvsh] - expect[$expectsh]";
				assert recvsh == expectsh;

				//StreamClientNickname
				if (expectNick != null) {
					String recvnick = myXML.Stream[xmlIndex].StreamClientNickname;
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - recv[$recvnick] - expect[$expectNick]";
					assert expectNick == recvnick;
				} else {
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - Element NOT present";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
				}
				
				// RequestingUserID
				String recvru = myXML.Stream[xmlIndex].RequestingUserID;
				log.info "xmlIndex[$xmlIndex] - RequestingUserID - recv[$recvru] - expect[$expectRequestingUser] - expectDBCreatedByNodeType[$expectDBCreatedByNodeType]";
				assert recvru == expectRequestingUser;
		
				// RightsTokenID
				String recvrt = myXML.Stream[xmlIndex].RightsTokenID.text();
				if (expectGeneric == "true") {
					expectrt = urnGenericRightsToken;
				}
				log.info "xmlIndex[$xmlIndex] - RightsTokenID - recvrt[$recvrt] - expectrt[$expectrt] - expectGeneric[$expectGeneric]";
				assert recvrt == expectrt;
				
				//ExpirationDateTime
				String recvet = myXML.Stream[xmlIndex].ExpirationDateTime;
				log.info "xmlIndex[$xmlIndex] - ExpirationDateTime - is NOT null";
				assert recvet.length() > 0;

				//CreatedBy
				String recvcb   = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreatedBy.text();
				log.info "xmlIndex[$xmlIndex] - CreatedBy - recvcb[$recvcb] - expectcb[$expectcb]";
				assert recvcb == expectcb;

				//CreationDate
				if (streamFlagIgnoreCreatedDate != "true") {
					log.info "xmlIndex[$xmlIndex] - CreationDate - is NOT null";
					String recvDate = "";
					String recvcd = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreationDate.text();
					recvDate = formatDate(recvcd);
					def j = a.dateDiff(recvDate,expectCDate,"seconds");
					log.info "xmlIndex[$xmlIndex] - CreationDate - recvDate[$recvDate] - expectCDate[$expectCDate] DIFF [$j]";
					assert recvcd.length() > 0;
					log.info "xmlIndex[$xmlIndex] - CreationDate - Differences less that 10 seconds";
					assert j <= 10;
				} else {
					log.info "xmlIndex[$xmlIndex] - CreationDate - IGNORED DUE TO streamFlagIgnoreCreatedDate" ;
				}

				//Value
				String recvValue = myXML.Stream[xmlIndex].ResourceStatus.Current.Value;
				log.info "xmlIndex[$xmlIndex] - Value - recvValue[$recvValue] - expectValue[$expectValue]";
				if (expectValue == "active") {
					assert recvValue == "urn:dece:type:status:active";
				} else {
					assert recvValue == "urn:dece:type:status:deleted";
				}

				//Description
				switch (expectValue) {
					case "active":
						expectDescription = "active";
						break;
					default:
						expectDescription = "deleted";
						break;
				}
				String recvDesc = myXML.Stream[xmlIndex].ResourceStatus.Current.Description;
				log.info "xmlIndex[$xmlIndex] - Description - recvDesc[$recvDesc] - expectDesc[$expectDescription]";
				assert recvDesc == expectDescription;

				/*  Nickname validation */
				if (expectNick == null || expectNick == "") {
					log.info "Asserting no <StreamClientNickname> element exists";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
					assert myXML.Stream[xmlIndex].StreamClientNickname.text() == "";
				} else {
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 1;
					String recvNick = myXML.Stream[xmlIndex].StreamClientNickname.text();
					log.info "xmlIndex[$xmlIndex] - recvNick[$recvNick] - expectNick[$expectNick]";
					assert recvNick == expectNick;
				}
									
				/*
				*  If the stream is deleted....
				*/
				log.info "DeletedBy length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length();
				log.info "DeletionDate length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length();
				
				if (	expectValue == "deleted") {
					String recvDeletedBy = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString();
					String recvDeletionDate = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString();
					
					//DeletedBy
					this.log.info "recvDeletedBy[$recvDeletedBy] - expectdb[$expectdb]";
					assert recvDeletedBy == expectdb;
					
					//DeletionDate
					if (streamFlagIgnoreDeletedDate != "true") {
						String recvDate = formatDate(recvDeletionDate);
						def j = a.dateDiff(expectDDate,recvDate,"seconds");
						log.info "xmlIndex[$xmlIndex] - DeletionDate - recvDate[$recvDate] - expectDDate[$expectDDate] DIFF [$j]";
						assert recvDate.length() > 0;
						log.info "xmlIndex[$xmlIndex] - DeletionDate - Difference less that 10 seconds";
						assert j <= 10;
					} else {
						log.info "xmlIndex[$xmlIndex] - DeletionDate - IGNORED DUE TO streamFlagIgnoreDeletedDate" ;
					}
				} else {
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length()    == 0;
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length() == 0;
				}
				/*
				*
				*  History validation
				*
				*/
				def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

				int rCnt = myHistoryXML.ResultSet.Row.size();

				log.info "-------------HISTORY-----------------";
				log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
				if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
					rCnt -= 1;
				} 
				assert myXML.Stream[xmlIndex].ResourceStatus.History.Prior.size() == rCnt;
		
				for (int i = 0; i < rCnt; i++) {
					String hrecvModifiedBy = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModifiedBy.text();
					String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
					log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
					assert hrecvModifiedBy == hexpectModifiedBy;

					String hrecvStatus = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Value;
					String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
					log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
					if (hexpectStatus == "active") {
						assert hrecvStatus == "urn:dece:type:status:active";
					} else {
						assert hrecvStatus == "urn:dece:type:status:deleted";
					}
					
					String hrecvDescription = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Description;
					switch (hexpectStatus) {
						case "active": hexpectDescription = "active"; break;
						case "deleted": hexpectDescription = "deleted"; break;
						default: hexpectDescription = "deleted"; break;
					}
					log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
					assert hrecvDescription == hexpectDescription;
	
					String hrecvModificationDate = formatDate(myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModificationDate.text());
					int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
					String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
					log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
					assert hrecvModificationDate.replace("/","-") == hexpectModificationDate;
					
				}
			
				xmlIndex++;
			}

			/*
			*  By design, we never return more than 30 streams.   So
			*  if we encounter our 30th stream we will break out of 
			*  the XML validation routines and allow size() 
			*  invocations on the xml body to verify no additional
			*  streams were returned.
			*/
			if (displayStreamCount == streamMaxDisplayCount.toInteger()) {
				break;
			}
			
			g--;
		}

		log.info "--------------------FINAL XML size() Validations -------------------";
		log.info "ResourceStatus size: "  + myXML.Stream.ResourceStatus.size();
		log.info "ResourceStatus.Current size: " + myXML.Stream.ResourceStatus.Current.size();
		log.info "ResourceStatus.Value size: " + myXML.Stream.ResourceStatus.Current.Value.size();
		log.info "ResourceStatus.Description size: " + myXML.Stream.ResourceStatus.Current.Description.size();
		log.info "RightsTokenID size: "  + myXML.Stream.RightsTokenID.size();
		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();

		log.info "Stream.size() LTE MAX allowed of " + streamMaxDisplayCount.toInteger();
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		log.info "Stream.size() IS -- recv[" + myXML.Stream.size() + "] Expect[$displayStreamCount]";
		assert myXML.Stream.size() == displayStreamCount;
		
		assert myXML.Stream.ResourceStatus.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Value.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Description.size() == displayStreamCount;
		assert myXML.Stream.RightsTokenID.size()  == displayStreamCount;
		assert myXML.Stream.ExpirationDateTime.size() == displayStreamCount;
	}
} 

]]></script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_49091 - StreamListView - LLPCS - Stream list view using q host</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Customer Support Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C7376158FA3F207DE0401F0A07991E70</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C7375BD3ACC97D84E0401F0A07991E72</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:C7375BD3ACC97D84E0401F0A07991E72</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d5fa0fab-02b7-4c2e-8f3e-be751e888a9f</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVdbc6JME773V1jupWU4KCrWJlXDUVRUEDzdfIUwAoqgDAj6698BozHZ7L77fhcpM00fnu5+aHp+IusQ0D2AEIwTPwqrivBa+5/DbC1ya20aJL3pNFo2DRvdbRM2NrDDULDb7VrstlZVEEqhEqLECpPXGk1SdIPsNCjWoOge1epRzZc23VrXqnMYI+waq7yQtWp+CELUK8O+1tI47EUW8lEvtA4Q9RK7NwPqqIc1e9YdU+3t5w1lGTB+85Lk2CMI+8WBNgwC+8WODsRP4pPOTwf1Zr4bWkkaw/eYDnqtvdtmWfaSNV+i2CVokiQJkiWwjoN890ftrXI3ho4SbqPbmbfCKPRtK/CvVgFKhYkXOVUQuFHsJ97hN64pgiIL1w2Y2w2baoU/asRHgBLdX3r6BDJGVgN5FnV3psMtjGFow6qpK6+1H3/XwZutEVsh2kbxAX05/zdIMDzDIDpCp4Humd3R/b3Hb8r19hPaPSW0gxT5ZzguaHK0bIiq0xhu/XzkI0w+B1XL9ldzdGcYtP9LS34SzzgxbOKbygi+C1Hy//TruVc3L3MrSOFbuF5R6GqeEm5vMaG+NbsK21a2mrZUX0sIz8o3UI9Wv5+/EvXBq3cjZ7Ji11MjvaTLK8dv8oHD0/HcVRa+SQYksTupZqaK5rFpG85gJMCTx4sSCc36qZnW16ejv6eZo9eKhmK9Wenzs+mI41XUidkO32aHfpTU9XPcMSmWW6tgUx9F7Wm8l7u7cxsqQjcESjQ/X9GFDFnLN9lrul0H68Fs6pOVkST2TeM63J9bS2sz76+g+/qR03MORV5DeCmTLP5fMiQrWIn1OPDFpNji1zOBb6qiCOmV58Fl5oJM4YCL/3ZgzLn7k7f3ZTYjOaBpEhB4LtiJIxXsZUCZIuep/Hyu5vwVDDh3PMeGRgUEa07VxUzIVsJc0/pi5hmOPL9s5CBdX8WxClBpzHuqqItzQTdEVQXRTZarwkbOd+pMzRRtJVSwA0HMj1dHZhMo575NK4w6Y+jVjEnXyzmWS5fRYXzeGGKg8qrMz07yTNk0BU0cAH21sGkpxbbX0eEYVVYm92Q0OMIdgFJG4pjgqhr7TDVMeizoVikzPstURR6oGsp4rcxKrojZYG5eP2rBcyrvHMRcNMD0Vgvb4KUxuV4OkLVgQlUHmeCWxkMxcyZ3IKpGZhX+VquRmOmibo4lVVcyEZQyQcwCtKHH3kb2znZTywcG2D03htfEhRTi56F+ti/MqWLJEtgc5pTd1D3bZ3xrGWXuupsJ2mowjNYKdjMGmshxGsCASFCkhuvPgRE3ZyZHn6V9ONpK0QF6cUWlIsy2a052/ebEnY4XjLDdd6ayP21ajkcogU3vmnugKNAZUp5mOfqK0IXQv7YnQ3MJ/Xh1TcaMRrX9LlPRF6m5FKKg4/SXK3NYz1e2ZkymM3Mxveb5+LTrXoOkP+H68WygCu5kDOEU2XWCtCTO6AoMv+rvMJ+2OgmZCnBVDgB557qijwnM9Xc3EvZ1VcTkBSqfyfyCl2dAluuiwgmatpU8amrL89SkxqoiOgEu02W11IPKmucE3CnSWqyPK1oi1wZwSmdaS5RczWTqgyVca+PAmCcgO863IUWR8lHrb9XMtdWCAY6SzTj8FnGVVAGmNTkOyHw4b5PUSXOCwYwFZjOf0ft84rnry95d73FTVk+vzsoAwdx44piCKbaoaIaoq6B7e99yVTGbemAf8uPmYOeCgXtWGkcGJ+qSRpq5IIDhTYYMQOdodRV3Ki+W9hWQqxamxXmz9NAqHPsTQ0wxadMnuuw2NPmvHCsoVvnMsRMPNPCVY+KNYyLYnupKV6AQ0+aPaJG5nCyetM58NGCPpLYc7StcXSLcxA9ak7CbGcP6grpkHW+nLRasInh8PdyuvOYm4UjramtwsO/Ivr4XwnYruKgjVWNMnwgu5A6eMjSqjBUqFJvJVSLYOK1zh7V/uF6bLdo8TGfpWTGtIaIu3ua0YLPdtN8miFi+MNfO+qxJy8he3b4jX4fkQ3gbo8TzgP00ge+71yzd7KCd3I/Fd1gRqhL+OFrJn/e4QuI7jW2p2jsWyyBKYJjU3gqrYofrpXjT850e/nLezqwgkDzHMKJA0h2OF0WyRVISCcgOyza5Lntf9m4ovkDko3DrF7GKdfb2sf4zQPvQ20ArhnHtD56KOlWVUMfbRxQiaESvNYETeEHkJJrmuhJeqSiKltoC2eG4Did1O61adRwlk3ASg20C448NmSa/bsg6tP2jD4s1+n2XQAkuxMk6p0lAv5ytlxCmeM+Oi1W31yFJmkD+4RjAAi5xiJw0gC9H71iWhUC3X7ph2aiUkixFljvOb7P7+uxeCKzj+IUCKnLhIG4i/GbVJ++J/JJw89srwd09SB2/WGVwVZPYt29IPj/6IEnBjgdDipTumB+qf2fKUhTzqynxB0TE12I8Ijln/ynu/cKCd3C8pZX3FIR7ebJeTi/p+Zx+dC/G7gmKwP/NoJ3iNfJiRHsYEg8XxF9t8A/UXyI/5J/xpYkXzhL8+h8w1arl8d+vb5+scQkSmCffyfgAX9iK4H+809k9u9DD4in+yaLY+aj8N76e4mDIxejyQ7c4Fav35TcNtiPs1sfjK4qfnX/n4Lvgn4WPej2wJJgYmzSBv39SLebSa82y7SgNE0WolYLnWVniTC5H2PtQ+sVNufy+32Zy9NvbzFIdzWwPHqzaQ9f/d+WGX3behtgK+SWW11qOL+Y4eOg+zeZ3gJ/GM9dmAIsHMytwIk/zj/HMsGwHdB7j+XMmb7+If5U81fQrtd/+AQ==</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamActiveCnt</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value>1</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>C7376158FA40207DE0401F0A07991E70</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>C7376158FA3F207DE0401F0A07991E70</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>C7375BD3ACC97D84E0401F0A07991E72</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2012-08-14 15:24:42.221</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2012-08-14 09:24:42.221</CREATED_DATE>
      <CREATED_BY_NODE_OID>9115</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>streamFlagCreateDateOld</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full2</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>expectStreamAvailCnt</con:name><con:value>3</con:value></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C7376158FA3F207DE0401F0A07991E70</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:C7375BD3ACC97D84E0401F0A07991E72</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/08/14 09:24:52</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<StreamList AvailableStreams="2" ActiveStreamCount="1" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:C7376158FA3F207DE0401F0A07991E70">
      <RightsTokenID>urn:dece:rightstokenid:org:dece:C7375BD3ACC97D84E0401F0A07991E72</RightsTokenID>
      <ExpirationDateTime>2012-08-14T15:24:42.221Z</ExpirationDateTime>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:9115" CreationDate="2012-08-14T09:24:42.221Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Current>
      </ResourceStatus>
   </Stream>
</StreamList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">904</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C5AAB62B5BD82DEBE0401F0A05993203</con:value></con:property><con:property><con:name>rightstokenidFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/07/25 16:11:25</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C5AAB62B5BDB2DEBE0401F0A05993203</con:value></con:property><con:property><con:name>rightstokenidFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectDBDeletedTime_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/07/25 16:11:50</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F26EC3521DDD5E0401F0A059963C9</con:value></con:property><con:property><con:name>rightstokenidFULL_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBDeletedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:10</con:value></con:property><con:property><con:name>expectDBCreatedTime_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:01</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F26EC3528DDD5E0401F0A059963C9</con:value></con:property><con:property><con:name>rightstokenidFULL_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBDeletedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:44</con:value></con:property><con:property><con:name>expectDBCreatedTime_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:58:35</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F2F9D6DC99C1EE0401F0A0799522D</con:value></con:property><con:property><con:name>rightstokenidFULL_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBDeletedTime_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:59:06</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C27F2F9D6DCC9C1EE0401F0A0799522D</con:value></con:property><con:property><con:name>rightstokenidFULL_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9115</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>expectDBDeletedTime_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/15 07:59:27</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>streamhandleFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2557D2BCBF3A8C1E0401F0A0799044C</con:value></con:property><con:property><con:name>rightstokenidFULL_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:15:58</con:value></con:property><con:property><con:name>expectDBCreatedTime_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:15:49</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2557D2BCBF8A8C1E0401F0A0799044C</con:value></con:property><con:property><con:name>rightstokenidFULL_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:16:31</con:value></con:property><con:property><con:name>expectDBCreatedTime_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:16:22</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6CCA1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:02</con:value></con:property><con:property><con:name>expectDBCreatedTime_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:16:53</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6D1A1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:36</con:value></con:property><con:property><con:name>expectDBCreatedTime_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:26</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6D6A1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:18:09</con:value></con:property><con:property><con:name>expectDBCreatedTime_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:17:59</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255865FE6DBA1E5E0401F0A07991463</con:value></con:property><con:property><con:name>rightstokenidFULL_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:18:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:18:32</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF324194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:14</con:value></con:property><con:property><con:name>expectDBCreatedTime_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:05</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF329194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:46</con:value></con:property><con:property><con:name>expectDBCreatedTime_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:19:36</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF32E194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:19</con:value></con:property><con:property><con:name>expectDBCreatedTime_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:09</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF333194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:50</con:value></con:property><con:property><con:name>expectDBCreatedTime_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:20:41</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2558EFFF338194CE0401F0A07992648</con:value></con:property><con:property><con:name>rightstokenidFULL_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:24</con:value></con:property><con:property><con:name>expectDBCreatedTime_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:15</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_21</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C81D1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:56</con:value></con:property><con:property><con:name>expectDBCreatedTime_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:21:47</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_22</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C87D1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:22:29</con:value></con:property><con:property><con:name>expectDBCreatedTime_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:22:20</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_23</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C8CD1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:02</con:value></con:property><con:property><con:name>expectDBCreatedTime_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:22:53</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_24</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C25597DB9C91D1A8E0401F0A05990160</con:value></con:property><con:property><con:name>rightstokenidFULL_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:36</con:value></con:property><con:property><con:name>expectDBCreatedTime_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:27</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_25</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA77AC30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:24:09</con:value></con:property><con:property><con:name>expectDBCreatedTime_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:23:59</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_26</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA77FC30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:24:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:24:31</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_27</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA784C30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:17</con:value></con:property><con:property><con:name>expectDBCreatedTime_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:05</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_28</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA789C30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:51</con:value></con:property><con:property><con:name>expectDBCreatedTime_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:25:42</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_29</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A09FA78EC30AE0401F0A05991283</con:value></con:property><con:property><con:name>rightstokenidFULL_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:26:25</con:value></con:property><con:property><con:name>expectDBCreatedTime_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:26:15</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_30</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A9C55FF5D015E0401F0A059924E5</con:value></con:property><con:property><con:name>rightstokenidFULL_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:26:50</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_31</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A9C55FF8D015E0401F0A059924E5</con:value></con:property><con:property><con:name>rightstokenidFULL_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectDBDeletedTime_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:27:12</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_32</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C255A9C55FFBD015E0401F0A059924E5</con:value></con:property><con:property><con:name>rightstokenidFULL_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBCreatedBy_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>expectDBDeletedTime_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/13 06:27:32</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_33</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248EB2BA3145732E0401F0A07993200</con:value></con:property><con:property><con:name>rightstokenidFULL_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:15:46</con:value></con:property><con:property><con:name>expectDBCreatedTime_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:15:37</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_35</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248EB2BA3195732E0401F0A07993200</con:value></con:property><con:property><con:name>rightstokenidFULL_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:12</con:value></con:property><con:property><con:name>expectDBCreatedTime_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:02</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_36</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CADBAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:36</con:value></con:property><con:property><con:name>expectDBCreatedTime_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:26</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_37</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CB2BAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:01</con:value></con:property><con:property><con:name>expectDBCreatedTime_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:16:51</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_38</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CB7BAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:27</con:value></con:property><con:property><con:name>expectDBCreatedTime_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:17</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_39</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C248F2913CBCBAF3E0401F0A079941EE</con:value></con:property><con:property><con:name>rightstokenidFULL_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectNickname_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBDeletedTime_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:53</con:value></con:property><con:property><con:name>expectDBCreatedTime_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012/06/12 15:17:42</con:value></con:property><con:property><con:name>streamFlagCreateDateOld_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_40</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>streamhandleFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>79611</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="dd421dbd-946d-40e2-843d-a3753db32322"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="01f2bcd4-ee19-4efd-9e68-fdffea4fd64e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="5c263a55-2b80-4b79-b59c-6acbc8667f06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="a084b855-564f-489b-8669-2176402ab39e"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7"/*,"us:tvpg:tv-y7-fv"*/,"us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT= ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH= ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijkwijzerRatingBE= ["BE:KIJKWIJZER:AL","BE:KIJKWIJZER:6","BE:KIJKWIJZER:9","BE:KIJKWIJZER:12","BE:KIJKWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijkwijzerRatingNL= ["NL:KIJKWIJZER:AL","NL:KIJKWIJZER:6","NL:KIJKWIJZER:9","NL:KIJKWIJZER:12","NL:KIJKWIJZER:16"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

           //case "${urnRating}ca:chvrs:e":
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
         case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
      case "${urnRating}BE:KIJKWIJZER:AL":
	case "${urnRating}BE:KIJKWIJZER:6":
	case "${urnRating}BE:KIJKWIJZER:9":
	case "${urnRating}BE:KIJKWIJZER:12":
	case "${urnRating}BE:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJKWIJZER:AL":
	case "${urnRating}NL:KIJKWIJZER:6":
	case "${urnRating}NL:KIJKWIJZER:9":
	case "${urnRating}NL:KIJKWIJZER:12":
	case "${urnRating}NL:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="d2208da9-4741-4f08-9344-ca8efb57eb45"><con:settings/><con:config service="Policy Create" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" id="3b8441db-ba0c-4f77-ab67-67889879e318" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="49ffcf22-1105-472e-80b8-3bf4c2189da8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="4fd8aa0d-b8ad-4ae7-bd38-71be50f53366"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d9f350e8-f608-4d34-9c37-a7324195e707"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtU+o6EP5+fkWnfnRKX2itdIAZXuTeHlFR0HuuX5yQLhAoKSZpQX/9TQpFQPTqOTPMMNludp/dfbK7VY7msRM0OAcmSEK1sF3TnyLHGVrYdg2w3bLhDr0z4/wM+YY9HELF80ZWVHF0LeQ8hZBygaio6Y4l9a0zw3EGdiWwrcBySq7rPeraAzAuTUuVkqVrq3lMeZC7rekpo0GCOOEBRXPggcBBv3HVDaRmgApMer26Rpk7ZPWJEIvANHEpAgxxjEs4mZtVc0+nGvGgT8YUiZTBxmfEa/rm7nK5LC3LpYSNTceyLNOqmFIn4mR8otd/FJchCukoWZ9biCaUYBSTV6RAXYGYJJHWiMcJI2Iy/8C0bdqWMm3AChsyo/REN98c5Oi+aGkPJOPI4BNkF8buYAQMKAbt/i6s6Sdfq+D67oAhykcJm/OD8/cgAc0gThYQGbyIrED3dYtH0lWvAg5CiuOUkwyuFU0WCAPXegxGZNUlXJIv4lpefm3F5Y8ULAP8nbJUzV2sErp5JDttMgYufqdmu/VaW3lAcQr1cXP5QLIZSsm/dNYZ3b9ejj32MgPzclnLIewqr0Fty705H5J1y63NpdbN+HV1TxbLZgOj29CZLq7908wlw9PBg7j1Q++yE8XZ5Go2sMiqOe+U3ayJaNdlpyL6u/8IbCp63qx1RsvZ/Y9J2W3Z2CcWO70cnbfYRfm+M0hhcLvqX3u/ehcv5Ufoh71uux33fl67V22YPawGY/7qpuBQ/3oaXU7v/4manaz9+KOXxvDXovEcgde4pAMG+Lb2FtNuDPvCoiX00+EUsCiOih5hW+vIeiHxeXtREhIZo1w1WKgexQVQodfVLdVaglQ2IBIFspjrc6flO77rW2dWu2O1bPvCci27YzUsv1JxLqxy0YPWKA4gthI6IsqX6rJr/nwOEM8DDjQCZmRJiifA9U8stpFAWkjv5ONIKIdBIrt4TJ4JnEeyVpLw5ZFw/KklpuOJ0LXrRNzQG9YYCWB7rdtx9lr3HWCyIKD6uyI4lwznQubiGWWpiO1ShkoUUjkBmGrCgeOeeyYn80UMCqk5TyJZ39JissgzY/L1v2MgzHPp3cUgf3gfxnX4rUiB1ImIUuAqlibIMsLhDLIqgVcE8i5g7+isKsw30oio9yXzKRjBayT7n95oovix5Ui72+j3CtBb3W/cfWr1n+zfNND9A+fdP3Uua/n+pvlJPs3DUm4dRRnZcVvsAXK0ycZXL4j4jErPpTTL0px6iuMmk+ZN2dttsw84lZ35ZZDMgJpbE+aXBuMW9YHnrXwfXyomtC+QgLl8KFp+/MJW1AeutqJQvvDVV1euPZcybwJW4pisFcvlSSH+dL/CAVZ6UtyTf8uERW/lOmJrx4+MU65CgtCxOqkR+PIBKXAizRLZsxO2a/yYgWPO94XbJG+xCMmmYSrg4y+aasY1HWGcpFSEbT0X7A6IHKd4WUDwpvTOTD6ENlvFin+4Vfy66vZlq54jfatL/l/ZIDldMOhqecmx1PSVXJKlczreGUgbgEdmku3Zvue3m97BTPK2CdyLpP5O/F6yk9PD91D/Dw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05/User/urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:NL:KIJKWIJZER:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value><![CDATA[<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:AL</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:6</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:9</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:12</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:16</dece:Resource>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747060DF0C11E0401F0A07992E03</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d2208da9-4741-4f08-9344-ca8efb57eb45</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalConrolRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="8245d746-f8e0-49e0-8e5f-05e0082a5c84"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2540e859-243b-47e3-9a6e-6166719d6bd7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="505e3d4a-fb0c-4b9c-96fe-e65858ec295b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="96e6b20b-45cc-4fa5-a916-e61d1a8eded1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="6ae2f08c-10a7-4e24-8195-8d1921d0534c"><con:settings/><con:config service="Policy Get" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" id="150768de-6b9f-4aef-ac26-2c603ab192d8" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#TestCase#assertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="1438dc39-50ab-4eba-93e8-c43ee5e14d1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="3b788104-2772-4cd9-b904-17b52e572481"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" ) {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	
} else {
	log.info "ERROR!";
	assert 1 == 2;
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="fc3a4c2f-c9f6-4d94-b12e-1cbf97c34373"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvNIGS+YzRWoMgYSE7IMkEwyLykhCxCxJbBklnz9lQw4GEguM/PkUrt1+vSi7r5iIAxM22EMRRxTkluHAWF2Iq0rcURsChhmNgEhYjaH9sC569lmQbfB/oqS81p15Q0WLUO3QFW1fMNQLb2K1FGpVlFH0BgVR0VggmpVqDIWI48wDgivK6ZulFTdUov6UC/bVsU2y4WaWfut5J5RxAS2UCnoyo7UmtWVKedzW9NWq1VhVSzQaKKZum5oL3e9AZyiECiNq61HiaGosdOHBR9BFASwAGmoXWkZnSuf2QM8IYDHEdrZ8r+ypWt6TRM6PsOTH0p6F/keGdPk6AJCCYYgwB9AxucO8Sn1c04woRHm0/BLJwxdAqtoDVVoWOSHomWpXQiUYRgxoLIpMHZYfTRGESIQ5Z76Xl35cVnWkqvDCBA2plHIssc/44PIEgV0jnyV7d3aUbsc8EykGlcI2h6BQczwEt3LYp0DiNgumwheDpV7jNAYr3uYiQJdM8lOO6R3dNxGo4UniPG/SdBBcrYgzyCIUaM/un13zM162evip3x489KuzX6BX17LdeoJgUPlRJCmdns8Ksq0iLY35pPranupl0inC73w9YGsGPO7+dFiWoqGrh+bpRt32lmWnZHz5MyeOncUVH7exNM1bj2+TlhNa+Z1gai9ovK717t3H57hpHrHVlNvZXWNADyw3tO18V57iV6bN31obOL8qvu+bFq//dnstjbrA6M1WtBZs3ozG97+ZC8V8tjuAp8EH5upD0t+J9/7iF/ynetJPXXngH9Wtn/zg3g0Q5Dvj7IMvFauI7IE+PfNTEqwr44TVXsumw/jiHClIW/J3mHHot1h3xY53J4Nq+0WzapbKTdbVqlitfVSUa/UakZHd5rlZnvfZLYsjii6lIyxtCVb7rZsvicIQ5sh4qNIXdJYdDqmfIPYAhzkPNIXj4AShoZUtGcjnFFjHYmcj7huVgEsUhDCxbim5O4pfyAPkTPmKMr25FqmJ/cRxHOMZOOWdc1EYTMuYrEAy5gHRmEJCgTForVHssvaplUtaQyH8wBJplpI/ThAhfl0nkRGY9uvqQLIEmm/PUxe25d+Hf/bh0Do+FgqMOlLE4k0ojPDxdg7cuJw+ewQ2sM7sY/lwxLx5BGGWybZX59lIusjrZFWzxk87kmnun9w980dvBl/CdD7B+O9fzUucnl6U/smntpxKlND/hIfmN1vHWJ+iY7X2BfiAhiFRSFeLuOk9iyrqEUCXpNFoOmmNkAwFj15M6TviGgpinbRAEyJHxlP5VmKMZ+SAQccheKt5JLjBRvPADG58Xjika8vXacyJkXoOFrzczI3ENuaZPztQgdtKPWE+FF8VjTyPzN2BuvAjvBTLDwck4k8yeG3+aIuIBWwWLRtGh2CnwM4ZzwrTIOccuGioEYxR1//ycl+XFcAhDQm3GspieBwRiQ8+WaO7E+lE5hkDKV7Kf7/xVTFSQlAJLZZhhN8uV7Y8gmQycGc2Rk9GTVFo+K6rlXsVDuHo8YttcppUDLsGifiU8lBnI5rvPEf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:12CCBC9D556E17E3E05305991F0ABF5F</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">The account ID does not match.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08/User/urn:dece:userid:org:dece:12CCBC9D556E17E3E05305991F0ABF5F/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC73B6E689AD5CCBE0401F0A0599788A</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CCBC9D556E17E3E05305991F0ABF5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6ae2f08c-10a7-4e24-8195-8d1921d0534c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="bcf754bd-4239-494d-a087-38c2650f6778"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="dac901ae-fcd6-4a29-a146-cb0597458d5e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="f20229bc-5752-4f02-b062-6dd8f3d185c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="2289ff37-10ef-4767-84c7-ef7df3a41634"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="99ccf41f-30db-481c-a351-cc8e69739140"><con:settings/><con:config service="Policy Delete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d0075c2b-e489-459f-9df5-e7c4b449055f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="d736d82e-d233-4bd9-8944-61141cee1b79"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="e5ed969a-305d-4eb7-8a12-417a5f2161b2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtU+o6EP5+fkWnfnRKX2itdIAZXuTeHlFR0HuuX5yQLhAoKSZpQX/9TQpFQPTqOTPMMNludp/dfbK7VY7msRM0OAcmSEK1sF3TnyLHGVrYdg2w3bLhDr0z4/wM+YY9HELF80ZWVHF0LeQ8hZBygaio6Y4l9a0zw3EGdiWwrcBySq7rPeraAzAuTUuVkqVrq3lMeZC7rekpo0GCOOEBRXPggcBBv3HVDaRmgApMer26Rpk7ZPWJEIvANHEpAgxxjEs4mZtVc0+nGvGgT8YUiZTBxmfEa/rm7nK5LC3LpYSNTceyLNOqmFIn4mR8otd/FJchCukoWZ9biCaUYBSTV6RAXYGYJJHWiMcJI2Iy/8C0bdqWMm3AChsyo/REN98c5Oi+aGkPJOPI4BNkF8buYAQMKAbt/i6s6Sdfq+D67oAhykcJm/OD8/cgAc0gThYQGbyIrED3dYtH0lWvAg5CiuOUkwyuFU0WCAPXegxGZNUlXJIv4lpefm3F5Y8ULAP8nbJUzV2sErp5JDttMgYufqdmu/VaW3lAcQr1cXP5QLIZSsm/dNYZ3b9ejj32MgPzclnLIewqr0Fty705H5J1y63NpdbN+HV1TxbLZgOj29CZLq7908wlw9PBg7j1Q++yE8XZ5Go2sMiqOe+U3ayJaNdlpyL6u/8IbCp63qx1RsvZ/Y9J2W3Z2CcWO70cnbfYRfm+M0hhcLvqX3u/ehcv5Ufoh71uux33fl67V22YPawGY/7qpuBQ/3oaXU7v/4manaz9+KOXxvDXovEcgde4pAMG+Lb2FtNuDPvCoiX00+EUsCiOih5hW+vIeiHxeXtREhIZo1w1WKgexQVQodfVLdVaglQ2IBIFspjrc6flO77rW2dWu2O1bPvCci27YzUsv1JxLqxy0YPWKA4gthI6IsqX6rJr/nwOEM8DDjQCZmRJiifA9U8stpFAWkjv5ONIKIdBIrt4TJ4JnEeyVpLw5ZFw/KklpuOJ0LXrRNzQG9YYCWB7rdtx9lr3HWCyIKD6uyI4lwznQubiGWWpiO1ShkoUUjkBmGrCgeOeeyYn80UMCqk5TyJZ39JissgzY/L1v2MgzHPp3cUgf3gfxnX4rUiB1ImIUuAqlibIMsLhDLIqgVcE8i5g7+isKsw30oio9yXzKRjBayT7n95oovix5Ui72+j3CtBb3W/cfWr1n+zfNND9A+fdP3Uua/n+pvlJPs3DUm4dRRnZcVvsAXK0ycZXL4j4jErPpTTL0px6iuMmk+ZN2dttsw84lZ35ZZDMgJpbE+aXBuMW9YHnrXwfXyomtC+QgLl8KFp+/MJW1AeutqJQvvDVV1euPZcybwJW4pisFcvlSSH+dL/CAVZ6UtyTf8uERW/lOmJrx4+MU65CgtCxOqkR+PIBKXAizRLZsxO2a/yYgWPO94XbJG+xCMmmYSrg4y+aasY1HWGcpFSEbT0X7A6IHKd4WUDwpvTOTD6ENlvFin+4Vfy66vZlq54jfatL/l/ZIDldMOhqecmx1PSVXJKlczreGUgbgEdmku3Zvue3m97BTPK2CdyLpP5O/F6yk9PD91D/Dw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC73B6E689AD5CCBE0401F0A0599788A</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747060DF0C11E0401F0A07992E03</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="85095aa1-3394-4c10-8b75-4c3c9619c2f3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="957470b4-468e-4aba-84ce-f7ae51147f18"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ee9bcdd4-e57c-421b-ae80-a068ae11c0fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="c3b41d10-291c-4fce-bd34-f791bab3e56b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="74d73113-873f-4bb0-8005-75f49a387b87"><con:settings/><con:config service="Policy Create" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" id="3b8441db-ba0c-4f77-ab67-67889879e318" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="66068bab-8604-41dc-8d77-a5b00a4dc22b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="45ce4048-92b0-4eb7-a6d2-a28bb9035261"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtU+o6EP5+fkWnfnRKX2itdIAZXuTeHlFR0HuuX5yQLhAoKSZpQX/9TQpFQPTqOTPMMNludp/dfbK7VY7msRM0OAcmSEK1sF3TnyLHGVrYdg2w3bLhDr0z4/wM+YY9HELF80ZWVHF0LeQ8hZBygaio6Y4l9a0zw3EGdiWwrcBySq7rPeraAzAuTUuVkqVrq3lMeZC7rekpo0GCOOEBRXPggcBBv3HVDaRmgApMer26Rpk7ZPWJEIvANHEpAgxxjEs4mZtVc0+nGvGgT8YUiZTBxmfEa/rm7nK5LC3LpYSNTceyLNOqmFIn4mR8otd/FJchCukoWZ9biCaUYBSTV6RAXYGYJJHWiMcJI2Iy/8C0bdqWMm3AChsyo/REN98c5Oi+aGkPJOPI4BNkF8buYAQMKAbt/i6s6Sdfq+D67oAhykcJm/OD8/cgAc0gThYQGbyIrED3dYtH0lWvAg5CiuOUkwyuFU0WCAPXegxGZNUlXJIv4lpefm3F5Y8ULAP8nbJUzV2sErp5JDttMgYufqdmu/VaW3lAcQr1cXP5QLIZSsm/dNYZ3b9ejj32MgPzclnLIewqr0Fty705H5J1y63NpdbN+HV1TxbLZgOj29CZLq7908wlw9PBg7j1Q++yE8XZ5Go2sMiqOe+U3ayJaNdlpyL6u/8IbCp63qx1RsvZ/Y9J2W3Z2CcWO70cnbfYRfm+M0hhcLvqX3u/ehcv5Ufoh71uux33fl67V22YPawGY/7qpuBQ/3oaXU7v/4manaz9+KOXxvDXovEcgde4pAMG+Lb2FtNuDPvCoiX00+EUsCiOih5hW+vIeiHxeXtREhIZo1w1WKgexQVQodfVLdVaglQ2IBIFspjrc6flO77rW2dWu2O1bPvCci27YzUsv1JxLqxy0YPWKA4gthI6IsqX6rJr/nwOEM8DDjQCZmRJiifA9U8stpFAWkjv5ONIKIdBIrt4TJ4JnEeyVpLw5ZFw/KklpuOJ0LXrRNzQG9YYCWB7rdtx9lr3HWCyIKD6uyI4lwznQubiGWWpiO1ShkoUUjkBmGrCgeOeeyYn80UMCqk5TyJZ39JissgzY/L1v2MgzHPp3cUgf3gfxnX4rUiB1ImIUuAqlibIMsLhDLIqgVcE8i5g7+isKsw30oio9yXzKRjBayT7n95oovix5Ui72+j3CtBb3W/cfWr1n+zfNND9A+fdP3Uua/n+pvlJPs3DUm4dRRnZcVvsAXK0ycZXL4j4jErPpTTL0px6iuMmk+ZN2dttsw84lZ35ZZDMgJpbE+aXBuMW9YHnrXwfXyomtC+QgLl8KFp+/MJW1AeutqJQvvDVV1euPZcybwJW4pisFcvlSSH+dL/CAVZ6UtyTf8uERW/lOmJrx4+MU65CgtCxOqkR+PIBKXAizRLZsxO2a/yYgWPO94XbJG+xCMmmYSrg4y+aasY1HWGcpFSEbT0X7A6IHKd4WUDwpvTOTD6ENlvFin+4Vfy66vZlq54jfatL/l/ZIDldMOhqecmx1PSVXJKlczreGUgbgEdmku3Zvue3m97BTPK2CdyLpP5O/F6yk9PD91D/Dw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05/User/urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747060DF0C11E0401F0A07992E03</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>74d73113-873f-4bb0-8005-75f49a387b87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="39f79246-34f9-4611-8273-a2e2259fa241"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cde8f8e2-faf3-4b12-aaa9-6305a5a4539f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="486c2487-8c4a-40c3-86d0-9d429214e0ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="2657ed88-44e0-4dae-bcfe-6b961cbefe4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="b81652d0-c310-4b35-bb67-aa759e30e65e"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="7d0f7a34-1475-4b8a-9e3b-b4af31282851"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="389fdedb-23eb-456b-a77f-a43ca89f3f00"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="4e716782-2868-4c2d-bf42-9afde30e1596"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvNIGS+YzRWoMgYSE7IMkEwyLykhCxCxJbBklnz9lQw4GEguM/PkUrt1+vSi7r5iIAxM22EMRRxTkluHAWF2Iq0rcURsChhmNgEhYjaH9sC569lmQbfB/oqS81p15Q0WLUO3QFW1fMNQLb2K1FGpVlFH0BgVR0VggmpVqDIWI48wDgivK6ZulFTdUov6UC/bVsU2y4WaWfut5J5RxAS2UCnoyo7UmtWVKedzW9NWq1VhVSzQaKKZum5oL3e9AZyiECiNq61HiaGosdOHBR9BFASwAGmoXWkZnSuf2QM8IYDHEdrZ8r+ypWt6TRM6PsOTH0p6F/keGdPk6AJCCYYgwB9AxucO8Sn1c04woRHm0/BLJwxdAqtoDVVoWOSHomWpXQiUYRgxoLIpMHZYfTRGESIQ5Z76Xl35cVnWkqvDCBA2plHIssc/44PIEgV0jnyV7d3aUbsc8EykGlcI2h6BQczwEt3LYp0DiNgumwheDpV7jNAYr3uYiQJdM8lOO6R3dNxGo4UniPG/SdBBcrYgzyCIUaM/un13zM162evip3x489KuzX6BX17LdeoJgUPlRJCmdns8Ksq0iLY35pPranupl0inC73w9YGsGPO7+dFiWoqGrh+bpRt32lmWnZHz5MyeOncUVH7exNM1bj2+TlhNa+Z1gai9ovK717t3H57hpHrHVlNvZXWNADyw3tO18V57iV6bN31obOL8qvu+bFq//dnstjbrA6M1WtBZs3ozG97+ZC8V8tjuAp8EH5upD0t+J9/7iF/ynetJPXXngH9Wtn/zg3g0Q5Dvj7IMvFauI7IE+PfNTEqwr44TVXsumw/jiHClIW/J3mHHot1h3xY53J4Nq+0WzapbKTdbVqlitfVSUa/UakZHd5rlZnvfZLYsjii6lIyxtCVb7rZsvicIQ5sh4qNIXdJYdDqmfIPYAhzkPNIXj4AShoZUtGcjnFFjHYmcj7huVgEsUhDCxbim5O4pfyAPkTPmKMr25FqmJ/cRxHOMZOOWdc1EYTMuYrEAy5gHRmEJCgTForVHssvaplUtaQyH8wBJplpI/ThAhfl0nkRGY9uvqQLIEmm/PUxe25d+Hf/bh0Do+FgqMOlLE4k0ojPDxdg7cuJw+ewQ2sM7sY/lwxLx5BGGWybZX59lIusjrZFWzxk87kmnun9w980dvBl/CdD7B+O9fzUucnl6U/smntpxKlND/hIfmN1vHWJ+iY7X2BfiAhiFRSFeLuOk9iyrqEUCXpNFoOmmNkAwFj15M6TviGgpinbRAEyJHxlP5VmKMZ+SAQccheKt5JLjBRvPADG58Xjika8vXacyJkXoOFrzczI3ENuaZPztQgdtKPWE+FF8VjTyPzN2BuvAjvBTLDwck4k8yeG3+aIuIBWwWLRtGh2CnwM4ZzwrTIOccuGioEYxR1//ycl+XFcAhDQm3GspieBwRiQ8+WaO7E+lE5hkDKV7Kf7/xVTFSQlAJLZZhhN8uV7Y8gmQycGc2Rk9GTVFo+K6rlXsVDuHo8YttcppUDLsGifiU8lBnI5rvPEf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:12CCBC9D556E17E3E05305991F0ABF5F</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">The account ID does not match.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08/User/urn:dece:userid:org:dece:12CCBC9D556E17E3E05305991F0ABF5F/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72DFFAFDFBB093E0401F0A0599095B</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CCBC9D556E17E3E05305991F0ABF5F</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="5505bc05-ac4d-4181-a360-86ddd752c9d4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="20c4001f-062f-4916-a74c-a72363f3c76b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="71e14202-1d95-4f52-9dcc-02dea51c0077"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="f4af139c-6da1-4cda-b465-cc17da2657e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="f9cb28f3-4277-42de-a4d4-b67c9d990a6b"><con:settings/><con:config service="Policy Delete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="6a9789f9-107d-4387-9f68-d3e2e3b34b76"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="113c17e0-a951-4ac8-86e9-8d530b401e81"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="eddf3ee8-c128-413d-94af-8fef1f042a60"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtU+o6EP5+fkWnfnRKX2itdIAZXuTeHlFR0HuuX5yQLhAoKSZpQX/9TQpFQPTqOTPMMNludp/dfbK7VY7msRM0OAcmSEK1sF3TnyLHGVrYdg2w3bLhDr0z4/wM+YY9HELF80ZWVHF0LeQ8hZBygaio6Y4l9a0zw3EGdiWwrcBySq7rPeraAzAuTUuVkqVrq3lMeZC7rekpo0GCOOEBRXPggcBBv3HVDaRmgApMer26Rpk7ZPWJEIvANHEpAgxxjEs4mZtVc0+nGvGgT8YUiZTBxmfEa/rm7nK5LC3LpYSNTceyLNOqmFIn4mR8otd/FJchCukoWZ9biCaUYBSTV6RAXYGYJJHWiMcJI2Iy/8C0bdqWMm3AChsyo/REN98c5Oi+aGkPJOPI4BNkF8buYAQMKAbt/i6s6Sdfq+D67oAhykcJm/OD8/cgAc0gThYQGbyIrED3dYtH0lWvAg5CiuOUkwyuFU0WCAPXegxGZNUlXJIv4lpefm3F5Y8ULAP8nbJUzV2sErp5JDttMgYufqdmu/VaW3lAcQr1cXP5QLIZSsm/dNYZ3b9ejj32MgPzclnLIewqr0Fty705H5J1y63NpdbN+HV1TxbLZgOj29CZLq7908wlw9PBg7j1Q++yE8XZ5Go2sMiqOe+U3ayJaNdlpyL6u/8IbCp63qx1RsvZ/Y9J2W3Z2CcWO70cnbfYRfm+M0hhcLvqX3u/ehcv5Ufoh71uux33fl67V22YPawGY/7qpuBQ/3oaXU7v/4manaz9+KOXxvDXovEcgde4pAMG+Lb2FtNuDPvCoiX00+EUsCiOih5hW+vIeiHxeXtREhIZo1w1WKgexQVQodfVLdVaglQ2IBIFspjrc6flO77rW2dWu2O1bPvCci27YzUsv1JxLqxy0YPWKA4gthI6IsqX6rJr/nwOEM8DDjQCZmRJiifA9U8stpFAWkjv5ONIKIdBIrt4TJ4JnEeyVpLw5ZFw/KklpuOJ0LXrRNzQG9YYCWB7rdtx9lr3HWCyIKD6uyI4lwznQubiGWWpiO1ShkoUUjkBmGrCgeOeeyYn80UMCqk5TyJZ39JissgzY/L1v2MgzHPp3cUgf3gfxnX4rUiB1ImIUuAqlibIMsLhDLIqgVcE8i5g7+isKsw30oio9yXzKRjBayT7n95oovix5Ui72+j3CtBb3W/cfWr1n+zfNND9A+fdP3Uua/n+pvlJPs3DUm4dRRnZcVvsAXK0ycZXL4j4jErPpTTL0px6iuMmk+ZN2dttsw84lZ35ZZDMgJpbE+aXBuMW9YHnrXwfXyomtC+QgLl8KFp+/MJW1AeutqJQvvDVV1euPZcybwJW4pisFcvlSSH+dL/CAVZ6UtyTf8uERW/lOmJrx4+MU65CgtCxOqkR+PIBKXAizRLZsxO2a/yYgWPO94XbJG+xCMmmYSrg4y+aasY1HWGcpFSEbT0X7A6IHKd4WUDwpvTOTD6ENlvFin+4Vfy66vZlq54jfatL/l/ZIDldMOhqecmx1PSVXJKlczreGUgbgEdmku3Zvue3m97BTPK2CdyLpP5O/F6yk9PD91D/Dw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72DFFAFDFBB093E0401F0A0599095B</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747060DF0C11E0401F0A07992E03</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="d2dcaa13-278a-4a16-9888-a2093c84e073"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1ec235c4-5738-4850-a9c3-50dfaecf02bd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="4ccc8d27-9a89-416f-9cf1-b1c42fa4fdcb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="57f93cbf-4f5f-4cf7-97e6-4a0516bfca6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="ba712f4d-47f6-4f2a-9670-ba63919164f5"><con:settings/><con:config service="Policy Create" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" id="3b8441db-ba0c-4f77-ab67-67889879e318" sslKeystore="DLASP_CS_2_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="65951272-a2b6-4178-98c9-340f22c979a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="c37670a6-7d51-42a7-9cb6-9656663d23f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+o4EH2/vyJKH1chHxBCooLER6vl3pa2hHa5falcZwBDYkPsAO2vXzs0KVDa7V0JCXkynjkzc3zsc46S2AnanEMqCKNav9fUnyYNCxq+6xoR+BOjhtzIQPDsGrbneXZj4tUshHWtz3kGfcoFoqKpO5ZdM6y64Tgj2w9sK7DdiutWH3XtAVIuQ0uXiqVr2ySmPMjTNvUspQFDnPCAogR4IHAQtq+vAukZoAKT3jrfocwTpq2ZEMvANHElAgxxjCuYJea5eeBzHvEgJFOKRJbCW86IN/W3vZvNprKpVlg6NR3LskzLN6VPxMn0TG/9KDZD1KcTtlt3EWWUYBSTV6RAXYOYsUhrx1OWEjFLPgltm7alQhuwxQa2a/RMN98T5Oi+GekAZMqRwWfILoINYQIpUAza/bDf1M++N8Hd3lGKKJ+wNOFH6z+DBHQNMVtCZPCisgLd9yOeaFfrHHDQpzjOOFnDQNFkiTBw7TaFCdleES7JF3EtH7+25fJHCpYB/pOxnJv7WCV080R3emQKXPyfme3PaxflAcUZtC5scec+bKevs/b9Y/1lUF8t/lqM+xsyYM0cwr7zDlQ57rf1MVlLbr1tumFmtxdSNFrfha/r57TON8OXtPszu+6Qx1uPuH57Map36eBxOG70tre/4/vHwaS6SlbjuRj/7Irr1GHPq6wzv2c/nPnf3XHoz6zMWwwubpA/WnSstd9hYkHuxpDeErKaNpy5c3NXi5ad+Tjd9LJ4YF/MX9uLOYyTm1/1wWb2O6H3jz+WYfd6eFkdvlLbq/9z92v6Mm2+17Rfw6GxkIQwe54DFsVS0aPf0y7lvJD4Wl6UhUTGJHcNlkqjuAAq9JbapaQlyKQAkSiQw9ytL7ue49W8dqNrd+putXZh1Sz70mpbnu87F7ZdaNAOxRHELqMTonIpld3x52uAOAk40AhSY80yPAOufxGxhwTS+nQoDwejHEZMqjgWKZ1UM0pplUY+Y+4seXbY1ta1ARM39CZtTwSkB8rtOAfKPQRMlgSUvCt+c0lwLmQrVmididiurFGFQiYvgFRpcODUGq7JSbKMQQE1ExZlMVSWs2XeGJPv/h0DYZ5be1ft8PapGz45+fH7tLrjb0UjpE9ElANXJXVADhNO3ERWUc+Hut2TN1YRvp1FRJ0y2VWRErxDcvjpnSyKJSVT3gsrkJcbjg0Hwc3jusp80ZrgkvXldS3VXmpBqxjOClVWlWy9zvJxeErnUhnelHJnmyHgTIrVy4gtgJplCPNbd0WJ+ihzaT/El4kZDQUSkEjyaPnyGw+FELh6KPQl6bfffYUcpJR9E7AVp2zdWL4nFOIvnxw4wMpPmm/l34al0fu4TsTayyPrlK8DQehUrdSt8PIJNzCTYYmUMZbuBz8V4FTyQ2PZ5BKLkGx6zgR8/kVT+tTUEcYso6Lf03PDvmbmOMXLEoJ3pw9hcl1+u2i3/NOLdnx9FUr1SpBe+pL/djZIThcMurrPcyxNfSvfjTI5ne5p9BvAUzJ94feql/W2V8q06/u2JE/ZwINKWh/MHy17PT0+D61/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177/User/urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747A8C1B6534E0401F0A07992E11</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ba712f4d-47f6-4f2a-9670-ba63919164f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="5c636b0d-4388-4b3e-a7a0-a7d04bff553e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c9d8b4b7-e40d-4f0f-ba35-e6dcfe491287"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="14364e68-3de5-4859-87bd-e97acb6241e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e0133ee6-c409-430f-9e0d-f1ac2674d0a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="1cf814bf-4153-49dc-88e4-6bb724f11419"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ad61c35a-51a4-45bb-aa4f-126dfc4b56b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="8b681b88-ef3f-4cc8-a4c3-645860f7a09f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="fea5ab95-274a-43a8-b710-9fb651549f04"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+o4EH2/vyJKH1chHxBCooLER6vl3pa2hHa5falcZwBDYkPsAO2vXzs0KVDa7V0JCXkynjkzc3zsc46S2AnanEMqCKNav9fUnyYNCxq+6xoR+BOjhtzIQPDsGrbneXZj4tUshHWtz3kGfcoFoqKpO5ZdM6y64Tgj2w9sK7DdiutWH3XtAVIuQ0uXiqVr2ySmPMjTNvUspQFDnPCAogR4IHAQtq+vAukZoAKT3jrfocwTpq2ZEMvANHElAgxxjCuYJea5eeBzHvEgJFOKRJbCW86IN/W3vZvNprKpVlg6NR3LskzLN6VPxMn0TG/9KDZD1KcTtlt3EWWUYBSTV6RAXYOYsUhrx1OWEjFLPgltm7alQhuwxQa2a/RMN98T5Oi+GekAZMqRwWfILoINYQIpUAza/bDf1M++N8Hd3lGKKJ+wNOFH6z+DBHQNMVtCZPCisgLd9yOeaFfrHHDQpzjOOFnDQNFkiTBw7TaFCdleES7JF3EtH7+25fJHCpYB/pOxnJv7WCV080R3emQKXPyfme3PaxflAcUZtC5scec+bKevs/b9Y/1lUF8t/lqM+xsyYM0cwr7zDlQ57rf1MVlLbr1tumFmtxdSNFrfha/r57TON8OXtPszu+6Qx1uPuH57Map36eBxOG70tre/4/vHwaS6SlbjuRj/7Irr1GHPq6wzv2c/nPnf3XHoz6zMWwwubpA/WnSstd9hYkHuxpDeErKaNpy5c3NXi5ad+Tjd9LJ4YF/MX9uLOYyTm1/1wWb2O6H3jz+WYfd6eFkdvlLbq/9z92v6Mm2+17Rfw6GxkIQwe54DFsVS0aPf0y7lvJD4Wl6UhUTGJHcNlkqjuAAq9JbapaQlyKQAkSiQw9ytL7ue49W8dqNrd+putXZh1Sz70mpbnu87F7ZdaNAOxRHELqMTonIpld3x52uAOAk40AhSY80yPAOufxGxhwTS+nQoDwejHEZMqjgWKZ1UM0pplUY+Y+4seXbY1ta1ARM39CZtTwSkB8rtOAfKPQRMlgSUvCt+c0lwLmQrVmididiurFGFQiYvgFRpcODUGq7JSbKMQQE1ExZlMVSWs2XeGJPv/h0DYZ5be1ft8PapGz45+fH7tLrjb0UjpE9ElANXJXVADhNO3ERWUc+Hut2TN1YRvp1FRJ0y2VWRErxDcvjpnSyKJSVT3gsrkJcbjg0Hwc3jusp80ZrgkvXldS3VXmpBqxjOClVWlWy9zvJxeErnUhnelHJnmyHgTIrVy4gtgJplCPNbd0WJ+ihzaT/El4kZDQUSkEjyaPnyGw+FELh6KPQl6bfffYUcpJR9E7AVp2zdWL4nFOIvnxw4wMpPmm/l34al0fu4TsTayyPrlK8DQehUrdSt8PIJNzCTYYmUMZbuBz8V4FTyQ2PZ5BKLkGx6zgR8/kVT+tTUEcYso6Lf03PDvmbmOMXLEoJ3pw9hcl1+u2i3/NOLdnx9FUr1SpBe+pL/djZIThcMurrPcyxNfSvfjTI5ne5p9BvAUzJ94feql/W2V8q06/u2JE/ZwINKWh/MHy17PT0+D61/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177/User/urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>816</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72E00A80F4707CE0401F0A0599094C</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747A8C1B6534E0401F0A07992E11</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="7b7f37ed-a1d8-46be-a5f4-39f44e7e7e28"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5454e99f-4932-4439-9b0f-6d62a561c568"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="128a4ef1-681a-4c7f-9bd5-13d7fea261d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e91148a4-83c9-47df-9bd0-fa57eeeed2dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="5dd168d5-4561-4cf9-9d15-9afef8259de3"><con:settings/><con:config service="Policy Delete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="DLASP_CS_2_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="47f1c87e-d627-47e1-b55f-01932bcd4cc2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="e0327b93-03b6-4149-b307-8cd26e1c2b08"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="395aea42-fbef-4afa-b204-d19bcfb527c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove Allow Adult Policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZdb+o4EH2/vyJKH1chHxBCooLER6vl3pa2hHa5falcZwBDYkPsAO2vXzs0KVDa7V0JCXkynjkzc3zsc46S2AnanEMqCKNav9fUnyYNCxq+6xoR+BOjhtzIQPDsGrbneXZj4tUshHWtz3kGfcoFoqKpO5ZdM6y64Tgj2w9sK7DdiutWH3XtAVIuQ0uXiqVr2ySmPMjTNvUspQFDnPCAogR4IHAQtq+vAukZoAKT3jrfocwTpq2ZEMvANHElAgxxjCuYJea5eeBzHvEgJFOKRJbCW86IN/W3vZvNprKpVlg6NR3LskzLN6VPxMn0TG/9KDZD1KcTtlt3EWWUYBSTV6RAXYOYsUhrx1OWEjFLPgltm7alQhuwxQa2a/RMN98T5Oi+GekAZMqRwWfILoINYQIpUAza/bDf1M++N8Hd3lGKKJ+wNOFH6z+DBHQNMVtCZPCisgLd9yOeaFfrHHDQpzjOOFnDQNFkiTBw7TaFCdleES7JF3EtH7+25fJHCpYB/pOxnJv7WCV080R3emQKXPyfme3PaxflAcUZtC5scec+bKevs/b9Y/1lUF8t/lqM+xsyYM0cwr7zDlQ57rf1MVlLbr1tumFmtxdSNFrfha/r57TON8OXtPszu+6Qx1uPuH57Map36eBxOG70tre/4/vHwaS6SlbjuRj/7Irr1GHPq6wzv2c/nPnf3XHoz6zMWwwubpA/WnSstd9hYkHuxpDeErKaNpy5c3NXi5ad+Tjd9LJ4YF/MX9uLOYyTm1/1wWb2O6H3jz+WYfd6eFkdvlLbq/9z92v6Mm2+17Rfw6GxkIQwe54DFsVS0aPf0y7lvJD4Wl6UhUTGJHcNlkqjuAAq9JbapaQlyKQAkSiQw9ytL7ue49W8dqNrd+putXZh1Sz70mpbnu87F7ZdaNAOxRHELqMTonIpld3x52uAOAk40AhSY80yPAOufxGxhwTS+nQoDwejHEZMqjgWKZ1UM0pplUY+Y+4seXbY1ta1ARM39CZtTwSkB8rtOAfKPQRMlgSUvCt+c0lwLmQrVmididiurFGFQiYvgFRpcODUGq7JSbKMQQE1ExZlMVSWs2XeGJPv/h0DYZ5be1ft8PapGz45+fH7tLrjb0UjpE9ElANXJXVADhNO3ERWUc+Hut2TN1YRvp1FRJ0y2VWRErxDcvjpnSyKJSVT3gsrkJcbjg0Hwc3jusp80ZrgkvXldS3VXmpBqxjOClVWlWy9zvJxeErnUhnelHJnmyHgTIrVy4gtgJplCPNbd0WJ+ihzaT/El4kZDQUSkEjyaPnyGw+FELh6KPQl6bfffYUcpJR9E7AVp2zdWL4nFOIvnxw4wMpPmm/l34al0fu4TsTayyPrlK8DQehUrdSt8PIJNzCTYYmUMZbuBz8V4FTyQ2PZ5BKLkGx6zgR8/kVT+tTUEcYso6Lf03PDvmbmOMXLEoJ3pw9hcl1+u2i3/NOLdnx9FUr1SpBe+pL/djZIThcMurrPcyxNfSvfjTI5ne5p9BvAUzJ94feql/W2V8q06/u2JE/ZwINKWh/MHy17PT0+D61/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72E00A80F4707CE0401F0A0599094C</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747A8C1B6534E0401F0A07992E11</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamListView tear down" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="b0e887bf-215e-4a68-9a4a-4efdb58848bf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0f6d595b-c870-41a9-820c-b4fd91b30397"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("expectErrTypeStreamListView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectStreamActiveCnt",null);
tC.setPropertyValue("httpContentEncoding",null);
tC.setPropertyValue("streamAccountActiveCount",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("streamFlagCreateDateOld",null);
tC.setPropertyValue("streamFlagIgnoreCreatedDate",null);
tC.setPropertyValue("expectDBModifiedBy",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

tP.setPropertyValue("ActualStreamHandleIDList","");
tP.setPropertyValue("DeleteCount",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context LLASP" id="cc6b0709-6c85-4e34-aae9-d0f3429b148e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("errorRespType","HTTP/1.1 200 OK");

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" disabled="true" id="ebc038ca-6361-4959-b4c2-d339de171bfe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int counter;
String sh;
String rt;
String shCreatedBy;
String shValue;
String shExpireDate;
String nickname;
String expectGenericRightsToken;
String expectRequestingUser;
String expectDBDeletedTime;
String expectDBCreatedTime;
String streamFlagCreateDateOld;
String streamFlagIgnoreCreatedDate;
String streamFlagIgnoreDeletedDate;
String expectDBCreatedByNodeType;

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamListView",callTC.getPropertyValue("expectErrTypeStreamListView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBModifiedBy",callTC.getPropertyValue("expectDBModifiedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("expectStreamAvailCnt",callTC.getPropertyValue("expectStreamAvailCnt"));
tC.setPropertyValue("expectStreamActiveCnt",callTC.getPropertyValue("expectStreamActiveCnt"));
tC.setPropertyValue("expectRequestingUser",callTC.getPropertyValue("expectRequestingUser"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("streamFlagCreateDateOld",callTC.getPropertyValue("streamFlagCreateDateOld"));
tC.setPropertyValue("streamFlagIgnoreCreatedDate",callTC.getPropertyValue("streamFlagIgnoreCreatedDate"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));



if (tC.getPropertyValue("expectErrTypeStreamListView") == null || tC.getPropertyValue("expectErrTypeStreamListView") == "") {
	tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("expectStreamAvailCnt") == null || tC.getPropertyValue("expectStreamAvailCnt") == "") {
	tC.setPropertyValue("expectStreamAvailCnt",tP.getPropertyValue("streamlimit"))
}
if (tC.getPropertyValue("expectStreamActiveCnt") == null || tC.getPropertyValue("expectStreamActiveCnt") == "") {
	tC.setPropertyValue("expectStreamActiveCnt","0")
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "") {
	tC.setPropertyValue("streamAccountActiveCount","0")
}
if (tC.getPropertyValue("streamFlagIgnoreCreatedDate") == null || tC.getPropertyValue("streamFlagIgnoreCreatedDate") == "") {
	tC.setPropertyValue("streamFlagIgnoreCreatedDate","false")
}

if (tC.getPropertyValue("counter") == null ||
    tC.getPropertyValue("counter") == "") {
    		tC.setPropertyValue("counter","1");
    }
    
counter = tC.getPropertyValue("counter").toInteger();

for (int i = 0; i &lt;= counter; i++) {
	
	sh           = "streamhandleFULL_"  + (i + 1);
	rt           = "rightstokenidFULL_"   + (i + 1);
	shid           = "streamhandle_"  + (i + 1);
	shCreatedBy  = "expectDBCreatedBy_" + (i + 1);
	shDeletedBy  = "expectDBDeletedBy_" + (i + 1);	
	shModifiedBy  = "expectDBModifiedBy_" + (i + 1);
	shValue      = "expectDBStatus_"    + (i + 1);
	nickname     = "expectNickname_"    + (i + 1);
	expectRequestingUser = "expectRequestingUser_" + (i + 1);
	expectGenericRightsToken = "expectGenericRightsToken_" + (i + 1);
	expectDBDeletedTime = "expectDBDeletedTime_" + (i + 1);
	expectDBCreatedTime = "expectDBCreatedTime_" + (i + 1);
	streamFlagCreateDateOld = "streamFlagCreateDateOld_" + (i + 1);
	streamFlagIgnoreCreatedDate = "streamFlagIgnoreCreatedDate_" + (i + 1);
	streamFlagIgnoreDeletedDate = "streamFlagIgnoreDeletedDate_" + (i + 1);
	expectDBCreatedByNodeType = "expectDBCreatedByNodeType_" + (i + 1);

     tC.setPropertyValue(shid,callTC.getPropertyValue(shid));     		
	tC.setPropertyValue(sh,callTC.getPropertyValue(sh));
	tC.setPropertyValue(rt,callTC.getPropertyValue(rt));
	tC.setPropertyValue(shValue,callTC.getPropertyValue(shValue));
	tC.setPropertyValue(shCreatedBy,callTC.getPropertyValue(shCreatedBy));
	tC.setPropertyValue(shDeletedBy,callTC.getPropertyValue(shDeletedBy));
	tC.setPropertyValue(shModifiedBy,callTC.getPropertyValue(shModifiedBy));
	tC.setPropertyValue(nickname,callTC.getPropertyValue(nickname));
	tC.setPropertyValue(expectGenericRightsToken,callTC.getPropertyValue(expectGenericRightsToken));
	tC.setPropertyValue(expectRequestingUser,callTC.getPropertyValue(expectRequestingUser));
	tC.setPropertyValue(expectDBDeletedTime,callTC.getPropertyValue(expectDBDeletedTime));
	tC.setPropertyValue(expectDBCreatedTime,callTC.getPropertyValue(expectDBCreatedTime));
	tC.setPropertyValue(streamFlagCreateDateOld,callTC.getPropertyValue(streamFlagCreateDateOld));
	tC.setPropertyValue(streamFlagIgnoreCreatedDate,callTC.getPropertyValue(streamFlagIgnoreCreatedDate));
	tC.setPropertyValue(streamFlagIgnoreDeletedDate,callTC.getPropertyValue(streamFlagIgnoreDeletedDate));
	tC.setPropertyValue(expectDBCreatedByNodeType,callTC.getPropertyValue(expectDBCreatedByNodeType));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0e6479ff-4862-4226-a3aa-9b6dd3f134cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamListView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamListView" id="f806bb2c-7b40-4f6d-a637-193f9bbb1833"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamListView" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="a653f066-56f7-49f1-be91-8c47ebcf0fc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('GET - StreamListView');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);

def testStep = testRunner.testCase.getTestStepByName( "Validation of List of Streams get as per Details stored at StreamCreate for all" )
 log.info status
//if(status=="HTTP/1.1 200 OK")
//{  log.info status
//   testStep.disabled = false;
//}
//else
//{
//	 testStep.disabled = true;
//	}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="477185b6-4661-42d5-8b3a-de94e3797de2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamListView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamListView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamListView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" disabled="true" id="cc19c6b5-e2ea-4c75-9764-74bf4647199c"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//------------------------------------------------------//
def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
//------------------------------------------------------//
def getHistoryRecords(sh) {
	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();
	
	log.info "---------IN getHistoryRecords sh[$sh]";
	
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
     String hsh;
     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
     {
	int lastColon = sh.lastIndexOf('%');
     hsh = sh.substring(lastColon +3,sh.length());
     }
     else
     {
     int lastColon = sh.lastIndexOf(':');
     hsh = sh.substring(lastColon +1,sh.length());
     }
	String hresults = null;
	String hsql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh') 
	  order by STATUS
	  """;

	  log.info "hsql is $hsql";

	hresults = a.SelectFromDB(hsql,tP.getPropertyValue("targetSystem").toString());
	log.info hresults;

	/*
	*  If zero length, no need to continue;
	*/
	assert hresults.length() > 0;

	try {
		def hmyXML = new XmlSlurper().parseText(hresults);
		log.info "hmyXML.ResultSet.Row.size() is [" + hmyXML.ResultSet.Row.size() + "]";
		assert hmyXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", hresults);
	}
}
//------------------------------------------------------//


def a = new generalUtils.generalUtils(log);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnerror");
def urnGenericRightsToken = tP.getPropertyValue("urnGenericRightsToken");
def streamMaxDisplayCount = tP.getPropertyValue("streamMaxDisplayCount");
def streamlimit  = tP.getPropertyValue("streamlimit");
def acct  = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def counter = tC.getPropertyValue("counter").toInteger();
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamListView");
def XMLbody = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectModifiedBy = urnnode + tC.getPropertyValue("expectDBModifiedBy");
def expectStatus = tC.getPropertyValue("expectDBStatus");
def expectRT = tC.getPropertyValue("rightstokenidFULL");
def expectSH = tC.getPropertyValue("streamhandleFULL");
def expectNickname = tC.getPropertyValue("expectNickname");
def expectStreamActiveCnt = tC.getPropertyValue("streamAccountActiveCount");
def expectStreamAvailCnt = streamlimit.toInteger() - expectStreamActiveCnt.toInteger();
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String errorHost   = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String availStreamsCnt = "";
String major = tP.getPropertyValue("V1").toString();
String minor = tP.getPropertyValue("V2").toString();
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectDescription = "";
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean XMLbodynull     = false;
boolean doValidations   = true;
int displayStreamCount = 0;
int xmlIndex = 0;
int g = 0;
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();


/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/
if (tP.getPropertyValue("targetURL").length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = "https://qa.q.uvvu.com:" + tP.getPropertyValue("targetPort");
}

switch (errorRespType) {
	case "SUCCESS_NO_STREAMS":
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	

	case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
                                errorReason = "node_status_inactive";
                                errorLink = "$errorHost/deceerrors/error/error_response.html";
break;


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorRespType[$errorRespType]";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

/*
* Content-Length
*/
String httpContentEncoding = tC.getPropertyValue("httpContentEncoding");
String contentLength = tC.getPropertyValue("httpContentLength");
log.info "httpContentEncoding[$httpContentEncoding]";
log.info "contentLength[$contentLength]";
if (httpContentEncoding == "null" || httpContentEncoding == null) {
	log.info "Asserting contentLength.length() > 0";
	//assert contentLength.toInteger() > 0;
} else {
	log.info "Asserting httpContentEncoding is chunked";
	assert tC.getPropertyValue("httpContentEncoding") == "chunked";
}

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
//if(tC.getPropertyValue("nodetype")== "llp" )
this.log.info "HTTP Content-Type:  Expect: $expectHTTPcontenttype - Received: " + tC.getPropertyValue("httpContentType");
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" && errorRespType != "SUCCESS_NO_STREAMS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		
	} else if (errorRespType == "SUCCESS_NO_STREAMS") {
		log.info "--------------SUCCESS NO STREAMS---------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit") + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		if (tC.getPropertyValue("streamFlagCreateDateOld") != "true") {
			log.info "Assert ActiveStreamCount == 0 -- streamFlagCreateDateOld[" + tC.getPropertyValue("streamFlagCreateDateOld") + "]";
//			assert activeStreamCnt.toInteger() == 0;
			log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() + "]";
//			assert availStreamsCnt.toInteger() == streamlimit.toInteger();
		} else {
			log.info "ActiveStreamCount[$activeStreamCnt] == expectStreamActiveCnt[$expectStreamActiveCnt]";
			assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
			log.info "ActiveStreamCount[$availStreamsCnt] == " + streamlimit.toInteger() - activeStreamCnt.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger() - activeStreamCnt.toInteger();
		}
		
		log.info "Assert NO <Stream> Rows Present";
		assert myXML.Stream.size() == myXML.Stream.size();
		log.info "Assert NO <Stream>.<ResourceStatus> Rows Present";
//		assert myXML.Stream.ResourceStatus.size() == 0;
		log.info "Assert NO <Stream>.<RightsTokenID> Rows Present";
//		assert myXML.Stream.RightsTokenID.size() == 0;
		log.info "Assert NO <Stream>.<ExpirationDateTime> Rows Present";
//		assert myXML.Stream.ExpirationDateTime.size() == 0;
			
		/*  AvailableStreams */
		log.info "availStreamsCnt[$availStreamsCnt] - expectStreamAvailCnt[$expectStreamAvailCnt]";
		assert availStreamsCnt.toInteger() == expectStreamAvailCnt.toInteger();

		/* ActiveStreamCount */
		log.info "activeStreamCnt[$activeStreamCnt] - expectStreamActiveCnt[$expectStreamActiveCnt]";
		assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
	} else {
		log.info "--------------STREAM DATA VERIFICATION-----------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		this.log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit")  + "]";
		assert availStreamsCnt.toInteger() <= tP.getPropertyValue("streamlimit").toInteger();

		log.info "Assert ActiveStreamCount == $streamAccountActiveCount";
//		assert activeStreamCnt.toInteger() == streamAccountActiveCount;
		log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() - streamAccountActiveCount + "]";
//		assert availStreamsCnt.toInteger() == streamlimit.toInteger() - streamAccountActiveCount;
				
		/*
		*  Due to stream ordering we must work backwards from the 
		*  total number of streams created.  The newest created
		*  stream will be the first in the list.
		*/
		g = counter;

		log.info "g[$g] - counter[$counter]";

		/*
		*  By design, we never return more than 30 streams.   
		*  
		*/
		this.log.info "Recv Stream Count [" + myXML.Stream.size() + "] lessThan [$streamMaxDisplayCount]";;
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();

		
		while (g != 0) {
			String expectValue = tC.getPropertyValue("expectDBStatus_" + g);
			String expectcb = urnnode + tC.getPropertyValue("expectDBCreatedBy_" + g);
			String expectdb = urnnode + tC.getPropertyValue("expectDBDeletedBy_" + g);
			String expectmb = urnnode + tC.getPropertyValue("expectDBModifiedBy_" + g);
			String expectsh = tC.getPropertyValue("streamhandleFULL_" + g);
			String expectNick = tC.getPropertyValue("expectNickname_" + g);
			String expectrt  = tC.getPropertyValue("rightstokenFULL_" + g);
			String expectGeneric = tC.getPropertyValue("expectGenericRightsToken_" + g);
			String expectRequestingUser = tC.getPropertyValue("expectRequestingUser_" + g);
			String expectCDate = tC.getPropertyValue("expectDBCreatedTime_" + g);
			String expectDDate = tC.getPropertyValue("expectDBDeletedTime_" + g);
			String streamFlagIgnoreCreatedDate = tC.getPropertyValue("streamFlagIgnoreCreatedDate_" + g);
			String streamFlagIgnoreDeletedDate = tC.getPropertyValue("streamFlagIgnoreDeletedDate_" + g);
			String expectDBCreatedByNodeType = tC.getPropertyValue("expectDBCreatedByNodeType_" + g);
			String baseRightsToken = tC.getPropertyValue("rightstokenidFULL");

			log.info "g[$g]";

//			getHistoryRecords(expectsh);

			/* ---------HACKIE SMACKIE 
			*  The requestinguser displayed in streamview is NOT the 
			*  requestinguser supplied during streamcreation.  It is the 
			*  userid associated with security context (saml) which
			*  invoked the request.  Thus, all requestingusers in all
			*  streams displayed will be the same.  We will override
			*  that NOW!  LLP and LLPCS do not display the requestinguser
			*  element.
			*/
			//if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "llpcs") {
			//	expectRequestingUser = "";
			//} else {
				expectRequestingUser = tC.getPropertyValue("assertionUserIdFULL");
			//}
						
			/*
			*  if the nodetype is 'dlp' or 'llp' streams in 'deleted' status
			*   are not displayed.  Thus, we must adjust accordingly.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp") {
				//if (	expectValue == "active") {
				//	doValidations = true;
				//} else {
				//	doValidations = false;
				//}
			//} else {
				doValidations = true;
			}

			/*
			*  Special processing is required for nickname just
			*  incase it contains special xml characters.
			*/
			if (expectNick != null) {
				if (expectNick.length() > 0) {
					expectNick = expectNick.replace('&amp;','&');
					expectNick = expectNick.replace('&lt;','<');
					expectNick = expectNick.replace('&gt;','>');
					expectNick = expectNick.replace('&apos;','\'');
				}
			}

			/*
			*  There maybe one or more rightstokens created by the test
			*  case.  Thus multiple streams maybe have the same 
			*  rights token.  We will assume that if we get a null
			*  rightstokenFULL_count value that only one rightstoken
			*  was created for the test and that will be contained 
			*  in rightstokenfull.
			*/
			if (expectrt == null) {
				log.info "RIGHTSTOKENFULL - Override to the baseRightsToken value [$baseRightsToken]";
				expectrt = baseRightsToken;
			}
			log.info "g[$g] - doValidations [$doValidations] - nodetype[" + tC.getPropertyValue("nodetype") + "] - expectValue[$expectValue]";
			
			if (doValidations) {
				displayStreamCount++;
				log.info "****************************************"+displayStreamCount+"************************************"

				/*  StreamHandleID */
				
				String recvsh = myXML.Stream[xmlIndex].@StreamHandleID.text();
				log.info "xmlIndex[$xmlIndex] - StreamHandleID - recvsh[$recvsh] - expect[$expectsh]";
//				assert recvsh == expectsh;
				
				//StreamClientNickname
				if (expectNick != null) {
					String recvnick = myXML.Stream[xmlIndex].StreamClientNickname;
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - recv[$recvnick] - expect[$expectNick]";
					assert expectNick == recvnick;
				} else {
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - Element NOT present";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
				}
				
				// RequestingUserID
				String recvru = myXML.Stream[xmlIndex].RequestingUserID;
				//log.info "xmlIndex[$xmlIndex] - RequestingUserID - recv[$recvru] - expect[$expectRequestingUser] - expectDBCreatedByNodeType[$expectDBCreatedByNodeType]";
				//assert recvru == expectRequestingUser;
		
				//RightsTokenID
				String recvrt = myXML.Stream[xmlIndex].RightsTokenID.text();
				if (expectGeneric == "true") {
					expectrt = urnGenericRightsToken;
				}
				log.info "xmlIndex[$xmlIndex] - RightsTokenID - recvrt[$recvrt] - expectrt[$expectrt] - expectGeneric[$expectGeneric]";
				assert recvrt == expectrt;
				
				//ExpirationDateTime
				String recvet = myXML.Stream[xmlIndex].ExpirationDateTime;
				log.info "xmlIndex[$xmlIndex] - ExpirationDateTime - is NOT null";
				assert recvet.length() > 0;

				//CreatedBy
				String recvcb   = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreatedBy.text();
				log.info "xmlIndex[$xmlIndex] - CreatedBy - recvcb[$recvcb] - expectcb[$expectcb]";
				assert recvcb == expectcb;

				//CreationDate
				if (streamFlagIgnoreCreatedDate != "true") {
					log.info "xmlIndex[$xmlIndex] - CreationDate - is NOT null";
					String recvDate = "";
					String recvcd = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreationDate.text();
					recvDate = formatDate(recvcd);
					def j = a.dateDiff(recvDate,expectCDate,"seconds");
					log.info "xmlIndex[$xmlIndex] - CreationDate - recvDate[$recvDate] - expectCDate[$expectCDate] DIFF [$j]";
					assert recvcd.length() > 0;
					log.info "xmlIndex[$xmlIndex] - CreationDate - Differences less that 10 seconds";
					//assert j <= 10;
				} else {
					log.info "xmlIndex[$xmlIndex] - CreationDate - IGNORED DUE TO streamFlagIgnoreCreatedDate" ;
				}

				//Value
				String recvValue = myXML.Stream[xmlIndex].ResourceStatus.Current.Value;
				log.info "xmlIndex[$xmlIndex] - Value - recvValue[$recvValue] - expectValue[$expectValue]";
				if (expectValue == "active") {
					assert recvValue == "urn:dece:type:status:active";
				} else {
					assert recvValue == "urn:dece:type:status:deleted";
				}

				//Description
				switch (expectValue) {
					case "active":
						expectDescription = "active";
						break;
					default:
						expectDescription = "deleted";
						break;
				}
				String recvDesc = myXML.Stream[xmlIndex].ResourceStatus.Current.Description;
				log.info "xmlIndex[$xmlIndex] - Description - recvDesc[$recvDesc] - expectDesc[$expectDescription]";
				assert recvDesc == expectDescription;

				/*  Nickname validation */
				if (expectNick == null || expectNick == "") {
					log.info "Asserting no <StreamClientNickname> element exists";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
					assert myXML.Stream[xmlIndex].StreamClientNickname.text() == "";
				} else {
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 1;
					String recvNick = myXML.Stream[xmlIndex].StreamClientNickname.text();
					log.info "xmlIndex[$xmlIndex] - recvNick[$recvNick] - expectNick[$expectNick]";
					assert recvNick == expectNick;
				}
									
				/*
				*  If the stream is deleted....
				*/
				log.info "DeletedBy length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length();
				log.info "DeletionDate length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length();
				
				if (	expectValue == "deleted") {
					String recvDeletedBy = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString();
					String recvDeletionDate = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString();
					
					//DeletedBy
					this.log.info "recvDeletedBy[$recvDeletedBy] - expectdb[$expectdb]";
					assert recvDeletedBy == expectdb;
					
					//DeletionDate
					if (streamFlagIgnoreDeletedDate != "true") {
						String recvDate = formatDate(recvDeletionDate);
						def j = a.dateDiff(expectDDate,recvDate,"seconds");
						log.info "xmlIndex[$xmlIndex] - DeletionDate - recvDate[$recvDate] - expectDDate[$expectDDate] DIFF [$j]";
						assert recvDate.length() > 0;
						log.info "xmlIndex[$xmlIndex] - DeletionDate - Difference less that 10 seconds";
						assert j <= 10;
					} else {
						log.info "xmlIndex[$xmlIndex] - DeletionDate - IGNORED DUE TO streamFlagIgnoreDeletedDate" ;
					}
				} else {
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length()    == 0;
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length() == 0;
				}
				/*
				*
				*  History validation
				*
				*/
//				def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));
//
//				int rCnt = myHistoryXML.ResultSet.Row.size();
//
//				log.info "-------------HISTORY-----------------";
//				log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
//				if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
//					rCnt -= 1;
//				} 
//				assert myXML.Stream[xmlIndex].ResourceStatus.History.Prior.size() == rCnt;
		
//				for (int i = 0; i < rCnt; i++) {
//					String hrecvModifiedBy = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModifiedBy.text();
//					String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
//					log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
//					assert hrecvModifiedBy == expectmb;
//
//					String hrecvStatus = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Value;
//					String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
//					log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
//					if (hexpectStatus == "active") {
//						assert hrecvStatus == "urn:dece:type:status:active";
//					} else {
//						assert hrecvStatus == "urn:dece:type:status:deleted";
//					}
//					
//					String hrecvDescription = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Description;
//					switch (hexpectStatus) {
//						case "active": hexpectDescription = "active"; break;
//						case "deleted": hexpectDescription = "deleted"; break;
//						default: hexpectDescription = "deleted"; break;
//					}
//					log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
//					assert hrecvDescription == hexpectDescription;
//	
//					String hrecvModificationDate = formatDate(myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModificationDate.text());
//					int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
//					String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
//					log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
//					assert hrecvModificationDate.replace("/","-") == hexpectModificationDate;
//					
//				}
			
				xmlIndex++;
			}

			/*
			*  By design, we never return more than 30 streams.   So
			*  if we encounter our 30th stream we will break out of 
			*  the XML validation routines and allow size() 
			*  invocations on the xml body to verify no additional
			*  streams were returned.
			*/
			if (displayStreamCount == streamMaxDisplayCount.toInteger()) {
				break;
			}
			
			g--;
		}
//
//		log.info "--------------------FINAL XML size() Validations -------------------";
//		log.info "ResourceStatus size: "  + myXML.Stream.ResourceStatus.size();
//		log.info "ResourceStatus.Current size: " + myXML.Stream.ResourceStatus.Current.size();
//		log.info "ResourceStatus.Value size: " + myXML.Stream.ResourceStatus.Current.Value.size();
//		log.info "ResourceStatus.Description size: " + myXML.Stream.ResourceStatus.Current.Description.size();
//		log.info "RightsTokenID size: "  + myXML.Stream.RightsTokenID.size();
//		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();
//
//		log.info "Stream.size() LTE MAX allowed of " + streamMaxDisplayCount.toInteger();
//		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
//		
//		log.info "Stream.size() IS -- recv[" + myXML.Stream.size() + "] Expect[$displayStreamCount]";
//		assert myXML.Stream.size() == displayStreamCount;
//		
//		assert myXML.Stream.ResourceStatus.size() == displayStreamCount;
//		assert myXML.Stream.ResourceStatus.Current.size() == displayStreamCount;
//		assert myXML.Stream.ResourceStatus.Current.Value.size() == displayStreamCount;
//		assert myXML.Stream.ResourceStatus.Current.Description.size() == displayStreamCount;
//		assert myXML.Stream.RightsTokenID.size()  == displayStreamCount;
//		assert myXML.Stream.ExpirationDateTime.size() == displayStreamCount;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Verify the response headers and body" disabled="true" id="b0bfe7cf-2194-4260-951f-de66b560da02"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//------------------------------------------------------//
def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
//------------------------------------------------------//
def getHistoryRecords(sh) {
	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();
	
	log.info "---------IN getHistoryRecords sh[$sh]";
	
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
     String hsh;
     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
     {
	int lastColon = sh.lastIndexOf('%');
     hsh = sh.substring(lastColon +3,sh.length());
     }
     else
     {
     int lastColon = sh.lastIndexOf(':');
     hsh = sh.substring(lastColon +1,sh.length());
     }
	String hresults = null;
	String hsql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh') 
	  order by STATUS
	  """;

	  log.info "hsql is $hsql";

	hresults = a.SelectFromDB(hsql,tP.getPropertyValue("targetSystem").toString());
	log.info hresults;

	/*
	*  If zero length, no need to continue;
	*/
	assert hresults.length() > 0;

	try {
		def hmyXML = new XmlSlurper().parseText(hresults);
		log.info "hmyXML.ResultSet.Row.size() is [" + hmyXML.ResultSet.Row.size() + "]";
		assert hmyXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", hresults);
	}
}
//------------------------------------------------------//


def a = new generalUtils.generalUtils(log);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnerror");
def urnGenericRightsToken = tP.getPropertyValue("urnGenericRightsToken");
def streamMaxDisplayCount = tP.getPropertyValue("streamMaxDisplayCount");
def streamlimit  = tP.getPropertyValue("streamlimit");
def acct  = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def counter = tC.getPropertyValue("counter").toInteger();
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamListView");
def XMLbody = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectModifiedBy = urnnode + tC.getPropertyValue("expectDBModifiedBy");
def expectStatus = tC.getPropertyValue("expectDBStatus");
def expectRT = tC.getPropertyValue("rightstokenidFULL");
def expectSH = tC.getPropertyValue("streamhandleFULL");
def expectNickname = tC.getPropertyValue("expectNickname");
def expectStreamActiveCnt = tC.getPropertyValue("streamAccountActiveCount");
def expectStreamAvailCnt = streamlimit.toInteger() - expectStreamActiveCnt.toInteger();
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String errorHost   = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String availStreamsCnt = "";
String major = tP.getPropertyValue("V1").toString();
String minor = tP.getPropertyValue("V2").toString();
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectDescription = "";
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean XMLbodynull     = false;
boolean doValidations   = true;
int displayStreamCount = 0;
int xmlIndex = 0;
int g = 0;
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();


/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/
if (tP.getPropertyValue("targetURL").length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = "https://qa.q.uvvu.com:" + tP.getPropertyValue("targetPort");
}

switch (errorRespType) {
	case "SUCCESS_NO_STREAMS":
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	

	case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
                                errorReason = "node_status_inactive";
                                errorLink = "$errorHost/deceerrors/error/error_response.html";
break;


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorRespType[$errorRespType]";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

/*
* Content-Length
*/
String httpContentEncoding = tC.getPropertyValue("httpContentEncoding");
String contentLength = tC.getPropertyValue("httpContentLength");
log.info "httpContentEncoding[$httpContentEncoding]";
log.info "contentLength[$contentLength]";
if (httpContentEncoding == "null" || httpContentEncoding == null) {
	log.info "Asserting contentLength.length() > 0";
	//assert contentLength.toInteger() > 0;
} else {
	log.info "Asserting httpContentEncoding is chunked";
	assert tC.getPropertyValue("httpContentEncoding") == "chunked";
}

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
//if(tC.getPropertyValue("nodetype")== "llp" )
this.log.info "HTTP Content-Type:  Expect: $expectHTTPcontenttype - Received: " + tC.getPropertyValue("httpContentType");
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" && errorRespType != "SUCCESS_NO_STREAMS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		
	} else if (errorRespType == "SUCCESS_NO_STREAMS") {
		log.info "--------------SUCCESS NO STREAMS---------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit") + "]";
		assert availStreamsCnt <= tP.getPropertyValue("streamlimit");

		if (tC.getPropertyValue("streamFlagCreateDateOld") != "true") {
			log.info "Assert ActiveStreamCount == 0 -- streamFlagCreateDateOld[" + tC.getPropertyValue("streamFlagCreateDateOld") + "]";
			assert activeStreamCnt.toInteger() == 0;
			log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger();
		} else {
			log.info "ActiveStreamCount[$activeStreamCnt] == expectStreamActiveCnt[$expectStreamActiveCnt]";
			assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
			log.info "ActiveStreamCount[$availStreamsCnt] == " + streamlimit.toInteger() - activeStreamCnt.toInteger() + "]";
			assert availStreamsCnt.toInteger() == streamlimit.toInteger() - activeStreamCnt.toInteger();
		}
		
		log.info "Assert NO <Stream> Rows Present";
		assert myXML.Stream.size() == myXML.Stream.size();
		log.info "Assert NO <Stream>.<ResourceStatus> Rows Present";
		assert myXML.Stream.ResourceStatus.size() == 0;
		log.info "Assert NO <Stream>.<RightsTokenID> Rows Present";
		assert myXML.Stream.RightsTokenID.size() == 0;
		log.info "Assert NO <Stream>.<ExpirationDateTime> Rows Present";
		assert myXML.Stream.ExpirationDateTime.size() == 0;
			
		/*  AvailableStreams */
		log.info "availStreamsCnt[$availStreamsCnt] - expectStreamAvailCnt[$expectStreamAvailCnt]";
		assert availStreamsCnt.toInteger() == expectStreamAvailCnt.toInteger();

		/* ActiveStreamCount */
		log.info "activeStreamCnt[$activeStreamCnt] - expectStreamActiveCnt[$expectStreamActiveCnt]";
		assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
	} else {
		log.info "--------------STREAM DATA VERIFICATION-----------------";
		availStreamsCnt = myXML.@AvailableStreams.text();
		
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		this.log.info "AvailableStreams[$availStreamsCnt] lte System Limit of [" + tP.getPropertyValue("streamlimit")  + "]";
		assert availStreamsCnt.toInteger() <= tP.getPropertyValue("streamlimit").toInteger();

		log.info "Assert ActiveStreamCount == $streamAccountActiveCount";
//		assert activeStreamCnt.toInteger() == streamAccountActiveCount;
		log.info "AvailableStreams - recv[$availStreamsCnt] - expect[" + streamlimit.toInteger() - streamAccountActiveCount + "]";
//		assert availStreamsCnt.toInteger() == streamlimit.toInteger() - streamAccountActiveCount;
				
		/*
		*  Due to stream ordering we must work backwards from the 
		*  total number of streams created.  The newest created
		*  stream will be the first in the list.
		*/
		g = counter;

		log.info "g[$g] - counter[$counter]";

		/*
		*  By design, we never return more than 30 streams.   
		*  
		*/
		this.log.info "Recv Stream Count [" + myXML.Stream.size() + "] lessThan [$streamMaxDisplayCount]";;
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();

		
		while (g != 0) {
			String expectValue = tC.getPropertyValue("expectDBStatus_" + g);
			String expectcb = urnnode + tC.getPropertyValue("expectDBCreatedBy_" + g);
			String expectdb = urnnode + tC.getPropertyValue("expectDBDeletedBy_" + g);
			String expectmb = urnnode + tC.getPropertyValue("expectDBModifiedBy_" + g);
			String expectsh = tC.getPropertyValue("streamhandleFULL_" + g);
			String expectNick = tC.getPropertyValue("expectNickname_" + g);
			String expectrt  = tC.getPropertyValue("rightstokenFULL_" + g);
			String expectGeneric = tC.getPropertyValue("expectGenericRightsToken_" + g);
			String expectRequestingUser = tC.getPropertyValue("expectRequestingUser_" + g);
			String expectCDate = tC.getPropertyValue("expectDBCreatedTime_" + g);
			String expectDDate = tC.getPropertyValue("expectDBDeletedTime_" + g);
			String streamFlagIgnoreCreatedDate = tC.getPropertyValue("streamFlagIgnoreCreatedDate_" + g);
			String streamFlagIgnoreDeletedDate = tC.getPropertyValue("streamFlagIgnoreDeletedDate_" + g);
			String expectDBCreatedByNodeType = tC.getPropertyValue("expectDBCreatedByNodeType_" + g);
			String baseRightsToken = tC.getPropertyValue("rightstokenidFULL");

			log.info "g[$g]";

			getHistoryRecords(expectsh);

			/* ---------HACKIE SMACKIE 
			*  The requestinguser displayed in streamview is NOT the 
			*  requestinguser supplied during streamcreation.  It is the 
			*  userid associated with security context (saml) which
			*  invoked the request.  Thus, all requestingusers in all
			*  streams displayed will be the same.  We will override
			*  that NOW!  LLP and LLPCS do not display the requestinguser
			*  element.
			*/
			//if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "llpcs") {
			//	expectRequestingUser = "";
			//} else {
				expectRequestingUser = tC.getPropertyValue("assertionUserIdFULL");
			//}
						
			/*
			*  if the nodetype is 'dlp' or 'llp' streams in 'deleted' status
			*   are not displayed.  Thus, we must adjust accordingly.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp") {
				//if (	expectValue == "active") {
				//	doValidations = true;
				//} else {
				//	doValidations = false;
				//}
			//} else {
				doValidations = true;
			}

			/*
			*  Special processing is required for nickname just
			*  incase it contains special xml characters.
			*/
			if (expectNick != null) {
				if (expectNick.length() > 0) {
					expectNick = expectNick.replace('&amp;','&');
					expectNick = expectNick.replace('&lt;','<');
					expectNick = expectNick.replace('&gt;','>');
					expectNick = expectNick.replace('&apos;','\'');
				}
			}

			/*
			*  There maybe one or more rightstokens created by the test
			*  case.  Thus multiple streams maybe have the same 
			*  rights token.  We will assume that if we get a null
			*  rightstokenFULL_count value that only one rightstoken
			*  was created for the test and that will be contained 
			*  in rightstokenfull.
			*/
			if (expectrt == null) {
				log.info "RIGHTSTOKENFULL - Override to the baseRightsToken value [$baseRightsToken]";
				expectrt = baseRightsToken;
			}
			log.info "g[$g] - doValidations [$doValidations] - nodetype[" + tC.getPropertyValue("nodetype") + "] - expectValue[$expectValue]";
			
			if (doValidations) {
				displayStreamCount++;
				log.info "****************************************"+displayStreamCount+"************************************"

				/*  StreamHandleID */
				
				String recvsh = myXML.Stream[xmlIndex].@StreamHandleID.text();
				log.info "xmlIndex[$xmlIndex] - StreamHandleID - recvsh[$recvsh] - expect[$expectsh]";
				assert recvsh == expectsh;
				
				//StreamClientNickname
				if (expectNick != null) {
					String recvnick = myXML.Stream[xmlIndex].StreamClientNickname;
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - recv[$recvnick] - expect[$expectNick]";
					assert expectNick == recvnick;
				} else {
					log.info "xmlIndex[$xmlIndex] - StreamClientNickname - Element NOT present";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
				}
				
				// RequestingUserID
				String recvru = myXML.Stream[xmlIndex].RequestingUserID;
				//log.info "xmlIndex[$xmlIndex] - RequestingUserID - recv[$recvru] - expect[$expectRequestingUser] - expectDBCreatedByNodeType[$expectDBCreatedByNodeType]";
				//assert recvru == expectRequestingUser;
		
				//RightsTokenID
				String recvrt = myXML.Stream[xmlIndex].RightsTokenID.text();
				if (expectGeneric == "true") {
					expectrt = urnGenericRightsToken;
				}
				log.info "xmlIndex[$xmlIndex] - RightsTokenID - recvrt[$recvrt] - expectrt[$expectrt] - expectGeneric[$expectGeneric]";
				assert recvrt == expectrt;
				
				//ExpirationDateTime
				String recvet = myXML.Stream[xmlIndex].ExpirationDateTime;
				log.info "xmlIndex[$xmlIndex] - ExpirationDateTime - is NOT null";
				assert recvet.length() > 0;

				//CreatedBy
				String recvcb   = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreatedBy.text();
				log.info "xmlIndex[$xmlIndex] - CreatedBy - recvcb[$recvcb] - expectcb[$expectcb]";
				assert recvcb == expectcb;

				//CreationDate
				if (streamFlagIgnoreCreatedDate != "true") {
					log.info "xmlIndex[$xmlIndex] - CreationDate - is NOT null";
					String recvDate = "";
					String recvcd = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreationDate.text();
					recvDate = formatDate(recvcd);
					def j = a.dateDiff(recvDate,expectCDate,"seconds");
					log.info "xmlIndex[$xmlIndex] - CreationDate - recvDate[$recvDate] - expectCDate[$expectCDate] DIFF [$j]";
					assert recvcd.length() > 0;
					log.info "xmlIndex[$xmlIndex] - CreationDate - Differences less that 10 seconds";
					//assert j <= 10;
				} else {
					log.info "xmlIndex[$xmlIndex] - CreationDate - IGNORED DUE TO streamFlagIgnoreCreatedDate" ;
				}

				//Value
				String recvValue = myXML.Stream[xmlIndex].ResourceStatus.Current.Value;
				log.info "xmlIndex[$xmlIndex] - Value - recvValue[$recvValue] - expectValue[$expectValue]";
				if (expectValue == "active") {
					assert recvValue == "urn:dece:type:status:active";
				} else {
					assert recvValue == "urn:dece:type:status:deleted";
				}

				//Description
				switch (expectValue) {
					case "active":
						expectDescription = "active";
						break;
					default:
						expectDescription = "deleted";
						break;
				}
				String recvDesc = myXML.Stream[xmlIndex].ResourceStatus.Current.Description;
				log.info "xmlIndex[$xmlIndex] - Description - recvDesc[$recvDesc] - expectDesc[$expectDescription]";
				assert recvDesc == expectDescription;

				/*  Nickname validation */
				if (expectNick == null || expectNick == "") {
					log.info "Asserting no <StreamClientNickname> element exists";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
					assert myXML.Stream[xmlIndex].StreamClientNickname.text() == "";
				} else {
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 1;
					String recvNick = myXML.Stream[xmlIndex].StreamClientNickname.text();
					log.info "xmlIndex[$xmlIndex] - recvNick[$recvNick] - expectNick[$expectNick]";
					assert recvNick == expectNick;
				}
									
				/*
				*  If the stream is deleted....
				*/
				log.info "DeletedBy length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length();
				log.info "DeletionDate length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length();
				
				if (	expectValue == "deleted") {
					String recvDeletedBy = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString();
					String recvDeletionDate = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString();
					
					//DeletedBy
					this.log.info "recvDeletedBy[$recvDeletedBy] - expectdb[$expectdb]";
					assert recvDeletedBy == expectdb;
					
					//DeletionDate
					if (streamFlagIgnoreDeletedDate != "true") {
						String recvDate = formatDate(recvDeletionDate);
						def j = a.dateDiff(expectDDate,recvDate,"seconds");
						log.info "xmlIndex[$xmlIndex] - DeletionDate - recvDate[$recvDate] - expectDDate[$expectDDate] DIFF [$j]";
						assert recvDate.length() > 0;
						log.info "xmlIndex[$xmlIndex] - DeletionDate - Difference less that 10 seconds";
						assert j <= 10;
					} else {
						log.info "xmlIndex[$xmlIndex] - DeletionDate - IGNORED DUE TO streamFlagIgnoreDeletedDate" ;
					}
				} else {
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length()    == 0;
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length() == 0;
				}
				/*
				*
				*  History validation
				*
				*/
				def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

				int rCnt = myHistoryXML.ResultSet.Row.size();

				log.info "-------------HISTORY-----------------";
				log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
				if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
					rCnt -= 1;
				} 
				assert myXML.Stream[xmlIndex].ResourceStatus.History.Prior.size() == rCnt;
		
				for (int i = 0; i < rCnt; i++) {
					String hrecvModifiedBy = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModifiedBy.text();
					String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
					log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
					assert hrecvModifiedBy == expectmb;

					String hrecvStatus = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Value;
					String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
					log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
					if (hexpectStatus == "active") {
						assert hrecvStatus == "urn:dece:type:status:active";
					} else {
						assert hrecvStatus == "urn:dece:type:status:deleted";
					}
					
					String hrecvDescription = myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].Description;
					switch (hexpectStatus) {
						case "active": hexpectDescription = "active"; break;
						case "deleted": hexpectDescription = "deleted"; break;
						default: hexpectDescription = "deleted"; break;
					}
					log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
					assert hrecvDescription == hexpectDescription;
	
					String hrecvModificationDate = formatDate(myXML.Stream[xmlIndex].ResourceStatus.History.Prior[i].@ModificationDate.text());
					int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
					String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
					log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
					assert hrecvModificationDate.replace("/","-") == hexpectModificationDate;
					
				}
			
				xmlIndex++;
			}

			/*
			*  By design, we never return more than 30 streams.   So
			*  if we encounter our 30th stream we will break out of 
			*  the XML validation routines and allow size() 
			*  invocations on the xml body to verify no additional
			*  streams were returned.
			*/
			if (displayStreamCount == streamMaxDisplayCount.toInteger()) {
				break;
			}
			
			g--;
		}

		log.info "--------------------FINAL XML size() Validations -------------------";
		log.info "ResourceStatus size: "  + myXML.Stream.ResourceStatus.size();
		log.info "ResourceStatus.Current size: " + myXML.Stream.ResourceStatus.Current.size();
		log.info "ResourceStatus.Value size: " + myXML.Stream.ResourceStatus.Current.Value.size();
		log.info "ResourceStatus.Description size: " + myXML.Stream.ResourceStatus.Current.Description.size();
		log.info "RightsTokenID size: "  + myXML.Stream.RightsTokenID.size();
		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();

		log.info "Stream.size() LTE MAX allowed of " + streamMaxDisplayCount.toInteger();
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		log.info "Stream.size() IS -- recv[" + myXML.Stream.size() + "] Expect[$displayStreamCount]";
//		assert myXML.Stream.size() == displayStreamCount;
		
		assert myXML.Stream.ResourceStatus.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Value.size() == displayStreamCount;
		assert myXML.Stream.ResourceStatus.Current.Description.size() == displayStreamCount;
		assert myXML.Stream.RightsTokenID.size()  == displayStreamCount;
		assert myXML.Stream.ExpirationDateTime.size() == displayStreamCount;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validation of List of Streams get as per Details stored at StreamCreate for all" disabled="true" id="9c93049f-4c92-4502-a8e5-774adef89d00"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamCreate');
def delete_streamTC = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamDelete');

tC.setPropertyValue("StreamDeleted",delete_streamTC.getPropertyValue("StreamDeleted"));

tC.setPropertyValue("StreamList",commonTC.getPropertyValue("StreamList"));
def streamCreateCount = context.expand( '${#Project#StreamCreateCount}' )
tC.setPropertyValue("accountList",commonTC.getPropertyValue("accountList"));

tC.setPropertyValue("streamCreateCount",streamCreateCount);

def xMLbody = context.expand( '${#TestCase#XMLbody}' )

def nodeid = context.expand( '${#TestCase#nodeid}' )
def node_flag=true;
def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' ).toString();
def StreamList=context.expand( '${#TestCase#StreamList}' ).toString();
def accountList=context.expand( '${#TestCase#accountList}' ).toString();
log.info "accountList :$accountList"
log.info "assertionAccountIdFULL :$assertionAccountIdFULL"
def rawRequest = context.expand( '${GET - StreamListView#RawRequest}' )

String[] List=StreamList.split("#",2);

String ExpectedAcct=List[0];

String[] ExpStreamLL=List[1].split(";");

HashMap Expstrm = new HashMap();

ArrayList<StreamObj> StmObj=new ArrayList<StreamObj>();
int j=0;


if(nodeid=="LLASP_CS_1" || nodeid=="DLASP" || nodeid=="DLASP_CS_1" || nodeid=="LLASP_CS_2"|| nodeid=="DLASP_CS_2")
{
  node_flag=true;
}
else
{ node_flag=false  }

while(j<ExpStreamLL.length)
{   
	String[] str= ExpStreamLL[j].split("!");
	    
	  Expstrm.put(str[0], str[1]);
	  String[] val=str[1].split(",");
//	  log.info "handle id"+str[0] +";" +"property"+ str[1]
	  j++;
//	  log.info val.length;
//	  log.info "Rights :"+val[0]+", User:"+val[1]//+",user:"+val[2]
	  StmObj.add(new StreamObj(str[0],val[0],val[1]));
	
}
//log.info "object :"+StmObj.get(1).getStreamHandleID();
def response = context.expand( '${GET - StreamListView#Response}' )
def myXML;
HashMap Actstrm = new HashMap();

int streamDeleteCount = Integer.parseInt(context.expand( '${#Project#StreamDeleteCount}' ))

def streamDeleted = context.expand( '${#TestCase#StreamDeleted}' )
String[] DeletedStream=streamDeleted.split(";");

if(response!="")
{
myXML = new XmlSlurper().parseText(response).declareNamespace('dece':tP.getPropertyValue("coordinatorSchema"));;
  
  int ActualStreamCount=myXML.Stream.size();
  log.info "Expected StreamCount $streamCreateCount plus, Deleted Stream Count $streamDeleteCount ,Actual StreamCount $ActualStreamCount"
  if(node_flag==true)
    {  assert ActualStreamCount==Integer.parseInt(streamCreateCount)+streamDeleteCount;}
  else
    {  assert ActualStreamCount==Integer.parseInt(streamCreateCount);
    	}
  log.info "ActualStreamCount :"+ ActualStreamCount
   int count=0;
  for(int i=0;i<ActualStreamCount;i++)
  {  
  	def ActualStreamHandleID=myXML.Stream[i].@StreamHandleID.text();
  	def ActualRghtsTokenID=myXML.Stream[i].RightsTokenID.text();
  	def ActualRequestingUserID=myXML.Stream[i].RequestingUserID.text();
  	def ActExpirationDateTime=myXML.Stream[i].ExpirationDateTime.text();
  	def ResourceStatus=myXML.Stream[i].ResourceStatus.Current.Value.text(); 
  	def Description=myXML.Stream[i].ResourceStatus.Current.Description.text(); 
//  	log.info "ResourceStatus"+Description
  	//urn:dece:type:status:active
     
//     <Value>urn:dece:type:status:deleted</Value>
//                <Description>deleted</Description>
       
     
  	 
  	     for(int s=0; s<StmObj.size();s++)
  	     {
  	         if (ActualStreamHandleID==StmObj.get(s).getStreamHandleID())
  	         {
  	         	
  	           count++;
   	          def ExpectUser= StmObj.get(s).getUserid()
  	          def ExpectRght= StmObj.get(s).getRightstokenidFULL() ;

                log.info "For StreamID :'$ActualStreamHandleID' Expected rightId :'$ExpectRght' ,ActualRights:'$ActualRghtsTokenID'"
  	           assert ExpectRght==ActualRghtsTokenID;
  	   	     log.info "For StreamID :'$ActualStreamHandleID' Expected USERID :'$ExpectUser' ,Actual userID:'$ActualRequestingUserID '"  	           
  	   	     assert ExpectUser==ActualRequestingUserID;
  	   	   
  	           }  	

  	           int flag=0;
  	              for(int x=0;x<DeletedStream.length;x++)
  	              {
  	              	  if (ActualStreamHandleID==DeletedStream[x])
  	              	     {  
  	              	     	log.info "For StreamID :'$ActualStreamHandleID' expected ResourceStatus :'urn:dece:type:status:deleted' ,Actual resource status:'$ResourceStatus'"
  	              	        assert ResourceStatus=="urn:dece:type:status:deleted"
  	              	         log.info "For StreamID :'$ActualStreamHandleID' expected Description :'deleted' ,Actual Description :'$Description'"
  	              	         assert Description=="deleted"
  	              	          
  	              	         flag=1;
  	              	         break;
  	              	     	}
  	               	}

  	               if(flag==0)
  	               {
  	               	 log.info "For StreamID :'$ActualStreamHandleID' expected ResourceStatus :'urn:dece:type:status:active' ,Actual resource status:'$ResourceStatus'"
  	               	assert ResourceStatus=="urn:dece:type:status:active"
  	              	      log.info "For StreamID :'$ActualStreamHandleID' expected Description :'active' ,Actual Description :'$Description'"  
  	              	         assert Description=="active"
  	              	          
  	               	}
  	   }
     }  
  	   if(node_flag==true && count==ActualStreamCount)
  	   {   log.info "nodeid :'$nodeid' will get list of all active and deleted streams"
  	   	 log.info "All streams validated active and deleted streams";
  	   	 assert count==ActualStreamCount;
  	   	}
  	   else if(node_flag==false && streamCreateCount==count.toString())
  	   {
           log.info "nodeid :'$nodeid' not able to get deleted streams"
  	   	log.info "All streams validated  expect deleted streams , Total count of streams details in response $ActualStreamCount";
  	   	log.info " Actual Stream count to be validate '$streamCreateCount' ,expected Stream count :$ActualStreamCount "
  	   	log.error " total Streams validated $count";
  	   	 assert streamCreateCount==ActualStreamCount.toString();
  	   	 assert streamCreateCount==count.toString()

  	   }
  	   else{
  	   	  log.info "nodeid :'$nodeid'"
  	   	 log.error "List view don't have all streams in Account $accountList ";
  	   	 assert count==ActualStreamCount;
  	   	}
  
  
}



class StreamObj
{ 
	private String StreamHandleID;
	private String rightstokenidFULL;
	private String Userid;
	private static int keyLs;

	StreamObj(String StreamHandleID,String rightstokenidFULL,String Userid){
		if(keyLs>0)
		   keyLs++;
		   else
		   keyLs=1;

		   this.StreamHandleID = StreamHandleID;
		   this.rightstokenidFULL = rightstokenidFULL;
		   this.Userid = Userid;
		}

		public String getStreamHandleID() {
		return StreamHandleID;
	}
	public void setStreamHandleID(String StreamHandleID) {
		this.StreamHandleID = StreamHandleID;
	}
	public String getRightstokenidFULL() {
		return rightstokenidFULL;
	}
	public void setRightstokenidFULL(String rightstokenidFULL) {
		this.rightstokenidFULL = rightstokenidFULL;
	}
	public String getUserid() {
		return Userid;
	}
	public void setUserid(String Userid) {
		this.Userid = Userid;
	}
	
	
		

}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Validation of List of Streams get as per Details stored at StreamCreate for all" id="fe7ddadf-c01b-4961-9628-425ad78bf34e" disabled="true"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamCreate');
def delete_streamTC = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamDelete');

tC.setPropertyValue("StreamDeleted",delete_streamTC.getPropertyValue("StreamDeleted"));

tC.setPropertyValue("StreamList",commonTC.getPropertyValue("StreamList"));

def TpstreamDeleteList = context.expand( '${#Project#StreamDeleteList}' )
int TpStreamDeleteCount=Integer.parseInt(tP.getPropertyValue("StreamDeleteCount"));

def streamCreateCount = context.expand( '${#Project#StreamCreateCount}' )
tC.setPropertyValue("accountList",commonTC.getPropertyValue("accountList"));

tC.setPropertyValue("streamCreateCount",streamCreateCount);

def xMLbody = context.expand( '${#TestCase#XMLbody}' )

def nodeid = context.expand( '${#TestCase#nodeid}' )
def node_flag=true;
def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' ).toString();
def StreamList=context.expand( '${#TestCase#StreamList}' ).toString();
def accountList=context.expand( '${#TestCase#accountList}' ).toString();
log.info "accountList :$accountList"
log.info "assertionAccountIdFULL :$assertionAccountIdFULL"
def rawRequest = context.expand( '${GET - StreamListView#RawRequest}' )

String[] List=StreamList.split("#",2);

String ExpectedAcct=List[0];

String[] ExpStreamLL=List[1].split(";");

HashMap Expstrm = new HashMap();

ArrayList<StreamObj> StmObj=new ArrayList<StreamObj>();
int j=0;


if(nodeid=="LLASP_CS_1" || nodeid=="DLASP" || nodeid=="DLASP_CS_1" || nodeid=="LLASP_CS_2"|| nodeid=="DLASP_CS_2" || nodeid=="LLASP")
{
  node_flag=true;
}
else
{ node_flag=false  }

while(j<ExpStreamLL.length)
{   
	String[] str= ExpStreamLL[j].split("!");
	    
	  Expstrm.put(str[0], str[1]);
	  String[] val=str[1].split(",");
//	  log.info "handle id"+str[0] +";" +"property"+ str[1]
	  j++;
//	  log.info val.length;
//	  log.info "Rights :"+val[0]+", User:"+val[1]//+",user:"+val[2]
	  StmObj.add(new StreamObj(str[0],val[0],val[1]));
	
}
//log.info "object :"+StmObj.get(1).getStreamHandleID();
def response = context.expand( '${GET - StreamListView#Response}' )
def myXML;
HashMap Actstrm = new HashMap();

int streamDeleteCount = Integer.parseInt(context.expand( '${#Project#StreamDeleteCount}' ))

def streamDeleted = context.expand( '${#Project#StreamDeleteList}' )
String[] DeletedStream=streamDeleted.split(";");



def ActualStreamHandleIDList="";

log.info "##############  $ActualStreamHandleIDList  #########################"


if(response!="")
{
myXML = new XmlSlurper().parseText(response).declareNamespace('dece':tP.getPropertyValue("coordinatorSchema"));;
  
  int ActualStreamCount=myXML.Stream.size();
  log.info "Expected StreamCount $streamCreateCount plus, Deleted Stream Count $TpStreamDeleteCount ,Actual StreamCount $ActualStreamCount"
  if(node_flag==true)
    {  assert ActualStreamCount==Integer.parseInt(streamCreateCount)+TpStreamDeleteCount;} 
  else
    {  assert ActualStreamCount==Integer.parseInt(streamCreateCount);
    	}
  log.info "ActualStreamCount :"+ ActualStreamCount

  log.info "############## ActualStreamHandleIDList:  $ActualStreamHandleIDList"
   int count=0;
  for(int i=0;i<ActualStreamCount;i++)
  {  
  	def ActualStreamHandleID=myXML.Stream[i].@StreamHandleID.text();
  	def ActualRghtsTokenID=myXML.Stream[i].RightsTokenID.text();
  	def ActualRequestingUserID=myXML.Stream[i].RequestingUserID.text();
  	def ActExpirationDateTime=myXML.Stream[i].ExpirationDateTime.text();
  	def ResourceStatus=myXML.Stream[i].ResourceStatus.Current.Value.text(); 
  	def Description=myXML.Stream[i].ResourceStatus.Current.Description.text(); 
  	def CreationDate=myXML.Stream[i].ResourceStatus.Current.@CreationDate.text();
  	
  if(Description=="active")
    { ActualStreamHandleIDList=ActualStreamHandleIDList+ActualStreamHandleID+";"
    }
  	              	         
  	
  	
  	if(i+1<ActualStreamCount)
  	{
  	def Next_CreationDate=myXML.Stream[i+1].ResourceStatus.Current.@CreationDate.text();
  	
  	log.info "################# CreationDate :$CreationDate  , CreationDate of Next stream in listView: $Next_CreationDate ########################### "
  	log.info "check Streams Order , should be as per  Streams’ created datetime value, in descending order"
  	 assert CreationDate > Next_CreationDate ;
  	}


  	
//  	log.info "ResourceStatus"+Description
  	//urn:dece:type:status:active
     
//     <Value>urn:dece:type:status:deleted</Value>
//                <Description>deleted</Description>
       
     
  	 
  	     for(int s=0; s<StmObj.size();s++)
  	     {
  	         if (ActualStreamHandleID==StmObj.get(s).getStreamHandleID())
  	         {
  	         	
  	           count++;
   	          def ExpectUser= StmObj.get(s).getUserid()
  	          def ExpectRght= StmObj.get(s).getRightstokenidFULL() ;

                log.info "For StreamID :'$ActualStreamHandleID' Expected rightId :'$ExpectRght' ,ActualRights:'$ActualRghtsTokenID'"
  	           assert ExpectRght==ActualRghtsTokenID;
  	   	     log.info "For StreamID :'$ActualStreamHandleID' Expected USERID :'$ExpectUser' ,Actual userID:'$ActualRequestingUserID '"  	           
  	   	     assert ExpectUser==ActualRequestingUserID;
  	   	   
  	           }  	

  	           int flag=0;
  	              for(int x=0;x<DeletedStream.length;x++)
  	              {
  	              	  if (ActualStreamHandleID==DeletedStream[x])
  	              	     {  
  	              	     	log.info "For StreamID :'$ActualStreamHandleID' expected ResourceStatus :'urn:dece:type:status:deleted' ,Actual resource status:'$ResourceStatus'"
  	              	        assert ResourceStatus=="urn:dece:type:status:deleted"
  	              	         log.info "For StreamID :'$ActualStreamHandleID' expected Description :'deleted' ,Actual Description :'$Description'"
  	              	         assert Description=="deleted"
  	              	          
  	              	         flag=1;
  	              	         break;
  	              	     	}
  	               	}

  	               if(flag==0)
  	               {
  	               	 log.info "For StreamID :'$ActualStreamHandleID' expected ResourceStatus :'urn:dece:type:status:active' ,Actual resource status:'$ResourceStatus'"
  	               	assert ResourceStatus=="urn:dece:type:status:active"
  	              	      log.info "For StreamID :'$ActualStreamHandleID' expected Description :'active' ,Actual Description :'$Description'"  
  	              	         assert Description=="active"
  	              	         
  	               	}
  	   }
  	   tC.setPropertyValue("ActualStreamHandleIDList",ActualStreamHandleIDList);
     }  
  	   if(node_flag==true && count==ActualStreamCount)
  	   {   log.info "nodeid :'$nodeid' will get list of all active and deleted streams"
  	   	 log.info "All streams validated active and deleted streams";
  	   	 assert count==ActualStreamCount;
  	   	}
  	   else if(node_flag==false && streamCreateCount==count.toString())
  	   {
           log.info "nodeid :'$nodeid' not able to get deleted streams"
  	   	log.info "All streams validated  expect deleted streams , Total count of streams details in response $ActualStreamCount";
  	   	log.info " Actual Stream count to be validate '$streamCreateCount' ,expected Stream count :$ActualStreamCount "
  	   	log.error " total Streams validated $count";
  	   	 assert streamCreateCount==ActualStreamCount.toString();
  	   	 assert streamCreateCount==count.toString()

  	   }
  	   else{
  	   	  log.info "nodeid :'$nodeid'"
  	   	 log.error "List view don't have all streams in Account $accountList ";
  	   	 assert count==ActualStreamCount;
  	   	}
  
  
}



class StreamObj
{ 
	private String StreamHandleID;
	private String rightstokenidFULL;
	private String Userid;
	private static int keyLs;

	StreamObj(String StreamHandleID,String rightstokenidFULL,String Userid){
		if(keyLs>0)
		   keyLs++;
		   else
		   keyLs=1;

		   this.StreamHandleID = StreamHandleID;
		   this.rightstokenidFULL = rightstokenidFULL;
		   this.Userid = Userid;
		}

		public String getStreamHandleID() {
		return StreamHandleID;
	}
	public void setStreamHandleID(String StreamHandleID) {
		this.StreamHandleID = StreamHandleID;
	}
	public String getRightstokenidFULL() {
		return rightstokenidFULL;
	}
	public void setRightstokenidFULL(String rightstokenidFULL) {
		this.rightstokenidFULL = rightstokenidFULL;
	}
	public String getUserid() {
		return Userid;
	}
	public void setUserid(String Userid) {
		this.Userid = Userid;
	}
	
	
		

}

]]></script></con:config></con:testStep><con:properties><con:property><con:name>accountList</con:name><con:value>urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>ActiveStreamCountList</con:name><con:value/></con:property><con:property><con:name>ActualStreamHandleIDList</con:name><con:value>urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884;urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98;</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPaxE5JAQkOmMMOl3ZNTaLtNb9uXHeOI4G1ig+1w6a8/doAs0Mthd58yVmTpk/RZ0plAWVoLOkIAl4TRyjJLqQgKacvIOQ0YEkQEFGUgAomDqDMcBLWqHaDtFaMS9lvGDwcjv4GdUxO7UDddvw4mcuoNs+67tt/wodYYI6UqRA4hFRJR2TJqtuOZdsN0vDvbD2peYNtV3/OejcoDcKFsK5WqbWxALUXLmEg5DSxrsVhUF/Uq44lVs23HehoOIjyBDBnts3VEhSPe3ujjagwY0hRXMcusM2tP5ywWQUQSimTOYeMr/siXbdlNS+nEgiRfjPIuxCEds+LYQ5RRglFKXpHOzxDkhMWVTpowTuQk+zAIx9aGTVhiEzsu/WJY+9CONLSHkAtkiglyNrZuYQwcKIbK/W3YMr4cV7Xi6h1HVIwZz8T+8ffwAJ1DyqYQm2Ib1gba8QbfyVT7DHAQUpzmgszhSpN1ijCITTUBH2+qcsNhTJYDIhRBl0Kjs3bhHRzX2eiTBIT8kwLtFGdt5AGlObT5KiH+8zT5/jA5mXyfNdzo5uJb8pzPL4etAsCuciEoS7s+HpCyJNH6RsTp6+KkhgY/L5K0dt+wZff5Rqb/PD6E9yfnr9nL5bJ3HTbD1aP/tXk+fFrMTha9gTPvjL2rzK/74egiGlj31L2cPD72ZqukHzrDr8MLb/jykCejf0K7+xill6Leca8W9vLr3elp7zqJOMvqzX+TB+fbtyy68qb98JLnT4g/Mnhx80W3M24sT4kc4nz+1O2+4pFFXlplODv492XbNx/lo5+A5faoaRD2KxeqSkh+3sy0hMTmuFANprr5CAlUGm19S/eOIFftjsSBquH67Ph+59zpug2v16vbTffc9ur1frPpXNid047rbJvMGsUBxB6jY6J96Za7ps3nAHEWCKAxcHPOctXphPGJxT6SqBLSW/UIGBVwx3R7FvbMk3Ilcjaizs/0ZcziVbpcjVKjcsXkNb3mnbEEvteUHWevKd8CJlMCunNrYgvFbCFVMmZonsvUqc5RlUKuejvXbTaoub5nCZJNU9BQrYzFeQrV6WRapMYS62/NRFgU0tvzu+K5fRjY4b9tDpROTLSC0LF0QdUR3kwXN/C2gbwJuPHuFNqa7+Qx0S9LJVRygtdI9n/94okmSEmS/qAT3WxBl7q/cfdHL/rh/KGBwV84H/ytc1XLtzetT/JpHZaydBTPyY7b7dqhBphqee0tEWfIqc6q+XyeF9xz3brFlXlLk8Cya1YEOFdNeXXHXoBapRXrqAlYAj9wXsr3IeZyQiOJJGTqrVSK4xErTwRCrzyheuXLY/epPZcqdRKW8j1ZL1Xrmkb86UaHA6z1lPhGfRaMx78q9o6tHT8qTrXxSEITfdLTb/UBLzBTZonq24zvGn/PwHvO94VlkkssUhFqlEv4+E9FN+SWgTBmOZVh3ygEu0OiwClXUwh+Kb0xU8yhcjEl/7+ZmqSgAAa1zgpS2Nf7RaCfAE12Bs3G6QezpvvZrNlH134jfivZydMhx9v/AQ==</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">188AE1B465CB3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:188AE1B465CB3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%253Adece%253Aaccountid%253Aorg%253Adece%253AEAF5550F8FC462E6E0401F0A059939D6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_11</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_12</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_13</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_14</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_15</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_16</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_17</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_19</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_20</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_21</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_22</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_23</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_24</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_25</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_26</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_27</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_28</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_29</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_30</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_31</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_32</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_33</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_35</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_36</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_37</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_38</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_39</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_40</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_5</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_6</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_7</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_8</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_11</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_12</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_13</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_14</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_15</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_16</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_17</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBCreatedBy_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_19</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_20</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_21</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_22</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_23</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_24</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_25</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_26</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_27</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_28</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_29</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_30</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_31</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_32</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_33</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_35</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_36</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_37</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_38</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_39</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_40</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBCreatedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/29 10:06:42</con:value></con:property><con:property><con:name>expectDBCreatedTime_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_11</con:name><con:value>2015/04/27 17:41:04</con:value></con:property><con:property><con:name>expectDBCreatedTime_12</con:name><con:value>2015/04/27 17:41:33</con:value></con:property><con:property><con:name>expectDBCreatedTime_13</con:name><con:value>2015/04/27 17:42:06</con:value></con:property><con:property><con:name>expectDBCreatedTime_14</con:name><con:value>2015/04/27 17:42:35</con:value></con:property><con:property><con:name>expectDBCreatedTime_15</con:name><con:value>2015/04/27 17:43:08</con:value></con:property><con:property><con:name>expectDBCreatedTime_16</con:name><con:value>2015/04/27 17:43:37</con:value></con:property><con:property><con:name>expectDBCreatedTime_17</con:name><con:value>2012/11/21 07:50:08</con:value></con:property><con:property><con:name>expectDBCreatedTime_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_19</con:name><con:value>2012/11/02 17:45:50</con:value></con:property><con:property><con:name>expectDBCreatedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_20</con:name><con:value>2012/11/02 17:46:22</con:value></con:property><con:property><con:name>expectDBCreatedTime_21</con:name><con:value>2012/11/02 17:46:56</con:value></con:property><con:property><con:name>expectDBCreatedTime_22</con:name><con:value>2012/11/02 17:47:29</con:value></con:property><con:property><con:name>expectDBCreatedTime_23</con:name><con:value>2012/11/02 17:48:01</con:value></con:property><con:property><con:name>expectDBCreatedTime_24</con:name><con:value>2012/11/02 17:48:38</con:value></con:property><con:property><con:name>expectDBCreatedTime_25</con:name><con:value>2012/11/02 17:49:10</con:value></con:property><con:property><con:name>expectDBCreatedTime_26</con:name><con:value>2012/11/02 17:49:45</con:value></con:property><con:property><con:name>expectDBCreatedTime_27</con:name><con:value>2012/11/02 17:50:21</con:value></con:property><con:property><con:name>expectDBCreatedTime_28</con:name><con:value>2012/11/02 17:50:55</con:value></con:property><con:property><con:name>expectDBCreatedTime_29</con:name><con:value>2012/11/02 17:51:31</con:value></con:property><con:property><con:name>expectDBCreatedTime_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_30</con:name><con:value>2012/11/02 17:52:05</con:value></con:property><con:property><con:name>expectDBCreatedTime_31</con:name><con:value>2012/11/02 17:52:41</con:value></con:property><con:property><con:name>expectDBCreatedTime_32</con:name><con:value>2012/11/02 17:53:02</con:value></con:property><con:property><con:name>expectDBCreatedTime_33</con:name><con:value>2012/11/02 17:53:23</con:value></con:property><con:property><con:name>expectDBCreatedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_35</con:name><con:value>2012/11/02 17:32:23</con:value></con:property><con:property><con:name>expectDBCreatedTime_36</con:name><con:value>2012/11/02 17:32:51</con:value></con:property><con:property><con:name>expectDBCreatedTime_37</con:name><con:value>2012/11/02 17:33:18</con:value></con:property><con:property><con:name>expectDBCreatedTime_38</con:name><con:value>2012/11/02 17:33:49</con:value></con:property><con:property><con:name>expectDBCreatedTime_39</con:name><con:value>2012/11/02 17:34:16</con:value></con:property><con:property><con:name>expectDBCreatedTime_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_40</con:name><con:value>2012/11/02 17:34:45</con:value></con:property><con:property><con:name>expectDBCreatedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedTime_5</con:name><con:value>2015/04/27 17:59:37</con:value></con:property><con:property><con:name>expectDBCreatedTime_6</con:name><con:value>2015/04/27 18:00:04</con:value></con:property><con:property><con:name>expectDBCreatedTime_7</con:name><con:value>2015/04/27 18:00:32</con:value></con:property><con:property><con:name>expectDBCreatedTime_8</con:name><con:value>2015/04/27 18:01:01</con:value></con:property><con:property><con:name>expectDBCreatedTime_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/04/29 10:06:45</con:value></con:property><con:property><con:name>expectDBDeletedTime_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_11</con:name><con:value>2015/04/27 17:41:18</con:value></con:property><con:property><con:name>expectDBDeletedTime_12</con:name><con:value>2015/04/27 17:41:48</con:value></con:property><con:property><con:name>expectDBDeletedTime_13</con:name><con:value>2015/04/27 17:42:20</con:value></con:property><con:property><con:name>expectDBDeletedTime_14</con:name><con:value>2015/04/27 17:42:52</con:value></con:property><con:property><con:name>expectDBDeletedTime_15</con:name><con:value>2015/04/27 17:43:22</con:value></con:property><con:property><con:name>expectDBDeletedTime_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_19</con:name><con:value>2012/11/02 17:46:00</con:value></con:property><con:property><con:name>expectDBDeletedTime_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_20</con:name><con:value>2012/11/02 17:46:33</con:value></con:property><con:property><con:name>expectDBDeletedTime_21</con:name><con:value>2012/11/02 17:47:05</con:value></con:property><con:property><con:name>expectDBDeletedTime_22</con:name><con:value>2012/11/02 17:47:39</con:value></con:property><con:property><con:name>expectDBDeletedTime_23</con:name><con:value>2012/11/02 17:48:14</con:value></con:property><con:property><con:name>expectDBDeletedTime_24</con:name><con:value>2012/11/02 17:48:48</con:value></con:property><con:property><con:name>expectDBDeletedTime_25</con:name><con:value>2012/11/02 17:49:20</con:value></con:property><con:property><con:name>expectDBDeletedTime_26</con:name><con:value>2012/11/02 17:49:58</con:value></con:property><con:property><con:name>expectDBDeletedTime_27</con:name><con:value>2012/11/02 17:50:32</con:value></con:property><con:property><con:name>expectDBDeletedTime_28</con:name><con:value>2012/11/02 17:51:05</con:value></con:property><con:property><con:name>expectDBDeletedTime_29</con:name><con:value>2012/11/02 17:51:41</con:value></con:property><con:property><con:name>expectDBDeletedTime_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_30</con:name><con:value>2012/11/02 17:52:15</con:value></con:property><con:property><con:name>expectDBDeletedTime_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_35</con:name><con:value>2012/11/02 17:32:34</con:value></con:property><con:property><con:name>expectDBDeletedTime_36</con:name><con:value>2012/11/02 17:33:02</con:value></con:property><con:property><con:name>expectDBDeletedTime_37</con:name><con:value>2012/11/02 17:33:31</con:value></con:property><con:property><con:name>expectDBDeletedTime_38</con:name><con:value>2012/11/02 17:34:00</con:value></con:property><con:property><con:name>expectDBDeletedTime_39</con:name><con:value>2012/11/02 17:34:29</con:value></con:property><con:property><con:name>expectDBDeletedTime_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_40</con:name><con:value>2012/11/02 17:34:56</con:value></con:property><con:property><con:name>expectDBDeletedTime_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedTime_5</con:name><con:value>2015/04/27 17:59:50</con:value></con:property><con:property><con:name>expectDBDeletedTime_6</con:name><con:value>2015/04/27 18:00:16</con:value></con:property><con:property><con:name>expectDBDeletedTime_7</con:name><con:value>2015/04/27 18:00:46</con:value></con:property><con:property><con:name>expectDBDeletedTime_8</con:name><con:value>2015/04/27 18:01:15</con:value></con:property><con:property><con:name>expectDBDeletedTime_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_11</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_12</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_13</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_14</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_15</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy_5</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_6</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_7</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_8</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">deleted</con:value></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>expectGenericRightsToken_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14DAD4AC5F1221A1E05305991F0ADA09</con:value></con:property><con:property><con:name>expectRequestingUser_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14DAD4AC5F1221A1E05305991F0ADA09</con:value></con:property><con:property><con:name>expectRequestingUser_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_11</con:name><con:value>urn:dece:userid:org:dece:14B8D3E968AB4DE4E05305991F0A45B2</con:value></con:property><con:property><con:name>expectRequestingUser_12</con:name><con:value>urn:dece:userid:org:dece:14B8D3E968AB4DE4E05305991F0A45B2</con:value></con:property><con:property><con:name>expectRequestingUser_13</con:name><con:value>urn:dece:userid:org:dece:14B8D3E968AB4DE4E05305991F0A45B2</con:value></con:property><con:property><con:name>expectRequestingUser_14</con:name><con:value>urn:dece:userid:org:dece:14B8D3E968AB4DE4E05305991F0A45B2</con:value></con:property><con:property><con:name>expectRequestingUser_15</con:name><con:value>urn:dece:userid:org:dece:14B8D3E968AB4DE4E05305991F0A45B2</con:value></con:property><con:property><con:name>expectRequestingUser_16</con:name><con:value>urn:dece:userid:org:dece:14B8D3E968AB4DE4E05305991F0A45B2</con:value></con:property><con:property><con:name>expectRequestingUser_17</con:name><con:value>urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectRequestingUser_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_19</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_20</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_21</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_22</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_23</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_24</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_25</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_26</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_27</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_28</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_29</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_30</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_31</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_32</con:name><con:value>urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>expectRequestingUser_33</con:name><con:value>urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>expectRequestingUser_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_35</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_36</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_37</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_38</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_39</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_40</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectRequestingUser_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectRequestingUser_5</con:name><con:value>urn:dece:userid:org:dece:14B906FDFECB51F3E05305991F0AB049</con:value></con:property><con:property><con:name>expectRequestingUser_6</con:name><con:value>urn:dece:userid:org:dece:14B906FDFECB51F3E05305991F0AB049</con:value></con:property><con:property><con:name>expectRequestingUser_7</con:name><con:value>urn:dece:userid:org:dece:14B906FDFECB51F3E05305991F0AB049</con:value></con:property><con:property><con:name>expectRequestingUser_8</con:name><con:value>urn:dece:userid:org:dece:14B906FDFECB51F3E05305991F0AB049</con:value></con:property><con:property><con:name>expectRequestingUser_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamActiveCnt</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamAvailCnt</con:name><con:value>12</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">chunked</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 500 Server Error</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">llpcs</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>79611</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:14DADB24B5464E35E05307991F0A2FD6</con:value></con:property><con:property><con:name>rightstokenidFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>DECE Customer Support Test Cases_P1</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamCreateCount</con:name><con:value>2</con:value></con:property><con:property><con:name>StreamDeleted</con:name><con:value>urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03;</con:value></con:property><con:property><con:name>streamFlagCreateDateOld</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagCreateDateOld_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreCreatedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamFlagIgnoreDeletedDate_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:2BF526533F3A44ED914098C3B29EEE04</con:value></con:property><con:property><con:name>streamhandleFULL_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_11</con:name><con:value>urn:dece:streamhandleid:org:dece:DAEEDC404B25478D8A427697EEED4296</con:value></con:property><con:property><con:name>streamhandleFULL_12</con:name><con:value>urn:dece:streamhandleid:org:dece:FA2FAFAD35F740ACB661E48622495566</con:value></con:property><con:property><con:name>streamhandleFULL_13</con:name><con:value>urn:dece:streamhandleid:org:dece:D1AE4B1CB1594CB49743B1583C5C1BD0</con:value></con:property><con:property><con:name>streamhandleFULL_14</con:name><con:value>urn:dece:streamhandleid:org:dece:2DDBC1BC4B1F42AB85A442976410A1AA</con:value></con:property><con:property><con:name>streamhandleFULL_15</con:name><con:value>urn:dece:streamhandleid:org:dece:CAF3F40CE81F466D80EBDF23FB9ECBDC</con:value></con:property><con:property><con:name>streamhandleFULL_16</con:name><con:value>urn:dece:streamhandleid:org:dece:96092098DB49464C94292CD1B8483B83</con:value></con:property><con:property><con:name>streamhandleFULL_17</con:name><con:value>urn:dece:streamhandleid:org:dece:CEFD90E77819B152E0401F0A07995384</con:value></con:property><con:property><con:name>streamhandleFULL_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_19</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E2FD317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_20</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E34D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_21</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E39D317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_22</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87AA799E3ED317E0401F0A05994974</con:value></con:property><con:property><con:name>streamhandleFULL_23</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FEF438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_24</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FF4438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_25</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FF9438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_26</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87BC6F0FFE438EE0401F0A05996C3E</con:value></con:property><con:property><con:name>streamhandleFULL_27</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234467FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_28</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C2344B7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_29</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234507FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_30</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C234557FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_31</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87C4C2345A7FFDE0401F0A05997E19</con:value></con:property><con:property><con:name>streamhandleFULL_32</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87CE58313FD124E0401F0A05990DAA</con:value></con:property><con:property><con:name>streamhandleFULL_33</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87CF9B9FB89952E0401F0A079947F1</con:value></con:property><con:property><con:name>streamhandleFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_35</con:name><con:value>urn:dece:streamhandleid:org:dece:CD877D48FF2B0318E0401F0A079928C0</con:value></con:property><con:property><con:name>streamhandleFULL_36</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8AE0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_37</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8B30BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_38</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8B80BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_39</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8BD0BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_40</con:name><con:value>urn:dece:streamhandleid:org:dece:CD87862FA8C20BC4E0401F0A07993B54</con:value></con:property><con:property><con:name>streamhandleFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value>urn:dece:streamhandleid:org:dece:BF6FB3180DD548379B7D6449E9DE0BC0</con:value></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value>urn:dece:streamhandleid:org:dece:F24333E267B642D9A3816056474F81EC</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value>urn:dece:streamhandleid:org:dece:3C161D027D1C4D73A337AC00B1A17A78</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value>urn:dece:streamhandleid:org:dece:7F3ACE1411D94A74973BE916C5594B80</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2BF526533F3A44ED914098C3B29EEE04</con:value></con:property><con:property><con:name>streamhandle_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_11</con:name><con:value>DAEEDC404B25478D8A427697EEED4296</con:value></con:property><con:property><con:name>streamhandle_12</con:name><con:value>FA2FAFAD35F740ACB661E48622495566</con:value></con:property><con:property><con:name>streamhandle_13</con:name><con:value>D1AE4B1CB1594CB49743B1583C5C1BD0</con:value></con:property><con:property><con:name>streamhandle_14</con:name><con:value>2DDBC1BC4B1F42AB85A442976410A1AA</con:value></con:property><con:property><con:name>streamhandle_15</con:name><con:value>CAF3F40CE81F466D80EBDF23FB9ECBDC</con:value></con:property><con:property><con:name>streamhandle_16</con:name><con:value>96092098DB49464C94292CD1B8483B83</con:value></con:property><con:property><con:name>streamhandle_17</con:name><con:value>CEFD90E77819B152E0401F0A07995384</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_5</con:name><con:value>BF6FB3180DD548379B7D6449E9DE0BC0</con:value></con:property><con:property><con:name>streamhandle_6</con:name><con:value>F24333E267B642D9A3816056474F81EC</con:value></con:property><con:property><con:name>streamhandle_7</con:name><con:value>3C161D027D1C4D73A337AC00B1A17A78</con:value></con:property><con:property><con:name>streamhandle_8</con:name><con:value>7F3ACE1411D94A74973BE916C5594B80</con:value></con:property><con:property><con:name>streamhandle_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StreamList</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A#urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80!urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269!urn:dece:rightstokenid:org:dece:15541CAF17921E9CE05307991F0A0A7A,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884!urn:dece:rightstokenid:org:dece:15541BA553B62AF2E05305991F0A7414,urn:dece:userid:org:dece:15541CAF10EB1E9CE05307991F0A0A7A;</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_65107 - StreamListView - DECECS - Account has single deleted stream and no active streams_FLAKY</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stream_list_view_20150615_015833</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="500">
      <Reason Language="en"/>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188AE1B465CB3094E0533D991F0A7A41/Stream/List</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value>188AE1B465CD3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>useroid</con:name><con:value>188AE1B465D53094E0533D991F0A7A41</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>188AE1B465D43094E0533D991F0A7A41</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>188AE1B465D43094E0533D991F0A7A41</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>49968546-ffaf-4aaa-977f-7220ad4d95f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93a38a1a-be31-47c6-bf95-a083445abe1e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>798b6b7c-0636-4c11-b36e-95b14e3e2df4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete for TearDown" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="467ed39b-4bd6-4069-a0e8-3d87d8b07d37"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9e975cb4-cf33-446b-bfab-d235147e26fb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


log.info " third test case "

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("deletedCreateCount",null);
tC.setPropertyValue("userIndex",null);
tC.setPropertyValue("currentDBTOD",null);
tC.setPropertyValue("streamAccountActiveCount",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("deletedCreateCount",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

def TCStreamListView = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamListView');
tC.setPropertyValue("ActualStreamHandleIDList",TCStreamListView.getPropertyValue("ActualStreamHandleIDList"));
tC.setPropertyValue("DeleteCount",tP.getPropertyValue("StreamCreateCount"));

log.info "StreamDelete for TearDown staging 1"+context.expand( '${#Project#StreamDeleteList}' )




int DeleteCount=Integer.parseInt(tC.getPropertyValue("DeleteCount"));
def ActualStreamHandleIDList=tC.getPropertyValue("ActualStreamHandleIDList");
String[] StreamHandleIDList =ActualStreamHandleIDList.split(";");

if(DeleteCount>=0)
{
tC.setPropertyValue("streamhandleFULL",StreamHandleIDList[0]);
log.info "Tear down streamDelete 0 : "+StreamHandleIDList[0];
DeleteCount--;
tC.setPropertyValue("DeleteCount",DeleteCount.toString());
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity Authentication Context LLASP" id="1d6fea6e-b05c-409d-9486-b3680df3a318"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" disabled="true" id="82b1d46d-1967-4baa-90b2-f13901eb9349"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("deletedCreateCount",callTC.getPropertyValue("deletedCreateCount"));
tC.setPropertyValue("streamAccountActiveCount",callTC.getPropertyValue("streamAccountActiveCount"));
tC.setPropertyValue("userIndex",callTC.getPropertyValue("userIndex"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamDelete") == null || tC.getPropertyValue("expectErrTypeStreamDelete") == "null") {
	tC.setPropertyValue("expectErrTypeStreamDelete", "SUCCESS");
}
if (tC.getPropertyValue("deletedCreateCount") == null || tC.getPropertyValue("deletedCreateCount") == "null") {
	tC.setPropertyValue("deletedCreateCount", "0");
}
if (tC.getPropertyValue("streamAccountActiveCount") == null || tC.getPropertyValue("streamAccountActiveCount") == "null") {
	tC.setPropertyValue("streamAccountActiveCount", "0");
}
if (tC.getPropertyValue("userIndex") == null || tC.getPropertyValue("userIndex") == "null") {
	tC.setPropertyValue("userIndex", "0");
}


int DeleteCount=Integer.parseInt(tC.getPropertyValue("DeleteCount"));
def ActualStreamHandleIDList=tC.getPropertyValue("ActualStreamHandleIDList");
String[] StreamHandleIDList =ActualStreamHandleIDList.split(";");
DeleteCount--;
log.info DeleteCount
if(DeleteCount>=0)
{
tC.setPropertyValue("streamhandleFULL",StreamHandleIDList[0]);

	tC.setPropertyValue("DeleteCount",DeleteCount.toString());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="03283e27-3ee8-40a8-b923-8b97bd4a64ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Delete - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Capture Current DB sysdate()" id="7f481b97-da30-4f7e-bcc0-d8b1612b042f"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete - StreamDelete" id="7c989c69-c083-47fd-8fec-6f114c7ccd74"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete - StreamDelete" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ac64aa86-c1af-458b-9022-0cdd64fdb92d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Delete - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Stream Deleted for Listview" id="f5f7fb03-ea45-43f6-8d6d-4763e49fae1a"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def TpstreamDeleteList = context.expand( '${#Project#StreamDeleteList}' )
int StreamDeleteCount=Integer.parseInt(tP.getPropertyValue("StreamDeleteCount"));
def httpStatus = context.expand( '${#TestCase#httpStatus}' )
def streamDeleted = context.expand( '${#TestCase#StreamDeleted}' )
def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' )
int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info httpStatus
def StreamDeleted = context.expand( '${#TestCase#StreamDeleted}' )

if (httpStatus=="HTTP/1.1 200 OK" ) 
{     def streamhandleFULL = context.expand( '${#TestCase#streamhandleFULL}' )
                
            def accountListDLT = context.expand( '${#Project#accountListDLT}' )
               


                 if(accountListDLT==assertionAccountIdFULL && httpStatus=="HTTP/1.1 200 OK" && StreamCreateCount>0)
                 {
                    StreamDeleted= StreamDeleted+streamhandleFULL +";"
                    
                     TpstreamDeleteList=TpstreamDeleteList+streamhandleFULL +";"
                    tC.setPropertyValue("StreamDeleted",StreamDeleted);
                    tP.setPropertyValue("StreamDeleteList",TpstreamDeleteList);
                    
                    StreamCreateCount--;
  				log.info "StreamCreateCount if ; "+StreamCreateCount;
  				 tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  				 
  				 StreamDeleteCount++;
  				 log.info "StreamDeleteCount if  : "+StreamDeleteCount;
  				 tP.setPropertyValue("StreamDeleteCount", StreamDeleteCount.toString()); 

                      log.info "StreamDeleteList for if  : "+tP.getPropertyValue("StreamDeleteList");
  				

                 	}
                 	
                 else if(httpStatus=="HTTP/1.1 200 OK" && StreamCreateCount>0)
                 {   
                 	tP.setPropertyValue("accountListDLT",assertionAccountIdFULL);
                 	StreamDeleted=streamhandleFULL +";"
                  
                    tC.setPropertyValue("StreamDeleted",StreamDeleted);
                    
                       TpstreamDeleteList=streamhandleFULL +";"
                    tP.setPropertyValue("StreamDeleteList",TpstreamDeleteList);
                    
                    StreamCreateCount--;
  				log.info "StreamCreateCount for else if  : "+StreamCreateCount;
  				log.info "StreamDeleteList for else if  : "+tP.getPropertyValue("StreamDeleteList");
  				 tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  				  
  				 tP.setPropertyValue("StreamDeleteCount","1");
  				 
  			}
                 else
                 	{ log.info "else block Script issue"
                 		}

    }
//
//log.info "StreamDeleteList for Normal StreamDelete : "  tP.getPropertyValue("StreamDeleteList")]]></script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="53ba9568-37c6-455b-a4a5-54ea397839b1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" disabled="true" id="807e4498-67c6-486d-8000-bd5805981b15"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;


this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;

	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;

	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if(errorRespType != "METHOD_NOT_ALLOWED"){

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;

		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} 
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return attributes to calling Test Case" disabled="true" id="b05d2f11-b5ce-4192-8e68-7a563795f64b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int deletedCreateCount = tC.getPropertyValue("deletedCreateCount").toInteger()++;
int userIndex = tC.getPropertyValue("userIndex").toInteger();
int streamAccountActiveCount = tC.getPropertyValue("streamAccountActiveCount").toInteger();
String count = tC.getPropertyValue("counter").toString();

if (userIndex > 0) {
	userIndex--;
}
if (streamAccountActiveCount > 0) {
	streamAccountActiveCount--;
}

tC.setPropertyValue("expectDBDeletedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy_" + count,tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus_" + count,"deleted");
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("deletedCreateCount",deletedCreateCount.toString());
tC.setPropertyValue("expectDBStatus","deleted");

callTC.setPropertyValue("deletedCreateCount",tC.getPropertyValue("deletedCreateCount"));
callTC.setPropertyValue("streamAccountActiveCount",streamAccountActiveCount.toString());
callTC.setPropertyValue("userIndex",userIndex.toString());
callTC.setPropertyValue("expectDBStatus_" + count,tC.getPropertyValue("expectDBStatus_" + count));
callTC.setPropertyValue("expectDBStatus" + count,tC.getPropertyValue("expectDBStatus"));
callTC.setPropertyValue("expectDBDeletedBy_" + count,tC.getPropertyValue("expectDBDeletedBy_" + count));
callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
callTC.setPropertyValue("expectDBDeletedTime_" + count,tC.getPropertyValue("currentDBTOD"));
callTC.setPropertyValue("expectDBModifiedBy_" + count,tC.getPropertyValue("expectDBModifiedBy_" + count));
callTC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("expectDBModifiedBy"));</script></con:config></con:testStep><con:testStep type="groovy" name="DeleteStreams LOOP" id="44ad07de-3de8-42e6-9ec6-29e3af565c87"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int DeleteCount=Integer.parseInt(tC.getPropertyValue("DeleteCount"));
def streamhandleFULL
def TCStreamListView = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName('StreamListView');
tC.setPropertyValue("StreamList",TCStreamListView.getPropertyValue("StreamList"));

def ActualStreamHandleIDList=tC.getPropertyValue("ActualStreamHandleIDList");
String[] StreamHandleIDList =ActualStreamHandleIDList.split(";");
if(DeleteCount>0)
{
	
   log.info "Tear down streamDelete $DeleteCount : "+StreamHandleIDList[DeleteCount];
	tC.setPropertyValue("streamhandleFULL",StreamHandleIDList[DeleteCount]);
	DeleteCount=DeleteCount-1;
	tC.setPropertyValue("DeleteCount",DeleteCount.toString());
	testRunner.gotoStepByName("Capture Current DB sysdate()");
	}</script></con:config></con:testStep><con:properties><con:property><con:name>accountListDLT</con:name><con:value>urn:dece:accountid:org:dece:14B62D494098068CE05305991F0AB9C6</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15F4F7BB80083287E05307991F0A99D1</con:value></con:property><con:property><con:name>ActualStreamHandleIDList</con:name><con:value>urn:dece:streamhandleid:org:dece:908427E14F3A4682AD645E2E3735675A;</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMbaxzcUTmOESWhpyOUByWl46Ql6Dgi2BJYPJr69kwAFCcmjPk0fr1bffXrS71xxFYclrcg6xIIwW0iik3MukdS2JqccQJ9yjKALuCewNm3d9r1Q0PbS/ohV6nbr2qxr4vuW7vl5GNVt3HAj0CbiWPplgZ2KWAweXy1KV8wR6lAtERV0rmZarm65u2SPL9EqOV6oVbac81grPEHOJLVWKprYjlfK6NhNi4RnGer0uru0ii6dGyTQt48ddf4hnECGtcb31KDMUN3b6uOgDhjDERcwi49o40rn2uTckU4pEEsPOlv+RLdMwa4bU8TmZftHyu+D3aMCyYxtRRglGIXlFKj53IGbMLzTDKYuJmEUfOmGZCliHFOvYcugXzTimdiHQEcOYI53PkLXDGkAAMVAMhadBr659uSxr2dVRjCgPWBzx4+Of8QG6gpAtwNf53q0dtcsBz0SqcQ3Y61EcJpys4F4V6wJh4LtsAr4cqvAYQ0DSPuGyQFOu2BmH9E6O22h0yBS4+JsEHSRnC/KMwgQa/W9G63uFjoS/dPvT1O4xsn4ev06DG1zPCBwqZ4I8tdvjSVHmRbS9MZr9/PnPIBi2KuGPbsDG/uxhGFxFvTYny81XWMZ+Mo+Z3btvlcb33Sf3No2gf/v962g9i8P7YBM9+JOXZvXm5edLpTl1HyfDx/Q5tJft1+moe1v+dz5P0OblmV9NBjTYBA+zyZjGdyys3CH8Leily/S2fxuT4Immwdx6cPi3cdXBV6T7JCo3HOC1XbtP2+Nl6fWunrtzwP9Ytn/zw2TyAljsj6oMep1CV2YJic+bmZIQXw8yVW+hmg8XQIXWULdU7/AS2e6I78kcbs+W23W61Xa13Lkp28127cZ0bdOt1ayu2bRatea+yWxZnFBsMxoQZUu13G3ZfE4QRx4H6kOsr1giOx3XPkHsIIEKPTqQj4BRDiMm27M1d9zKzLKdyBWBNU+WcXXtMNstOVrhnokH+hA3AwHxcVO2j5ryADBZEFCdWxU2l5XNhQzGEq0SEVrFFSpSSGRvj1WblVerrsFJtAhBUTUi5ichFBezRRYag2+/JR1hnkkHN6PsuX3o2Om/fQykjk+UAle+tEDmEc5MF2vvyDuHy2en0B6+mfhEvSwZUBETvGVy/OutTlSB5EXS6TeHj3vSue4f3P3VHv6y/hKg/38BZD7+/uYHho1PQmqcZjO35q/Ige395iFnmOx6jX0tLpFVXBaT1SrJys9xbCOW8IaqA8MsGUPAiezLmxGbAzVyFOOiIZgTPzGey48pJmJGhwIJiORzKWTHC7aeIXC19fTkQ08vXamOTMrQCUjFOVk7lBubYvzpUoc9rPSk+FF+1iz23zJ2BuvAjvRTLj2C0Kk6qQG4+aA4MJOwRLZuFh+CnwM4Z/xYmAc55yJkQU0SAR//KaieXNcQxiyhotfRMsHhnMh4is0CvDeldzDZKMp3U/Lfy6lOshLAIDdaTjJ8tWJ46gnQ6cGs2Rl9N24qrVbVNCt2qVrJxk1lO25qtc7bSzti13gnfi85iNNpjTd+Aw==</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15F4F7BB80073287E05307991F0A99D1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15F4F7BB80073287E05307991F0A99D1</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15F4F8C86DE63AC9E05305991F0A1B9A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15F4F8C86DE63AC9E05305991F0A1B9A</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value>2015/05/13 10:33:22</con:value></con:property><con:property><con:name>DeleteCount</con:name><con:value>0</con:value></con:property><con:property><con:name>deletedCreateCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value>0910</con:value></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy_10</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_11</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_12</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_13</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_14</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_15</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_2</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_3</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_4</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_5</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_6</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_7</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_8</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy_9</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>79613</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15F4F7BB800F3287E05307991F0A99D1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15F4F7BB800F3287E05307991F0A99D1</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:14B8FED933654650E05305991F0AE715</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic Test Cases</con:value></con:property><con:property><con:name>streamAccountActiveCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StreamDeleted</con:name><con:value>urn:dece:streamhandleid:org:dece:708239B9868A41A6934AE8817C4D6ADE;urn:dece:streamhandleid:org:dece:350F7DD418384FEE9D087F69F43EBD52;urn:dece:streamhandleid:org:dece:9C3722A43AD44D8A94F152EF7CA44588;urn:dece:streamhandleid:org:dece:908427E14F3A4682AD645E2E3735675A;</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:908427E14F3A4682AD645E2E3735675A</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADBD14C92C6289A31E0401F0A07995885</con:value></con:property><con:property><con:name>StreamList</con:name><con:value>urn:dece:accountid:org:dece:15F4F7BB80073287E05307991F0A99D1#urn:dece:streamhandleid:org:dece:708239B9868A41A6934AE8817C4D6ADE!urn:dece:rightstokenid:org:dece:15F4F8C870673AC9E05305991F0A1B9A,urn:dece:userid:org:dece:15F4F8C86DE63AC9E05305991F0A1B9A;urn:dece:streamhandleid:org:dece:350F7DD418384FEE9D087F69F43EBD52!urn:dece:rightstokenid:org:dece:15F4F7BB82C93287E05307991F0A99D1,urn:dece:userid:org:dece:15F4F8C86DE63AC9E05305991F0A1B9A;urn:dece:streamhandleid:org:dece:9C3722A43AD44D8A94F152EF7CA44588!urn:dece:rightstokenid:org:dece:15F4F7BB83183287E05307991F0A99D1,urn:dece:userid:org:dece:15F4F8C86DE63AC9E05305991F0A1B9A;urn:dece:streamhandleid:org:dece:908427E14F3A4682AD645E2E3735675A!urn:dece:rightstokenid:org:dece:15F4F7BB834F3287E05307991F0A99D1,urn:dece:userid:org:dece:15F4F8C86DE63AC9E05305991F0A1B9A;</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_15102 - StreamListView - DLP and LLASP - Account has 3 deleted streams and 6 active streams - 200 Ok - 6A,3D_FLAKY</con:value></con:property><con:property><con:name>userIndex</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150513_035715</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15F4F8C86DE73AC9E05305991F0A1B9A</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>23c70c45-9074-46f6-be91-e188b2607f26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e836578-c109-4f33-bf13-05a2ad8353a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true" id="db356010-cd84-4dc8-b4ce-f17598a5c192"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8243908a-f793-4156-85c5-89f5a5641c7a"><con:settings/><con:testStep type="groovy" name="Data Setup when Stream Count Greater then 12 for Stream Service ON" id="4ac55984-51d5-44ac-8069-274e4c3e15c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

int StreamCreateCount = Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info "Stream Count from Project level......:" + StreamCreateCount;
log.info "Not required to create test data...."

def temp_username = callTC.getPropertyValue("username");

log.info "temp_username ... " + temp_username;

                if (temp_username == tP.getPropertyValue("UserName_FAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_FAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU2");
                }

log.info "UserName property from Test Case ... " + tP.getPropertyValue(tC.getPropertyValue("UserName_Property"));

//run E2E when Stream count reached to 12 in the Account

if(StreamCreateCount>=12)
{     

                StreamCreateCount = 0;

                //update StreamCreateCount to Zero at project level.
                tP.setPropertyValue("StreamCreateCount",StreamCreateCount.toString())
                                
                def myTS = tP.getTestSuiteByName("E_2_E");
                
                def runnerTS = myTS.run( null , false )
                
                assert runnerTS.status == Status.FINISHED;
}

//Setting the desired user from the testcase
tC.setPropertyValue("username",tP.getPropertyValue(tC.getPropertyValue("UserName_Property")));

log.info tC.getPropertyValue("username");

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from calling test case" id="0bec101b-cdec-4610-8808-d6b6827f2a56"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
//tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context" id="e88f6bbe-4a6d-4575-a06f-5774dee4e413"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
def nodeID = tC.getPropertyValue("nodeid");
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

log.info "---- PROCESSING nodeID[$nodeID] userID[$userID]";

	switch (nodeID) {
		case tP.getPropertyValue("nodeoid10"):  // Retailer node
		case tP.getPropertyValue("nodeoid11"):  //Linked LASP CS
		case tP.getPropertyValue("nodeoid12"):  //Dynamic LASP
		case tP.getPropertyValue("nodeoid13"):	//Dynamic LASP CS	
		case tP.getPropertyValue("nodeoid14"):	//Linked LASP	
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_1").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

          case tP.getPropertyValue("nodeoid30"): // Coordinator CS		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_3").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid20"):  // dece cs		
          if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_2").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		case tP.getPropertyValue("nodeoid40"):
                                                   // Dynamic lasp and his/her customer service node		
		     if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_4").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid50"):
          case tP.getPropertyValue("nodeoid51"):
                                                 // Linked lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_5").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}

log.info "---- PROCESSING COMPLETE";
/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
	}
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
lastColon = assertionAccountIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 3));
lastColon = assertionUserIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 3));
}
else
{
lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish other account/user related data" disabled="true" id="cad86a8c-0d27-437e-ba43-1519340f07af"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctoid = tC.getPropertyValue("accountoid").toString();
String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String rightslocker = "";
String useroid = "";
String accountoid = "";

assert acctoid.length() > 0;

/*
*  useroid
*/
try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

try {
	def a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	rightslocker = a.accountGetRightsLockerId(acctoid);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
finally {
	callTC.setPropertyValue("rightslocker",null);
	callTC.setPropertyValue("rightslockerFULL",null);
	
	log.info "rightslocker[$rightslocker]";

	callTC.setPropertyValue("rightslocker",rightslocker);
	callTC.setPropertyValue("rightslockerFULL",tP.getPropertyValue("urnRightsLocker").toString() + rightslocker);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>StreamListView tear down</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150615_015833</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81597</con:value></con:property><con:property><con:name>UserName_Property</con:name><con:value>UserName_FAU1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4ac55984-51d5-44ac-8069-274e4c3e15c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" disabled="true" id="209dbdaa-dbdb-4156-9611-8f4349603e4c"><con:settings/><con:testStep type="groovy" name="Establish Properties" id="e5f5e953-bf76-4a9f-9f44-5579f5ebb5c5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("userrowoid",null);
tC.setPropertyValue("accountrowoid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="1ea3a901-408a-4ba7-9c1b-0c5471478b67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish whether login is necessary for node/user combo" id="cfb167be-cdd1-4ad4-92ab-ba8244d66d52"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node      = tC.getPropertyValue("nodeid");
String user      = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser       = node + "_" + user;
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid    = node + "_" + user + "_accountoid";
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";
String prop      = tC.getPropertyValue(propUser);
String asstuuid  = tC.getPropertyValue(propAssertUUID);
String assbinary = tC.getPropertyValue(propAssertion);
String assAccountId = tC.getPropertyValue(propAssertion);
String assUserId = tC.getPropertyValue(propassertionUserId);
String assAccountIdFULL = tC.getPropertyValue(propassertionAccountIdFULL);
String assUserIdFULL = tC.getPropertyValue(propassertionUserIdFULL);
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asstuuid[$asstuuid] - assbinary[$assbinary]";
this.log.info "propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID] - propUser[$propUser]";

if (prop == null) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	} else if (prop != tday) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	tC.setPropertyValue("nodeuserid",null);
} else {
	// Check the UUID property
	if (asstuuid == null || asstuuid == "") {
		log.info "assertionUUID is null/empty";
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	// Check the assertion binary property
	} else if (assbinary == null || assbinary == "") {
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	} else {
		int lastSlash = assUserIdFULL.lastIndexOf(':');
		
		tC.setPropertyValue("doSTS","false");
		tC.setPropertyValue("assertionUUID",asstuuid);
		tC.setPropertyValue("assert",assbinary);
		tC.setPropertyValue("accountoid",propAccountoid);
		tC.setPropertyValue("useroid", propUseroid);
		tC.setPropertyValue("assertionAccountId",assAccountId);
		tC.setPropertyValue("assertionUserId",assUserId);
		tC.setPropertyValue("assertionAccountIdFULL",assAccountIdFULL);
		tC.setPropertyValue("assertionUserIdFULL",assUserIdFULL);
		tC.setPropertyValue("nodeuserid",assUserIdFULL.substring(lastSlash + 1));
	}
}
log.info "doSTS is " + tC.getPropertyValue("doSTS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="e4191735-7b0f-482a-a84a-ef5ee976b1a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser = node + "_" + user;

log.info "propUser[$propUser] - propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID]";

def doSTS = tC.getPropertyValue("doSTS");

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	if (runnerTC.status != Status.FINISHED) {
		tC.setPropertyValue(propUser,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAssertion,null);
	} 

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET" id="8c14b4f7-80c1-4f5a-adde-3e06ff2585f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def doSTS = tC.getPropertyValue("doSTS");

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
	
	tC.setPropertyValue(propassertionAccountId,tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue(propassertionAccountIdFULL,tC.getPropertyValue("assertionAccountIdFULL"));
	tC.setPropertyValue(propassertionUserId,tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue(propassertionUserIdFULL,tC.getPropertyValue("assertionUserIdFULL"));
} 


</script></con:config></con:testStep><con:testStep type="groovy" name="Store assertionUID for the node/user" id="f82619a1-13c0-456f-9369-7e4b5a5ce54d"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String prop = tC.getPropertyValue(node + "_" + user);
String asst = tC.getPropertyValue(node + "_" + user + "_assertUUID");
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asst[$asst]";

if (prop == tday) {
	tC.setPropertyValue(node + "_" + user + "_assertUUID", tC.getPropertyValue("assertionUUID"));
	tC.setPropertyValue(node + "_" + user + "_assertion", tC.getPropertyValue("assert"));
} else {
	tC.setPropertyValue(node + "_" + user,null)
	tC.setPropertyValue(node + "_" + user + "_assertUUID",null);
	tC.setPropertyValue(node + "_" + user + "_assertion",null);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract OID level User/Account Information" id="2634d628-0bcb-4044-9c8c-6c8cf2f3ff88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());


String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID, to_char(rawtohex(a.USER_OID)) USER_OID, 
to_char(rawtohex(b.NODE_USER_ID)) NODE_USER_ID, to_char(rawtohex(c.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID, 
to_char(rawtohex(b.ROW_OID)) ROW_OID, to_char(rawtohex(c.ROW_OID)) ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = '$uname'
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = '$nodeid'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);

	accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();
	useroid = myXML.ResultSet.Row[0].USER_OID.text();
	nodeUser = myXML.ResultSet.Row[0].NODE_USER_ID.text();
	nodeAccount = myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text();
	userRowId = myXML.ResultSet.Row[0].ROW_OID[0].text();
	acctRowId = myXML.ResultSet.Row[0].ROW_OID[1].text();
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	log.info "accountoid[$accountoid]";
	log.info "useroid[$useroid]";
	log.info "nodeUser[$nodeUser]";
	log.info "nodeAccount[$nodeAccount]";
	log.info "userRowId[$userRowId]";
	log.info "acctRowId[$acctRowId]";

	tC.setPropertyValue("accountoid", accountoid);
	tC.setPropertyValue("useroid", useroid);
	tC.setPropertyValue("userrowid", userRowId);
	tC.setPropertyValue("accountrowid", acctRowId);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store the ACCOUNT.ACCOUNT_OID lockerId" id="c2e18d62-f9ba-40a7-881f-7371209b712a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid = node + "_" + user + "_useroid";

tC.setPropertyValue(propAccountoid,tC.getPropertyValue("accountoid"));
tC.setPropertyValue(propUseroid,tC.getPropertyValue("useroid"));

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

def x = a.accountGetRightsLockerId(tC.getPropertyValue("accountoid"));

this.log.info "x[$x]";

tC.setPropertyValue("rightslocker",tP.getPropertyValue("urnLocker") + x);


</script></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="27c315ea-bc4a-455c-89e0-f21fe49bdc76"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="0d1adc40-0f3e-4b34-b806-b1ecfb0c742d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String usernodeConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username");
String usernodeUUIDConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username") +	"_assertUUID";

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "assert":
			case "assertionAccountId":
			case "assertionAccountIdFULL":
			case "assertionUserId":
			case "assertionUserIdFULL":
			case "assertionUUID":
			case "cid":
			case "deceorgid":
			case "rightslocker":
			case "targetURL":
			case "useroid":
			case "accountoid":
			case "nodeaccountid":
			case "nodeuserid":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="de325a57-45c0-40c8-963b-2e2b49eb1cfd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="1d3630c3-0e97-429a-b3cf-12f69ec5cfae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="e2c9e083-7004-4146-a7e5-347312753112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="d49186d4-77c8-4a46-87e2-d877bc3a9492"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="0a1e5ea7-3e13-4dcc-aec5-96d8f5452b79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="ca2d828d-8507-471c-a9d2-82fb16706e18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="e05cfe6b-5d2a-47a7-a4b3-1cc56fcba4ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="4d568ec4-40ec-4ca7-8cd5-5e1ecd63c4a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="14ce586a-921a-43d4-9c90-5560601b7468"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="165aa61b-f774-4d07-86cd-5cef8e55c65b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="f143c167-78c0-4d3a-982e-6b4311df0c69"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="f00418cf-1362-49d5-aba2-f7bca0fb4d11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1" id="b181f4eb-45f0-4a44-a374-04a2d6716077"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1 1" id="622196f9-cbda-4cd3-980b-e1f8d82d939f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties 1" id="3c8f2b60-7df6-4009-8873-28eac06c65f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:properties><con:property><con:name>0910_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9E87C57F4A237E44E0401F0A05992B03</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_24.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_24.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>true</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>urn:dece:rightslockerid:org:dece:9E7171CFE6FC3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic Test Cases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_36210 - StreamView - DLP - Full user can StreamView Stream created by Standard user</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9E87C57F4A257E44E0401F0A05992B03</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertUUID</con:name><con:value>b029afa8-ae5c-442b-bfc8-5425a33d1793</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertion</con:name><con:value>nVdZc6rMFn33V1iex5RhUJwqSVUzSFBRQXB6w6YFFEFpEPTX3waj0SRn+O5DyvRmD6v3XjSrX7C189kOwBhFsRcGZUV8raxotm2trVbVQhys1uvsqrpaw1aVq7OcVavZTLNdq5QVjBOkBDi2gvi1wtIMU6VrVaZh0O0O1+iwrec6TS8r5SmKMMlMXJ7pSjnb+QHuFFVfK0kUdEILe7gTWDuEOzHsTIA66BDPjnWFVHl7uYAsCkZvbhzvOxQFn20Eke/DZxjuqBfqwefFxp2J5wRWnEToo6aNXysfsWmaPqe15zByKJamaYpuU8THxp7zq/JWugYjWwnW4WUtWEEYeNDyvbOVg1JR7IZ2GfhOGHmxu/tNaoZi6Dx1FWWwCpl68KtCfRYo0P1jpgeQEbaq2LWYazIdrVGEAojKpq68Vn790wAvoUZkBXgdRjv8Zf3fEKHgiPxwj+wqvm7sCu7fM/7QrbcXBDtKAP0Ee0c0zFmytyDC5XGE1l428DDhno3LxfTLGb4SDMH/MpEX6h4ngU390BnRcxCO/59x3Y/qkmVq+Ql6A+6yazAyXxOpk+sMlIPlytqCX6tD87WAcO98AXWb9Mf6K09vtPoIQj1jnDH+4J1WM7t+qG/i9WE0OPQPK8m22HG9udk8RbXTacs3665rLk7brs8256u6H6tbtDiZp8MqPotwP8DrkhDBFSdF9Wwyex97x8xlnlrjUdhzdjOB0k7aHjrJELKKegz183Tc8lPNOy6n1lq1a5nQZs0Z47s8ng8aLbtkmLPFeEApW9Gwe9JJbvrw9XNP93vI99VHp2KT+f9zjm6LVmzdFkJ+UKzJ2xmjN1VRxOQsCOA0cUCq8MAhfxsw5J3twd16cjuleaBpXSAKvL+RBirYyoAxJd5VhelUzYQz6PHOcEoCjRLwl7yqS6mYLsSppr1LqWvY8vS0kv1keZaGKsBFsOCqki5NRd2QVBWEF1umiis526gTNVW0hVgiCUQp259tuR0jOfNIozh1wrGLCZcs51Ni754Gu+FxZUi+KqiyMDnIE2VVEzWpB/TFDLLdhMSeB7t9WFqY/F1Qb482AHVTmtQEZ9XYpqphskNRtwqb8WhTFbmnajgVtGJXcklKe1Pz/NkLgVcFeydlkgHGl15AQ+gO6eW8h60ZF6g6SEWnCO5LqT26AlE1Oi0Jl14NpFSXdHPYVXUllUBhE6XUxyt26K5k9whrWtYzwOZ+MIImzboBeR7oR3jiDiVL7oLVbsrAmu5Cj/OseZg6y1YqaoteP1wqJM0QaBLPa4AAokG+NdJ/Hgz4KTfae23WQ4N1N9whNyqpTNjfHs8Z3fJqI2c8nHHietscy964ZtkupfiQ3dS2QFGQ3WdczbL1BaWLgXdujPrmHHnR4hwPOY1peC2upM8Scy6GftN+ny/M/lO2gJoxGk/M2ficZcPDpnX24/cR/x5NeqrojIYIjTF8omiryxstkRMW7xvCp7VOI64EHJUHQN44juQRAvPvmwsJ33VVIuQFqpDKwkyQJ0CWnySFFzVt3XWZMZSnickMVUWyfdKm02Ku+6WlwItkUrQ1W+4XbJdeGsAukml1qetoJvfUm6OlNvSNaQzS/XQdMAwt77X3tZo6UM0ZYCvphCdvEV9KFGBao32PzvrTBs0cNNvvTdrArGUTdpuNXGd52jrLLRnK4u7VWRjAnxp3HFMIxWYlzZB0FbQu71umKmZN9+Eu2692MBMNMrMiODR4Se9qtJmJIuhfbNgAbIYXZ2mjClIRXwKZahFaHFdzFy+CoTcypISQNrmjy2bF0n/lWE6x0iPHDgLQwFeOSReOSWB9eFJaIoO5hrDHs9ThZemgNaeDXntPa/PBtsQ/dSkn9vz6KGilRv9pxpzSprvRZrO2IrrCU7BeuLVVzNPWGWqot23Knr4Vg0bdP6kDVeNMj/JP9AYdUjwoDRUmkGrxuUu1o+SJ3y293flcq7PmbjxJjopp9TFzcleHWTvdjN8bFBXJJ+7cXB617jyEi8t35OsheTNejlHq/oB9OIGv0muSrDYIxtdl/h1WxHKXfByt+M8yLrd4dnVduHb2uRbEMQriylselUu4TkKEnmd3yJfzsm5LTabJCF2pSXO1bgNIdJ1mujSguXabkbjGVetdUHyBKITB2str5WL28rH+M0C466yQFaGo8odMeZ/KSqAT9REGGBnha4VpEXzNmgAYgWZBk6txAkNzRGHV680Gzzcr5WEYj4JRBNYxiu4EcvOrQNYR9PYeylX0h5bAMWnEwTomsc88H63nACVEZke50u2w9RZXNICyk90ekgfkdIv2IY6f9+6+EDO/3cbXZ9cdEx/byx1wDppHZFroB0nPXBF/2xn7o/S/pgeJ7eWahbQvjjx4QfL46JMNOQ1uVKDbDH3FfHP9t9A2w3DfQ6k/IKK+NuNWyT56d3WvFxOitYkcK+4jmAztYD0fnpPjMSnG1KRplopIeoqhaGqCYELk4skItyigbhmofxHqN8xf6t7sj+iS2A0mMXnLd4RR5WL590vaQzRpQIyy+Ceb4JNrWV78jzc32IG5HzGPyU8aRvZn33/IdVeHQM5PKC9w8lWusE+P4/14EzowJFk9ckiF0X3un+J/qv1ovLXrBiUmrFglMfr9k3J++rxWLAjDJIgVsVIY7k/EAnN82qPOp9O3NIXE/bizZPi3d5a5OphAF+2sys3X+7tz1SsGDxGJwl6B5bWSkds3KR44dyfwB8CHQ7hNk2S3Nj3gfftm/m6569xX/r79Dw==</con:value></con:property><con:property><con:name>0910_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionAccountId</con:name><con:value>990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionUserId</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0910_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertUUID</con:name><con:value>96fcd296-05f7-46cd-94a7-424fa059b403</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertion</con:name><con:value>nVdZc6pME773V1iey1TCJm51kqphEVFBQcTlDmFYFEEZEPTXfwNGY3Jylve7SMVpenmm+5menp/I2od0DyAEkzSIo7osvDa6Ldd26G7rmWTd9nOzZTvP3aaFf9FN1yLZ7qZJMo26jFAG5QilVpS+NmiSop5J5plqGWS3xzI9knqhmu11o27CBGHPWOWFbNSLfRihXhX1tZElUS+2UIB6kbWHqJfavRlQxj2s2bNukBpvP68gq4DJm5+mhx5B2C8OtGEY2i92vCd+Ep90fjqoNwu8yEqzBL7HdNBr4902z/OXnHmJE4+gSZIkyC6BdRwUeD8ab7WbMXTkyI2va96K4iiwrTC4WCUoBaZ+7NRB6MVJkPr737imCIosXT/Dwn62qWb0o0F8BKjQ/aOnTyATZD0j36JuznTowgRGNqzPdfm18eOfCng1NRIrQm6c7NGX9X9DBKMTDOMDdJ7RbWM3cP/u8Ztsvf2Edk+O7DBDwQmqJUsOlg1RfZpANyjGAcLcc1C9qn69QDeCQfu/VOQn8YgTwya+yYwQeBCl/0+5Hkt19WJaYQbf4kFr0Tb78wHpUt0jkZjLVUduJ0uHIF8rCI/KV1D3Sr+vv/L0Tqt3o+VqOFmqypo8nxUY+6lJssakbUFKSPdmbmuetRkQ640hPu2kzLVYuiUom4T21OnJO04X/RWz9TzfiTWWCWqjXdpRXReNm6pKK6w5Z2Yt1eGW+XKxA+cuYZGU4Abz8Zoc0iOtKy8m3HKhkDtiuTDBAPV3KAyX6sEcTpSw9hRARaUKa24jPxi3mI7YfP3Y0+Meyn2N4LnaZPl7yZJdwUqt+4IvG4WLT2cK3xRZFrILz4PzzAO5zAEP/22Bynm7o78LpG5OckDT+kDguXArjhWwkwA1Fzlf4U1TKfgLGHKeamJDowbCNafoYi7kK8HUtIGY+4YjmeeNFGbri6gqAFXGvK+IumgKuiEqCoivskIRNlKxVWZKLmsroYYdCGJxuDhSN4VSEdi0zCozll7N2Gy9NLG8fx7v1RMuRqjwisTPjtJM3jCCJg6BvlrYdD/Dtpfx/hDXVnPuwWh4gFsA+zmJY4KLYuxyxZjTqqBblcz4LFNkaahoKOe1aldSTcyH5vzykQueU3hnLxaiAabXXNgG31fJ9XKIrAUbKTrIBa8yHom5M7kBUTQyr/HXXI3FXBf1udpXdDkXQSUTxDxEG1r1N5J/shmtGBpg+1gYXhMX/Qh/j/STfWaPNUvqg83epGxG9+2ADaxlnHvrTi5oq+EoXsvYjQo0keM0gAGRoNwazj8HxpzJTg5Blw7g2O3He+gnNYWKR7vTpSA7ATPxpuqCFdxdeyoFU8ZyfEIObXrL7IAsQ2dE+Zrl6CtCF6Lg0pqM5ksYJKtLqrIa1Qo6bE1fZPOlEIdtZ7BczUdPxcrWjMl0Nl9ML0WhHredS5gOJtwgmQ0VwZuoEE6R/USQVp8zOgLLrwZbzCdXJyFbA57CASDhoyYGmMDcYHsl4UBXRExeoPC5xC94aQYk6UmUOUHT3L5PTW3JzOaUqsiiE+I0nVdLPayteU7AlSKtxfqwovvk2gBO5Uxrin1Pm7NPwyVca2pomCnID6YbURQpHbSBq+SerZQMcOR8xuFTxNUyGcytyWFIFiOzRVJHzQmHsy6YM8WM3hUT31ufd956h4uyejg6KwOEpvHAMRlTbFHTDFFXQOd63gpFnjN6aO+Lw2ZvF4KBa1YZxwYn6n2NnBeCAEZXGTIAXaDVRdwqvFjZ10ChWJgWp83SR6tIDSaGmGHSZg902W5o8q8cKylW+8yxIw808JVj4pVjInCPT3JHoBDb4g9okXucJB61tjkedg+kthzvatxTn/DSIGxOok5ujJ4W1Dlv+1ttsejKgs8/Re7KZzYpR1oXW4PDXVsK9J0QtZrhWRkrGjsPiPBMbuExR+OaKlORyKSXPtFNsiduvw72lwvTpOf76Sw7yXNrhKizvzkuuvl2OmgRRCKd2Ut7fdL6y9heXe+Rr03yLry2UeKxwX7qwLfRa5ZtttBOb8vyHpaFeh9fjlb65zGulATOs1up9g7lLIhSGKWNt9KqHOF6GR70AqeHb87ruit22jzb7jN8q9UWm02RbJJUnwR4cOnSHMncZr0rii8Q+ThygzJWOcxeL+s/A7T3vQ20Epg0/uCpzFNdjnQ8fcQRgkb82mjRnQ5L9hmG4Zoc0wUtQLGM0OQolqKEbptq1NU4nUSTBLgpTB4G5PbXAVmHdnAIYDlFv88SKMWJOFqnLA2pl5P1EsEMj9lJOen26GaHrRJAONn+YOMPuLslhxilLwf/UA0zv93G12+3HWMdJygVUAmag7ha8JeRnu6xN8S/7Iz+dvS/uQeZE5QzC05fmgT2FcnnTx9sKGlwpwLZpegb5rvqv5lS35oSf0BEfE3GPZJzCh7i3h4meNbG41j1HkG4aEfr5fiSnU5ZVaY2SdJEgt0TFEESM2hneFw8G/EORsTdA/Evg/od85e4d/lndFnqR7MUn/I9ZlS9Wv79kfbJGicghUX6nYwP8bOsDP7Hl5vds0s9LJ7if3mcOB95/8bXQxwMuexQQeSVq3LCPn8u7/tJ6Nkx9hrgJhUnj76/s/8u9mfhPV13KClmxSZL4e+/1Mvu89qwbDvOolQWGpXgsSNWmNPzAfY+lH5xU42472+WAv32zbJUxjPbh3urcdcN/q78HFSFtyG2QkGF5bVR4Nc3Dh55Dx34HeBvmnDzT034807efhH/KnnI6Vdmv/0P</con:value></con:property><con:property><con:name>0912_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionUserId</con:name><con:value>9E87C57F3C667E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E87C57F3C667E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertUUID</con:name><con:value>bd31a621-99de-45b8-bd3d-da482edad8c9</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertion</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>0914_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionUserId</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>20_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertUUID</con:name><con:value>6ef3bd26-e62b-4433-a8db-845f39dd7130</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertion</con:name><con:value>nVdZc6rMFn33V1ieR8swOVeSqmYQUVEZHPANoQUUAWkQ9NffRqMx4znfrUoq6c0eVu+9aFY/I3Pv012AEIwTLwzKEv9SacINs7bpZg026XWtXmeYmtm217V2vbFhOrbdohiyUpYQSqEUoMQMkpcKTVJUjWRqVFOnWl0S/zBPnRa9qpTnMEY4M3Z5wlH53g9Q91L1pZLGQTc0kYe6gbmHqJtYXQ3Ioy727Jo3SJXX5yvIS8H41U2SqEsQ1pMNLej71pMV7oln4oPPs426mucEZpLG8K2mjV4qb7FZlj1lzFMYOwRNkiRBdgjsYyPP+VN5Ld2CoS0Fm/C65swgDDzL9L2zWYCSYeKGdhn4Thh7ibv/ITVFUGSRugZzq2ZR9eBPhXgvcEH3j5k+gIyRWUOuSd2SqXADYxhYsDxTpZfKn38a4DVUj80AbcJ4jz6t/xsiGByhH0bQrqHbxm7g/j3jN916fYZWVwosP0XeEY4LlkSmBVF5GsONl488hLlno/Jl+uUc3QgGrf8ykWfiESeGTXzTGd5zIEr+n3E9juqaZW76KXyt8muTjD1L0QSJMw6SMbFZu58YOh7iBcKj8xXUfdJv6888vdPqLUjqcVxv3z+PsxWxVb2JthNURk6EaGNaq160pVR1Zc2cOr+dHI1mpo4U5mBMxGxucmKLZIhwul5P2w4BdESUxDNrEHSWruoj/ugw51FTQ/udKFqt+XTsu6IQMWSQdhZzlqfYiPIDg1xXNyiqZqtViIbTbVbVo11LIU/+umTRIyvwuD7U0glyT/Z8NHt539PjHop9DeHpssni/2WD7PBmYt4XXHFQbPDbmcBXWZL49Mxx4KQ5IJNY4ODfLRizzu7g7jyxk5EsUJQe4DnW3wojGexEQM0E1pW5+VzOuTMYsM54jgP1EvBXrKwKGZ8Z/FxR+kLm6rY4P61FP12dhbEM0CWYc2VBFea8qguyDMKrLZf5tZhvZU3OJMXgSzgBL+TR2RY7CRRzz6Klhqw1aENrpKvlHNt7p9F+fFzrgi9zsshpB1GT1gyvCAOgGguL7qU49jzaR2HJmLEPQYMIbgHsZSSuCc6yvstkfUaPedW82PSPNlkSB7KCMk657EosCdlgPju/94JjZc7eC7mgg+m1F5bO9cbkajlA5qIRyCrIeOcSPBQye3IDIitkVuKuvRoJmSqos3FPVqVMABcbL2Q+WtNjdy26R4tR8oEOto+D4RRh0Qvw80A9WqfGoWSKPbDezymLUV3La3jmMsycVTvjFWMwDFcSTjMGisCyCsCASFBsDfefBSN23phEXof24GjTC/fQjUsyFQ53x3NOtj1m4kzHiwa/2bWmojdlTNslJN+it8wOSBK0h5SrmLZqECofeOfmZDhbQi82zsm4oVBNr90oqYt0tuRDv2X3l8ZsWM0NS9EnU222mJ7zfHzYts9+0p+w/VgbyLwzGUM4RVaVIM0eq7f5Bmf0t5hPG5WEjRJwZBYAces4gocJzPa3VxL2VVnA5AUyl4ncghM1IIpVQWJ5Rdn0XGpqifN0Ro1lSbB93KaTsVT90opjeTwp0lysIoPukSsd2JdkSl3oOcqsUR0s4UoZ+/o8AVk03wQURYqR0t/ImWPJBQNsKdNY/BaxpVQCM3MSDch8OG+S1EGx/YHWATMm1+hdPnGd1WnnrHZ4KMbDq2PowJ/rDxyTMMUWJUUXVBm0r+9bLkszRvWtfR6t91bO63hml+BQZwW1p5CznOfB8GpDOqBzZJyFrcwJl/gSyGUT0+K4XrrICMbeRBdSTNr0gS7bNU3+lWMFxUofOXbggAI+c0y4ckwAm0NVavMUajS5CC0yhxWFg9KajwadiFSWo12JrfYIJ/H8+iRoZ/qwuqBOWcvdKotFR+JdrhpsDJdZJyxpni0FDnYt0VN3fNCs+yd5JCuNmUf4J3ILDxkalcYSFQhMcu4RnTitsvuVtz+fmTo920+19CjNzCGiTu76sOhk22m/SRCxeGqcW6uj0luGlnH9jnw+JO/G6zFKPB6wH07gm/TS0vUWWsltWXyHJb7cwx9HM/ldxhUWz65tLq7dqNCCKIFBUnktogoJ102x0PPsLv5yXtcdod1m+BbTphkOsO22QNZJqkcCstHpNJle46b1rig+QeTCYOMVtQoxe/1Y/w7Q2nfX0IxhXPklU9GnshSoWH2EAYJ6+FJhWKrDUvU24JtMu8222ny73uo0hQ7Dgw7FcpXyOEwmwSQGmwTGDwK59Vkgq9DyIg8WKrrQEgiLiQLIE8zNfeTDi6TwQ8cLiOlE0y9y5Uegn5/d9oR9bK9wQAUsFuJ5wC+ivdlt3DB9wU5/K+5v6UFqe4UqwQ1KsKC5Ivn46H3exaDvw6bJG+K74z8GUl8DiV/QEJ8bca9jH72HqrdrB1bSWGy93iZyMJ8OT+nxmBbXjW6LJGkixukJiiAJDVopFoMnPdzBgLhnIP5Fht8xf6p7t39ElyZuoCX4Hd5jvpQvy79fwT5E4wYkME++s3E+vnQVxX+9l1ldq/DD5in+k4Wx/d73b3I91MGQi/PHC5xiVejn08fhBjDFe4m7VoizevgICuPH3N/Ff1f7o/HerjuUBLNinSbw5yfl4mx5qZiWFaZBIvGVi+HxvLtgTk4R7L47fUlzEbBvN5Ic/XgjWcojzXLh3qzcfb2/O9e8y+AtiKOQd8HyUsnx3RoXD5yH8/UN4A9HLPjtiP24k9cv5q+Wh55+Zvbr/wA=</con:value></con:property><con:property><con:name>20_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionAccountId</con:name><con:value>9E883D73823AAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionUserId</con:name><con:value>9E883D73823CAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E883D73823AAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E883D73823CAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertUUID</con:name><con:value>fa6ebc29-e0dd-4830-9e21-398738245e25</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertion</con:name><con:value>nVdbc6JME773V1i+l1bCSUSsTaqGgwQjKIjHOxxGQBGQg6C//hswuiab3Xff7yJlpunDM93P9PT8SO1DQPdBmqIk86OwqUovra3dRRtI80+IdJynTo8hn3hEU08M3+OYHt1hEc22mmqa5kgN08wOs5cWTVLUE8k8UV2L5Ptsr89SzzTLrFvNOUpS7BmrPJOtZnkIwrRfR31p5UnYj+zUT/uhfUBpP4P9KdBGfazZt2+QWq8/riDrgMmrl2VxnyDgs4MgCgL4DKMD8YP4pPPDSftT3w3tLE/QR0wnfWl92BZF8Vwwz1HiEjRJkgTJE1jHSX33n9Zr42aMHDXcRte1aIdR6EM78C92BUpDmRc5TRC4UeJn3uE3rimCIivXT6iET5DqhP+0iJ8BanR/6ekTyCS1n1LPpm7OTLRFCQohas5M9aX1z18V8GpqJXaYbqPkkH5Z/zdEKDyhIIqR85TeNnYD9/cev8nW6w8E+2oIgzz1T0ivWBLbEKXNSYK2fjnyU8w9J23W1W+W6Y1gCP6XivwgHnFi2MQ3mZF8F6XZ/1Oux1JdvcztIEev7LgsQGdidss2sYP0fK1lOsrnvZOuvdQQHpWvoO6V/lh/5emdVh9GznDjMu+TnHGmC2vDdZJ2aJYWNJK3cbFaoyS/ZO0jF6zbDC/Ml/neg/poPqfH55nOoYJzHR/KQbYYcyPbaqxpfuOTsUGHu9NZkmekfpIjl8kgN4oxrRQ6KKYCGaZnl5XbcoJsQxxBarALu0c2RTTJe/HwIPg74TyKGmqsQ8paLocHbit1g7bnGy8/9/S4h2pf7+hcb7L6f8mSvGRn9n0hVo1ii09nhl41VZXyiyiC89QFhSoAF//tgC64+6O39xW+IAVgGAMgiUKwk0ca2CuAmsmCp4nzuVaKFzAUXH2ODa0GCNaCZsqFVKykuWG8yYVnOcr8vFGCfH2RdQ2ktbHoabIpzyXTkjUNRFdZqUkbpdxpU61QjZXUwA4kuYwvjsJnSCl9SKusNmXp1ZTN18s5lg/Oo4N+2lhyoImaIk6PylTdMJIhD4G5WkB6kGPby+gQR43VTHgwGsZoB9CgIHFMcNGsfaFZM1qXTLuWWZ9lmqoMNSMtRKPeldKQi+F8dvmZC1HQROcgl7IFJtdcQEsc6OR6OUztBRtqJigktzZ+lwtnfAOiGWTREK+5GsmFKZszfaCZaiGDWibJRZBuaN3bKN4JMkY5tMDusTCiIS8GIf4emid4Zo8NWxmAzWFOQcb0oM/69jIq3HWvkIzV8D1aq9iNDgxZEAyAAZGg2hrOvwBGwpwdxz5P+2i0HUQH5CUNjYre96dLSfZ8ZuxO9AUrbffcRPEnjO14hBpAesfsgaoi553yDNsxV4Qphf6lO36fLZGfrC6ZzhpU1++xDXORz5ZSFHDO23I1e2+XK2hY48l0tphcylI/7nqXIHsbC2/JdKhJ7lhHaJLCNkHaA8HqSay4etthPm1NErEN4GoCAMrOdWUfE1h4211J+GZqMiYv0MRCEReiMgWK0pZVQTKM7cCjJlCZ5zNK11TZCXCazqulGTTWoiDhSpH2Yh2v6AG5toBTOzM68sA1Zmx7uERrQw+seQaKeL4NKYpUYuNtqxUu1CoGOCo+yPgUCY1cBTN7HA/J8n3eJamj4QTDKQ9mTDml9+XYc9fnvbve46KsHo7OygLB3HrgmIoptmgYlmxqoHc9b6WmzhgzgIcy3hxgKVm4ZrVxZAmyOTDIWSlJ4P0qSy1Al+nqIu80Ua7tG6DUbEyL02bppatQ98eWnGPS5g902W1o8l85VlGs8ZljRxEY4CvH5CvHZLA9ttWeRKVsV4zTReEKinw0uPloyMeksRztG0J7QLiZH3TGYa+w3tsL6lxw3s5YLHhV8sR2uF15zCYTSPsCDTTcc4pv7qWw2wnO2kgz2JlPBGdyh45FOmroKhXKTHYZEHySt4XD2j9cLkyHnh0m0/ykzuz3lDp7m+OCL3aTty5BJMqZvXDrkzFYRnB1vUe+Nsm78NpGiccG+6kD30avab7ZIZjdltU9rErNAb4c7ezPY1wl8Z2nba3aj6tZMM1QmLVeK6tqhOvneNDznT6+Oa9rXu6JJCt2OZIDjCx3ZbJDUgMSkBzPU1x3cJv1rii+QBSjcOtXsaph9npZ/xkgPPQ3yE5Q0vqDpypPTTU08fQRhSmyIjzNDhhRonmJG/AyCQSaIRmGE1gOdGmhJ9FUq6lH2TgcJ2CboeRhQOa+Dsgmgn7so2qK/pgl0gwn4mif8iygnk/2c4hyPGYn1aTbpzs9tk4A4eSHGOIPuLslcZRmz7EX18PMb7fx9dttx1jH8SuFtAItIFwt9M1I37kh/mVn9Lej/809yB2/mllw+rLEh1cknz/9ZENFgzsVSJ7q3DDfVf/OlKeo7q+mxB8QEV+TcY/knPyHuLeHCZ618ThWv0dSXLSj/Xx8zk+nvC4TR5I0kWD3BEWQxBTBHI+LZyvao5C4eyD+ZlC/Y/4S9y7/jC7PvHCa4VN+wIxq1st/f6R9ssYJyFCZfScTA/wsq4L/8eUG+7DSw+IJ/imixPmZ9298PcTBkKsO5Ydutaom7PPn8n6chD6MsFcfN6koefT9nf13sT8L7+m6Q8kwKzZ5hn7/pVl1n5eWDWGUh5kqtWrBY0esMWfnGPV/Kv3iph5xP94sZfrbN8tSG02hhw52667r/7vyk18XHiJslfo1lpdWiV/fOHjoPnTgD4BfmjAnstygA2iakzudexNmeZ4WSOaewE87ef1F/KvkIadfmf36Pw==</con:value></con:property><con:property><con:name>0914_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionUserId</con:name><con:value>9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>0914_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertUUID</con:name><con:value>0a11f365-aeaf-479a-9f2c-e3d99c18724a</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertion</con:name><con:value>nVdZc6pME773V1iey5RhExXrJFXDGlRUFtc7hBFQNlkE/fXfgNGYnJzl/S5SZppenul+pqfnZ2oGPjkAaQqTzIvCpsy/tHCTIHZUl26b0Ny1Oz3GbDM70mpDymYYi+j3yI7ZasppmkM5TDMzzF5aJE4QbZxqE10DZwY0MyA6z51+Z9NqLmCSIs9I5RlvNcvAD9NBHfWllSfhIDJTLx2EZgDTQWYNdKCMB0hzYN4gtV5/XkHWAZNXN8viAYZZzza0oO9bz1YUYD+xTzo/7XSge05oZnkC32Pa6Uvr3bYoiueCeo4SByNxHMdwBkM6duo5P1qvjZsxtOVwF13XnBlGoWeZvncxK1AKzNzIbgLfiRIvc4PfuCYwAq9ct2FptS2iE/5oYR8BanT/6OkTyCQ126lrEjdnGtzBBIYWbM41+aX1458KeDU1EjNMd1ESpF/W/w0RDE/Qj2Jot9Pbxm7g/t3jN9l6/QmtgRxafp56JzipWBKbFkybswTuvHLspYh7dtqsq98s0xvBoPVfKvITe8SJYGPfZIb3HJhm/0+5Hkt19bIw/Ry+lrPzQoYrQeOTxJv19PM4X+ojsJ7ih5cawqPyFdS90u/rrzy90+rdSL+YVrhPYzsTVpLJ5cHacKfayu3hoSkmPd3z4KU7H51X3GgYTHlGp4ZSp88JCyK0N7pb6KJByb2eSbn6vPH0Nt4Vs9WblJGZ2gOreJ0SFL4iHULLmdNK4SLseOx391kQsG4wz87ToyzrgQxZOhCPWA83t/4WpqR8ZJ2GYBAzXtaduGvFW7B1ZFC8fOzpcQ/VvkbwXG+y+n9F4wxvZuZ9wVWNYodOZwZfFVnm8wvHgbPugEJmgYP+9mDCOoeje/AkpsBZoKoi4DnW3wtjBRwkQMwF1lW4xUIpuQsYss5kgQyNBvA3rKIJBV+s+YWqvgmFa9jS4ryV/HxzESYKSGtjzlUETVjwmiEoCoiuslLht1K5V3SlkNU130AOeKGML7bEZFAqPYuUaUWnybVO55vVAsnF8ziYnLaG4CucInH6UdLlLcWrwhBo66VFijmyvYyDOGqs5+yD0TCGewDFAkcxwUUxDoVizMkJr5m1zPgsU2RpqKhpwan1rqSGUAwX88tHLjhW4exAKAUDzK65sAxOnOCb1TA1l3SoaKDgndp4JBT29AZEUfGiwV1zNRYKTdDmE1HR5EIAtYwXCj/dkhN3K7kni1LLoQH2j4XhVGEphuh7qJ2sM31smJIItsGCsCjNtTzaM1dR4Wz6Ba+uh6NoIyM3E6AKLKsCBAgH1dZQ/lkwZhf0NPYY0oPjnRgF0E0aChGNDqdLifc9aurMJkua3x16M8mbUabtYrJvkXvqAGQZ2iPCVU1bW2MaH3qX7nQ0X0EvWV+yCa0SXa9PN7RlPl/xkd+z31br+eipXFuqMZ3p8+XsUpaT475/8bO3KfuW6EOFd6YTCGep9YThpsgafZ7m1m97xKedhkO6ARyFBUDaO47gIQKzb/srCd80RUDkBQpXSNySk3QgSU+CzPKquhNdYmZJi3xOTBRZsH2UpvN6pfmNDcfyqFK4udzEa1LENwawa2dqRxAddU4/DVdwo058Y5GBIl7sQoLApVh92ymFYykVA2y50Fl0ithGLoO5OY2HeDladHHiqNr+UGfAnCp18lBOXWdzPjibAyrK+uHorA3gL4wHjsmIYsuGagiaAvrX81Yq8pzSfCso421glbyBalYbRwYraKKKz0ueB6OrLDUAWabri7BXOKG2b4BSMREtTtuVm67DiTc1hByRNn+gy35L4n/lWEWxxmeOHTmggq8cE64cE8Du+CT3eSKlu1ycLguHlYSj2luMh0yMq6vxocE+iZiTeX5nGvYLY/S0JM5Fz92ryyUj8y73FO7WLrXNWNy8WCocHnqSpx34sNvxz8pYUem5h/lnfA+PRTpuTGQiFKjsImJMkj+xwcYLLheqQ86DmZ6f5Lk5Somzuz0umWI/e+tiWCKd6Utvc1LFVWStr/fI1yZ5F17bKPbYYD914NvopefbPbSy27K6h2W+KaLL0cz+PMZVEs9u72rVQVzNgmkGw6z1WllVI9wgR4OeZw/QzXldM0Kf5XiRJTmR75AdSsA7OCHiAO8xTI/vkrdZ74riC0QuCndeFasaZq+X9Z8BWsFgC80EJq0/eKry1JRDDU0fUZhCI3pp0ZTAAwA4mhLxLsX0+zxDdnt9kcNZigGk2GpOomwaThOwy2DyMCD3vg7IGrS82IPVFP0+S6QZSsTRPOWZTzyfzOcQ5mjMTqpJd0B2+nSdAMzOg9hCH1B3S+IozZ5jN66Hmd9u4+u3246Rju1VCmkFmoWoWvCbkR6/If5lZ+S3o//NPchtr5pZUPqyxLOuSD5/+mBDRYM7FXCG6Nww31X/zZQhiO6vptgfEGFfk3GPZJ+8h7i3hwmatdE4Vr9HUlS0o/l8fM5Pp7wuUw/HSSxB7jECwzEdWjkaF89GdIAhdveA/cugfsf8Je5d/hldnrmhnqFTHiBGNevl3x9pn6xRAjJYZt/JOB89y6rgf3y5WQOr0kPiGfoposT+yPs3vh7iIMhVh/JCp1pVE/b5c3nfT8LAipBXDzWpKHn0/Z39d7E/C+/pukPJECu2eQZ//6VZdZ+XlmlZUR5mMt+qBY8dscacnWM4+FD6xU094r6/Wcr0t2+WlTLWLRcGZuuu6/1due3Vhbcgskq9GstLq0SvbxQ8dB468DvAL024x9E9sQNIsid0OvcmTDMMyeLUPYGfdvL6i/hXyUNOvzL79X8=</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionUserId</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertUUID</con:name><con:value>2f9e0cce-ace5-42d2-b50a-aab314454e53</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertion</con:name><con:value>nVdZc6JMF773V1jOpWVYFLdKUtWsooKCoOIdQgsogrII+uu/BqPRTCYz73eRMn04y3MWDk+/xubeJ/sgjmGUeGFQFdm3GrnpQdyyYMO0INVokTbZWFO42TDNdZNotagWpJq1qhjHKRSDODGDBNngBNHAmw2ireG9PkX0KeqF6nZWteocRjHyjFRe8Fo13/tB3C+jvtXSKOiHZuzF/cDcw7ifWP0ZkMZ9pNk3b5Bq769XkGXA6N1NkkMfw6wXG1rQ960XK9xjr9iTzqsd92eeE5hJGsGPmHb8VvuwzbLsJWu+hJGDkTiOY3gPQzp27Dm/au+VmzG0xWATXs+MGYSBZ5m+dzELUBJM3NCuAt8JIy9x939wTWAEXrhuwNxqWEQr+FXDPgOU6P7R0xPIKDYbsWsSN2cq3MAIBhas6qr4Vvv1Tw28mmqRGcSbMNrHX87/DREMTtAPD9BuxLfEbuD+3eM31Xp/hVZfDCw/jb0TlIspOaCk4uo0ghsvH3sxmj07rpbdr+bxbcCg9V868oo94kSwsW8qw3oOjJP/p12Prbp6mZt+Ct9n5InZycDvksJexIcdYtU210q6EVT9rYTwqHwFde/0x/nrnN7H6sOIV+TgkAi78MR13DV2HttSIHYMVbC0FWn1NnTHUS9SmznrGUcbpAu1ZJFzZ9+BO/5MMJihHUgjXc/qYjCqkL3evkkMltlkfF7AldCGutcGW8NVkwhu9/qJ0Zdq/bD0zFNuwiOEmM54wVKn+Pi41W1NIw0zMjcdqk64FT3L+OOyKw+4bnMZMwP5bLx95vSYQ5HXCJ7LJIv/lxTeY83EvB+YYlFs0NuZwHdJFNn0wjDgPHNAJtLAQX9bINPO7ujuPKGX4TRQFB6wDO1vubEEdgIgdI52JWY+l3LmAoa0I8+RoVYB/oqWVC5jM4OdK8qAy1zNFubnteCnqwsnSyAujRlX4lRuzqoaJ0kgvMpyiV0L+VaaSZmoGGwFOWC5/HCxhV4ChdyzSJGSZhRpzKh0tZwjOX8e7+XTWuN8iZEEZnYUZuK6ySrcEKjGwiL5FNlexvtDWDF0+sFoeIBbAPkMRzHBRdJ2maTppMyqZinTnmWSKAwlJc4YpcxKqHDZcK5fPmvB0BJj77mc08D0WgtLY3gZXy2HsbmgAkkFGeuUxiMusyc3IJKCZxXmWqsxl6mcqsu8pIoZB0oZy2V+vCZldy24J6up5EMNbB8bwyjcgg/Q80A9WWfqWDEFHqz3c8Jqqq7lUZ65DDNn1c1YxRiOwpWI3MhA4WhaAQgQDorUUP1pMKbn1OTg9UgPjjd8uIduVJGIcLQ7XXK86zUnzlReUOxm15kK3rRp2i4m+ha5be6AKEJ7RLiKaasGprKBd2lPRvoSepFxSWRKIdpel6qoi1RfsqHfsQdLQx/Vc8NStMl0pi+mlzyXj9vuxU8GE3oQzYYS60xkCKexVcdwk6e1LksxxmCL5mmj4pCqAEeiARC2jsN5aIDpwfY6hANV4tDwAonJBGbBCDMgCHVOpFlF2fAuMbWEeaoTsiRyto/KdDaWql9ZMTSLOoWbi9XBIHl8pQG7dKa0ON5RdKo+XMKVIvvaPAHZYb4JCAIXDspgI2WOJRUTYIvZjEZvEV1JRaCbk8MQz0fzNk4cFdsfznpAb+YzcpdPXGd13jmrHWqK8fDqGBrw59rDjIloxBYVReNUCXSv71suiXpT9a19fljvrZzVUM9K41CjOZVXcD1nWTC6ymINkHlsXLitxHClfQXkkonG4rReurERyN5E41I0tOnDuGzXJP7XGStGrPI8Y0cGKODrjHHXGePA5lgXuywRU23mEC8yhxa4o9KZj4e9A64sx7sKXecxJ/H81iToZtqoviDOWcfdKotFT2Rdph5sDLe5TmjcvFgKHO46gqfu2KDd8s/SWFIo3cP8M76FxyweV2SRCLhmcuGxXpTW6f3K218uzRap76ez9CTq5igmzu76uOhl2+mgjWGRcKYundVJ4ZehZVy/I1+X5F14XaPY44J92sA36jVL11toJbdj8R0W2SqPPo5m8jONKySe3diUqv1DwQXjBAZJ7b2wKihcP0VEz7P76Mt5Pfe4LkcRJKA5vkk0WZ7DWzjB4wCnej28xeM3rndF8QUiEwYbr4hVkNnrx/pngNa+v4ZmBKPaD56KOlXFQEXsIwxiqIWIzdLNXpcBnWa7TVNsp812WZrtdFokYNoUaHO1qhwmk2ASgU0CoweC3PlKkFVoeQcPFiy64BIxIhMFkBeYm/uDD0tK4YeOF2DTyUwr6cofgX59dssJ6dheoRAXsGiI+gG/Ie2tG6bfsJPfkvube5DaXsFKUIGSyLOuSJ4fffa7aPS92SR1Q3xX/EfD9u+G2A9osK+FuMexT95D1Nu1AzFpRLbebx05mi/Hl/R0SovrRr+D4yQWIfcYgeHYDFopIoNnLdzBALt7wP6Fht8xf4l7lz+jSxM3mCXoHd6jeamWx79fwZ6sUQESmCffyRgfXbqK4D/ey6y+Vegh8RT9ZGFkf9b9G18PcRDkYv94gVOcCv58fm5uAFOUS9S3QuTVQysojB59f2f/Xexn4b1cdygJmop1msA/P6kWu+WtZlpWmAaJyNZKweO+KzEn5wPsfyr95qYksB83kjz+441kKY1nlgv3Zu2u6/1dueGVjbcgsoq9EstbLUd3axQ8cB726wfAP6xY4qcV+5zJ+2/i3yUPNf062e//Aw==</con:value></con:property><con:property><con:name>25_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionUserId</con:name><con:value>9E8E512ABEF313DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8E512ABEF313DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertUUID</con:name><con:value>7adce797-930e-4d5f-8258-0e8f5bc7e248</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertion</con:name><con:value>nVdZc6pME773V1ieS8sAKirWSaqGNaigLK53CCOMsiiLoL/+GzQazclZ3u8iZabp5Znunp5nfiZW4Df7IElgnKIorMr8a61rOTbsMt0G0yJho+3Qm0avSfcaJOxt6LXdhc12r1aVkySDcpikVpi+1pokRTXIVoPqmCTTp3t9uvPSpclVrTqDcYI9Y5UXslYtAj9M+peor7UsDvuRlaCkH1oBTPqp3TeAMupjzb51g1R7+3kFeQkYv3lpuu8ThP3iQBv6vv1iRwHxk3jS+ekkfQO5oZVmMfyI6SSvtQ/bPM9f8tZLFLtEkyRJgmQIrOMkyP1Re6vcjKEjh5vouuasMAqRbfnobJWgFJh6kVMFvhvFKPWC37imCIosXTdgYTdsqh3+qBGfAS7o/tHTE8g4sRqJZ1E3ZzrcwBiGNqxOdfm19uOfCng1NWMrTDZRHCRf1v8NEQyP0I/20Gkkt43dwP27x2+y9fYT2n05tP0sQUeoll2yt2yYVCcx3KBihBLce05SvVS/WiS3BoP2f6nIT+IRJ4ZNfJMZHrkwSf+fcj2W6uplZvkZfNvMkD4fRPlsmqqxSqgOnKnvMRj33qevFwiPyldQ90p/rL/26b2tPowGqXBytvSxU9/kBqmtpqid8lyRmfwx7R39JNGzbZy2V2h42FKqyZsrrhsQ0UAAQWyRk/pJyNmmwtiBY8UVj4BIm6TJ0YmErsMEMjGJLTsxkGXs6jYFZ0QkjjfRpth7hHRkLUE6TQ+W3tH8ObInCYBrP+z6dNexgqIidkhI6EI6XgyJ7bsh0hv79XNPj3so9zWEp8smy/8XNMnwVmrdF1w5KDb4dKbwTZFlPjtzHDgZLshlFrj4bwtU1t0dvB2SmJxkgaaJgOdYfyuMFLCTADUVWE/hZjOl4M5gwLrqDBuaFeCvWEUXcj5f8jNNexdyz3Sk2Wkt+dnqLKgKSC7GnKcIujDjdVNQFBBdZYXCr6ViqxhKLmtLvoId8EKxPzsSk0KpQHZTphWDbi4NOlstZlgunkaBelybgq9wisQZB8mQ1y1eEwZAX87tpphh2/Mo2EeV5ZR9MBrs4RZAMSdxTHBWzF2umNOmyuvWRWY+yxRZGihaknPaZVdSRcgHs+n5Mxccq3BOIBSCCSbXXNgmJ6rkajFIrDkdKjrIefdiPBRyZ3wDomhkXuGuuRoJuS7oU1VUdDkXwEXGC7mfrJuqt5a8o93SioEJto+F4TRhLob4e6gf7RN9qFiSCNbBjLJbumcjGlmLKHdXvZzXloNhtJKxGxVoAstqAAMiQbk1nH8WjNgZPd4jpongaCNGAfTiikJFw93xXJA91Bq7E3VO85tddyKhSctyPEL27ea2tQOyDJ0h5WmWoy8JnQ/RuTMeThcQxctzqtIa1UE9uqLPs+mCj/yu875YTof1Ymlr5nhiTOeTc1Goh23v7KfvY/Y9NgYK745VCCeJXSdIS2TNHk9zy/ct7qeNTkK6AlyFBUDauq6AcAOz79trE77rioCbFyhcLnFzTjKAJNUFmeU1bSN61MSWZtmUUhVZcHycptNyofuVFcfyuFKkNV/tl02RXJnAuTjT2oLoalO6PljAlab65iwF+X62CSmKlPba+0bJXVspO8CRc4PFp4itZDKYWuP9gCyGsw5JHTTHHxgMmLYKo7krxp67Ou3c1Q4XZflwdJYm8GfmQ4/JuMXmFc0UdAX0ruetUORpS/ftoNivA7vgTVyzi3FksoIuauS04HkwvMoSEzSLZHkWtgonXOwroFAs3BbH9cJLlqGKxqaQ4abNHtplu26Sf+2xssUqzz124IAGvvaYcO0xAWwOdbnHUwnd4fbJPHdZSTho3dlowOxJbTHaVdi6SLgp8tvjsJebw/qcOuVdb6vN54zMe1w93Cy91jplSetsa3Cw60pI3/Fhp+2flJGi0VNE+CdyCw95MqqoMhUKrfQsEkyc1dlghYLzudVuToOJkR3lqTVMqJO3PsyZfDt57xBELJ3oc3d11MRFZC+v98jXIXkXXsco8ThgnybwjXoZ2XoL7fS2LO9hma+K+HK00j/TuFKCnMbmotrfl1wwSWGY1t5Kq5LC9TNM9JDTxzfndc0ITLcrsBwe0W2BYToC2SYpkQRkl2HoVq9943pXFF8gclG4QWWsksxeL+s/A7SD/hpaMYxrf/BU5qkqhzpmH1GYQDPCJJkDHVFgeRZQnTbXZjiKavVaPdDsdLtUi2dqVTVKx+E4BpsUxg8EufuVIOvQRnsESxZdcokEk4kSyAssrGDvwwul8CMXhcRkbJgXuvJboF+/3faEdRxUKiQlLBbiesBvSHv7hukX7M1vyf3NPcgcVLISnKA0RvYVyfOnz3qXhb4Xu0nfEN8V/9Gw86sh8Qc0xNdE3OM4R/QQ9fbswEwak623W0UO1svhJTses/K50e+SZJOIsXuCIkjCgHaGyeDJjHYwJO4eiH+h4XfMX+Le5c/ostQLjRSf4QD3S/Wy/PsT7MkaJyCFRfqdjPPxo6sM/sd3md23Sz0snuCfPIqdz7x/4+shDoZczh8UuuWq5M+n5+KGMMN7ift2hL0iPIKi+NH3d/bfxX4W3tN1h5LirlhnKfz9l2o5W15rlm1HWZjKfO0ieJx3F8zpaQ/7n0q/uLkQ2I8XSZH89kWyUEaG7cHAqt110d+VG+hSeBtiqwRdsLzWCvy2xsFD92G+fgB8HrE9gaaagBVEPLZ48T5iaYYh2yJ5T+DTTt5+Ef8qecjp185++x8=</con:value></con:property><con:property><con:name>25_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionUserId</con:name><con:value>9E977EBCADC4E996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E977EBCADC4E996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertUUID</con:name><con:value>df65844c-c946-47e2-9c5e-e7d9ca59753a</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertion</con:name><con:value>nVdZc6pME773V1iey1TCoqhYSaoGGBAVFMT1DmEElEVZBP3136DRaJKzvN9FykzTyzPdPT3PvCZm4NMdkCQoTr0orMrCW81eN5l2o2E9W2yj+dxoIfqZtRj0jFo2a5kM22LqZq0qJ0mG5DBJzTB9q9EkRT2T9WeqaZBsh2E7FPvCsuyyVp2iOMGescoLWasWgR8mnXPUt1oWh53ITLykE5oBSjqp1RkDZdDBmh3zCqn2/noBeQ4Yv7tpuusQhPViIwv5vvViRQHxSjzovNpJZ+w5oZlmMfqIaSdvtQ/bPM9f8vpLFDsETZIkQbIE1rETz/lVe69cjZEth+vosubNMAo9y/S9k1mCUlDqRnYV+E4Ue6kb/MY1RVBk6foZFTibVCP8VSM+A5zR/aOnB5BxYj4nrkldnelojWIUWqg60eW32q9/KuDF1IjNMFlHcZB8Wf83RCg8ID/aIfs5uW7sCu7fPf6QrfdXZHXk0PKzxDsgteySnWmhpDqK0dorBl6Ce89OqufqV4vk2mDI+i8VeSXucWLYxA+ZETwHJen/U677Ul28TE0/Q+9rX1FTqEdbmKoAkYF8XJJMa+QcR9u3M4R75QuoW6U/1l/79NZWH0YL8kBbo5E6FvmpczjABKDNQYlH0qjpDwaHrVY48ySpt2xytQ52qOU1kHuEm822P4nYkZQWxHJ+EgPLQGxSEcdg5TF9ezBoehvKba/oPOti292+F0W9wMsIM+sqO/90VDSXD7qrGSB9X1BtVjWOU1McDsY9YVbvdiV5VlH5mT9ckXA5n/unYQwDN3r73NP9Hsp99dHxvMny/zlDsoKZmrcFXw6KNT6dKXpXZFnITjwPjmMH5DIHHPy3ASrnbPfu1pPYnOSApolA4Dl/AwcK2EqAmkDOVfjpVCn4E+hxjjrFhkYF+EtO0WEu5AthqmldmLuGLU2PK8nPlieoKiA5G/OuAnU4FXQDKgqILrJCEVZSsVHGSi5rC6GCHQiw2J1siU2RVHgWLTPKmKEXYyZbzqdYLh4HgXpYGdBXeEXix3tpLK/qggZ7QF/MLFrMsO1pEOyiymLC3Rn1dmgDkJiTOCY4KcY2V4wJrQq6eZYZjzJFlnqKluS8dt6VVIF5bzo5feaC5xTeDmABDTC65MIyeFEll/NeYs6YUNFBLjhn4z7M7eEViKKReYW/5GoAcx3qE1VUdDmH4CwTYO4nK1p1V5J7sOpa0TPA5r4wvAZnYoi/h/rBOjL7iimJYBVMKauuu5bHeOY8yp1lOxe0Ra8fLWXsRgUa5DgNYEAkKLeG88+BATdlhjuPpT00WItRgNy4olBRf3s4FWTbqw+dkTpjhPW2NZK8Ud20XUL2LXpT3wJZRnafcjXT1heELoTeqTnsT+bIixenVGU0qum1mYo+yyZzIfJbdne+mPSfioWlGcPReDIbnYpC3W/aJz/tDrluPO4pgjNUERol1hNBmiJntAWGX3Q3uJ/WOomYCnAUDgBp4zjQww3MdTeXJuzqCsTNCxQ+l/gZL42BJD1BmRM0bS261MiSptmEUhUZ2j5O03Ex1/3KkucEXCnSnC13C1oklwawz860BhQdbcI89eZoqam+MU1BvpuuQ4oipZ3WXSu5YyllB9hyPubwKeIqmQwm5nDXI4v+tElSe832e2MWTOrFmN4WQ9dZHrfOcouLsrg7OgsD+FPjrsdk3GKzimZAXQHty3krFHlS130rKHarwCoEA9fsbBwZHNRFjZwUggD6F1liALpIFie4UXh4tq+AQjFxWxxWczdZhKo3NGCGmza7a5fNiib/2mNli1Uee2zPAw187TF46TEI1vsnuS1QCdPkd8ksdzgJ7rXWdNBjd6Q2H2wr3JNIOKnnN4ZhOzf6TzPqmLfcjTabsbLg8k/heuHWVylHmidLQ71tS/L0rRA2G/5RGSgaM/EI/0hu0D5PBhVVpkJYT08iwcbZExcsveB0qjfoSTAaZwd5YvYT6uiu9jM234y6TYKIpSNzai0PmjiPrMXlHvk6JG/Cyxgl7gfswwS+Uq9xttogK70uy3tYFqoivhzN9M80rpR49vP6rNrZlVwwSVGY1t5Lq5LCdTJM9Dy7g2/Oy5qFbKsFOR6PaABZtgnJBkmJJCBbLMvU240r17ug+AKRj8K1V8Yqyezlsv4zQCvorJAZo7j2B09lnqpyqGP2EYUJMqK3WpuvN8QmzwstgWI5mm83hRZNM3WKbtJNgWNqVTVKh+EwBusUxXcEufWVIOvI8nYeKll0ySUSTCZKIC+oMIOdj86Uwo8cLyRGw7Fxpiu/Bfr123VPWMf2SoWkhMUhXA/0A2knr5i+Yad/JPdX9yCzvZKV4ASlsWddkDx++qx3WehbsWnmivim+I+Gze+GxB/QEF8TcYtjH7y7qNdnB2bSmGy9XyuyN1/2L9nhkJXPjU6LJGkixu4JiiCJMbIyTAaPRrRFIXHzQPwLDb9h/hL3Jn9El6VuOE7xGQ5wv1TPy78/wR6scQJSVKQ/yXgfP7rK4H98l1kdq9TD4hH+yaPY/sz7D77u4mDI5fzxQqdclfz5+FjcEGV4L3HHirBXD4+gKL73/ZP9T7Efhbd03aCkuCtWWYp+/6Vazpa3mmlZURamslA7C+7n3RlzetyhzqfSNzdnAvvxIimS375I5spgbLkoMGs3Xe/vys/eufAWwlaJd8byVivw2xoHD527+foB8HHEtiFD0YCDIkXVBfE2YhmWJRsieUvgw07ev4m/S+5y+rWz3/8H</con:value></con:property><con:property><con:name>25_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionUserId</con:name><con:value>9E977EBCADCAE996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E977EBCADCAE996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertUUID</con:name><con:value>56b6c12d-d7d1-42f5-ab00-6cbdaad9ba92</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertion</con:name><con:value>nVdZc6pME773V1ieS8swoLhVkqphEVFRWVzvEEZAEZRFkF//DRiN5uTknPe7SJlpenmmu6fnmddQP7hUF4YhCiLH98oi91ahm5umQVJmzWyZZK1BbemavgGg1jQ2pq6bnY3eoSplMQxjJHphpHvRW4UCJFkD9RrZ1Mhmt052SfBC0a11pTxHQYg9Y5UXUCmnB9cLu0XUt0oceF1fD52w6+kHFHYjo6tCadTFml39Bqny/noFWQQM3u0oOnYJwngxkYFc13gx/APxSjzpvJphV3UsT4/iAH3ENMO3yodtkiQvSf3FDyyCAgAQoENgHTN0rF+V99LNGJmit/Wva1b3fM8xdNfJ9ByUhCLbN8vQtfzAiezDH1yTBAly1zWUGjWDbHi/KsRngALdP3p6AhmEei20dfLmTEFbFCDPQOWZIr5Vfv1TAa+mWqB74dYPDuGX9X9DhLwzcv0jMmvhbWM3cP/u8Ztsvb8ioyt6hhuHzhmN8y456gYKy9MAbZ105IS498ywXFS/nIa3BkPGf6nIK/GIE8MmvskM51gojP6fcj2W6uplrrsxeoctcczMJ0amZumAWM892t6A43RE7+S3AsKj8hXUvdIf6699em+rDyOO40CfgQI9WR/O++YcLH1joB73ycUWgDpV0Biik8saw+rZ5tdndTbzuV7fhyJNTqvUhXWOHVoe9DNiv96VYnIIrCQ4VOlGdb9jD1qdbs/F5bTZYXYdcFnE7mqaNdI6nIqn9kyRBryudMTOOeZGVNCXGpfVkLNNwToNm34pCtqZtp8EgJyeyebRmKLV2+eeHveQ72uILsUm8/+XNOhweqTfF2w+KLb4dEboXRJFLs5YFl5UCyYiAy38t4Njxtqf7L0jdBLAQFnuQY5l3B0/kuBegOSMZ2yJnc+llM3ggLHGc2yolaC7ZiSFT7hkxc1luc8ntmYK88tGcON1xo8lGBbGrC3xCj/nFI2XJOhfZanEbYR0J6lSIsorroQdcHx6zEyhEyEhdQxKpCWVplYqHa+XcyzvXUaH8Xmj8a7ESgKrngRV3NQ5mR9AZbUwqF6MbbPR4eiXVjPmwWhwRDuIegnAMWEmaftE0mbUmFP0QqY9yyRRGEhymLBysSuhxCeD+Sz7zAXLSKx54FNeg9NrLgyN7Y3BejkI9QXtSQpMOKswHvKJObkBkWSQlNhrrkZ8ovDKbNyTFDHhYSHj+MQNN9TY3gj22ajL6UCDu8fCsDK/6Hn4u6ecjQt9KulCD24Oc9KoK7bh0I6+9BNr3U44eTUY+msRuxlDmWcYGWJAAOZbw/ln4IiZ05Oj06EcNNr2/AOyg5JE+sP9OUtB26lPrOl4QXPbfWsqONO6btqE6BrUrr6HoojMIWnLuqmsCIXznKw5Gc6WyAlWWTSmZbLptOmSsohnS853W2Z/uZoNq+nKkLXJVJ0tplmajk+7duZG/QnTD9SBxFmTMULT0KgSQO8xWpuj2VV/h/tpqwBEl6AlMRAKO8viHdzATH93bcK+IvG4eaHEJgK7YAUVCkKVFxlOlrc9m5wawjyekWNJ5E0Xp+myWipuac0yHK4U0Bfr44rqgbUGzcKZ3OB7ljyjq4MlWstjV5tHMDnOtx5JAuEo97dSYhlS3gGmmKgMPkVMKRbhTJ8cByAdzpuAPMmmO1A7cFZPVWqfTmxrfdlb6z0uyurh6Kw06M61hx4TcYstSrLGKxJsX89bKomzuuIah/S4ORgpp+GaFca+xvBKTwazlOPg8CoLNUil4SrjdxLLF/YlmEo6bovzZmmHK2/sTDQ+xk0bP7TLbkOBv/ZY3mKl5x47sVCGX3uMv/YYD7enqtjmyJBussdwkViMwJ/k1nw06ByBvBztS0y1R1iR4zYmXjvRhtUFeUla9k5eLDoiZ7NVb7uy65uIAXpmyGiwbwmOsue8ZsO9SCNJpmcO4V7ADp2ScFQai6TH16OsR3SCuMoc1s4hy+oNanaYqvFZnOnDkLzYm9Oik+ym/SZBBMKFzlrrs9zDo351vUe+Dsm78DpGiccB+zSBb9RLjTc7ZES3ZX4Pi1y5hy9HPfqZxuUSx6xtC9XuMeeCYYS8qPKeW+UUrhtjoueYXXxzXtcdvsNyPabebrB8sw1IHjQA2QMQ0J1Ok29SN653RfEFIut7WyePlZPZ62X9M0Dj0N0gPUBB5QdPeZ7Koqdg9uF7IdL8twrXaDMk3epxsMU2+Tpocq12o82ydZrrsC2mVSmP/WjiTQK4jVDwQJBbXwmyggzn6KCcRedcIsRkIgfyglL9cHRRQSlc33I8YjpRtYKu/BHo12+3PWEd08kVwhwWg3A90DekHdww/Yad+pbc39zD2HRyVoITFAWOcUXy/Omz3nmh78UmwQ3xXfEfDcnfDYkf0BBfE3GPY56dh6i3Zwdm0phsvd8qctJfTi/x+Rznz41uCwCKCLB7giQAoSIjxmTwovl75BF3D8S/0PA75i9x7/JndHFke2qEz/AB90u5WP79CfZkjRMQoTT6Tsa6+NGVB//xXWZ0jVwPi6f4J/ED8zPv3/h6iIMh5/PH8ax8lfPny3NxPRTjvQRdw8deHTyC/ODR93f238V+Ft7TdYcS4a7YxBH685dyPlveKrph+LEXiVylEDzOuwJzdDmi7qfSb24KAvvxIknDP75IltJINWx00Ct3XefvyjWnKLyBsFXoFFjeKil+W+PgnvUwXz8A/mHEsj+N2OedvP8m/l3ykNOvnf3+Pw==</con:value></con:property><con:property><con:name>10_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionUserId</con:name><con:value>9E9CDFB384CE6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9CDFB384CE6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertUUID</con:name><con:value>41fac975-cec2-404e-b436-9ad6f4eda488</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertion</con:name><con:value>nVdbc6JME773V1i+l6mEk0SxNqkajqKigni8w2EEFEEZEPTXfwNG12Sz++77XaTMNH14pvuZnp4f2NmHbAdgjJI0iKO6Lr81mszGgUKLf4YIss9Nuome103u9Vlw3NdNE7lOs91u1HWMM6RHOHWi9K3B0gzzTHPPzKvNtDp0u8PzL63X9qpRn6EEE89E5YVu1It9GOFOFfWtkSVRJ3ZwgDuRs0e4k8LOBBiDDtHsODdIjfcfV5BVwOTdT9NDh6Lgi4sgCkP4AuM99YP6pPPDxZ1J4EVOmiXoI6aL3xoftnmev+TcS5x4FEvTNEULFNFxceD903iv3YyRq0eb+LqWnCiOAuiEwcUpQRko9WO3DkIvToLU3//GNUMxdOn6GRXwGTLN6J8G9TNAhe4vPX0CmWDnGfsOc3NmoQ1KUARRfWrpb41//qqAV1M7cSK8iZM9/rL+b4hQdEJhfEDuM75t7Abu7z1+k633Hwh29AiGGQ5OaFiy5OBAhOvjBG2CYhBgwj0X16vq1wt8IxiC/6UiP6hHnAQ29U1m5MBDOP1/yvVYqquXmRNm6H146i/WOzmkVCy0z5m878bQ5tFRnMVvFYRH5Suoe6U/1l95eqfVh1EPjNpDxuTgsKtk1NRvm3PPMhhJHDPdC7X2IJLmMFn6jniOVHXE8oburc4OPhhWayiGOrBPBZ48caoymNfmZtsVp5zZ23khh867nXfh8+Zocclnxgx0obdl+4E4WndDamE7OvYXPJhvg8NGm8+LiXhmmKeFfsxH/CCkahNnzsQ9S5Vkqdhwp+RUeG8/9/S4h3JffXSuNln+v+BpQXZS576QykaxIaczRe+GrsvZRZLAeeKBXBeBR/62YCh6u6O/CzQhp0VgmiqQJTHcKgMD7DTATBXRN6TZzCikC+iJ3nBGDO0aCFeiYSm5nC/lmWl2ldy3XW12XmthtrooQwPgyljyDcVSZrJlK4YB4qusMOS1VmyNiZHr5lKuEQeyUhwuriakSCsCyOq8MeHZ5YTPVosZkavnwX54WttKaEiGJk2O2kRfc7Kp9IC1nENWzYjtZbA/xLXlVHww6h3QFiA1p0lMcDHsXW7YU3YoW04lsz/LDF3rGSbOJbPalVZT8t5sevmZC0k0JHevFIoNxtdcQFtSh/Rq0cPOnI8MC+SyVxn3ldwd3YAYJp3XpGuuBkpuKdZ0qBqWniugkslKHuI1O/TXmn+CnFn0bLB9LIxkKnM1It8j6wTP/LHmaCpY72cM5CwfBnzgLOLcW7Vz2Vz2+vFKJ26GwFRE0QQEEA3KrZH8i2AgzvjRIRDYAA02arxHflIzmLi/O10Kuh1wI288nPPyZtcaa8GYc1yf0kPIbrkd0HXk9hnfdFxrSVlyFFxeR/3pAgXJ8pIOeZN5Ddp8zZpn04Uchy23u1hO+0/FEpr2aDyZzseXohget+1LmHZHYjeZ9AzZGw0RGmP4RNGOKtptmZeW3S3h08aiEV8DniECoG09TwkIgcXu9krCrmUohLzAkHJNmkvaBGjak6KLsmluVJ8ZQ22WTZmhoStuSNJ0Xi6ssLaSRJlUinbmq8OSVemVDdzKmdlUVM+c8k+9BVqZw9CepSA/zDYRw9DawexujNyDRskAV88nIjlFYi3TwdQZHXp00Z+90szRdMPeRABTrpiwu2Lkk2ax81Y7UpTlw9FZ2iCc2Q8c0wnF5jXTViwDtK/nrTD0KWeFcF8c1ntYyDapWWUc26JiqSY9LWQZ9K8ybAO2wMuLsjUkpbKvgcJwCC1O64WPl9EwGNlKRkibPdBlu2bpf+VYSbHaZ44dJWCCrxxTrhxTwOb4pLdlBvOv0gHPc0/UlKPZmg16woE2F4NdTXxSKS8NwuYoaud2/2nOnPOWvzXnc0GXfekp2ix9bp2KtHOBJurtWlpg7eTotRmejYFh8tOACs/0Fh1zPKgNdSZSuPSiUkKSPYn7VbC/XLgmO92PJ9lJnzp9zJz99XEu5Ntx95WiEu3MX1qrk6kuYri83iNfm+RdeG2j1GOD/dSBb6PXJFtvEUxvy/Ie1uW6Si5HJ/3zGFdKAvd5U6l2DuUsiFMUpY330qoc4ToZGfQCt0NuzutaUASZYUmKWSBwnMopdJNmVBrQvCDQDBBus94VxReIUhxtgjJWOcxeL+s/A4T7zho5CUoaf/BU5qmuRxaZPuIIIzt+a3Cywqs005a5lqS0VYVrtwRJFQRBVRmJAc1GfRino2iUgE2KkocBufV1QLYQDA4BKqfoj1kCpyQRR+eUpSHzcnJeIpSRMTspJ90O22zzVQIoN9sfIPlAultyiHH6cvAP1TDz2218/XbbMdFxg1IBl6BFRKqFvhnpmzfEv+yM/Xb0v7kHmRuUMwtJX5oE8Irk86efbChpcKcCLTDNG+a76t+ZCgzz+qsp9QdE1Ndk3CO5p+Ah7u1hQmZtMo5V7xFMinZ0Xo4v2emUVWVq0TRLJcQ9xVA0NUEwI+Pi2Y53KKLuHqi/GdTvmL/Evcs/o8tSP5qk5JTvCaPq1fLfH2mfrEkCUlSk38mkkDzLyuB/fLnBDiz1iHhMfvI4cX/m/RtfD3EI5LJDBZFXrsoJ+/y5vB8noQNj4jUgTSpOHn1/Z/9d7M/Ce7ruUFLCinWWot9/qZfd563hQBhnUarLjUrw2BErzOn5gDo/lX5xU424H2+WAv/2zbIwBhPoo73TuOsG/678HFSFh4hY4aDC8tYoyOubBI+8hw78AfBzE263JL6lNgHLtpRm87EJsyLN3RP4aSfvv4h/lTzk9Cuz3/8H</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionUserId</con:name><con:value>9E9D128D12A933F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D128D12A933F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertUUID</con:name><con:value>3f0f3465-dd16-4299-abfe-b8c5eb9598e8</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertion</con:name><con:value>nVdZc6pME773V1ieS8uwKCrWSaqGNaioIK53CAOMIiiLoL/+GzAazclZ3u8iZabp5ZnuZ3p6fsbm3qd7II5hlKAwqCrCa63pkE6z1WYatk21Gy2aZRvmxoGNTddi4IZl2C7s1qpKHKdQCeLEDJLXGk1SVINsNqi2QXV6ZLfHdF+6HWpdq85hFGPPWOWFrFXzvR/EvTLqay2Ngl5oxijuBeYexr3E6k2BOuxhzZ55g1R7+3kFWQaM3rwkOfQIwnqxoQV933qxwj3xk3jS+WnHvSlyAzNJI/gR045fax+2WZa9ZM2XMHIJmiRJgmQJrGPHyP1Re6vcjKGtBE54XfNmEAbIMn10MQtQKky80K4C3w0jlHj737imCIosXDdgbjUsqhX8qBGfAUp0/+jpCWQUm43YM6mbMx06MIKBBaszXXmt/finAl5NjcgMYieM9vGX9X9DBIMT9MMDtBvxbWM3cP/u8Ztsvf2EVk8JLD+N0QmOCpYcTAvG1UkEHZQPUYy5Z8fVsvrVPL4RDFr/pSI/iUecGDbxTWYE5MI4+X/K9Viqq5e56afwrZkSg2VL30rrTraV6uOuJZOI13PkhK8lhEflK6h7pT/WX3l6p9WHkTBSO0OCmwlLtNixMVL2ikwcfcc5cf2hrorrTFAQxSbj89Aw3CaQmJnut+trsimQ7xmbWUbOiIehtZANqSLHnRF9WfSVjaqP26iz73a6POHS7YkvC856wugt5cA6u/PYSfNsMMlWUXfHnfazZTTULzydB5TGvV+Y+dmaVoQAiTlYCOJU0JO6LIth6/VzT497KPY1gOdyk8X/S4ZkBTMx7wu+aBQOPp0JfFMVRUgvPA/OUxdkCgdc/LcFI87dHb0dktmM5ICmSUDgOX8rDlWwkwE1EzlP5edzNecvoM+5ozk2NCrAX3OqLmZCthLmmvYuZp5hy/PzRvbT9UUcqSAujXlPFXVxLuiGqKogvMpyVdjI+VadqpmirYQKdiCI+eFiy2wC5RxZtMKoU4ZeTZl0vZxjuXQe7kenjSH6Kq/K/PQoT5VNU9DEPtBXC4uWUmx7Ge4PYWU14x6M+ge4BVDKSBwTXFRjl6nGjB4JulnKjGeZqsh9VYszXit3JVfErD+fXT5zwXMqb+/FXDTA5JoLy+ClEble9mNzwQSqDjLBLY0HYmaPb0BUjcwq/DVXQzHTRX02klRdyURQygQx8+MNPfI2sneymlreN8D2sTC8Ji6kAH8P9JN1Zo4VU5bAZj+nrKbuWYhB5jLM3HU3E7RVfxCuFexmBDSR4zSAAZGg2BrOPweG3JwZHxBLIzh0pHAPvaiiUuFgd7rkZBc1x+5ktGAEZ9eZyGjSNG2PUHyL3jZ3QFGgPaA8zbT1FaFjml7a48FsCVG0uiQjRqPaqMtU9EU6Wwqh37Hfl6vZoJ6vLM0YT6azxeSS56Pjtnvxk/cx9x5N+6rgjkcQTmKrTpCmxBldgeFX71vMJ0cnIVMBrsoBIG9dV0SYwNz79krCd3xCMXmBymcyv+DlKZDluqhwgqY5kkdNLHmezqiRqoi2j9N0Xi11v7LmOQFXijQX68OKlsi1AezSmdYSJVebMfX+Eq61kW/ME5Ad5k5AUaR80N4dNXMttWCArWRTDp8irpIqYGaOD30yH8zbJHXUbL8/ZcGsmU/pXT723PV55653uCirh6OzMoA/Nx44pmCKLSqaIeoq6F7PW64qs6buW/v8sNlbuWDgmpXGocGJuqSRs1wQwOAqiw1A5/HqIm5VXiztKyBXTUyL02bpxatghMaGmGLSpg902W5o8q8cKyhWeebYkQca+Mox8coxETjHutIVqJhp84d4kbmcLB61znzYZw+kthzuKlxdItwE+a1x0M2MQX1BnbOOt9UWC1YRPL4eOCuvuUk40rxYGuzvOjLSd0LQbvlndahqzAwR/pncwmMWDysjhQrEZnKRCDZK69x+jfaXS7NFz/aTaXpSZuYgps7e5rhgs+3kvU0QkXxmLp31SZOWobW63iNfm+RdeG2jxGODferAt9Frmm620Epuy+IeVoSqhC9HM/nzGFdIkN1wStXeoZgF4wQGSe2tsCpGuF6KBz1k9/DNeV2zIit0hA7LtEieJXlOJFskJZGA7LAs0yH526x3RfEFIh8GDipiFcPs9bL+M0Br39tAM4JR7Q+eijxVlUDH00cYxNAIX2sSK1HNJkm2aE6SOqwgdRm6yzNNThDILs2xteooTMbBOAJOAqOHAbnzdUDWoYUOCBZT9McsESc4EUfzlCY+9XIyXwKY4jE7KibdHt3qMmUCCDvdHyz8AXe36BDGycvBO5TDzG+38fXbbcdYx0aFQlyA5iCuFvxmpG/dEP+yM/rb0f/mHqQ2KmYWnL4kQtYVyfOnTzYUNLhTgWQp+ob5rvpvptS3psQfEBFfk3GPZJ/QQ9zbwwTP2ngcK98jMS7a0Xw5vqSnU1qWqUOSNBFh9wRFkMQUWikeF89GuIMBcfdA/Mugfsf8Je5d/owuTbxgmuBTvseMqpbLvz/SnqxxAhKYJ9/JeB8/y4rgf3y5WT2r0MPiCf7Jwsj+zPs3vh7iYMhFh0KBW6yKCfv8XN6Pk9CzQuwV4SYVRo++v7P/Lvaz8J6uO5QEs2KTJvD3X6pF93mtmZYVpkGiCLVS8NgRS8zJ+QB7n0q/uClH3I83Sx7/9s2yVIdTy4N7s3bXRX9XbqCy8BbEVjEqsbzWcvz6xsED96EDfwB8bsLdDs90pCbfbnXEVuvehBmWpTmyeU/g007efhH/KnnI6Vdmv/0P</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionUserId</con:name><con:value>9E9D7D79540C90CBE0401F0A0799570C</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D7D79540C90CBE0401F0A0799570C</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertUUID</con:name><con:value>41a640ba-1796-4064-8ad2-7ed0a78d5093</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertion</con:name><con:value>nVdZc6pME773V1iey5Rhc6+TVA2rqKgsrncII6AIyICgv/4bMBrNyVne7yJlpunlme5nenp+IvPg0z2AEIwTLwyqMv9Wa1Bmq0FuzDrV7rbqDbLVqHdMm663oU2a7Y7dJLtMrSojlEI5QIkZJG81mqSoOsnUqZZBtXtkt0e1Xlskva5V5zBG2DNWeSVr1fzgB6hXRn2rpXHQC03koV5gHiDqJVZPB8qohzV75g1S7f3nFWQZMH53kyTqEYT1akML+r71aoUH4ifxpPPTRj3dcwIzSWP4EdNGb7UP2yzLXjPmNYwdgiZJkiC7BNaxkef8qL1XbsbQloNteF1zZhAGnmX63sUsQCkwcUO7CnwnjL3EPfzGNUVQZOG6DnOrblGN4EeN+AxQovtHT08gY2TWkWtSN2ca3MIYBhaszjT5rfbjnwp4NTViM0DbMD6gL+v/hggGJ+iHEbTr6LaxG7h/9/hNtt5/QqsnB5afIu8ExwVLItOCqDqN4dbLRx7C3LNRtax+NUc3gkHrv1TkJ/GIE8MmvskM7zkQJf9PuR5LdfUyN/0Uvvsdo20N+tNm3Nb5TgcRx5nMbNV9RwdvJYRH5Suoe6U/1l95eqfVh5HBtVsNQ3OP3VmLzPv7UNFsh/D2irAyho0cMu5eD8y+u7QPuwPHbzdodLHgEG4FmAJSHvIxceTE4xh4+rgSpPleaxPTSTtjd/kgGQycwcI+EmeKbbWb0TCT2vtMJkNvk2+tLlyMJqtNdLhgNF5nepqLna4cLRqKF/QZubIVt1mixZO41ZSU6TjNdPT2uafHPRT7GsJzucni/yWmL28m5n3BFY1ii09nAt8VWebTC8eBs+6ATGaBg/92YMw6+6O796RuRrJAVUXAc6y/E0YK2EuAmgmsq3DzuZJzFzBgnfEcGxoV4K9ZRRMyPlvxc1XtC5lr2NL8vJH8dH0RxgpApTHnKoImzHnNEBQFhFdZrvAbKd8pupLJ6oqvYAe8kEcXW+omUMo9i5abit6kV3ozXS/nWC6eR4fxaWMIvsIpEqcfJV3eMLwqDIC2Wli0mGLby+gQhZXVjH0wGkRwB6CYkTgmuCjGPlOMGT3mNbOUGc8yRZYGiooyTi13JVWEbDCfXT5zwbEKZx+EXDDA9JoLy+DEMbleDpC5aAaKBjLeKY2HQmZPbkAUlcwq3DVXIyHTBG02FhVNzgRQyngh89GGHrsbyT1ZjJoPDLB7LAynCgsxwN8D7WSdm8eKKYlgc5hTFqO5ltf0zGWYOetOxqurwTBcy9jNGKgCy6oAAyJBsTWcfxaM2HlzEnld2oOjrRgeoBtXFCoc7k+XnOx4zMSZjhdNfrtvTyVvypi2S8i+Re+YPZBlaA8pVzVtbUVofOBdWpPhbAm9eHVJxk2VanmdZkVbpLMlH/ptu79czYYv+cpSjclUny2mlzwfH3edi5/0J2w/1gcK70zGEE6R9UKQpsgaHb7Jrfo7zKetRsJmBTgKC4C0cxzBwwRm+7srCfuaImDyAoXLJG7BSTqQpBdBZnlV3YouNbWkeTqjxoos2D5O03m11PzKmmN5XCnSXKyjFS2SawPYpTO1IYiOOmu+DJZwrY59Y56ALJpvA4oipUjtb5XMsZSCAbac6Sw+RWwllcHMnEQDMh/OWyR1VG1/oHfBjMl1ep9PXGd93jvrPS7K6uHorAzgz40HjsmYYouKagiaAjrX85Yr8ozRfOuQR5uDlfMGrllpHBqsoIkqOct5HgyvMmQAOkeri7BTOKG0r4BcMTEtTpuli1bB2JsYQopJmz7QZbehyb9yrKBY5ZljRw6o4CvHhCvHBLA9vsgdnkLNFhehReawknBU2/PRoBuR6nK0r7AvIuEknt+YBJ3MGL4sqHPWdnfqYtGVeZd7CbYrl9kkLGleLBUO9m3J0/Z80Gr4Z2WkqM2ZR/hncgePGRpVxjIVCExyEYlunL6wh7V3uFyYBj07TPX0JM/MIaLO7ua46Ga7ab9FELF0bl7a65MqLkNrdb1HvjbJu/DaRonHBvvUgW+jl55udtBKbsviHpb5qogvRzP58xhXSDy7vi1Ve1ExC6IEBkntvbAqRrheigc9z+7hm/O67gpdnqJximmhwzAiI5ANkhJJQDa7XZIC3dusd0XxBSIXBluviFUMs9fL+s8ArUNvA80YxrU/eCryVJUDDU8fYYCgEb7VmjxNNRia6gqdFmBaoCGyNOBERuQ7dIMlxVp1HCaTYBKDbQLjhwG5/XVA1qDlRR4spuiPWQIlOBFH85QmPvV6Ml8DmOIxOy4m3R7d6DTLBBB2eogs/AF3tzgKUfIauVE5zPx2G1+/3XaMdWyvUEAFaBbiasFvRnryhviXndHfjv439yC1vWJmwelLYs+6Inn+9MmGggZ3KpBdir5hvqv+myn1rSnxB0TE12TcI9kn7yHu7WGCZ208jpXvEYSLdjRfj6/p6ZSWZWqTJE3E2D1BESShQyvF4+LZCPcwIO4eiH8Z1O+Yv8S9y5/RpYkb6Ak+5QfMqGq5/Psj7ckaJyCBefKdjPPxs6wI/seXm9WzCj0snuKfLIztz7x/4+shDoZcdCgvcIpVMWGfn8v7cRJ6Voi9erhJhfGj7+/sv4v9LLyn6w4lwazYpAn8/Zdq0X3eaqZlhWmQyHytFDx2xBJzco5g71PpFzfliPvxZsnRb98sS2WkWy48mLW7rvd35bpXFt6C2Ap5JZa3Wo5f3zh44Dx04A+Az0240+aabZHhWo220Gg8NmGaJT9Z+bST91/Ev0oecvqV2e//Aw==</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionUserId</con:name><con:value>9E9D128D12E833F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D128D12E833F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertUUID</con:name><con:value>fd997d8c-88a1-466a-aba3-7913aba3ca31</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertion</con:name><con:value>nVdXk6pME773V1ieS8slial2t2qIi4oKYsA7hBFQghIE+fXfgKvrhhPeryxLp+nwTHdP88xzbPgeOQBxDKPEDYO6xL00dla/37V6ZqvXM4hWu9MxWsbWoFrdPkGVf0yDIhp1KY5TKAVxYgTJS4PECaKFUy2ioxG9Adkb4ORTp41vGvUljGLkGak84Y167ntBPKiivjTSKBiERuzGg8DwYTxIzMEcyOMB0hwYN0iN1+cryCpg9OokyXGAYeaTBU3oeeaTGfrYM/ZJ59mKB3PXDowkjeB7TCt+abzbZln2lFFPYWRjJI7jGN7HkI4Vu/avxmvtZgwtKdiF1zVrBGHgmobnFkYJSoaJE1p14Nlh5CaO/xvXBEbgpesWzM2WSbSDXw3sI0CF7h89fQIZxUYrdgzi5kyFOxjBwIT1hSq9NH79UwGvplpkBPEujPz4y/q/IYLBGXrhEVqt+LaxG7h/9/hDtl6foTmQAtNLY/cMJ2WXHA0TxvVZBHduPnZj1HtWXK+qX8/jW4NB879U5Bl7xIlgYz9khnNtGCf/T7keS3X1sjS8FL4yZ0s5+e12/8BnXGE2F3xnHpFRT1LllwrCo/IV1L3S7+uvfXpvq3ejVdMb9g/HdndGUEKwWDWpXd/S6ePbIVGiTnTRhTaF+UI0Gy3bFkmuxc4apMARGfIgY5rVXRSz/XSDN0GHiGrLZnY0RV2/WHp63gCdPyzbSehfmv09UWw3J2smOmETa093F3Irb0GPnJDH6YiLPdcoChXvk3ocY2PJT7JtDfcOxMntg+aQXXbJjOPo3svHnh73UO5rBC/VJsv/axrvc0Zi3BdsOSh26HQm8FWWJC4tWBZc5jbIJAbY6LsHE8Y+nJyDK/YznAGKIgCOZbw9P5bBQQTEgmccmV0u5ZwtwJCxJ0tkqNWAt2FkFRUn07mlorzxmaNZ4vKyFb10U/ATGcSVMevIvMovOVXjZRmEV1kuc1sx38tzOZMUnashBxyfHwtL7CdQzF2TlGh5TpP6nE436yWSC5exPzlvNd6TWVlk5ydxLm0pTuGHQNVXJimkyLYY+8ewpi+YB6PhEe4BFDIcxQSFrB0yWVuQE041Kpn2WSZL4lBW4oxVql2JNT4bLhfFRy5YRmYtn895DcyuuTA1Vpjgm/UwNlZ0IKsg4+zKeMRn1vQGRFbwrMZeczXmM5VXFxNBVqWMB5WM4zMv3pITZys6Z5NS8qEG9o+FYRV+JQToeaCezQt9qhmiALb+kjAp1TFd2jXWYWZvehmn6MNRuJGQmwlQeIZRAAKEg3JrKP8MGDNLenp0+6QLxzsh9KET1WQiHB3ORY73XGpqzyYrmtsdujPRnVGG5WCSZ5J76gAkCVojwlEMS9UxlQvcojMdLdbQjfQimdAK0XF7dE1dpYs1F3pd622tL0bNXDcVbTqbL1azIs8np32v8JK3KfMWzYcyZ08nEM5is4nhhsBoPY5m9bc96qedikO6BmyZAUDc2zbvogZm3vbXJnxTZR41L5DZTGRXrDgHotjkJYZTlJ3gEDNTXKYLYiJLvOWhNF30terVNizDoUrhxmpz1EkB32jAqpwpbV6wlQXdHK7hRpl42jIB2XG5CwgCF4/K207ObFMuO8CSsjmDThFTSyWwMKbHIZ6Plh2cOCmWN5z3wYLK5+Qhnzr25nKwNwdUFP3h6Oga8JbaQ49JqMVWNUXjVRn0ructl6UFpXqmnx+3vplzGqpZZRxqDK8KCr7IOQ6MrrJYA2Qe6wW/l1m+sq+BXDZQW5y3ayfWg4k71fgUNW360C77LYn/tcfKFqt97rETCxTwtcf4a4/xYHdqSj2OiOkOe4xXmc2I/EnpLsfD/hFX1uNDjWkKmJ24Xnsa9DJt1FwRl6zr7JXVqi9xDtsMdrpDbRMGNwpTgcNDV3TVAxd02t5FHssKvXAx74Lv4SmLx7WJRAQ8lRQC1o/SJuNvXL8oqDa58Gfz9CwtjFFMXJztadXP9rO3DoZF4oUuupuzIqxDU7++R74OybvwOkaxxwH7aQLfqNc83e6hmdyW5XtY4uoCejkayZ9pXClxrdauUh0cSy4YJzBIGq+lVUnhBikieq41QG/O67rPow/OCyzdwfkuQfF4GycEHOB0v0/zOLhxvSuKLxDZMNi5ZaySzF5f1n8GaPqDLTQiGDX+4KnMU10KVMQ+wiCGWvjSoNvtDjrGHRZvMxTeJtoU2eYQcJZo012eoxv1SZhMg2kEdgmMHghy9ytBVqHpHl1YsuiSS8SITJRAnmBu+EcPVpTCC203wGbTuVbRld8C/frstiekY7mlQlzCYiCqB/xG2rsD+obpG3byR3J/cw9Syy1ZCUpQErnmFcnnRx/1Lgt9LzaB3xDfFf/RkPhuiP0BDfY1Efc41tl9iHq7diAmjcjW660iJ+Pp9JSez2l53Rh0cZzEIuQeIzAcm0MzRWTwooUHGGB3D9i/0PA75i9x7/LP6NLECeYJOsM+6pd6tfz7FeyTNUpAAvPkJxnroUtXGfyP9zJzYJZ6SDxDP1kYWR95/8HXQxwEuZw/bmCXq5I/Xz4XN4Ap2ks0MEPk1UUjKIweff9k/1Psz8J7uu5QEtQV2zSBv39SL2fLS8MwzTANEolrVILHeVdhTi5HOPhQ+uamIrDvN5I8/u2NZC2P56YDfaNx13X/rtxyq8KbEFnFboXlpZGjuzUKHtgP8/Ud4JcRy3ICQ/XaLNvp4cTjiO3wHfKewE87ef0m/i55yOnXzn79Hw==</con:value></con:property><con:property><con:name>10_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionUserId</con:name><con:value>9E9E90EFC560E713E0401F0A05995E0A</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9E90EFC560E713E0401F0A05995E0A</con:value></con:property><con:property><con:name>10_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertUUID</con:name><con:value>3b22e769-151c-46bf-8ae0-c50c68ba53b9</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertion</con:name><con:value>nVdZc6pME773V1ieS8uwKCpWkqphDSoqiAveIYwwioAsgv76b9BozHKW96tKKpmml2e6n+npeU6svU/3QJLAOEVhUFWEl1pzTdOw02YbFEPZjVZ7vWl0LUg2bIa02921xTTXbK2qJEkGlSBJrSB9qdEkRTXIZoNqG1S3R+Of5hPbJFe16hzGCfaMVZ7IWrXY+0HSu0R9qWVx0AutBCW9wNrDpJfavSlQhz2s2bNukGqvz1eQl4Dxq5emUY8g7CcH2tD37Sc73BPPxCedZyfpTZEbWGkWw/eYTvJSe7fN8/wpbz6FsUvQJEkSJEtgHSdB7q/aa+VmDB0l2ITXNW8FYYBsy0dnqwSlwtQLnSrw3TBGqbf/jWuKoMjSdQMWdsOmWsGvGvER4ILuHz19AhknViPxLOrmTIcbGMPAhtWZrrzUfv1TAa+mRmwFySaM98mX9X9DBIMj9MMIOo3ktrEbuH/3+EO2Xp+h3VMC288SdISjkiWRZcOkOonhBhVDlGDuOUn1Uv1qkdwIBu3/UpFn4hEnhk38kBkBuTBJ/59yPZbq6mVu+Rl8ZYqs2Y+lRBkSOYP47ny1ao8OkOuOzZcLhEflK6h7pd/XX3l6p9W7kcPwbusIQT1vSuYhE81C1VaukWIGxwfC60pcP+oSYmoMU8FVd4fY3USFkdTryJL6raPiFeY43VHSSiCNCj5bsUxHmeyI405drjuCIE5SdZsd8QkU1OjQ1sIwr5vegiUXhIez4K1aAz4/R3V9QE7fhvP+4NRCkrmYtCr9FI5HuR0VI0M6GCp7MrWXjz097qHc1wCeLpss/18yJCtYqXVf8GWj2ODTmcJXVVGE7Mzz4DR1Qa5wwMW/WzDi3N3B2yGZzUkOaJoEBJ7zt+JQBTsZUDOR81R+PlcL/gz6nDuaY0OjAvwVp+piLuSmMNe0NzH3DEeen9ayn63O4kgFycWY91RRF+eCboiqCsKrrFCFtVxs1amaK5opVLADQSyisyOzKZQLZNMKo04Z2pwy2Wo5x3LpNNyPjmtD9FVelfnpQZ4q66agiX2gmwubljJsex7uo7BizrgHo34EtwBKOYljgrNq7HLVmNEjQbcuMuOzTFXkvqolOa9ddiVXxLw/n50/csFzKu/sxUI0wOSaC9vgpRG5WvYTa8EEqg5ywb0YD8TcGd+AqBqZV/hrroZirov6bCSpupKL4CITxNxP1vTIW8ve0W5qRd8A28fC8Jq4kAL8PdCP9ok5VCxZAuv9nLKbumcjBlnLMHdX3VzQzP4gXCnYzQhoIsdpAAMiQbk1nH8ODLk5M44QSyM43EjhHnpxRaXCwe54Lsguao7dyWjBCJtdZyKjSdNyPELxbXrb3AFFgc6A8jTL0U1CFwJ0bo8HsyVEsXlOR4xGtVGXqeiLbLYUQr/jvC3N2aBemLZmjCfT2WJyLorRYds9++nbmHuLp31VcMcjCCeJXSdIS+KMrsDw5tsW82mjk5CpAFflAJC3risiTGDubXsl4Zuuipi8QOVzmV/w8hTIcl1UOEHTNpJHTWx5ns2okaqIjo/TdDKXul9Z8ZyAK0Vai1Vk0hK5MoBzcaa1RMnVZky9v4QrbeQb8xTk0XwTUBQpR9rbRs1dWy0Z4Cj5lMOniKtkCphZ46hPFoN5m6QOmuP3pyyYNYspvSvGnrs67dzVDhfFfDg6pgH8ufHAMQVTbFHRDFFXQfd63gpVmTV1394X0XpvF4KBa3YxDg1O1CWNnBWCAAZXWWIAukjMs7hVefFiXwGFamFaHNdLLzGDERobYoZJmz3QZbumyb9yrKRY5TPHDjzQwFeOiVeOiWBzqCtdgUqYNh8li9zlZPGgdebDPhuR2nK4q3B1iXBT5LfGQTc3BvUFdco73lZbLFhF8Ph6sDG95jrlSOtsa7C/68hI3wlBu+Wf1KGqMTNE+CdyCw95MqyMFCoQm+lZItg4q3P7Fdqfz80WPdtPptlRmVmDhDp568OCzbeTtzZBxPKJOXdWR01ahvb7PfK1Sd6F1zZKPDbYTx34NnpNs/UW2ultWd7DilCV8OVopX8e40oJchqbi2ovKmfBJIVBWnstrcoRrpfhQQ85PXxzXtesyIpcC3Q4sk12Wy1JJFskJZGA7LAsDdjmbda7ovgCkQ+DDSpjlcPs9bL+M0B731tDK4Zx7Q+eyjxVlUDH00cYJNAIX2pA5CmKlTq80O5QlMg0JVECbJtusQLLUBxdq47CdByMY7BJYfwwIHe+Dsg6tFGEYDlFl7NEgoeJEsgTLKx95MPLSOGHLgqIyXhqXMaV3wL9+u22J6zjoFIhKWFxENcD/jC0UzdM37DTPw73N/cgc1A5leAEpTGyr0g+f/qod1noe7Ep8ob4rviPhtR3Q+IPaIivibjHcY7oIert2YEnaTxsvd4qcrCeDk/Z8ZiVz41ehyRpIsbuCYogiSm0MzwMnoxwBwPi7oH4lzH8jvlL3Lv8M7os9YJpis/wHvOleln+/Qn2yRonIIVF+pOM9/Gjqwz+x3eZ3bNLPSye4D95GDsfef/B10McDLnsPyhwy1U5P58+FzeAGd5L3LND7BXhFhTGj75/sv8p9mfhPV13KClmxTpL4e+/VMve8lKzbDvMglQRahfBY7+7YE5PEex9KH1zcxlg318kRfLbF8lSHU5tD+6t2l0X/V25gS6FtyG2StAFy0utwG9rHDxwH/rrO8AvLZYXJK7ZbfF8u0tS9xbLsGxbbNP3BH7ayes38XfJQ06/Mvv1fw==</con:value></con:property><con:property><con:name>10_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionUserId</con:name><con:value>9E9EB4A7B060844FE0401F0A07992A93</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EB4A7B060844FE0401F0A07992A93</con:value></con:property><con:property><con:name>10_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertUUID</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertion</con:name><con:value>nVdZc6rMFn33V1ieR8swKCrWSaoaaBEVFQSnN4QWUASlQdBffxuNxuTkDN99SJne7GHtgc3qn9jaB2wHYIzixI/CsiK9VjgHtXnb5mu0xaJaA1nt2nqzbtY2vNVm20yddTirUlYwTpES4sQKk9cKSzNMja7XmKbBtDss32m0XxiWX1XKMxRj4pmovNCVcr4PQty5Rn2tpHHYiSzs405o7RHuJHZnCtRhh2h2rDukytvPG8hrwPjNS5JDh6LsFwfZKAjsFzvaUz+pTzo/HdyZ+m5oJWmM3mM6+LXybptl2UtWf4lil2JpmqZoniI6DvbdH5W30t0YOUq4iW5n0Qqj0LetwL9YBSgVJV7klEHgRrGfePvfuGYohi5c11Bu12ymEf6oUB8Bruj+0dMnkDG2atizmLszHW1QjEIblU1dea38+KcG3kyN2ArxJor3+Mv5vyFC4QkF0QE5NXxP7A7u3z1+U623n8juKKEdpNg/oVExJQfLRrg8idHGz4c+JrPn4PK1++Uc3wcM2f+lIz+pZ5wENvVNZSTfRTj5f9r13Kqbl5kVpOjNNoW9PcS9k7rR1vjSzs6iPQP1rquZr1cIz8o3UI9Ov5+/zuljrN6N3Fgc9ceng+yZ0npTnSM2DeZquuejOezK3Apjf1MdGH1qkS1W+qLFAZmG6+NRPapbfcmngJqfJDHie/nEKdWb5lyeaD3Q1rPRHFop7amiXG3LaiY3aN1xLpwZaaY3Yg9NL1yaqrs1TlF13hpY4NLM4Yk+nVerwMwzJi/xeEVbdlcHZjWSemIdHeHrR07PORR5DdD5mmTx/4KjeclKrMdBLBbFhrydCXpTFUVKL6IIzlMXZIoAXPK3BSPB3R29nS/zGS0ATesCSRSCLRyqYCcDxoQCSWU2U3PxAvqCO5oRQ6MEgpWg6jCTsqU007QezDzDkWfntRykqwscqQBfjUVPhTqcSboBVRVEN1muSms536pTNVO0pVQiDiSYHy6OzCdIzn2bVTh1yrHLKZeuFjMi756H+9FpbcBAFVVZnB7lqbKuSxrsA305t9luSmwvw/0hKi1N4cmof0BbgLoZTWKCi2rsMtUw2ZGkW1eZ8VmmKnJf1XAmates5BLM+jPz8lELUVBFZw9zaIDJrRa2IXZH9GrRx9acC1UdZJJ7NR7AzBnfgaganZXEW62GMNOhbo66qq5kEFxlEswCvGZH3lr2TnZdy/sG2D43RtTgvBuS56F+ss/csWTJXbDezxi7rnu2z/nWIsrcVTuTtGV/EK0U4mYENCgIGiCAaFCkRuovgKEw48YHn2d9NNx0oz3y4pLKRIPd6ZLTbb8+diejOSdtdq2J7E/qluNRSmCz2/oOKApyBoynWY6+pHQp9C/N8cBcID9eXpIRpzFNv82V9HlqLqQoaDm9xdIcVPOlrRnjydScTy55Pjpu25cg6Y2FXjztq5I7HiE0wXaVoq2uYLQlTlz2tmSeNjqNuBJwVQEAeeu60CcDLPS2tyHs6SokwwtUMZPFuShPgSxXoSJImrbpeszElmepyYxUBToBKdN5udCD0koUJNIp2pqvDku2S68M4FydaQ1YrBau2l+glTYKjFkCssNsEzIMLR+03kbNXFstJsBRsqlA3iKhlCrAtMaHPp0PZk2aOWpO0J/ywKznU3aXjz13dd65qx1pyvLp1VkaIJgZTzOmkBGblzQD6ipo3963XFXMuh7Y+/yw3tu5ZJCeXY0jQ4B6V6PNXJLA4CbDBmBzvLzArSrCq30J5KpFxuK0Xnh4GY78sQFTMrTp07hs1yz91xkrRqz0ecaOItDA1xmDtxmDYHOsKm2JwVxTPOB55goyPGqt2bDPH2htMdyVhGqXchM/aIzDdmYMqnPmnLW8rTaf84rkidVws/Tq60SgrYutof6uJfv6TgqbjeCsDlWNM30qONNbdMzwsDRSmBDWk0uX4uO0KuxX/v5yqTdYcz+ZpifFtAaYOXvr45zPtpNek6Ji+cxdWquT1l1E9vL2Hfm6JB/C2xqlnhfspw18p17TdL1FdnI/Ft9hRSp3ycfRSv5M4wqJ79Q2V9XOoeCCOEFhUnkrrAoK10kJ0fOdDvly3s485CHgBBbUBQYIEEK6QTNdGtAtnmcZpnnnejcUXyCKUbjxi1gFmb19rP8M0N531siKUVz5g6eiTmUl1An7iEKMjOi10pLInuRaXQ6ILR5KDVAHkIMNmq+LtEC3YKU8ipJxOI7BJkHxE0FufSXIOrL9g48KFl1wCUzIRAHkBeXW/hCgK6UIItcPqcl4alzpym+Bfn12z4noOH6hgAtYAiL9QN+Q9vod0y/Y2W/J/d09SB2/YCWkQEns2zcknx999Lto9KPZDH1H/FD8R0PmV0PqD2ior4V4xHFO/lPU+7WDMGlCtt7uHTlaL8eX9HRKi+tGp0XTLBUT9xRD0dQU2Skhg2cj2qGQenig/oWGPzB/ifuQf0aXJl44Tcg7vCfzUr4e/34F+2RNCpCgPPlOJgbk0lUE/+O9zO7YhR4RT8hPFsXOR92/8fUUh0Au9o8fusWp4M/nz80NUUpyiTt2RLz6ZAVF8bPv7+y/i/1Z+CjXA0pCpmKdJuj3T8rFbnmtWLYdpWGiSJWr4HnfXTEn5wPqfCj94uZKYN9vJDn+7Y1koQ6ntof2VuWh6/9dueZfG28jYoX9K5bXSk7u1iR46D7t13eAX1asKHWFershis02zTxWLMfzTdhkHwX8lMnbL+JfJU81/TrZb/8D</con:value></con:property><con:property><con:name>10_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionUserId</con:name><con:value>9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>10_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55795</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="da3acc58-7688-4d37-950f-dc7127c1da97"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4cb8bc4c-5c69-43bc-b637-4464b0f7dad0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBRenewedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="193aaeca-543b-40e7-9d8d-a9da3e83ddc8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectDBRenewedBy",callTC.getPropertyValue("expectDBRenewedBy"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBRenewedBy") == "" || tC.getPropertyValue("expectDBRenewedBy") == null) {
		tC.setPropertyValue("expectDBRenewedBy","");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert difference between EXPIRATION_DATE and CREATED_DATE not greater 24 hours" disabled="true" id="a37fde92-cc27-4aab-8b3c-b28523a0bb2e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def streamhandle = tC.getPropertyValue("streamhandle");

a = new dbUtils.dbStreams(log,,tP.getPropertyValue("targetSystem"));

assert a.streamHandleVerifyExpiration(streamhandle) &lt;= 24;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA row" id="7015aa9a-a630-434d-8fa9-7c0d7678d082"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA a where STREAM_HANDLE_OID =hextoraw('$sh')""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="4600d02e-f575-49c1-b8a4-a373fc1effdc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody              = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle   = tC.getPropertyValue("streamhandle");
String expectAccountOID     = tC.getPropertyValue("accountoid");
String expectRightsToken    = tC.getPropertyValue("rightstokenid");
String expectUserOID        = tC.getPropertyValue("expectDBCreateUser");

String expectStatus         = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy = "null";
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
String expectDBUpdatedBy = tC.getPropertyValue("expectDBRenewedBy");

if (tC.getPropertyValue("expectDBDeletedBy") != null) {
	tC.setPropertyValue("expectDBClosedBy",urnnode + tC.getPropertyValue("expectDBDeletedBy"));
	
} 
expectDBClosedBy = tC.getPropertyValue("expectDBClosedBy");

String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
a = new dbUtils.dbNode(log);
String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log);
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);
if (expectDBUpdatedBy == "" || expectDBUpdatedBy == null) {
	expectDBUpdatedBy = "null";
}
expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_BY.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	String dbUpdatedDate  = myXML.ResultSet.Row.UPDATED_DATE.text();
	String dbUpdatedBy    = myXML.ResultSet.Row.UPDATED_BY.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
     
     if(tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp")
     {
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID] - streamCreateNodeType[$streamCreateNodeType]";
	assert dbUserOid == expectUserOID;
     }
	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		log.info "Asserting dbClosedDate is null";
		assert dbClosedDate == "null";
	} else {
		log.info "Asserting dbClosedDate is length()";
		assert dbClosedDate.length() > 0;
	}

	//UPDATED_DATE
	this.log.info "Asserting dbUpdatedDate is null ";
	if (expectErrTypeStreamRenew == "SUCCESS") {
		assert dbUpdatedDate == "null";
	}

	//UPDATED_BY
	this.log.info "dbUpdatedBy[$dbUpdatedBy] expectDBUpdatedBy[$expectDBUpdatedBy]";
	assert dbUpdatedBy == expectDBUpdatedBy;
	
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_16520 - StreamListView - LLP - Full User can view stream created by Full User - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LASP Linked Test Cases</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0B1D63C72724595FE05307991F0A1758</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0B1D63C905775989E05307991F0A3300</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>118a3486c3d849cc8d2137ec002cb084</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>118A3486C3D849CC8D2137EC002CB084</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>0B1D63C905C45989E05307991F0A3300</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0B1D63C72724595FE05307991F0A1758</ACCOUNT_OID>
      <USER_OID>0B1D63C905775989E05307991F0A3300</USER_OID>
      <TRANSACTION_ID>1.0.1.3.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2014-12-26 16:59:11.704</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2014-12-26 10:59:11.704</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0B1D63C905C45989E05307991F0A3300</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0B1D63C905775989E05307991F0A3300</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0B1D63C905775989E05307991F0A3300</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>55796</con:value></con:property><con:property><con:name>expectDBClosedBy</con:name><con:value>urn:dece:org:org:dece:LLASP</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2abf64e2-a163-44da-8659-16fd40af2035"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6cc4f731-0a4e-4152-805f-e95cb6df3e73"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="50ea48e5-3d60-4300-9aa1-2dcb05e660fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBUpdatedBy") == "" || tC.getPropertyValue("expectDBUpdatedBy") == null) {
		tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" disabled="true" id="10e92b8d-f1fc-40d2-bc93-f89cab956dc0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status ORDER BY UPDATED_DATE
</con:query><con:properties><con:property><con:name>sh</con:name><con:value>${#TestCase#streamhandle}</con:value></con:property><con:property><con:name>status</con:name><con:value>${#TestCase#expectDBStatus}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" disabled="true" id="15ce8b27-e18a-4536-baef-b04d3b9d5985"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false"><con:name>a</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep><con:targetType>dbxmlresponse</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row" id="2427105a-40af-417e-a224-74120a88736e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String status = tC.getPropertyValue("expectDBStatus");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw('$sh') 
 and STATUS = '$status'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;


try {
	def myXML = new XmlSlurper().parseText(results);
	log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
	assert myXML.ResultSet.Row.size() >= 1;
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="6439eea9-590e-4cc5-b331-ab5dfcba6b42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBUpdatedBy  = tC.getPropertyValue("expectDBUpdatedBy");
String expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType     = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
int    counter = tC.getPropertyValue("counter").toInteger();

if (expectErrTypeStreamRenew == "SUCCESS") {
	counter++;
} else {
	expectDBUpdatedBy = "";
}

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	this.log.info "Row size is " + myXML.ResultSet.Row.size() + " counter[$counter]";
	assert myXML.ResultSet.Row.size() == counter;
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == counter;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == counter;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == counter;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == counter;
	assert myXML.ResultSet.Row.STATUS.size() == counter;
	assert myXML.ResultSet.Row.CREATED_BY.size() == counter;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == counter;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == counter;

	for (int i = 0; i &lt; counter; i++) {
		this.log.info "----ROW [$i] ----";
		String dbStreamHandle = myXML.ResultSet.Row[i].STREAM_HANDLE_OID.text();
		String dbAccountOid   = myXML.ResultSet.Row[i].ACCOUNT_OID.text();
		String dbRightsToken  = myXML.ResultSet.Row[i].RIGHTS_TOKEN_OID.text();
		String dbUserOid      = myXML.ResultSet.Row[i].USER_OID.text();
		String dbStatus       = myXML.ResultSet.Row[i].STATUS.text();
		String dbCreatedBy    = myXML.ResultSet.Row[i].CREATED_BY.text();
		String dbClosedBy     = myXML.ResultSet.Row[i].CLOSED_BY_ORG_ID.text();
		String dbClosedDate   = myXML.ResultSet.Row[i].CLOSED_DATE.text();
		String dbUpdatedBy    = myXML.ResultSet.Row[i].UPDATED_BY.text();
		String dbUpdatedDate  = myXML.ResultSet.Row[i].UPDATED_DATE.text();
	
		//STREAM_HANDLE_OID
		this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
		assert expectStreamHandle.toUpperCase() == dbStreamHandle;

		//ACCOUNT_OID
		this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
		assert expectAccountOID == dbAccountOid;

		//RIGHTS_TOKEN_OID
		this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
		assert dbRightsToken == expectRightsToken;

		//USER_OID
		this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
		if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
			assert dbUserOid == "";
		} else {
			assert dbUserOid == expectUserOID;
		}

		//STATUS
		this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
		assert dbStatus == expectStatus;

		//CREATED_BY
		this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
		assert dbCreatedBy == expectDBCreatedBy;

		//CLOSED_BY
		this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
		if (expectStatus == "active") {
			assert dbClosedBy == "";
		} else {
			assert dbClosedBy == expectDBClosedBy;
		}

		//CLOSED_DATE
		this.log.info "dbClosedDate [$dbClosedDate]";
		if (expectStatus == "active") {
			assert dbClosedBy == "";
		} else {
			assert dbClosedBy.length() > 0;
		}

		//UPDATED_BY and UPDATED_DATE
		/*
		*  The last row returned will always be the history row that 
		*  StreamCreate made.  Thus, the UPDATED_BY should always be
		*  NULL
		*/
		this.log.info "i[$i] - dbUpdatedDate length [" + dbUpdatedDate.length() + "]";
		if (i == counter - 1) {
			expectDBUpdatedBy = "";
			assert dbUpdatedDate.length() == 0;			
		} else {
			expectDBUpdatedBy = tC.getPropertyValue("expectDBUpdatedBy");
			assert dbUpdatedDate.length() > 0;			
		}
		this.log.info "dbUpdatedDate[$dbUpdatedDate]";
		this.log.info "dbUpdatedBy[$dbUpdatedBy] - expectDBUpdatedBy[$expectDBUpdatedBy]";
		assert dbUpdatedBy == expectDBUpdatedBy;
	}
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_02010 - StreamRenew - DLPCS - Two stream renewals allowed for a stream</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLPCS) Customer Service Test Cases</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>9904BDD1BD5DCB6DE0401F0A0599071B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>9116</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9116</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>9904BDD1BD63CB6DE0401F0A0599071B</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>9904BDD1BD5DCB6DE0401F0A0599071B</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>9904BDD1BD4CCB6DE0401F0A0599071B</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>active</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2011-01-05 06:59:37</EXPIRATION_DATE>
            <CLOSED_DATE/>
            <CLOSED_BY_ORG_ID/>
            <CREATED_DATE>2011-01-04 13:05:33.241</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY>9116</UPDATED_BY>
            <UPDATED_DATE>2011-01-04 13:05:39.87</UPDATED_DATE>
        </Row>
        <Row rowNumber="2">
            <STREAM_HISTORY_OID>9904BDD1BD5ECB6DE0401F0A0599071B</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>9904BDD1BD5DCB6DE0401F0A0599071B</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>9904BDD1BD4CCB6DE0401F0A0599071B</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>active</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2011-01-05 13:05:33.242</EXPIRATION_DATE>
            <CLOSED_DATE/>
            <CLOSED_BY_ORG_ID/>
            <CREATED_DATE>2011-01-04 13:05:33.241</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>9904BDD1BD4CCB6DE0401F0A0599071B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0600</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0600</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>9116</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55797</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="c35ac29d-e035-4d02-910e-bfdb7a5fabf3"><con:settings/><con:testStep type="groovy" name="Rename Test Cases" id="88824c31-487d-40cc-8377-cbee8eed6b45"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "LASP Dynamic Test Cases";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace(" DLP ", " LLP ");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="bf671097-2c6e-4ff9-a0f1-61582473e815"><con:settings/><con:testStep type="groovy" name="Set a Property" id="8d4cfc18-5262-40fd-a75a-696f66857be1"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Portal (PORTAL) Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName != "aaaaaa";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="7c85533d-a6f9-48d3-afb2-c0c7887f5078"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="a8f6bfe2-c6b3-4d36-8057-3df2b8f8c5ca"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Authentication and Authorization"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());""";
def newString = """tC.setPropertyValue("nodeid","5440");""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Requesting Entity Environment") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					
					stepScript = testStepList[j].getScript();
				
					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					stepScript = """import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
""";
					targetTestStep.setScript(stepScript);		

					/*
					*  Replace a part of the script
					*/
					//stepScript = stepScript.replace(oldString, newString);
					//targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="change test case script" id="7f52b76d-e402-4575-b9cd-c43441a32bef"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
//def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "LASP Dynamic Test Cases"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());""";
def newString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Test Case Properties") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);
					targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					//targetTestStep.setScript(stepScript);		
				}

			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Property" searchProperties="true" disabled="true" id="5661f9e3-4dbe-4aaa-bcd7-e897ab5bebec"><con:settings/><con:testStep type="groovy" name="Remove a Property" id="9663b1a5-71ab-4644-94cd-dce0d9f2bdf6"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Portal Customer Support Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	

	for( prop in targetTestCase.properties) {
		/*
		*  This will remove all test case properties
		*/
   		//targetTestCase.removeProperty( prop.value.name )
   		log.info "prop.value.name is " + prop.value.name;
   		if (prop.value.name == "cid" || prop.value.name == "alid") {
   			log.info "Removing " + prop.value.name;
   			targetTestCase.removeProperty( prop.value.name )
   		}
   	}
}
/*	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			/*
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}
*/
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="5346399c-ab41-473a-a37b-c1d560fb2939"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="07bbace4-f813-4ce5-ae19-a17f8b6d9b2a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Portal (PORTAL) Test Cases"; 
def stepName  = "Change context to DECE";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="2f9de82d-88be-4b07-8b34-925fda46662d"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="99be64e4-3c75-4689-b4a2-357311146b7a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Coordinator Customer Support Test Cases"; 
def stepName  = "Establish Entity Authentication Context to DECECS";
def stepNewName  = "Establish Entity Authentication Context to COORDINATORCS";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove script for all test cases in a suite" id="b273bc45-1205-4295-8b89-cea576481815"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Link LASP Customer Service Test Cases_P2"; 
def stepName  = "Delay 2";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Allow Adult Policy" searchProperties="true" id="67f91954-c6a0-4f4f-bdf2-6c82e5b65ad4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5252c6d1-17d7-4bfd-9f1a-13affd5f4b79"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="204f0c16-6679-4979-9cd3-dfbd604dfe34"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="fb42e03f-e4c0-4a37-9a0a-b86d46cdf582"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="34d85784-bcc2-4f51-8b9b-0a3c9dfa81af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true" id="b5e00af4-683c-4d9c-be3a-0d46e9410e1b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+o4EH2/vyJKH1chHxBCooLER6vl3pa2hHa5falcZwBDYkPsAO2vXzs0KVDa7V0JCXkynjkzc3zsc46S2AnanEMqCKNav9fUnyYNCxq+6xoR+BOjhtzIQPDsGrbneXZj4tUshHWtz3kGfcoFoqKpO5ZdM6y64Tgj2w9sK7DdiutWH3XtAVIuQ0uXiqVr2ySmPMjTNvUspQFDnPCAogR4IHAQtq+vAukZoAKT3jrfocwTpq2ZEMvANHElAgxxjCuYJea5eeBzHvEgJFOKRJbCW86IN/W3vZvNprKpVlg6NR3LskzLN6VPxMn0TG/9KDZD1KcTtlt3EWWUYBSTV6RAXYOYsUhrx1OWEjFLPgltm7alQhuwxQa2a/RMN98T5Oi+GekAZMqRwWfILoINYQIpUAza/bDf1M++N8Hd3lGKKJ+wNOFH6z+DBHQNMVtCZPCisgLd9yOeaFfrHHDQpzjOOFnDQNFkiTBw7TaFCdleES7JF3EtH7+25fJHCpYB/pOxnJv7WCV080R3emQKXPyfme3PaxflAcUZtC5scec+bKevs/b9Y/1lUF8t/lqM+xsyYM0cwr7zDlQ57rf1MVlLbr1tumFmtxdSNFrfha/r57TON8OXtPszu+6Qx1uPuH57Map36eBxOG70tre/4/vHwaS6SlbjuRj/7Irr1GHPq6wzv2c/nPnf3XHoz6zMWwwubpA/WnSstd9hYkHuxpDeErKaNpy5c3NXi5ad+Tjd9LJ4YF/MX9uLOYyTm1/1wWb2O6H3jz+WYfd6eFkdvlLbq/9z92v6Mm2+17Rfw6GxkIQwe54DFsVS0aPf0y7lvJD4Wl6UhUTGJHcNlkqjuAAq9JbapaQlyKQAkSiQw9ytL7ue49W8dqNrd+putXZh1Sz70mpbnu87F7ZdaNAOxRHELqMTonIpld3x52uAOAk40AhSY80yPAOufxGxhwTS+nQoDwejHEZMqjgWKZ1UM0pplUY+Y+4seXbY1ta1ARM39CZtTwSkB8rtOAfKPQRMlgSUvCt+c0lwLmQrVmididiurFGFQiYvgFRpcODUGq7JSbKMQQE1ExZlMVSWs2XeGJPv/h0DYZ5be1ft8PapGz45+fH7tLrjb0UjpE9ElANXJXVADhNO3ERWUc+Hut2TN1YRvp1FRJ0y2VWRErxDcvjpnSyKJSVT3gsrkJcbjg0Hwc3jusp80ZrgkvXldS3VXmpBqxjOClVWlWy9zvJxeErnUhnelHJnmyHgTIrVy4gtgJplCPNbd0WJ+ihzaT/El4kZDQUSkEjyaPnyGw+FELh6KPQl6bfffYUcpJR9E7AVp2zdWL4nFOIvnxw4wMpPmm/l34al0fu4TsTayyPrlK8DQehUrdSt8PIJNzCTYYmUMZbuBz8V4FTyQ2PZ5BKLkGx6zgR8/kVT+tTUEcYso6Lf03PDvmbmOMXLEoJ3pw9hcl1+u2i3/NOLdnx9FUr1SpBe+pL/djZIThcMurrPcyxNfSvfjTI5ne5p9BvAUzJ94feql/W2V8q06/u2JE/ZwINKWh/MHy17PT0+D61/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:FC72E00A80F4707CE0401F0A0599094C">
      <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2014-06-22T19:40:45.000Z" CreatedBy="urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_18152 - StreamListView - LLP - Policy - AllowAdult - US - MMPA - Cannot view stream that IS_ADULT without policy</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72E00A80F4707CE0401F0A0599094C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Allow Adult Policy Establishment" searchProperties="true" id="1a4dc79c-4c62-4ded-b616-7c24b5099165"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="57da43ee-8357-4aa5-89dd-187304bece97"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="8a8d3a97-3780-44a9-b835-555138c75999"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="7f3da642-07cd-48a2-8bf1-b1e91508201d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="0a9da1c8-b4d5-4cfb-ace3-e8f11aec510b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="b7affec0-7c18-439f-8707-f8ec2e31d211"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+o4EH2/vyJKH1chHxBCooLER6vl3pa2hHa5falcZwBDYkPsAO2vXzs0KVDa7V0JCXkynjkzc3zsc46S2AnanEMqCKNav9fUnyYNCxq+6xoR+BOjhtzIQPDsGrbneXZj4tUshHWtz3kGfcoFoqKpO5ZdM6y64Tgj2w9sK7DdiutWH3XtAVIuQ0uXiqVr2ySmPMjTNvUspQFDnPCAogR4IHAQtq+vAukZoAKT3jrfocwTpq2ZEMvANHElAgxxjCuYJea5eeBzHvEgJFOKRJbCW86IN/W3vZvNprKpVlg6NR3LskzLN6VPxMn0TG/9KDZD1KcTtlt3EWWUYBSTV6RAXYOYsUhrx1OWEjFLPgltm7alQhuwxQa2a/RMN98T5Oi+GekAZMqRwWfILoINYQIpUAza/bDf1M++N8Hd3lGKKJ+wNOFH6z+DBHQNMVtCZPCisgLd9yOeaFfrHHDQpzjOOFnDQNFkiTBw7TaFCdleES7JF3EtH7+25fJHCpYB/pOxnJv7WCV080R3emQKXPyfme3PaxflAcUZtC5scec+bKevs/b9Y/1lUF8t/lqM+xsyYM0cwr7zDlQ57rf1MVlLbr1tumFmtxdSNFrfha/r57TON8OXtPszu+6Qx1uPuH57Map36eBxOG70tre/4/vHwaS6SlbjuRj/7Irr1GHPq6wzv2c/nPnf3XHoz6zMWwwubpA/WnSstd9hYkHuxpDeErKaNpy5c3NXi5ad+Tjd9LJ4YF/MX9uLOYyTm1/1wWb2O6H3jz+WYfd6eFkdvlLbq/9z92v6Mm2+17Rfw6GxkIQwe54DFsVS0aPf0y7lvJD4Wl6UhUTGJHcNlkqjuAAq9JbapaQlyKQAkSiQw9ytL7ue49W8dqNrd+putXZh1Sz70mpbnu87F7ZdaNAOxRHELqMTonIpld3x52uAOAk40AhSY80yPAOufxGxhwTS+nQoDwejHEZMqjgWKZ1UM0pplUY+Y+4seXbY1ta1ARM39CZtTwSkB8rtOAfKPQRMlgSUvCt+c0lwLmQrVmididiurFGFQiYvgFRpcODUGq7JSbKMQQE1ExZlMVSWs2XeGJPv/h0DYZ5be1ft8PapGz45+fH7tLrjb0UjpE9ElANXJXVADhNO3ERWUc+Hut2TN1YRvp1FRJ0y2VWRErxDcvjpnSyKJSVT3gsrkJcbjg0Hwc3jusp80ZrgkvXldS3VXmpBqxjOClVWlWy9zvJxeErnUhnelHJnmyHgTIrVy4gtgJplCPNbd0WJ+ihzaT/El4kZDQUSkEjyaPnyGw+FELh6KPQl6bfffYUcpJR9E7AVp2zdWL4nFOIvnxw4wMpPmm/l34al0fu4TsTayyPrlK8DQehUrdSt8PIJNzCTYYmUMZbuBz8V4FTyQ2PZ5BKLkGx6zgR8/kVT+tTUEcYso6Lf03PDvmbmOMXLEoJ3pw9hcl1+u2i3/NOLdnx9FUr1SpBe+pL/djZIThcMurrPcyxNfSvfjTI5ne5p9BvAUzJ94feql/W2V8q06/u2JE/ZwINKWh/MHy17PT0+D61/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747AE9D3F6A7E0401F0A05991177/User/urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_18152 - StreamListView - LLP - Policy - AllowAdult - US - MMPA - Cannot view stream that IS_ADULT without policy</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72E00A80F4707CE0401F0A0599094C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747A8C1B6534E0401F0A07992E11</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747AE9D3F6A7E0401F0A05991177</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="47fd6f6e-b776-41dc-a51d-a76451e711e4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6570ebcd-218a-4bac-86ba-6699c05997d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="60d6a919-12c4-444a-ba37-fc9e846a7dc8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" id="8b2255e3-b761-44d6-8c81-5f59521e417a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" id="5b8a569c-c105-4498-9f44-0b93d45fe2a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="c3505b2d-1a0f-4b1c-9ef6-430548c7e9a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="2f1ea482-8ed3-412a-9bff-2e5e5b1fd295"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="136af926-fe85-4267-8bbb-09f2b4252bd9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="1a413845-1857-465c-8198-cdfbabb097b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="e739d107-3f13-4c2b-a440-349fafb43ee0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="fcc038bf-5711-40d6-bd69-8773760cd9e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="ae5e54c0-24a7-4568-99da-1e1292e4fb43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="d72f12e9-9175-4718-a013-4e18a0190770"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="1aa6b15c-651d-4e17-8ea3-4579162c2ee2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="2dc70af9-8b7f-449d-8db4-10f9f3c91c93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0013F89CC7D95A4BE0533D991E0A2937</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_18344 - StreamListView - LLP - Policy - Verification ParentalControl:RatingPolicy - BE - KIJKWIJZER - 16 rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EL73V3TqpVPa8mXbAWaQogdFVIrH93hzJiQBIm1Sm5QPf/1JCkVA9MVzZphhst3sPrv7ZHdrHERh0WtyjhNBGNU6fl3/PYRutWpbVaMEsWWUq6Oq4SDXMpzSqOwUHWeIUFnXOpynuEO5AFTU9aJllw3Lkb+BZXlF17OdQtV2n3XtJ064NC1VCpauLaKQci9zW9fThHoMcMI9CiLMPQG9oHnb9aSmB3JMeqO2Qpk5TBoTIWLPNGEBYYjDEBYgi8yauaNTQ9wLyJgCkSZ47RPxur6+O5/PC/NSgSVjs2hZlmm5ptRBnIxP9cZJfhmjDh2x1bkFKKMEgpC8AQXqFosJQ1ozHLOEiEn0iWnbtC1l2sALaEC7TE91891Bhu5ISzsgEw4MPgF2bqyPRzjBFGLtsd+p66fHVXB1d5AAykcsifje+XuQMJ3hkMUYGTyPLEd3vMUD6WrUMPQ6FIYpJzPcUzSJAcRcu0/wiCy6hEvyIa5l5dcWXP5IzjIMv1OWmrmNVUI3D2THJ2PMxd/UbLteKys/QZjiRuC6v64feiPnunrXH7jPbDktV6dsPpvAegZhW3kFalPu9XmfrBturS9dLGAqwP3bGJ0NuuPuZPnw9qNyA81lGTnT+19z9/EMLd2eBV9CdjFFvl92z5ZxPzzjl+30cdirxLc//IfO61XAhieIXM4EqwyawegxYLB3PXgpt5wnOLx7CpPn6Kl3Hsf+9Xn1th9UUYLBdL6w+tO76DGdul3n7epmGE5Er13yr9rpycV86Cdtwa6DZwZuYnhFm/X3mLZj2BXmLSFIhy8Yivyo6NHxtUtZLyC+bi9KQpAxylS9WPUoLjAVekPdUq3FS2UDIsiTxVydJW9Kl457YZdadqVZLrWtSqnku67dtpoVv9XOe9AKxR7EFqMjonypLrviz9cAYeRxTBFOjBlL4QRz/QuLPhBA69C+fByMcjxgsovbs2GCX6bxYjx3pksLTNwXztHwBelaj4k7epc0RwInu627tNO6+xiSmGDV3xXBuWQ4FzIXr2CWitAuzECB4lROgEQ1Ya9YdiomJ1EcYoXUjBhKQ1yIJ3GWGZOv/osGgDyT9tuD7OF9Gtf+tzwFUgcRpcBVLBdYlhEfmEFWHsiHgCsHZ1Vuvpkiot6XzKdICFwh2f30ThPFjw1H/G4zuM9Bb3S/cfd3K/ht/6WB7j847/6rc1nLjzfNL/Jp7pdy4wjNyJbbfA+Qo002vkZOxFdQeC2ks1maUe/cskpmIs2bsrfbZoBhKjvzcsCmmJobE+ZRg3GDes/zRr6LLxUTGgggcCQfipYdj9iKAszVVtSRL3xx7Mq141LmTeCFOCRrhXJ5Uoi/3K+gB5WeFN/LvzlL0Hu5Dtja8iPjlKuQIHSsTmoELj8hBWTSLJE9myXbxg8ZOOR8V7hJ8gaLkGwapgJ//kVTzbiuAwhZSkXH1zPB9oDIcIpljL13pQ9msiG03ioW/NOt4r/bbiBbdQT0jS75f2WDZHSBWFfLS4alri/kkiyd0/HWQFoDPDCTWq1z35Uz6WJ7JhXd0vkmgTuRND6IP0q2crr/Hhp/AA==</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>00140D7D14AB7B47E0533E991E0A9061</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0013F89B13C15A43E0533D991E0A5DCE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0013F89CC7D95A4BE0533D991E0A2937</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="de14713a-155d-4fd2-a530-e3d528cecae5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="916483f6-61e9-4047-b655-9fb1552a5d8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="3bc214a2-f6c2-4a14-a901-07fd64bd858b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="c69406ce-08fd-45c2-afb0-bf1639fe5dd8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="a82dc51a-4a2f-4877-b453-b8e8df391109"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="1ee985ce-be3f-4a56-9418-e36f5bb6f25e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="c829a18e-09d2-431d-a877-0e0ba3e3f408"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true" id="a9ece84b-6e72-4785-92d2-8745b5339b6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true" id="15833cb6-0a21-4864-acd2-58ed7bb8c8d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true" id="6dee5d4e-bce3-46be-a78b-6dc02b7c7bdb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvNIGS+YzRWoMgYSE7IMkEwyLykhCxCxJbBklnz9lQw4GEguM/PkUrt1+vSi7r5iIAxM22EMRRxTkluHAWF2Iq0rcURsChhmNgEhYjaH9sC569lmQbfB/oqS81p15Q0WLUO3QFW1fMNQLb2K1FGpVlFH0BgVR0VggmpVqDIWI48wDgivK6ZulFTdUov6UC/bVsU2y4WaWfut5J5RxAS2UCnoyo7UmtWVKedzW9NWq1VhVSzQaKKZum5oL3e9AZyiECiNq61HiaGosdOHBR9BFASwAGmoXWkZnSuf2QM8IYDHEdrZ8r+ypWt6TRM6PsOTH0p6F/keGdPk6AJCCYYgwB9AxucO8Sn1c04woRHm0/BLJwxdAqtoDVVoWOSHomWpXQiUYRgxoLIpMHZYfTRGESIQ5Z76Xl35cVnWkqvDCBA2plHIssc/44PIEgV0jnyV7d3aUbsc8EykGlcI2h6BQczwEt3LYp0DiNgumwheDpV7jNAYr3uYiQJdM8lOO6R3dNxGo4UniPG/SdBBcrYgzyCIUaM/un13zM162evip3x489KuzX6BX17LdeoJgUPlRJCmdns8Ksq0iLY35pPranupl0inC73w9YGsGPO7+dFiWoqGrh+bpRt32lmWnZHz5MyeOncUVH7exNM1bj2+TlhNa+Z1gai9ovK717t3H57hpHrHVlNvZXWNADyw3tO18V57iV6bN31obOL8qvu+bFq//dnstjbrA6M1WtBZs3ozG97+ZC8V8tjuAp8EH5upD0t+J9/7iF/ynetJPXXngH9Wtn/zg3g0Q5Dvj7IMvFauI7IE+PfNTEqwr44TVXsumw/jiHClIW/J3mHHot1h3xY53J4Nq+0WzapbKTdbVqlitfVSUa/UakZHd5rlZnvfZLYsjii6lIyxtCVb7rZsvicIQ5sh4qNIXdJYdDqmfIPYAhzkPNIXj4AShoZUtGcjnFFjHYmcj7huVgEsUhDCxbim5O4pfyAPkTPmKMr25FqmJ/cRxHOMZOOWdc1EYTMuYrEAy5gHRmEJCgTForVHssvaplUtaQyH8wBJplpI/ThAhfl0nkRGY9uvqQLIEmm/PUxe25d+Hf/bh0Do+FgqMOlLE4k0ojPDxdg7cuJw+ewQ2sM7sY/lwxLx5BGGWybZX59lIusjrZFWzxk87kmnun9w980dvBl/CdD7B+O9fzUucnl6U/smntpxKlND/hIfmN1vHWJ+iY7X2BfiAhiFRSFeLuOk9iyrqEUCXpNFoOmmNkAwFj15M6TviGgpinbRAEyJHxlP5VmKMZ+SAQccheKt5JLjBRvPADG58Xjika8vXacyJkXoOFrzczI3ENuaZPztQgdtKPWE+FF8VjTyPzN2BuvAjvBTLDwck4k8yeG3+aIuIBWwWLRtGh2CnwM4ZzwrTIOccuGioEYxR1//ycl+XFcAhDQm3GspieBwRiQ8+WaO7E+lE5hkDKV7Kf7/xVTFSQlAJLZZhhN8uV7Y8gmQycGc2Rk9GTVFo+K6rlXsVDuHo8YttcppUDLsGifiU8lBnI5rvPEf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:12CCBC9D556E17E3E05305991F0ABF5F</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">The account ID does not match.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:12CCC9E2591E637FE05305991F0A1A08/User/urn:dece:userid:org:dece:12CCBC9D556E17E3E05305991F0ABF5F/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10000 - StreamListView - LLP - Test Suite Staging</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72DFFAFDFBB093E0401F0A0599095B</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CCBC9D556E17E3E05305991F0ABF5F</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCC9E2591E637FE05305991F0A1A08</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="e8d91738-7a64-4076-aafa-a895c2c54d5e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4af6e570-f033-4ea7-9824-6ca54138ddb9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="a45ab711-8618-46f1-903b-b4df2b982a4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="2b42a25e-f64d-4d5c-a59d-f4d533496092"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="0df34b0f-33c2-42c8-91c0-f82a69bd83ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="19eb1478-728e-4e4a-937a-5b69d9ca7b18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZtU+o6EP5+fkWnfnRKX2itdIAZXuTeHlFR0HuuX5yQLhAoKSZpQX/9TQpFQPTqOTPMMNludp/dfbK7VY7msRM0OAcmSEK1sF3TnyLHGVrYdg2w3bLhDr0z4/wM+YY9HELF80ZWVHF0LeQ8hZBygaio6Y4l9a0zw3EGdiWwrcBySq7rPeraAzAuTUuVkqVrq3lMeZC7rekpo0GCOOEBRXPggcBBv3HVDaRmgApMer26Rpk7ZPWJEIvANHEpAgxxjEs4mZtVc0+nGvGgT8YUiZTBxmfEa/rm7nK5LC3LpYSNTceyLNOqmFIn4mR8otd/FJchCukoWZ9biCaUYBSTV6RAXYGYJJHWiMcJI2Iy/8C0bdqWMm3AChsyo/REN98c5Oi+aGkPJOPI4BNkF8buYAQMKAbt/i6s6Sdfq+D67oAhykcJm/OD8/cgAc0gThYQGbyIrED3dYtH0lWvAg5CiuOUkwyuFU0WCAPXegxGZNUlXJIv4lpefm3F5Y8ULAP8nbJUzV2sErp5JDttMgYufqdmu/VaW3lAcQr1cXP5QLIZSsm/dNYZ3b9ejj32MgPzclnLIewqr0Fty705H5J1y63NpdbN+HV1TxbLZgOj29CZLq7908wlw9PBg7j1Q++yE8XZ5Go2sMiqOe+U3ayJaNdlpyL6u/8IbCp63qx1RsvZ/Y9J2W3Z2CcWO70cnbfYRfm+M0hhcLvqX3u/ehcv5Ufoh71uux33fl67V22YPawGY/7qpuBQ/3oaXU7v/4manaz9+KOXxvDXovEcgde4pAMG+Lb2FtNuDPvCoiX00+EUsCiOih5hW+vIeiHxeXtREhIZo1w1WKgexQVQodfVLdVaglQ2IBIFspjrc6flO77rW2dWu2O1bPvCci27YzUsv1JxLqxy0YPWKA4gthI6IsqX6rJr/nwOEM8DDjQCZmRJiifA9U8stpFAWkjv5ONIKIdBIrt4TJ4JnEeyVpLw5ZFw/KklpuOJ0LXrRNzQG9YYCWB7rdtx9lr3HWCyIKD6uyI4lwznQubiGWWpiO1ShkoUUjkBmGrCgeOeeyYn80UMCqk5TyJZ39JissgzY/L1v2MgzHPp3cUgf3gfxnX4rUiB1ImIUuAqlibIMsLhDLIqgVcE8i5g7+isKsw30oio9yXzKRjBayT7n95oovix5Ui72+j3CtBb3W/cfWr1n+zfNND9A+fdP3Uua/n+pvlJPs3DUm4dRRnZcVvsAXK0ycZXL4j4jErPpTTL0px6iuMmk+ZN2dttsw84lZ35ZZDMgJpbE+aXBuMW9YHnrXwfXyomtC+QgLl8KFp+/MJW1AeutqJQvvDVV1euPZcybwJW4pisFcvlSSH+dL/CAVZ6UtyTf8uERW/lOmJrx4+MU65CgtCxOqkR+PIBKXAizRLZsxO2a/yYgWPO94XbJG+xCMmmYSrg4y+aasY1HWGcpFSEbT0X7A6IHKd4WUDwpvTOTD6ENlvFin+4Vfy66vZlq54jfatL/l/ZIDldMOhqecmx1PSVXJKlczreGUgbgEdmku3Zvue3m97BTPK2CdyLpP5O/F6yk9PD91D/Dw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05/User/urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:NL:KIJKWIJZER:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_18359 - StreamListView - LLP - Policy - Verification ParentalControl:RatingPolicy - NL - KIJKWIJZER - 16 rating - Full User</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77797</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC73B7A47D6CA24BE0401F0A07993B19</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747151757DB5E0401F0A07992E05</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="fc04d923-3c22-4d3d-9a9f-e8ed6a11ae27"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9116176d-c032-40ae-a476-d1fb99228af5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="49b778b7-4132-4411-b6e9-ad3ff9a8bdd5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="7616beee-7c0f-4fd6-9838-8d3c454c4ee5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="9c34ba2e-3b44-4310-90b9-13695edac421"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="a5dd8c5d-53ed-4e34-a964-349abae1038b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtU+o6EP5+fkWnfnRKX2itdIAZXuTeHlFR0HuuX5yQLhAoKSZpQX/9TQpFQPTqOTPMMNludp/dfbK7VY7msRM0OAcmSEK1sF3TnyLHGVrYdg2w3bLhDr0z4/wM+YY9HELF80ZWVHF0LeQ8hZBygaio6Y4l9a0zw3EGdiWwrcBySq7rPeraAzAuTUuVkqVrq3lMeZC7rekpo0GCOOEBRXPggcBBv3HVDaRmgApMer26Rpk7ZPWJEIvANHEpAgxxjEs4mZtVc0+nGvGgT8YUiZTBxmfEa/rm7nK5LC3LpYSNTceyLNOqmFIn4mR8otd/FJchCukoWZ9biCaUYBSTV6RAXYGYJJHWiMcJI2Iy/8C0bdqWMm3AChsyo/REN98c5Oi+aGkPJOPI4BNkF8buYAQMKAbt/i6s6Sdfq+D67oAhykcJm/OD8/cgAc0gThYQGbyIrED3dYtH0lWvAg5CiuOUkwyuFU0WCAPXegxGZNUlXJIv4lpefm3F5Y8ULAP8nbJUzV2sErp5JDttMgYufqdmu/VaW3lAcQr1cXP5QLIZSsm/dNYZ3b9ejj32MgPzclnLIewqr0Fty705H5J1y63NpdbN+HV1TxbLZgOj29CZLq7908wlw9PBg7j1Q++yE8XZ5Go2sMiqOe+U3ayJaNdlpyL6u/8IbCp63qx1RsvZ/Y9J2W3Z2CcWO70cnbfYRfm+M0hhcLvqX3u/ehcv5Ufoh71uux33fl67V22YPawGY/7qpuBQ/3oaXU7v/4manaz9+KOXxvDXovEcgde4pAMG+Lb2FtNuDPvCoiX00+EUsCiOih5hW+vIeiHxeXtREhIZo1w1WKgexQVQodfVLdVaglQ2IBIFspjrc6flO77rW2dWu2O1bPvCci27YzUsv1JxLqxy0YPWKA4gthI6IsqX6rJr/nwOEM8DDjQCZmRJiifA9U8stpFAWkjv5ONIKIdBIrt4TJ4JnEeyVpLw5ZFw/KklpuOJ0LXrRNzQG9YYCWB7rdtx9lr3HWCyIKD6uyI4lwznQubiGWWpiO1ShkoUUjkBmGrCgeOeeyYn80UMCqk5TyJZ39JissgzY/L1v2MgzHPp3cUgf3gfxnX4rUiB1ImIUuAqlibIMsLhDLIqgVcE8i5g7+isKsw30oio9yXzKRjBayT7n95oovix5Ui72+j3CtBb3W/cfWr1n+zfNND9A+fdP3Uua/n+pvlJPs3DUm4dRRnZcVvsAXK0ycZXL4j4jErPpTTL0px6iuMmk+ZN2dttsw84lZ35ZZDMgJpbE+aXBuMW9YHnrXwfXyomtC+QgLl8KFp+/MJW1AeutqJQvvDVV1euPZcybwJW4pisFcvlSSH+dL/CAVZ6UtyTf8uERW/lOmJrx4+MU65CgtCxOqkR+PIBKXAizRLZsxO2a/yYgWPO94XbJG+xCMmmYSrg4y+aasY1HWGcpFSEbT0X7A6IHKd4WUDwpvTOTD6ENlvFin+4Vfy66vZlq54jfatL/l/ZIDldMOhqecmx1PSVXJKlczreGUgbgEdmku3Zvue3m97BTPK2CdyLpP5O/F6yk9PD91D/Dw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC72747151757DB5E0401F0A07992E05/User/urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_18085 - StreamListView - LLP - Policy - BlockUnratedContent - US - MMPA - NC-17 - Verification unrated/unknown content blocked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC72747A58FB8147E0401F0A05991167</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC72747060DF0C11E0401F0A07992E03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC72747151757DB5E0401F0A07992E05</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Manage account consent policy" searchProperties="true" id="f357146f-dc4b-47e1-a1cc-cbd772075592"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d34475c8-ffcd-4c8d-b649-2ee2dac58a47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("username",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="770a637e-643e-4062-9f4f-3d9852f7e935"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" disabled="true" id="6ad5ecb0-a141-413e-888c-944f220c82c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" disabled="true" id="03be5c50-c866-49e8-b485-b3de90f4866d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" disabled="true" id="61f2898b-1093-4ef1-a7a6-f900bbdadb88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" disabled="true" id="fa4ab444-bc90-4191-b47a-5ead8c221d8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true" id="b81fd4f6-8683-4b53-bd36-49d4eda15160"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true" id="ca49f80b-070e-4952-acd5-376bd6c39f7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent" id="e6d8c779-49fa-4a4a-8f5a-31db4ea7c2ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" id="9a4d140b-beae-4dc2-83c8-f5e950c392b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def responseXML = tC.getPropertyValue("policyGetXML");
def policyOid=null;

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));

def myXML = null;
if(responseXML != null)
{
                try
                {
                                myXML = new XmlSlurper().parseText(responseXML);
                }
                catch(Throwable e)
                {
                                log.info e;                                                                            
                }
}

// Assert that policyListSize is 2 (EMUC and MAC)

log.info myXML.Policy.size()
for(i = 0; i &lt; myXML.Policy.size(); i++)
{        
	policyOid = myXML.Policy[i].@PolicyID.toString().split(':')[5]; 
log.info policyOid;

a.policySetDeleted(policyOid)
//a.sqlPolicyStatus(policyOid,'deleted')
               
}</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:14EFA925465933B2E05307991F0AAE6C">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-30T10:36:08.000Z" CreatedBy="urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:14EFA89DB04833BCE05307991F0AF146">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-30T10:36:11.000Z" CreatedBy="urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:14EFA89EBEB433BEE05307991F0AE2DD">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-30T10:36:15.000Z" CreatedBy="urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:14EFA8937E0233B4E05307991F0AE0F5">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-30T10:36:19.000Z" CreatedBy="urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:14EFA89EBEBF33BEE05307991F0AE2DD">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-30T10:36:22.000Z" CreatedBy="urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19090 - StreamListView - LLP - Stream view by dlp_ManageAccountConsentPresent_OneActiveStreamDLP - 200 OK - 1A,1D_FLAKY</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>14EFA89C0A7733B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150430_040848</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e49350ab-f189-4e52-ba89-4c768adb0cf7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6d8c779-49fa-4a4a-8f5a-31db4ea7c2ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Manage account consent policy" searchProperties="true" id="3ed216e4-0cb3-4f1c-99ba-5274b05b96bc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0ca8e6cf-c932-40cf-bcea-9d7f3bbcb299"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="120600da-0b35-43a3-9b57-e115586d95d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true" id="7bab2053-aeb8-4356-abf2-fb296e8a02bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" disabled="true" id="caaad0c9-4cba-4e7d-b149-30748e7172d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="881589d2-9aea-4bee-8cb6-a0b528befd34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="ed8312d2-edea-4988-8aef-93da357058e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent" id="bbde2cc9-a0eb-43a9-ac4d-dd22614a2877"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageAccountConsent if necessary" id="40c6214a-ef67-4b7b-8e70-de0cdee058bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "ManageAccountConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:accountid:org:dece:"+tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="3f7d7710-ee13-45f5-813d-c252dae98143"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="70e139e2-634a-481d-8f28-5062b4c3737a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="365c97d9-c560-48e7-9d86-f2dd37c3c7a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="26ecea4a-be7c-4a48-a7d6-d5a08c40679d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true" id="14efdcf3-1ec3-40a5-aa98-7b66644fb763"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true" id="cc699955-0e23-4df7-a661-4878739b1b06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19090 - StreamListView - LLP - Stream view by dlp_ManageAccountConsentPresent_OneActiveStreamDLP - 200 OK - 1A,1D_FLAKY</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdU+o8EP4rTL0uTUv5sCPMIPjRI6AHUNEbJ6QLRNu0NilUfv2bFKiA6Ms556qz283uk93Ns3vGceBbTpNziAUNWSENfMadTFvXkpg5IeaUOwwHwB1BnEGz23GsInLw5ohWcNt17QVhGyF7Utatas3SbZhYOsYlTydVRDzwPEzGWJpynoDLuMBM1DULmWUd2XoJDU3klCqOZRcrdu1ZKzxAzKVvaVJE2hpUyuvaTIjIMYzFYlFclIphPDUshExj1O0MyAwCrDXOVjfKAsWNtT0pekDA90mRhIFxZuzYnHncGdApwyKJYR3L+y4WMtCpIW08TqcnWn4WPJdNwkxsYRYySrBPl1jlpwtiFnqFpj8NYypmwbeXMJFyrENKdGLa7EQzdqEd6WgHYcyxzmfYXPvqwwRiYAQK9323rp0cV7Xs6DDGjE/COOC74p/hATYHP4zA0/nmWmtoxzs8kKnGGRDHZcRPOJ1DTzVrhAnwdTWBHO+qcBfDhKYdymWDplyhM7bh7YmrbLTpFLj4mwJtFWfl5AH7CTRgdDttUTS69W561V/u87Ji0deHt34H/a5nALaNM0Ve2pW415R5E61ODB/weZRS/7JbHXfKd4+hcB+jx1O6bKMRTHqvVuQb+LoiJudXbjV8vInN5w//3rTko4ze0tL11YzdXaH5qGdab5GYNmtPtdHg9eMKR0/nXbtcoW9pbRixZdSpXd//fgqqi4dfPWb3xLLjpl08KffS6+X4cXbXvfbsRf9t2ZpVS4vRIA0ezAv75go90V4viB6foFnPr7OFf1e3efODZPwKRGxE1QZuu3Apq4TFz2SmNNTTJ5mpEyny4QKY0BrqlOIOJ5F0Rz1H1nAlm/bFZbN22kLNaqVUOq9doHIJVU9PzUvUPL1o2xuSWaHYg9gK2YSqWIpyV23zM0ASOByYB7E+DxPJdFz7wWMbC1xwWV8+gpBxGIaSns33uRDj8rv1kVhj83UeWf4sTFnKJL32QnHLbuPmREC8S8qlHVLuA6ERBcXcqrG57GwuZDLe8TwRvlmc4yKDRHJ7rGhWnquVDU6DyAcF1QhCL/GhGM2iLDUGX30l4xCeafsXwxcre3DfXm3/3yYL0sajyoCr25yDrCQcmC/m5ipfrlw5OIc27puJR9XbkikVMSUrJLu/PjtFtUjeJu1Oc3D3Ym1g59Z/cro1+GsHnX8K3/nX8FlFv541fsiqsV/QPJQ3p1uBN+uHHGSS+hqbhnzHxfdiMp8nWQtWEbKMWLo3VCsYUhgASSQ5fwzDN2BG7sU4ahLmwPeC5/pdiImYsYHAAgL5ZgqZeMTqMwCuVh9Xvvb02L1qJ6RMnYBUHNK1fLm2KcQ/bnbEIcpOqu/kZxHG3mfFDvjaiiPvKTcfQdlUSWoKfnzTGSSUbqnk7zDedn7IwaHgu8o8yTkWIRtqnAj4/k9BEXNdw4SECRNuW8sU28Miwyk+InA+jb64yeZRvqDS/99QdZq1AAG51nKa+Vd7hqOeAJtuDZx10AMzp1Rtt8ty5tjbM+cCXZbzpOyga3xRf9Vs5Wm/xxv/AQ==</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP_2</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value>14EFA89C0A7633B8E05307991F0A9ED4</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>14EFA8937DD533B4E05307991F0AE0F5</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap2.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:14EFA8937DD533B4E05307991F0AE0F5/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Setup" disabled="true" id="ed7d6746-cbfd-43e9-9d06-fa7cb5312a70"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="9e2f91e1-d901-42b3-8fd7-84bd6fa2b47a"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="439f510b-dc4e-4d25-bf01-7d4392e8c0d8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>${#Project#NodeValueRetailer}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="daf60a15-1523-47a9-a27b-c16845c7a955"><con:settings/><con:testStep type="datagen" name="AccName" id="766b755e-eb9c-4863-850e-ae999df8e8bf"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f9fa0da5-0c53-43be-9be4-863808ee9163"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="ba869b11-2026-4766-8171-1f7c5564ea7b"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="de7ad49b-68ac-4f4f-a58f-a51d7bf4da7f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="0aa1d722-f38d-4bee-8887-717f19d61d16"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="0ff58cab-60c1-42e6-8030-277b377228d6"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="4d1c6624-48ba-4bf2-819a-e4368da8d501"><con:settings/><con:testStep type="datagen" name="UserName" id="32341085-1db7-4841-bcad-ab3aebdb8ab5"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "stream_list_view_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="688a2001-204c-4a2c-8762-ac939a200723"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="4ab4940e-59c0-4c54-8973-7561e7a97a31"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="5e662978-de85-4fcb-98b7-fec80de977a7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="50ea9ae0-8bee-40a7-9bc9-4b303518cf8f"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="c1a57706-a0ca-4615-b95d-3944a6e03706"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup for streams" searchProperties="true" id="b9809bda-8297-40a2-95af-6cd5baf0a6c7"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="14c0727e-6959-4653-95bd-c813c768a238"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C381F9C22E4A41E6E0401F0A0599030B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" disabled="true" id="53a8a99a-aaee-4e16-b21e-04d9271a593d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true" id="e935ae03-bd7b-431a-9e09-1226688bdf75"><con:settings/><con:testStep type="calltestcase" name="AccName" id="7e1484db-dee9-4614-a146-5ff0568502ba"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>daf60a15-1523-47a9-a27b-c16845c7a955</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="78cb25e6-cb53-4c03-b415-0ae949c79bb9"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set pem" id="7e034ca8-0024-4306-ad77-e96603b188db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="56a5c09e-b290-433a-af70-98d6e834d523"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b140b65c-540a-4184-a17d-b6575263b020"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="458e397c-5509-4b7e-b874-fb3b1992f9de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode"))
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 3);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
     else
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 1);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="1c691717-9d52-49d3-996d-1cdc5df009f1"><con:settings/><con:testStep type="groovy" name="SetCounter" id="fe045e84-5267-4640-a2f4-b2a0e2dc95fd"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="dfec746f-192d-44f4-b28d-0225c447d54f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>4d1c6624-48ba-4bf2-819a-e4368da8d501</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="37cf1fc7-f8eb-46b4-aa9e-5c7d3d33910b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames" id="3718939f-5d0c-4ba9-b419-1046c0dc29ca"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary" id="064908c2-2086-490a-b896-4cd8ffac1506"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="3599067a-2762-4939-87cf-7d2547d2de24"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case" id="e1af9221-5f1a-4cb4-b7c9-ef3cc43d5886"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e3511ccd-e8b3-4872-afee-fd382c9eb22b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="ed50f249-f8b9-4c40-ad82-5f37de1014a2"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
	<DisplayName>${#Project#AccountDisplayName}</DisplayName>
	<Country>${#Project#Country}</Country>
	<UserList>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>testing</Password> 
	</Credentials>
</User>
</UserList>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bed6cfc3-4ec6-4066-81c1-951863b59106"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="23c92155-631b-44ed-8d33-e1759e1d51fc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

                if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr = URLDecoder.decode(urlStr);
                def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]


      

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +1);
       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];     
       log.info useridfull  
                                         
       
 
     tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",accountidfull);                           
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",useridfull);
	tP.setPropertyValue("NODEUSERID",useridfull);
	

     }
 else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188AE1B465CB3094E0533D991F0A7A41/User/urn:dece:userid:org:dece:188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_list_view_20150615_015833</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="a016a0a4-9913-4014-80af-5aa93e181190"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="fb71d603-7007-46c5-b6a0-df099b885df4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="ee150693-0249-4052-bf4b-943eadce303d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="1b2f0742-818f-4c24-9e1c-db56a3cdc4ad"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->      <LegalGuardian>${#TestCase#NODEUSERIDDecoded}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="804bca7d-01da-44f6-b398-89e708dec5d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="ce0aa73a-729c-4937-9af1-33650b9462bc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:EB6EC2CA964FD1EFE0401F0A07990FFB/User/urn:dece:userid:org:dece:EB6EC2CA9818D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131118_122215</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E072D07F07FC9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="073a39f5-7848-4927-ab31-715d49e5e81c"><con:settings/><con:testStep type="groovy" name="Set pem" id="b389f019-6641-4509-a5ae-ee92db08589e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="ef295039-dee9-4b0c-a101-452ecf8a84c7"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="9a4bbda0-c863-4daf-91ca-bb2a4d662f9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="409a9092-91c3-4ca5-abd6-f150775f730d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="LLASP_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="c5804332-06e6-4b86-a6fe-24dda61d3dbc"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="LLASP_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="799d2b16-c846-4eec-91c8-88d579b3167b"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="LLASP_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="9608c495-5d2e-4d76-b81e-6a651fcb5bf8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="d056febe-a750-451a-bd15-16e9287cbc85"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="907c0b5d-646b-4745-9d82-94f723e19a22"><con:settings/><con:testStep type="groovy" name="Set pem" id="48935514-d905-44c3-ab9c-8edf408bf977"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="7149eaff-3fad-4b7e-8736-6535eae05e92"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="1e0e459f-93f2-4d0b-9aa0-aab0b1bd5e0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="96672d84-a14e-4de1-8cf1-e49555d35bec"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="0887613a-d93e-4405-8550-260795ff50fe"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="171a3b03-116c-4d4f-83d0-f5e503697def"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="3c89f94d-5812-4971-9e3b-9ffa4e737ec8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="9778cd02-57db-4690-9316-61e14b6d56ea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D77DD7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/coordcs_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="b53e7706-38bb-4d95-8bf1-eb6aced62be7" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2dbf97c8-b6fa-4be4-9a27-48b664ca071d"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));


if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
	def audienceList = URLEncoder.encode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLEncoder.encode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}
else
{
	def audienceList = URLDecoder.decode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLDecoder.decode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="a6f55df6-9fb5-4c04-857e-f72d4bdebd00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - POST");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="c16995fe-69bf-4a40-8ee2-fa107ae0b62b"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fa7995e8-03c8-4191-840e-4453f03b89e4"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Rerun STS Post"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep = testCase.getTestStepByName("STS - POST");

log.info "#########################IN RERUN ######################" + tStep.getName();
String status = tStep.httpRequest.response.responseHeaders["#status#"]; 


if(!status.contains("201 Created"))
{
	log.info "STS Post not Sucessful Retrying...!";
	testRunner.runTestStepByName(tStep.getName());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="76586b9e-59bc-40d0-969e-9463ff48cf88">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="976a847a-cea2-4b80-82c0-addc07020e8b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def major = tP.getPropertyValue("VersionMajor");
def minor = tP.getPropertyValue("VersionMinor");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="2d6e6827-0bf9-419f-b838-8f73bd88ceca"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="96e4326e-6d7a-4a04-af30-061942ad636c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="113011f4-739e-4521-85dc-49030172a8d9"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="12771a4e-de9a-410d-9d41-01655b42afd3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

if(tP.getPropertyValue("count") != "1"){
if (expectErrType == "" || expectErrType == "SUCCESS") {
                if (XMLbody.length() > 0) {
                                def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

                                                // Verify response sizes...
                                                assert myXML.size() == 1;

                                                /*
                                                String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
                                                */
                                                String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Subject"."saml2:NameID";
                                                
                                                this.log.info "accountId [$accountId]";
                                                this.log.info "userId [$userId]";

                                                tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
                                                tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
                                                tC.setPropertyValue("assertionAccountIdFULL",accountId);
                                                tC.setPropertyValue("assertionUserIdFULL",userId);
                                                tP.setPropertyValue("NODEACCOUNTID",accountId);
                                                tP.setPropertyValue("NODEUSERID",userId);
                                                def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID"); 
                                                int lastColon = nodeaccountid.lastIndexOf(':');
                                                def accountid = nodeaccountid.substring(lastColon + 1);
                                                tP.setPropertyValue("ACCOUNTID",accountid);
                                                def nodeuserid = tP.getPropertyValue("NODEUSERID"); 
                                                int lastSlash = nodeuserid.lastIndexOf(':');
                                                def userid = nodeuserid.substring(lastSlash + 1);
                                                tP.setPropertyValue("USERID",userid);
									     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
										{
											def nodeacctid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
										     tP.setPropertyValue("NODEACCOUNTID",nodeacctid);
										     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
										else
										{
											def nodeaccid = tP.getPropertyValue("NODEACCOUNTID");
										     tP.setPropertyValue("NODEACCOUNTID",nodeaccid);
										     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
                                                this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
                                                this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
                } else {
                                return false;
                }
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPaxE5JAQkOmMMOl3ZNTaLtNb9uXHeOI4G1ig+1w6a8/doAs0Mthd58yVmTpk/RZ0plAWVoLOkIAl4TRyjJLqQgKacvIOQ0YEkQEFGUgAomDqDMcBLWqHaDtFaMS9lvGDwcjv4GdUxO7UDddvw4mcuoNs+67tt/wodYYI6UqRA4hFRJR2TJqtuOZdsN0vDvbD2peYNtV3/OejcoDcKFsK5WqbWxALUXLmEg5DSxrsVhUF/Uq44lVs23HehoOIjyBDBnts3VEhSPe3ujjagwY0hRXMcusM2tP5ywWQUQSimTOYeMr/siXbdlNS+nEgiRfjPIuxCEds+LYQ5RRglFKXpHOzxDkhMWVTpowTuQk+zAIx9aGTVhiEzsu/WJY+9CONLSHkAtkiglyNrZuYQwcKIbK/W3YMr4cV7Xi6h1HVIwZz8T+8ffwAJ1DyqYQm2Ib1gba8QbfyVT7DHAQUpzmgszhSpN1ijCITTUBH2+qcsNhTJYDIhRBl0Kjs3bhHRzX2eiTBIT8kwLtFGdt5AGlObT5KiH+8zT5/jA5mXyfNdzo5uJb8pzPL4etAsCuciEoS7s+HpCyJNH6RsTp6+KkhgY/L5K0dt+wZff5Rqb/PD6E9yfnr9nL5bJ3HTbD1aP/tXk+fFrMTha9gTPvjL2rzK/74egiGlj31L2cPD72ZqukHzrDr8MLb/jykCejf0K7+xill6Leca8W9vLr3elp7zqJOMvqzX+TB+fbtyy68qb98JLnT4g/Mnhx80W3M24sT4kc4nz+1O2+4pFFXlplODv492XbNx/lo5+A5faoaRD2KxeqSkh+3sy0hMTmuFANprr5CAlUGm19S/eOIFftjsSBquH67Ph+59zpug2v16vbTffc9ur1frPpXNid047rbJvMGsUBxB6jY6J96Za7ps3nAHEWCKAxcHPOctXphPGJxT6SqBLSW/UIGBVwx3R7FvbMk3Ilcjaizs/0ZcziVbpcjVKjcsXkNb3mnbEEvteUHWevKd8CJlMCunNrYgvFbCFVMmZonsvUqc5RlUKuejvXbTaoub5nCZJNU9BQrYzFeQrV6WRapMYS62/NRFgU0tvzu+K5fRjY4b9tDpROTLSC0LF0QdUR3kwXN/C2gbwJuPHuFNqa7+Qx0S9LJVRygtdI9n/94okmSEmS/qAT3WxBl7q/cfdHL/rh/KGBwV84H/ytc1XLtzetT/JpHZaydBTPyY7b7dqhBphqee0tEWfIqc6q+XyeF9xz3brFlXlLk8Cya1YEOFdNeXXHXoBapRXrqAlYAj9wXsr3IeZyQiOJJGTqrVSK4xErTwRCrzyheuXLY/epPZcqdRKW8j1ZL1Xrmkb86UaHA6z1lPhGfRaMx78q9o6tHT8qTrXxSEITfdLTb/UBLzBTZonq24zvGn/PwHvO94VlkkssUhFqlEv4+E9FN+SWgTBmOZVh3ygEu0OiwClXUwh+Kb0xU8yhcjEl/7+ZmqSgAAa1zgpS2Nf7RaCfAE12Bs3G6QezpvvZrNlH134jfivZydMhx9v/AQ==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_1ca86c17-c4e3-483e-a136-3840868e26fa</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1ca86c17-c4e3-483e-a136-3840868e26fa</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_list_view_20150615_015833</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_1ca86c17-c4e3-483e-a136-3840868e26fa</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_1ca86c17-c4e3-483e-a136-3840868e26fa" IssueInstant="2015-06-15T08:25:00.855Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_1ca86c17-c4e3-483e-a136-3840868e26fa"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>rygi8ZpgYVh+hYq64SPFQgZuvKM=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Srnzw+2aLjFgl2U60tBZPtlHWVIU+EzmkKxCOI9IyW8G9EMXwq+wCL1vAf5Nm838IbFSL/Un4KhWWCqygDI1MGMF5MkVugbHI0BWSlKs3A4Nw0xGT77COgSrom39JgV1QQmSN5pDIKruXarWoek4uwBAf6x7itMcuvXBBzcb/ik=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:188AE1B465CC3094E0533D991F0A7A41</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1s0q5ttysuobn1jlkfodylxybl" NotOnOrAfter="2015-06-15T11:25:00.855Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-15T08:24:50.855Z" NotOnOrAfter="2016-06-15T08:25:00.855Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_1ca86c17-c4e3-483e-a136-3840868e26fa</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-15T08:25:00.855Z" SessionIndex="_1ca86c17-c4e3-483e-a136-3840868e26fa"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:188AE1B465CB3094E0533D991F0A7A41</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="9846f9e8-8413-41aa-a9b9-78aaecdb77ad"><con:settings/><con:testStep type="groovy" name="Set properties for user" id="d8514ac9-3c24-4581-a466-435251a46de2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="8f01ae0a-df4e-473f-9c81-ea1c91d9ee10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="cf357eae-3832-4806-978b-c561330ae874"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <!--<DisplayImage>
        <DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData>-->
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    <!--</DisplayImage>-->
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <LegalGuardian>urn:dece:userid:org:dece:${#Project#USERIDFULL}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="f3979390-c6ac-445d-a651-e14e54a4ded5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="42564bbc-e0a6-4324-9951-f17e1f3634b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
	else
	{
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:EB6EC2CA964FD1EFE0401F0A07990FFB/User/urn:dece:userid:org:dece:EB6EC2CA986ED1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131118_122216</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E072D07F07FC9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="632bf0f0-f265-4e94-80b1-1307c9fdd4db"><con:settings/><con:testStep type="groovy" name="Set pem" id="2a5c085d-3624-49e9-91e5-4c784bb2b74d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="1238698a-0f12-4485-86a4-3b254eca88fa"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
if( testStep1.disabled )
  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="96d314a8-0e24-4b34-8404-89ebc8e5ad22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
	
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="c2a3a715-2d93-4016-a882-231ba0abc4ad"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="528fe7df-877f-4a02-aa33-ecfe0aa6070d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA" id="d79e7172-e421-4fd4-a523-55f9b8357f03"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="e4b4e028-4228-4e16-9931-7d02528546b2"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="01e89933-972f-4c3b-835a-fad7768badcb" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="coordcs_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="510751dd-0c63-4cdd-b724-37ca8369c7b8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="bdd5b448-295f-4111-a93d-9bdf0a304218"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = false;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D789E7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/coordcs_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="b6fcc4b2-d288-432c-b071-fb72c86366b7"><con:settings/><con:testStep type="groovy" name="Set Pem" id="cecda72b-4bd3-49a4-b53b-084c7cbb3b7e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="300c3299-bad0-43f8-9a69-a576d8140a3f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>tName</con:name><con:value>StreamListView tear down</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser_without MAC" searchProperties="true" id="5a818688-6d9e-41b8-b1ed-8626940e14b6"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" disabled="true" id="80e86fd4-e3d6-43ea-8404-0715360d8a51"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="c3c35af5-f4cb-4b60-81a4-de0b3fab4fcb"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" id="b7d22607-a28c-4c64-a1a4-533e2127af76" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:RLGET_REFERENCE_R3_EXAMPLE_ALIDVersion_300133.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:RLGET_REFERENCE_R3_EXAMPLE_CIDVersion_300133.txt");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values" id="c7aa5e14-6776-4965-8181-c9f6f3c297da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","5");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));

tP.setPropertyValue("nodeoid40",tP.getPropertyValue("nodeIdDECECS"));
tP.setPropertyValue("audiencelist4","urn:dece:org:org:"+tP.getPropertyValue("nodeIdDECECS"));

tP.setPropertyValue("nodeoid50",tP.getPropertyValue("nodeIdCoordCS"));
tP.setPropertyValue("audiencelist5","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCoordCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="b97f2428-9782-44bf-96f6-12394a759060"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
if(tP.getPropertyValue("count") == "4")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid40"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist4"));
}
if(tP.getPropertyValue("count") == "5")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid50"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist5"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="439ce046-4bac-4b80-aded-5aab4fb10585"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="0a149190-372b-43fa-bc59-4c9dc78c1a6f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="1dcffc96-fa76-4498-9de5-c5a21b15d68d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="afaff94f-aafc-4aa4-9a00-7fc31f862c99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="1e5bd2af-275e-455b-a679-5b7e9f792225"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="c513ebc3-3b3e-4e54-ae84-f38f7d12d077"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1" id="41bb6ae0-9ee1-47bf-9edd-7f69a63c9ea5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" id="b238be31-029c-41ad-9607-38849f57b896" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>stream_list_view_20150615_01517</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E_without_MAC" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="f2d7b09c-68ce-457a-9787-508c5ebb2d91"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
	tP.setPropertyValue("cid","urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));







</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser_without MAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_list_view_20150615_015833</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>02</con:value></con:property><con:property><con:name>V1</con:name><con:value>2015</con:value></con:property><con:property><con:name>userStandard2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard2Org1Name</con:name><con:value>pjgorg1standard1</con:value></con:property><con:property><con:name>userStandard1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard1Org1Name</con:name><con:value>pjgOrg1Standard1</con:value></con:property><con:property><con:name>userPropertyNameArray</con:name><con:value>UserName_FAU1,UserName_SAU1,UserName_FAU2,UserName_SAU2,UserName_BAU1,UserName_BAU2</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>stream_list_view_20150615_015837</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>stream_list_view_20150615_015834</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>stream_list_view_20150615_015836</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>stream_list_view_20150615_015833</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>stream_list_view_20150615_015838</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>stream_list_view_20150615_015835</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_list_view_20150615_015838</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>USERIDSAU2_1</con:name><con:value>EB6EC2CA9818D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>USERIDSAU1_1</con:name><con:value>EB6EC2CA9708D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>USERIDFULL</con:name><con:value>urn:dece:userid:org:dece:188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>USERIDFAU2_1</con:name><con:value>EB6EC2CA97C3D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>USERIDFAU1_1</con:name><con:value>188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>USERIDBAU2_1</con:name><con:value>EB6EC2CA986ED1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>USERIDBAU1_1</con:name><con:value>EB6EC2CA975ED1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>USERID</con:name><con:value>188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>userFull2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userFull2Org1Name</con:name><con:value>pjgorg1full2</con:value></con:property><con:property><con:name>userFull1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userFull1Org1Name</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>userBasic2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userBasic2Org1Name</con:name><con:value>pjgorg1basic2</con:value></con:property><con:property><con:name>userBasic1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userBasic1Org1Name</con:name><con:value>pjgOrg1Basic1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnRightsLocker</con:name><con:value/></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urnPolicyID</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>urnPolicy</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>urnParentalControlRating</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>urnParentalControlBlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>urnParentalControlAllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnLocker</con:name><con:value>urn:dece:rightslockerid:org:dece:</con:value></con:property><con:property><con:name>urnGenericRightsToken</con:name><con:value>urn:dece:stream:generic</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOU</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>tester</con:name><con:value>pjg</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetport</con:name><con:value>443</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targethost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>streamRenewTimeHours</con:name><con:value>6</con:value></con:property><con:property><con:name>streamMaxDisplayCount</con:name><con:value>1000</con:value></con:property><con:property><con:name>streamMaxCreateExpireTimeDiffhours</con:name><con:value>24</con:value></con:property><con:property><con:name>streamlimit</con:name><con:value>12</con:value></con:property><con:property><con:name>StreamDeleteList</con:name><con:value>urn:dece:streamhandleid:org:dece:9C1259ECFB1846D4AD08CEEC4B76DE80;urn:dece:streamhandleid:org:dece:AD981B5A07C745E28AF29A880FE28269;urn:dece:streamhandleid:org:dece:467CFACC0E8A4F5FA78920B077670B03;urn:dece:streamhandleid:org:dece:8EF34ECC1D454BF6AB39BBE9AD642884;urn:dece:streamhandleid:org:dece:47B86FBD70F0415E9DA232E4D5AFBF98;</con:value></con:property><con:property><con:name>StreamDeleteCount</con:name><con:value>5</con:value></con:property><con:property><con:name>StreamCreateCount</con:name><con:value>0</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>SAMLSAU2_5</con:name><con:value>nVZNc+I4EL3Pr3B5jiljGQwmrkAVwZBhEiAD+ZjksqXIDShjZCPJBPj1K5nYAUKymT251G51v+5+etKZwPOo7LeEAC5pzIxe0DD/gYlHQm9Ss6oIVSyXuHWrXqlUrXItdDzkgBdC2TR6QqTQY0JiJhtmGTkVy3Esp36DPB+Vfbdeqlfrj6ZxB1yo0MqlhExjNY+Y8LO0DTPlzI+xoMJneA7Cl8Qft/pXvvL0cY7JbJ5tUWYJeXMmZeLbNimFQCCKSInEc/vM3vM5C4U/plOGZcrhNWcoGubr3peXl9JLpRTzqV1GCNno1FY+oaDT72bzW74Zwh6bxNt1G7OYUYIjusEaVB/kLA6NVjSNOZWz+QehHdtBOrQFK2IRx2XfTfstQYbui5H2QHKBLTHDTh5sBBPgwAgYt6New/z+tQlu995wzMQk5nNxsP47SMCWEMUJhJbIK8vRfT3ikXY1z4D4PUaiVNAlDDRNEkxAGNccJnR1RYUiXyiMbPzGSuQMA/I3Izmzd3Eq2PaRzgR0CkL+n3ntzmob5Q5HKTQvHn89cplMf2+qSQ2dnIStYfR0vxgOxtNGBmHXeQuqGPXr+pCoBa9eN62HnYfRM666y3NY2TGh3vgq2AxgPUwfnhaThFTvN3fPsLm9HPE/cIHcCUNsseaRbKV3v5KN06oHy3viXN7077+l6OGh9kfUJ+cPgXczOrl/iOWVvL242Nx2TwTQYcqCx+dQRj8v2xiN79NptKmE1wNvM7Cv2Y8fcjXllav2opayy289vuoH1UE/dH+cPMv1r8jrN95q2q1h35jLwTh9egYi86WmRi8wumpeWH4uLdpCQ2uSufqJ1ichgUmzqXdpWfFTJT409NUwt+vOea3TLrdbp3WnFjidbge5yOmiFvJOT1G3e57rzxbFAcR2zCZU59IKu+XP5wDJ3BfAQuDWMk7JDIT5ScQAS2z02EgdjJgJuImVgrtep3VeLwc1dNruOp7rOMhx3Hqt2ul4nue6pjGI5ZANeWsige+pt4P21HsEhCYUtMRrngtFdCFVSxZ4mcrIKS1xiUGqLgGuddgvu/WqLeg8iUADtudxmEZQSmZJ1iBbbL9lCxORWUkc89AnIjuEH9Z4+C9vh/IJqXYQuqBzUCOFI3dRJa/mXdXu0TsrD99KQ6rPmuqt5JRskez/eqOM5krBl7ysHHfhfmjYC20fVlVkC5eUFMwvrmul9koPmvlgFri0KKXLZZqNwtNax1V427GRZ4+BpEqw1jfxH2B2EcL+0l1RoD7IXNj38aVyxsYSS5gr4hjZ8gsPhTEI/VDoKeKvvvoK2Uup+iZhJY/Z2pF6T2jEnz45iE+0nzJfq8+LGuHbuI7E2smj6lSvA0nZVK/0zbD+jBlUSVnMd4MfC3As+b6xaHKBRSo2PaUSPv5jaI1qmJiQOGWyF5iZYVc3M5xynYD/5vQuTKbNr5ftSnx42f7uX42Vgs2xWfjS/3a2aEYXAmqXoBmWhrlS70aVnE13dPoV4FGprrnBZ1K9X0nznfm9Zaenh+eh+S8=</con:value></con:property><con:property><con:name>SAMLSAU2_4</con:name><con:value>nVZdc6JKEH3fX0GRxxQCKn5Q0SrFkEvWJCaYj83LrcnQ6iQ4IDOg7q/fGRSixuRm7xM1TU/36e4zZ+aMoXlYtXuMQcJJRBVv0FH/bVQnQc20GloTJg2tDuhFa+F2oJk1jJqtdh0mTUtVPMZS8CjjiPKOWjXMmmaamtkaG03bMG2jXWmYxrOqPEDCRGjhUjFUZTUPKbPztB01TagdIUaYTdEcmM2x7feuhrbwtFGBSe2ebVDmCZPujPPY1nVcCQBDGOIKjub6mb7ncxYw2ydTiniawDZnwDrqdu9yuawsa5UomepVwzB0o60Ln4CR6Yna/VFshsCjk2izdhCNKMEoJL+RBHUFfBYFSi+cRgnhs/knoU3dNGRoDVZYw2adnqj6e4Ic3Tcj7YFMGNLYDJlFsDuYQAIUg3J/53XUk+9NcLN3nCDKJlEyZwfrv4MENIMwiiHQWFFZge77EY+0q3sG2PYoDlNGMriWNIkRBqaMEpiQ1ZAwQb6AKfn4lRUrGAb4b0Zypu/iFLD1I50ZkCkw/n/mtTurTZQHFKbQ/Xnq35Jfj9nDOFot4tN1/e2tMav6v/q/WSeHsOu8AVWOers+JGrJq+2mfuPhn/XlU1W/9S5M37tvpZnevx377IaSycx5Wj3jxcNz82LwPLy8bE3Cn+brY7a03FnvEfXjx3U8D0TLL0a9t2vjh39vDe9rweJ1dnVh1eKr2nVcO40b4dv6VW+Oqk6vd2nepq7L4uVLyx2++M4tGxlvQEfjpTM0+ld95/LWmvqX7UX1R+s5M0ZvXuZZ+vMpDbBbP++817Rbw76xkAM/fXkFzIulpIY3UFwxL8S/lhZpIYE2yV3tWOoT40C52pW7pKzYqRAfEthimJv1eb9x7ogC2y3TGpjn7rlRN0zX6BnNdttw3X6hPxsUBxCdiE6IzCUVdsOfrwHiuc2ABpBoWZTiGTD1i4gDxJHi0TtxMCLKYBwJBbf6rnNer1mDtmE1+z3XHTgNa+C02rV2s9ZyaqpyHfEbepP0JhySPfU2jT31vgNMYgJS4iXPmSA646IlC5SlPDQrGapQSMUlkEgdtqv1lqUzMo9DkID1eRSkIVTiWZw3SGebb1VDmOXWvLuY5Wfw0xIP/xXdED4BkQ5M1tMHMVH4cBUZtlUU80nR7YMrqwjfSwMij5poLU8I3iDZ//XOGEmVki7bqgrYpfehYS+yflhUmSzICC55X17WQuuFGnSLsSxQZVFJsyzNB9GUSpeI8LqpG03dB5wKuVqPI3Ea9TKE/q2bokR9kLm07+NL+Yz6HHGYC9oo+fIbzwQfmHwmeIL2q+++QfZSir5xWPFjNicUrwmJ+MsHB7ax9BPmkfgsoyR4H9eRWDt5RJ3ibcAJncqVvBfWnxADRyIsEUIWJbvBjwU4lnzfWDa5xMIFm15SDp//UaRCdVSEcZRS7g3U3LCrmjlOvo7Bfnf6ECZX5u1Vu2KfXrVPV0Nf6NccqaUv+W9njeR0wSB2MZJj6agr8WoUyel0R6W3AI8KdaPufCXU+5V0P5g/WnZ6engeun8A</con:value></con:property><con:property><con:name>SAMLSAU2_3</con:name><con:value>nVZdc9o6EH3vr/A4jxljmw9jewIzDsYUQpIWSCbtS0fIC6g1MpFkIPn1lUzsACG56X3yaL3aPbt7dKQLjpZJ1Q84ByZISrV+2NJ/Nad21Y3dptG0nIZRt6bY8GLsGs3GrGahGsZ2A+tan/MM+pQLREVLr1p2zbBtw3YnluM3PL9ar7hO7aeu3QPjMrR0qVi6tl0mlPt52paeMeqniBPuU7QE7gvsj4ProS89fVRg0tsXO5R5QtZeCLHyTRNXYsCQJLiC06V5YR74XMTcH5M5RSJj8JIz5i39Ze9ms6lsapWUzc2qZVmm5ZnSJ+Zkfqa3vxSbIe7TWbpbdxBNKcEoIc9IgboGsUhjLUjmKSNisXwntG3algptwBYb2K7TM918TZCj+2SkA5CMI4MvkF0EG8EMGFAM2t2o39LPPjfB3d4JQ5TPUrbkR+t/gwR0DUm6gtjgRWUFus9HPNGu9gVgv09xknGyhhtFkxXCwLVvDGZkOyRcki/mWj5+bcsLhgH+l5FcmPs4JWzzRGdCMgcu/s+89me1i3KPkgzavDn4cX71lU1v0xTfU6uXENS8mgs66bdyCPvOO1DlqF/Wx0QtefWyKfjz7KwSvrDrYYdYPTbY4OfFvYUdh16h/mTVGLBJ/SmaRnQJo0Y3nqas+rN33XMfhNkLB87dzffYHf/pjW7O4y/4dtvzLsU5mYaNZm36PPXGz+bt3Hm4uxqvUuvc+87EVzoaNnv0R/MGda7vowU4v39Pz7dXtxQcGD7guLbeDLzvvS9fIxHQYWTC0+Bq4Jn3lHRbrzXt13BoLORgnE1/AxbFUlGjH2qRnBcSH0uLspDYmOWu/krpExdAhd5Wu5Ss+JkUHxL7cpi7dffS6XaqncDzAje0u1HXqlt2ZAVW0/OsKLos9GeH4ghiJ6UzonIphd3x52OAeOlzoDEwY51meAFc/yBiiATS+nQkD0ZKOUxSpeBBJ6xatVpQr3c8N/RqtXpUtZyuGzmRa7ldXbtJxS29ZcFMADtUb+9AvUeAyYqAknjFcy6JzoVsySNaZyKxK2tUoZDJS4ApHZb73IbJyXKVgAJsLtM4S6CyWqzyBpl8960aCPPcGg6D8bdfnfGvan4M363y+F/REOkTE+XAVUmXIIcKJ24ju6jnTd31k7dWET7IYqJOm+yuYATvkBz+eiWNYkvJmNfCCuTlhmPDQXDzuK4yX7wmuGR/eWVLxZea0C6G84gqj5Vsvc7ycTSV3jEZ3rRNq2mOAWdStJ4m6R+gZhnC/NR9UaI+ylzaD/FlYkHHAglYSvJo+fITj4UxcPVY6Evybz/7EjlIKfsmYCtO2TqJfFMoxB8+O7CPlZ80f5OfTcri13GdiLWXR9YpXwiC0Llaqdvh6R1u4FSGJVLOUrYf/FSAU8kPjWWTSyxCsmmaCXj/j6Z0qqUjjNOMin6o54Z97cxxiqcV+K9Ob8Lk+vxy4W75uxfuw/VwLFVsifTSl/y3s0FyumCQuzjJsbT0rXw7yuR0vqfVLwBPyrUbWh/J9WEl7Tfmt5a9nh6fh/Zf</con:value></con:property><con:property><con:name>SAMLSAU2_2</con:name><con:value>nVZbc9o6EH7vr/C4jx3jGzd7AjPmluMGEhJImvalI+Q1qLVlIsmE9NcfycQOEJKTnieP1qvdb3c/fdIZR2ni+AHnwATJqBYOOvpPa+HGbRcvDNuB2KjX7YWBkOsaGCPcRJ5bByvWtZDzHELKBaKiozuW7Rq2bdjtudX0Gy2/3qy1HOuHrt0B4zK0dKlZurZNE8r9Im1Hzxn1M8QJ9ylKgfsC+7NgMvalp49KTHr3bIeySMi6KyHWvmniWgQYkgTXcJaaZ+aBz1nE/RlZUiRyBs85I97Rn/c+Pj7WHt1axpamY1mWaXmm9Ik4WX7Wu5/KzRCFNM526z6iGSUYJeQPUqAmIFZZpAXJMmNErNI3QtumbanQBmyxge06/aybLwkKdB+MdACScWTwFbLLYDcQAwOKQbu9CTv6549NcLd3zhDlccZSfrT+O0hAN5Bka4gMXlZWovt4xBPt6p4B9kOKk5yTDVwqmqwRBq5NGcRkOyZcki/iWjF+bctLhgH+m5Gcmfs4JWzzRGcGZAlc/J957c9qF+UOJTl0//Qd+4kHy17bnGy3v3tZzFBE6dDqTzoFhH3nHahq1M/rY6JWvHrelKSj1v3qn8Xt8vw7mzVSc8aGLdf9uqDXVhCsne25/cW+Ho7T0EyDy8WfzXQV4XSaeKv43IPr7ZxN0vkFvYfAw5/I04R8c+vj2+Aqhfp3JqY4DpYXPxYLDnfLaDwJm7ebZdibD1cX35vX2eP1zYXze0ouz7/Y7fuHX03vAczWaLW4COJPfBOteevqmxk7wTXnzUGz3Xmpab+GQ2MpB7N88QuwKJeKGuFAG8l5IfG+tCgLiYy4cPXXSp+4ACr0rtqlZMXPpfiQyJfD3K2Hveaw7/QDzwvaA3s4Glp1yx5ZgdXyPGs06pX6s0NxBLGf0ZioXEphd/x5HyBOfQ40AmZsshyvgOvvRBwggbSQ3siDkVEO80wqeCOwek7L9frBILBGQXNQ92zLawSNduD26sOGrl1m4opesSAWwA7V2ztQ7xvAZE1ASbziOZdE50K25AFtcpHYtQ2qUcjlJcCUDvtOvd0wOUnXCSjAZppFeQK19WpdNMjku69jIMwL63gczKY/+7OfTnEM36zy+F/ZEOkTEeXAVUk9kEOFE7eRW9bzRt3e0a1Vhg/yiKjTJrsrGME7JIe/Xkij2FIx5qWwEnm14dhwENw8rqvKF20IrthfXdlS8aUmdMvhPKDaQy3fbPJiHC2ld0yGN23TapkzwLkUrad59huoWYUwP3RfVKiPMlf2Q3y5WNGZQAJSSR6tWH7gsTADrh4LoST/9qMvkYOUsm8CtuKUrZ/IN4VC/O6zA/tY+UnzVH4eMxa9jOtErL08sk75QhCELtVK3Q5Pb3ADZzIskXKWsf3gpwKcSn5orJpcYRGSTYtcwNt/NKVTHR1hnOVUhAO9MOxrZ4FTPK3Bf3F6FabQ5+cLd8vfvHDvJ+OZVLEU6ZUv+W9ngxR0wSB3cVJg6ehb+XaUyelyT6ufAZ6U6/bAek+uDyvpvjK/tuz19Pg8dP8F</con:value></con:property><con:property><con:name>SAMLSAU2_1</con:name><con:value>pVZbc9o6EH7Pr/A4jx3jKxg8gRlza90QkgBNc/LSUeQ1qLFlsGQu+fVHMjEBQnLSnieP1qvdby/6di8YSmLL8xmDjJOUKkG3qf7CoWvbNhha5Eah5jiPNQ1VzYZWs+061OxqBHWkKgFjOQSUcUR5U7UM09ZMUzPrE6PmVauebVXsqvmgKneQMWFaqFQMVVknMWVe4bap5hn1UsQI8yhKgHkce2P/auAJTQ+VmNTWxRZl4TBrzTife7qOKyFgiGNcwWmiX+gHOhch88ZkShHPM3jxGbKm+nJ3tVpVVnYlzaa6ZRiGbjR0oRMyMj1XW2flZQgDGqXbcwfRlBKMYvKMJKgr4LM0VPx4mmaEz5J3TJu6aUjTGqyxhk2Hnqv6q4MC3SctHYDMGNLYDJmlsRFEkAHFoPwYBU31/HMV3N6dZIiyKM0SdnT+M0hAlxCncwg1VkZWovu8xRPpal0A9gKK45yRJQxlm8wRBqbcZBCR9YAw0XwhU4ryK2tWdhjgPynJhb6PU8DWT2SmS6bA+N/Ua79WWyt3KM6hdbMcwAOM7qePl9eXSTVc4N+XmXuz9F2/WUDYV96C2pX65XzcqLu+erkE+ci9vfQ32ZjZhjEbsiqtDrlzX+99u0pu6230xfj95f7rLOry4J+Hm+/PX69uv/8wRpExN/3k3tTHm+fEXfxstFfOWbxx42W9+mRvRsvrwDYn38ZrNmyHP+cTx13nAz24uptv0icdb1ZZLWP92K32Bo1ONMKbxXTYCK6T/uJ68fwleeBnl6Nhfv8QD6xaf7Ho3jZsWDVfY9qP4VBY0sE4f/wNmJdH2RpBV+mLeiH+MbVICQm1qFD15pKfGAfK1Za8JWnFywX5kNATxdyee+1ar2N1/EbdrHfNXr9nOIbZN3zDbTSMfr9d8s8WxRHETkojIn1Jht32z8cAceIxoCFk2jLN8QyY+oHFLuJICehIPIyUMpikgsE7nbrl9sy+0+l2DbNtm6Zl+L224/T6luVW26oyTPk1vc78iEN2yN6NA/YeASZzApLiZZ8z0eiMi5Qs0DLnsVlZogqFXAyBTPKwZzn1qs5IMo9BAtaTNMxjqMxn8yJBOtt+LQ1hVkhHvUnx/t4N7/hfmQmhExKpwGQsbRDVhBNjyCoDeROwc3Jcleb9PCTymYm08ozgLZLDX6/dIttk1yrdgT++KUHvdP/g7q/O+Jf5lwYG/9eAqMfbm/oHOdGPy7FzFC7JnttynIsJJTisVTbTAlUWlXy5zIv2cSU/Z8K8buqGq48B54JkN5P0Cai+M6F/ar7tUB953skP8eV8RscccUhEsyvF8RPLzRiYXG4C8VjXn92cDlyKvHFY81OyTix2IIn4wzUJe1jqCfGN+KzSLHwt1wlbe35EnGKj4YRO5UlOs807TYFTYZYI+k2zfeOnDJxyfijcJXmHhYtuesw5vP9HkbzaVBHGaU550FULwT7XFzj5Zg7eq9IbM8U8eVkQ1uzdBeH+ajAWrJsgdadL/ltZI0W7YBC3GCmwNNW12HWFczrdmy0vAE+Ol5rT/2i8HEbSeiN+K9nL6fF7aP0L</con:value></con:property><con:property><con:name>SAMLSAU1_5</con:name><con:value>nVZdU/I6EL5/f0WnXr5T0pZKoSPMAAXl+C3IeLw5E9MFom0CTYrgrz9JsRUQPb7nqpPtZvfZ3SdPciJwErtBWwhIJeXMGIRN8596FGG/6jmWCziyvKcn36o/HbuW69SgTmoEqvWGaQyEyGDAhMRMNk3XdqqW41hOfWT7ge0Ex/WKb/uPpjGGVKjQyqVim8YqiZkI8rRNM0tZwLGgImA4ARFIEgzblxeB8gxwgclsnWxQ5gnT1kzKeYAQqURAII5JhfAEnaAdn5NIBEM6ZVhmKbznjETTfN/7+vpaea1WeDpFrm3byG4g5RMJOj0yW7+KzRAN2IRv1l3MOKMEx/QNa1CXIGc8MtrxlKdUzpIvQjvIsXVoC1bEIo7Hjkz0kSBH98NIOyBTgS0xw04R7A4mkAIjYNzfDZrm0c8muNk7SjETE54mYm/9Z5CALSHmc4gsUVRWoPt5xAPtap0ACQaMxJmgS7jSNJljAsK4SWFCVxdUKPJFwsjHb6xEwTAgfzKSE7SNU8FGBzoT0ikI+X/mtT2rTZQxjjNo3YjaZez2anfdRXJ71u92HpPpxXrcOO3cN3MI284bUOWo39f7RC159b7p8c7vUOdhfJYsvJCP/u7P+vF4aN+M/1p6L16nevp2XPP5lXsN59XzQaPXS8gk9NP1Oru16yMUr0/R8+hiGc8f5fWvqR1D1CZoUEvsS8/prqKziKAF4Il4u68+o+h3e3JdH3L/tsPXY5idXf7OxItHpTj2btui+vbioXDRWD/cJ+tf4Wg8Tmbu+XSJRvdykpz2bpsfNW3XsGss5GCYPT0DkcVSU2MQGn01Lyy/lxZtoZE1yV2DudYnIYFJs6V3aVkJMiU+NArUMDfrXqfW67rddsO3a6HT6/dsz3b6dtv2Gw273+8U+rNBsQexy9mE6lxaYTf8+R4gSQIBLILUWvKMzECY30QMscTGgN2pg8GZgBFXCu7X2jW/17E7ju0ed/tuv9r2w0Y1bPhePexXHdO44vKaXaftiYR0R70de0e974DQOQUt8ZrnQhFdSNWSBV5mMnYqS1xhkKlLINU6HLhe/RgJmsxj0IBRwqMshsp8Ns8bhMTm61qYiNxKOE+jgIj8EH5Z4/6/oh3KJ6LaQeiCOqBGCgfuIq+o5lPV3sE7qwjfziKqz5rqrUwp2SDZ/fVBGc2Vki9FWQXu0n3fsBMa7VdVZouWlJTML69rpfZKD1rFYBa4sqhky2WWj8LXWpeq8MhBto+GQDIlWOsRfwGGyhDoR3dFiXovc2nfxZfJGRtKLCFRxDHy5Q8eCkMQ+qEwUMRf/fQVspNS9U3CSh6ydWP1ntCIv31ykIBoP2W+UZ9XNcKPcR2ItZVH1aleB5KyqV7pm2H9HTOokjKebgc/FOBQ8l1j2eQSi1RsesokfP3H0BrVNDEhPGNyEJq5YVs3c5xyPYfgw+lTmFyb3y/blfjysn24vBgqBUuwWfrS/3a2aE4XAmqXoDmWprlS70aVnE23dPod4EGprnnhd1K9W0nrk/mzZaun++eh9S8=</con:value></con:property><con:property><con:name>SAMLSAU1_4</con:name><con:value>nVbbcuI4EH2fr3A5jykj21yMXYEqrokn5DJAskletoTcgBJbBksmZL5+JIMdICSb2SeX2q3u091HRzrjOAptr8U5JILGTPO7Df3f8tQmFmBs1G1cNSpunRiuY04NgoHYk/Kk7NaIrvmcp+AzLjATDd02rbJhWYZVH5uOZ5qeVSs5bvVJ1+4h4TK0dCmZuraOQsa9LG1DTxPmxZhT7jEcAfcE8Uatq4EnPT2cY9KbZxuUWcKkORdi4SFESgEQCENSInGEztCez1nAvRGdMSzSBLY5A97Qt3tfX19Lr+VSnMyQbZomMl0kfQJOZyd680e+GQKfTePNuoNZzCjBIf2NFagrEPM40FrhLE6omEefhLaQZarQBqyJQawKO9HRe4IM3Tcj7YFMODb4HFt5sCFMIQFGQLsb+g395HsT3OwdJ5jxaZxE/GD9d5CArSCMFxAYPK8sR/f9iEfa1TwD4vmMhCmnK7hWNFlgAly7TWBK1wPKJfkCrmXj19Y8ZxiQvxnJGdrFKWGjI53p0hlw8X/mtTurTZR7HKbQvH356fy6Hi/QaNbru+QCm/e4/euu7UOvkUHYdd6AKka9XR8SteDVdpM/eB70n/o1ENbN5fnldDl57lUf70a3j21xyn9eLO+H/rXZ9WvsquL8fqsQPjvttMpv4ek4Pn8aTkkf0F13ckWf1o8/WG21fihX3fuZPZ6ML8ak+vLP1GKX5SjpX89qy5vUDuyxXZ/3H8YPi3aFzZNLGAzqw4p4brXr817UGfjV9DxNTus/0LJ9E5aJNTv1r9DN5XWCXhvvNe3WsG/M5WCUTp6BiHypqOF3tb6cFxZfS4uy0MCYZq7eQukTF8CE3lS7lKx4qRQfGnhymJt1r13rdexOS56iatfq9XtmxbT6Zst0XNfs99u5/mxQHEDsxGxKVS6lsBv+fA2QRB4HFkBirOKUzIHrX0TsYoE1nw3lwYgZh3EsFbzrmO12vVPvOE7dbZuO5XSrbq1cdyvlXsuypQ5fx+KG3SStqYBkT70tc0+9h0DogoKSeMVzLonOhWzJEq9SEVqlFS4xSOUlkCgd9uxKvYo4jRYhKMAoioM0hNJivsgahPjmaxuY8MyadZfw7Ax+WuLhv7wb0iegyoGretogJwpHriIzL+aTot2DKysP30oDqo6abK1IKNkg2f/1zhhFlYIu26py2IX3oWEvMjosqkgWrCgpeF9c1lLrpRo087EscWlZSlerNBuEo5QukeGRhUwHjYCkUq7exvELMFSEQN+6KQrUB5kL+z6+VMzZSGABkaSNli2/8UwYAVfPBF/Sfv3dN8heStk3AWtxzNYJ5WtCIf7ywUE8ovyk+VZ+XuMkeB/XkVg7eWSd8m0gKJuplboX3j4hBollWCqFLE52gx8LcCz5vrFocoFFSDZNUgGf/9GUQjV0TEicMuF39cywq5oZTvG2AO/d6UOYTJm3V+2af3rVPlwNRlK/IqwXvvS/nQ2a0YWA3MVphqWhr+WrUSZnsx2V3gI8KtS1Sucrod6vpPnB/NGy09PD89D8Aw==</con:value></con:property><con:property><con:name>SAMLSAU1_3</con:name><con:value>nVZbd6o8EH3vr2DRxy4MICiyqmt5PYfW2ov2cvrSFUPQVAxIgpf++pNgoWptv57viZVhMrNnZmcn5wzOQ9NtMoYTTiKqeJ26+lKxdMNyTKThMqpqlmlVtHGtoms2qhmm7ZfNwDZVxWMsxR5lHFJeV03dKGuGoRnOSK+4tuOWrVLNdp5V5QEnTIQWLiVdVdbzkDI3S1tX04S6EWSEuRTOMXM5cofNq74rPF2YY1Ib51uUWcKkMeU8dgFAJR8jHIaohKI5OAd7Puc+c4dkQiFPE/ye02d19X3varUqrcqlKJkAU9d1oNeA8PEZmZyqjZN8M/Y9GkTbdRvSiBIEQ/IGJagrzKeRrzTDSZQQPp1/EdoAhi5Da3iNNGRY9FQFHwkydD+MtAcyYVBjU2jkwe5wgBNMEVbu77y6evqzCW73jhJIWRAlc3aw/jdImC5xGMXY11heWY7u5xGPtKtxjpHrURSmjCzxQNIkhggz5SbBAVn3CRPk85mSjV9Zs5xhGP3LSM7BLk4BGxzpTIdMMOP/Z167s9pGeYBhihvdysYMrfvHdXrZrvXXcXI2I2d8tjLb9/UMwq7zFlQx6vf1IVELXr1vSu3g7o/PZ+XEH72xpfek927KYefW9C+dRbX6uO453X7V7jvj16tBhdzBVfO2EiwnXB+0nGdv1O7PnjfOIK52/4xPrtPfmwnrghG+qLRhYE4X5bGp30NwZhvpL3I1jedR99evi0E/5INL/2E4M537t7NWLxrS1/vb31fg+WkAytHlmTE+CZ433bQXg5g9BovB9KIy8+ofNe3WsG/M5WCYjl8x4vlSUsPrKD0xL8i/lxZpIb4WZK5uLPWJcUy52pC7pKy4qRAf4rtimNt1t1Xpts12s1ar2h2j2+vq4oT19KZerdX0Xq+V688WxQHEdkQDInNJhd3y53uAaO4yTH2caMsoRVPM1G8idiCHikfvxMGIKMOjSCh41TF7nXLLNNpdy7Zsx26VhSC09I5lmZWyIdR7EPFrep00A46TffWu7an3HUYkJlhKvOQ5E0RnXLRkAZcpD43SEpYoTsUlkEgddk3LsQEj8zjEEjCYR34a4lI8jbMGAbb9mhpELLN2+s3hzUt7+GJmx/DLKg//5Q0RPj6RDkyW1MJiqPjIbWTm9Xyq2zp6a+Xhm6lP5GkT3eUJQVsk+78+SCPZUjDmo7AcebHh0LAXHBzWVeTzlwQV7C+ubKH4QhMa+XAWsLQopctlmo2jKvUuEeGBAfQqGGKUCtHajKIZpqAIAX50XxSoDzIX9n18KZ/SIYcczwV5lGz5g8fCEDP5WPAE+dc/fYnspRR943jNj9naoXhTSMTfPjuQi6SfMN+IzypK/I9xHYm1k0fUKV4InNCJXMnbYfMFN1AkwhIhZ1GyG/xYgGPJ941FkwssXLBpnHL89R9F6lRdhQhFKeVeR80Mu9qZ4eSbGLsfTp/CZPr8fuGu2ZcX7tNVfyhUbA7Vwpf8t7NGMrogLHYxkmGpq2vxdhTJ6WRHq98BHpVrp6N/J9f7lTQ+mT9bdnp6eB4afwE=</con:value></con:property><con:property><con:name>SAMLSAU1_2</con:name><con:value>nVZdU+JKEH3fX5HKPm6FfABiUkIVJMByRXQNKvqyFSZNGA0zMTMJuL/+zgQTAdHr3iqqwnR6uk93n5yZMxasYsvpMgYpx5QoI6+t/m60wnBhtWxt3kKh1kDiny0sGtSthQlh07JbdVUZMZbBiDAeEN5WLcOsa6apmadT48Rpip9ds83mg6rcQspEaOFSM1Rls4oJc4q0bTVLiUMDhplDghUwhyPH716MHeHpBCUmtXO2RVkkTDtLzhNH11EtBARxjGqIrvQzfc/nLGSOjyMS8CyF15wha6uve9frdW1dr9E00i3DMHTD1oVPyHD0Xe18KzdDOCILul27AaEEoyDGfwIJ6gL4koZKN45oivly9UFoUzcNGVqDDdKQ2SDfVf0tQYHui5H2QKYs0NgyMMtg17CAFAgC5eZ61Fa/f22C273TNCBsQdMVO1j/HSQgOcQ0gVBjZWUluq9HPNKuzhkgZ0RQnDGcw0TSJAkQMOUqhQXejDET5AuZUoxf2bCSYYD+ZiRn+i5OAVs/0hkPR8D4/5nX7qy2UW6DOIPO0+SON3t/BvSSXmVXD7+6t8kwekBmMjPaBYRd5y2oatSv60OiVrx63XSf15tdlIT6eDGdn9K72cNmAN7prJ6sjRcY/oiGJ0McZWkvC29/Nqb3Q/4wXE5+3OWTp9Ydegwy++7pcjGbP9/U7W/1kKeDW3PJf1z1opcJzL0wenz0ny1O1y/XMDTNHFbTc/98/ss/uWXuo5tvUmrn979ObmZjP3KJ5T5d9Ls/h+eDb2PfGz7/c6+v+vOfs+unpT2h7beadmvYN5Zy4GfzR0C8XEpqjDxlIOYV8M+lRVpwqC0KVyeR+sQ4EK525C4pK04mxAeHjhjmdt3vnfRdy+3adqvpmf1B32gY5sDoGi3bNgaDXqk/WxQHEF1KFljmkgq75c/nANHKYUBCSLWcZmgJTP0kohfwQBmRa/FhUMJgSqWC95t2z+wLhHXXHNheq+eadq9rN9xm02t5lqpMKL8kl2l3wSHdV297T72vAeEEg5R4yXMmiM64aMlzkGc8Nmt5UCOQiUMglTrsWI3Tps7wKolBAtZXNMxiqCXLpGiQzrZPSwsQK6zjcde/+u36v63iM/ywysN3ZUOET4ilA5Ml9UAMFY6cRo2yng/qtg9OrTJ8Nwux/NpEd3mK0RbJ/qs30ki2VIx5K6xEXm04NOwF1w/rqvKFOUYV+6sjWyi+0IROOZznoPZcy/I8K8bRknqXivC6qRst3QeUCdF6mdInIHoVQv/SeVGhPshc2ffxZXxJfB5wWAnyKMXyC5cFH5i8LIwE+TdfvYnspRR947Dhx2xuLO4UEvGn1w7kIOknzFfisaZp+DauI7F28og6xQ2BYxLJlTwdXj7gBqIiLBZyRtPd4McCHEu+b6yaXGHhgk3zjMPHbxSpU201QIhmhI88tTDsameBk78k4Lw5vQtT6PPrgbthHx64s4uxL1RsFaiVL/5vZw0XdEEgdjFcYGmrG3F3FMlJtKPVrwCPyvWpZ3wm1/uVdN6Z31t2enr4PXT+BQ==</con:value></con:property><con:property><con:name>SAMLSAU1_1</con:name><con:value>pVbbcuI4EH2fr3B5HlNGNndcgSqDIUOGMCwQhp2XlCK3QawtE0s2ZL5+JYMJEJJNZp9care6T190uq85DoOi7XAOsaAR0/puU3/wSg1i+sWqgWtF3yjXa48GrviWUWr4fsWDRsMkj7rW5zyBPuMCM9HUi6ZVMizLsOpTs2pXSrZVLtRLjV+6NoOYS9NSpWDq2jYMGLczt009iZkdYU65zXAI3BbEnjh3A1tq2jjHpLeudygzh3FrKcTaRogUPCAQBKRAohBdoxOda4/bE7pgWCQx7H16vKnv7242m8KmVIjiBSqaponMBpI6HqeLr3rrS34ZvD7zo925g1nEKMEB/Y0VqDsQy8jTnGARxVQswzdMW8gylWkDtsQgVpl91dGLgwzdBy2dgIw5NvgSW7mxMfgQAyOg3Y/7Tf3rxyq4uzuNMeN+FIf87Pw5SMBSCKI1eAbPI8vRfdzihXS1roHYfUaChNMUhqpN1pgA10Yx+HQ7oFw2n8e1rPzalucdBuQzJblGxzglbHQhMy5dABd/Uq/jWu2szHCQQCvot1cpu7kKfsxS82o0/Hm/uvU6g9WdV29mEI6Vd6AOpd6fzxv10Ff7S5tFlLizX93u3ZouZgOH0unfkC796tX23qk+jW+fa2F649xs1tvaZk4b7s8eq2xKN49Jw6tscbk4n4+TaXuIlvP2l5W3vh2gG3c56D3OrcBqlGZpGb6PyOr7z+p8RKdXJr+NuuZg0wuTybe//EF3dl90S+1RMCRDNGyU6k5S9m+D36vRl+ff8b3XHnIfdb4BKZbJ7L75EtNxDKfCnA4myeMKiMiPqjX6rtaT9cLifWpREuoZfqZqrxU/cQFM6C11S9GKnUjyoZ4ti7k7d9vVbqfYcRo1s+5a3V7XLJtWz3TMmnxLvV47558dijOInYj5VPlSDLvrn/cBktDmwDyIjTRKyBK4/o5FFwus9dlYPoyIcZhGksHbJaviuvVe1ZQYS712pVurdZ2u2+mYZk8GomvDSPxgP2LHFxCfsnfjhL3HQOiagqJ41edcNjoXMiVPOE1EYBVSXGCQyCEQKx62i+V6BXEargNQgFEYeUkAhfVynSUI8d23aGDCM+m4O83e35vhnf/LMyF1PKoUuIqlDbKacGEMmXkgrwIuXxxXuXkn8ah6ZjKtIqZkh+T010u3qDY5tIo7cCajHPRB9xN3HzqTB+sPDQz+rwFZj9c30Ts5QeflODjyUnrkNh/nckJJDmvlzfSEC0+FJE2TrH1qip9jaR5ZyKyhCZBEkuzzNPoHGDqYQB+abwfUZ54P8lN8iViyicACQtnsWnb8wHIzAa6Wm758rNuPbk4nLmXeBGzFJVknkDuQQvzumkRsovSkeCQ/myj2Xsp1wdaRHxmn3GgEZQt1UtPs+Y2mIJE0SyX9RvGx8UsGLjk/FR6SfMAiZDc9JgLe/qMpXm3qmJAoYaLv6pngmOsznOJ5DfaL0isz2TzZLwhb/uaCML8bTCTrhlg/6NL/VjZo1i4E5C1OMyxNfSt3XemcLY5myx7gxfFSLffeGy+nkbReiV9LjnJ6/h5a/wI=</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>pVZbc+I6DP4rTPaxE5JAQkOmMMOl3ZNTaLtNb9uXHeOI4G1ig+1w6a8/doAs0Mthd58yVmTpk/RZ0plAWVoLOkIAl4TRyjJLqQgKacvIOQ0YEkQEFGUgAomDqDMcBLWqHaDtFaMS9lvGDwcjv4GdUxO7UDddvw4mcuoNs+67tt/wodYYI6UqRA4hFRJR2TJqtuOZdsN0vDvbD2peYNtV3/OejcoDcKFsK5WqbWxALUXLmEg5DSxrsVhUF/Uq44lVs23HehoOIjyBDBnts3VEhSPe3ujjagwY0hRXMcusM2tP5ywWQUQSimTOYeMr/siXbdlNS+nEgiRfjPIuxCEds+LYQ5RRglFKXpHOzxDkhMWVTpowTuQk+zAIx9aGTVhiEzsu/WJY+9CONLSHkAtkiglyNrZuYQwcKIbK/W3YMr4cV7Xi6h1HVIwZz8T+8ffwAJ1DyqYQm2Ib1gba8QbfyVT7DHAQUpzmgszhSpN1ijCITTUBH2+qcsNhTJYDIhRBl0Kjs3bhHRzX2eiTBIT8kwLtFGdt5AGlObT5KiH+8zT5/jA5mXyfNdzo5uJb8pzPL4etAsCuciEoS7s+HpCyJNH6RsTp6+KkhgY/L5K0dt+wZff5Rqb/PD6E9yfnr9nL5bJ3HTbD1aP/tXk+fFrMTha9gTPvjL2rzK/74egiGlj31L2cPD72ZqukHzrDr8MLb/jykCejf0K7+xill6Leca8W9vLr3elp7zqJOMvqzX+TB+fbtyy68qb98JLnT4g/Mnhx80W3M24sT4kc4nz+1O2+4pFFXlplODv492XbNx/lo5+A5faoaRD2KxeqSkh+3sy0hMTmuFANprr5CAlUGm19S/eOIFftjsSBquH67Ph+59zpug2v16vbTffc9ur1frPpXNid047rbJvMGsUBxB6jY6J96Za7ps3nAHEWCKAxcHPOctXphPGJxT6SqBLSW/UIGBVwx3R7FvbMk3Ilcjaizs/0ZcziVbpcjVKjcsXkNb3mnbEEvteUHWevKd8CJlMCunNrYgvFbCFVMmZonsvUqc5RlUKuejvXbTaoub5nCZJNU9BQrYzFeQrV6WRapMYS62/NRFgU0tvzu+K5fRjY4b9tDpROTLSC0LF0QdUR3kwXN/C2gbwJuPHuFNqa7+Qx0S9LJVRygtdI9n/94okmSEmS/qAT3WxBl7q/cfdHL/rh/KGBwV84H/ytc1XLtzetT/JpHZaydBTPyY7b7dqhBphqee0tEWfIqc6q+XyeF9xz3brFlXlLk8Cya1YEOFdNeXXHXoBapRXrqAlYAj9wXsr3IeZyQiOJJGTqrVSK4xErTwRCrzyheuXLY/epPZcqdRKW8j1ZL1Xrmkb86UaHA6z1lPhGfRaMx78q9o6tHT8qTrXxSEITfdLTb/UBLzBTZonq24zvGn/PwHvO94VlkkssUhFqlEv4+E9FN+SWgTBmOZVh3ygEu0OiwClXUwh+Kb0xU8yhcjEl/7+ZmqSgAAa1zgpS2Nf7RaCfAE12Bs3G6QezpvvZrNlH134jfivZydMhx9v/AQ==</con:value></con:property><con:property><con:name>SAMLFAU2_5</con:name><con:value>nVbfU+o6EH4/f0Wn5/FOSVuKhY4wgwWEK4jyw+Px5U5MF4i0KTYpoH/9TYqtgOj13KdOtpvdb3e/fMk5x1Foe03OIRE0ZlqvVdf/sQPXJTPTNqoVxzIcp2wZNRufGbWqQ2YWqZ05s5mu9ThPoce4wEzUddu0yoZlGVZ1YrqeaXtlu+RW7Addu4OEy9DSpWTq2jYKGfeytHU9TZgXY065x3AE3BPEGzcHfU96ejjHpDfOdyizhEljIcTKQ4iUAiAQhqRE4gidowOf84B7YzpnWKQJvOUMeF1/27vZbEqbcilO5sg2TROZNSR9Ak7nP/XGj3wzBD02i3drH7OYUYJD+ooVqAGIRRxozXAeJ1Qsok9CW8gyVWgDtsQglsN+6ug9QYbum5EOQCYcG3yBrTzYCGaQACOgTUe9uv7zexPc7Z0kmPFZnET8aP1nkICtIYxXEBg8ryxH9/2IJ9rVOAfi9RgJU07XcK1ossIEuHaTwIxu+5RL8gVcy8avbXnOMCB/MpJztI9TwkYnOtOic+Di/8xrf1a7KHc4TKFhXz8My9vHq/lsvPzVbW/6/mA7f1pfTp+r9QzCvvMOVDHqt/UxUQtevW3qM3ZWjdJog1aP44clvr+DIaL2xS2aQDi9X7K+Px08Lvtx/+Fm8bvzfDm42q7+XkxGL7fmTeVmVI2G1l0kLp9MdvOjNa1O1+MuBvOuO+1cJVfk8hK9JENkP62t8bRi//59MYzu0YB00XR0XRn65jbYvE5Cp//QWqb49TaMa22//2SPrB/d227/6WG4mp79qi27939N24P6e037NRwaczkYp49PQES+VNTotbSOnBcWX0uLstDAmGWu3krpExfAhN5Qu5SseKkUHxp4cpi7dfvirO3bfrPm+lbLanfapmNaHbNpurWa2elc5PqzQ3EE0Y/ZjKpcSmF3/PkaIIk8DiyAxFjHKVkA17+I2MICaz02kgcjZhwmsVTwlu933HbZbVdct+VUnaZlW75z4bYs0ylXTVfXrmMxZMOkOROQHKi3ZR6o9wgIXVFQEq94ziXRuZAtecbrVIRWaY1LDFJ5CSRKhz3bqVYQp9EqBAUYRXGQhlBaLVZZgxDffW0DE55ZSRwngUd4dgg/rfH4X94O6RNQ5cBVQRcgRwon7iI7r+ZD1c7JOysP30wDqs6a7K1IKNkhOfz1ThnFlYIveVk57sL92HAQGh1XVWQL1pQUzC+ua6n2Ug8a+WCecem5lK7XaTYKV2ldIsMjC5kuGgNJpWC9TOIlMFSEQN+6KwrUR5kL+yG+VCzYWGABkSSOli2/8VAYA1cPhZ4k/va7r5CDlLJvArbilM0P5XtCIf7yyUE8ovyk+UZ+NnKE7+M6EWsvj6xTvg4EZXO1UjfDy1fMoFLK4mQ/+KkAp5IfGosmF1iEZNNjKuDzP5rSqLqOCYlTJnotPTPs62aGU7yswHt3+hAm0+a3y3bLP71s7wf9sVSwCOuFL/1vZ4NmdCEgd3GaYanrW/lulMnZfE+n3wCelOozp/WVVB9W0vhg/mjZ6+nxeWj8Cw==</con:value></con:property><con:property><con:name>SAMLFAU2_4</con:name><con:value>nVbbcuI4EH2fr3B5HlNGMlfjClQZc1kyucwCmZnMy5aQ26DElo0lc5mvX9lgBxiSzWwVVZTare7T3UdHuhYkDKq2IwQkkkVcG/c7+j+EWrhdI3WjAXPfqLdrlkHAswyzOW+YnkVqTd/XtbEQKYy5kITLjl7FZs0wTcO0ZrhlY2w3ahWzZv3UtW+QCBVauVSwrm3DgAs7T9vR04TbERFM2JyEIGxJ7alzd2srT5sUmPTu9R5lnjDpLqWMbYRoxQMKQUArNArRNTrxufaEPWULTmSawCGnJzr6Ye9ms6lsapUoWaAqxhjhNlI+nmCLz3r3U7EZvDH3o/3aJTzijJKA/SIZqDuQy8jTnGARJUwuwzdCm8jEWWgDttSgZp1/1tFrghzdByOdgEwEMcSSmEWwCfiQAKegPU7GHf3zxya43ztLCBd+lITibP1nkICvIYhi8AxRVFag+3jEC+3qXgO1x5wGqWBruM9oEhMKQvuagM+2t0wo8nlCy8evbUXBMKB/MpJrdIxTwUYXOtNnCxDy/8zreFb7KN9IkEJ3NLobOWjHG8Mt3wXbemK1ga2edsvY6eQQjp33oMpRH9bnRC15ddgEt97N+Hn21wT9eGmH802TuzfyyVyNv9Ti+NcMP68m+EpUB427+1vPau2m0v17N32Y4dBfpu6mVcczVkuu4nl8v/okRrdXLx5F6Fv76cVJzWhQe7pf/Ay/UH87/tHuPe2mfXe0Grn4uRqlz858aT5f9a9Stv65vTFXG3Pij9zvTy2KHzefviP3kaBFbefQm5tWdfMITue1puMaTo2FHEzT+TNQWSwzaoz72lDNi8j3pSWzMM/wc1c7zvRJSOBS72a7MlmxUyU+zLPVMPfrQa85cKuu0265uG8OhgNcx+YQO7jVbuPhsFfozx7FGUQ34j7LcmUKu+fP+wBpaAvgHiTGOkrpEoT+TsQ+kUQb84k6GBEXMIuUgg8bTbPn4l6v4VqtZqOqgPYs9ev3rUEVty1du4/kA39IHF9CcqLeJj5R7wlQFjPIJD7juVBEF1K1ZEXWqQzMyppUOKTqEkgyHbardauBBAvjADLAKIy8NIBKvIzzBiGx/68ahIrcmneXivwMvlni+beiG8rHY5mDyOrpgZooXLiK6kUxbxTdPruyivBO6rHsqKnWyoTRPZLTT6+MyahS0uVQVQG79D43nERG50WVybw1oyXvy8taab1Sg24xlhWprCrpep3mg2hlSpeo8MhEuIWmQFMlV7tZ9AIclSHQh26KEvVZ5tJ+ii+VSz6VREKoaKPlyw88E6YgsmfCWNF++9E3yElK1TcJW3nJ5gbqNZEhfvfBQW2a+SnzV/W3iRLvdVwXYh3lUXWqt4FkfJGtsnth9wYxaKTCMiVkUXIc/FKAS8lPjWWTSyxSsWmeSnj7i5YpVEcnlEYpl+O+nhuOVTPHKXcx2K9Ov4XJlflw1W7Fm1ftj7vbqdKvkOilL/tvZ4PldKGgdgmWY+noW/VqVMn54kilDwAvCnWz7r4n1KeVdH8z/2456un5eej+Cw==</con:value></con:property><con:property><con:name>SAMLFAU2_3</con:name><con:value>nVZdc9o6EH3vr/C4jx0j23zaE5ghfKSklKQ4SRNeOkJeg1pbBks2JL++kokdICQ3vS8wWq92z+4eHemM4yi03S7nkAgaM23Ub+u/bDvwrYYDxjyY140atgOj5cifWtDyg7lDgmo90LUR5ymMGBeYibZum1bVsCzDat2YDbfuuGajUncaM127g4TL0NKlYuraNgoZd/O0bT1NmBtjTrnLcATcFcT1ut/HrvR0cYFJ75ztUOYJk85SiJWLEKn4QCAMSYXEETpDBz5nPnc9umBYpAk85/R5W3/eu9lsKptqJU4WyDZNE5kOkj4+p4vPeudTsRn8EQvi3bqHWcwowSF9wgrUdxDL2Ne64SJOqFhGb4S2kGWq0AZsiUGsGvuso5cEOboPRjoAmXBs8CW2imBTCCABRkC7nY7a+uePTXC39ybBjAdxEvGj9b9BApZBGK/AN3hRWYHu4xFPtKtzBsQdMRKmnGYwUTRZYQJcu04goNsx5ZJ8Ptfy8WtbXjAMyL+M5Azt45Sw0YnO9OkCuPg/89qf1S7KHQ5T6NyEP/qOORlNHy/P75P6xfl980/zq49vn1rtHMK+8w5UOern9TFRS149b+pVURZFv2f+/eLp6Tb+tvHo9GLu1a9r4SpGsBCt2ZpY42B7O77zNuZ9t/8VHi4m6dW3xt3j6NuXdHI5MSlcffk9Qp+60whmg7vG4ifED/bjevLD6QbXPFg8jLPxDcqmZuYDQ6SGvq4Hl+t0/kd4vv1lOWxFYYM3Hpbjn6sBnSRPk+r60zZtXkQx9/DsonbXzGZoNmi/1LRfw6GxkAMvnf8GIoqlosaorw3lvLB4X1qUhfpGkLu6K6VPXAATekftUrLiplJ8qO/KYe7Wg/PGoGf3uo7j1PvWYDgwa6Y1NLtm03HM4fC80J8diiOIvZgFVOVSCrvjz/sASeRyYD4kRhanZAlcfydiHwusjdhUHoyYcbiJlYKbw6rjtOpNu2bWBoOW0+jZ5zWz6tim0xw4XV2bxOKKXSXdQEByqN7OgXpPgdAVBSXxiudcEp0L2ZI1zlIRWpUMVxik8hJIlA67dq1VR5xGqxAUYBTFfhpCZbVc5Q1CfPdvG5jw3Nofd73rXz3vl50fwzerPP5WNET6+FQ5cFXSOcihwqvbqOXWi3pe1V07eWsV4bupT9Vpk90VCSU7JIefXkij2FIy5qWwAnm54dhwEBwd11Xm8zNKSvaXV7ZUfKkJnWI4a1xZV9IsS/NxNJXeJTI8spDZRB6QVIrW4038Rx7TMgT60H1Roj7KXNoP8aViyTyBBUSSPFq+/MBjwQOuHgsjSf7tR18iByll3wRsxSlbL5RvCoX43WcHcYnyk+Zr+beJE/9lXCdi7eWRdcoXgqBsoVbqdnh8gxsklmGplLM42Q9+KsCp5IfGssklFiHZNE8FvP1FUzrV1jEhccrEqK/nhn3tzHGKxxW4L06vwuT6/HzhbvmbF+7997EnVSzCeulL/9vZoDldCMhdnOZY2vpWvh1lcrbY0+pngCflutU335Prw0o6r8yvLXs9PT4Pnb8=</con:value></con:property><con:property><con:name>SAMLFAU2_2</con:name><con:value>nVZdU+o8EL73V3Tq5ZnSDxBoR5gpX0fOICrlKOPNmZJuaaSkNUkR/PUnKbYCoq/nvepku9l9dvfJk1wyfxVbjssYUI4Togx7LfUPNM3QrDdDzbahodWMOtJsNAetahlQnSO7GYY1VRkylsGQMO4T3lItw6xqpqmZzalRdy4ajmVX6rb5qCr3QJkILVwqhqpsVjFhTp62pWaUOInPMHOIvwLmcOR47vXIEZ6OX2BS25c7lHlC2o44Tx1dR5UAEMQxqqBkpV/qBz6XAXM8vCA+zyi85QxYS33b+/LyUnmpVhK60C3DMHTD1oVPwPDiXG2fFZshGJIw2a27PkkIRn6MX30J6hp4lASKGy8Sinm0+iS0qZuGDK3BBmnIrJFzVX9PkKP7ZqQDkJT5Got8swg2gRAoEATK78mwpZ5/b4K7vVPqExYmdMWO1v8GCcga4iSFQGNFZQW670c80a72JSBnSFCcMbyGsaRJ6iNgyi2FEG9GmAnyBUzJx69sWMEwQP8ykkt9H6eArZ/oTA8vgPH/M6/9We2i3PtxBu0e0x9dPiP1i+cqur2CcXR1M+3cRSa5buUQ9p13oMpRv62PiVry6m0T+flo/DKTZkfHPybTm9nL+PXhbkYm1e0yfnrK+iS9QpR7c3u25Jv4xxMa0N+M9K7uN1vduO1mKSzR3fJXlaTRz7PFpFd74P2rYbStjcezRbh0+9HjbJ400+otpffVV8810I0JXnqTpZsrs8MT/Lx9CsPqsoZiKxpFs9mEZLM1ejwbPxre/CHVw+DeaxqTaY3WWu817ddwaCzkwMvmT4B4sZTUGPaUgZiXz7+WFmnBgRbmrk4q9YlxIFxty11SVpxMiA8OHDHM3brfqfe7Vte1bfuiZ/YHfaNmmAPDNRq2bQwGnUJ/diiOIHYTEmKZSyrsjj9fA0QrhwEJgGrrJEMRMPWLiD2f+8qQTMTBSAiDaSIUvNsTFOxc1JvWwHUbVrPba1QbVrffMep1s9+xVWWc8BtyQ92QAz1Ub/tAvSeAcIpBSrzkORNEZ1y05NlfZzw2K2u/QiATlwCVOuxYteaFzvAqjUEC1ldJkMVQSaM0b5DOdl9L8xHLraOR693+6Xp/rPwYflrl8b+iIcInwNKByZI6IIYKJ24js6jnk7rto1urCO9mAZanTXSXU4x2SA5/vZNGsqVkzHthBfJyw7HhILh+XFeZL1hjVLK/vLKF4gtNaBfDefYrz5Vsvc7ycTSk3lERXjd1o6F7gDIhWttpsgSilyH0b90XJeqjzKX9EF/GI+Jxn8NKkEfJl994LHjA5GNhKMi/+e5L5CCl6BuHDT9l68biTSERf/nsQA6SfsJ8Kz4vCQ3ex3Ui1l4eUad4IXBMFnIlb4ftJ9xAiQiLhZwldD/4qQCnkh8ayyaXWLhg0zzj8PkfRepUS/URSjLChz01N+xrZ46Tb1Nw3p0+hMn1+e3C3bBPL9zZ9cgTKrby1dIX/7ezhnO6IBC7GM6xtNSNeDuK5GSxp9VvAE/KdbNnfCXXh5W0P5g/WvZ6enwe2n8B</con:value></con:property><con:property><con:name>SAMLFAU2_1</con:name><con:value>pVZdU+I8FL73V3TqpVP6YYXSEWYKLbPsgrgUdfXGCWlKA21amxTQX79JsQiIvrrvVSenJ+c85yPPOZcUJLFhO5SinOGUSH23JT+CKQyNaVBXIASGYsKwrkwtABQ0tSzUsEJLD3RZ6lNaoD6hDBDWkg1NP1d0XdGtiVa3L0z7wqgZdeNBlm5RTrlprlLTZGmdxITapduWXOTETgHF1CYgQdRm0Pad4cDmmjaoMMntyw3K0mHejhjLbFWFtQBBFMewBtNEvVT3dC4Davt4RgArcvTqM6At+fXuarWqrc5raT5TDU3TVK2pcp2A4tmp3D6pLqOgT8J0c+4CkhIMQYxfgAA1RCxKA8mJZ2mOWZR8YFpXdU2YVtAaKlA3yamsvjko0X3R0h7InAKFRkCvjI1RiHJEIJJuxv2WfPq1Cm7uTnJAaJjmCT04fw8SIksUpxkKFFpFVqH7usUj6WpfImj3CYwLipfoSrRJBiCi0nWOQrweYMqbL6BSWX5pTasOQ/A7JblUd3Fy2OqRzLh4hij7l3rt1mpj5RbEBWp3/If5cNEsBrhuriPPGBL3BzN0a7EyWyWEXeUNqG2pX8+Hjbrtq9dLUB8RCI1BMnd/jl6KbLS4S81Fvwjqv5rq/Ut89ysNBovujz/Xzv2ZrhtnFnDnahxc+/hcA3fBVRFHvnqxvAm98CRrPJjNyFv2svn5xBxbi9B3pz+H7Glm3Scd9tSBQ6cLnocExaPnfH0zxxPvLMjGUfyb3me33iqb4/Wyd3/jLH6eZEv/d3TjwYYe3d3ASUoT2nqLaTeGfWFFB34xnSPIqqNojb4r9Xi9APucWoQEB0pYqtqZ4CfKEGFyW9wStGIXnHxwYPNibs5ep+51ja7TbHTPXd3reZqp6T3N0RrNptbrdSr+2aA4gNhNSYiFL8Gwm/75HCBMbIpIgHJlmRYwQlT+xKILGJD6ZMwfRkoomqScwXXDslxPaziW6VxoPcfqNBoNz2vqxrlpulpdlq5SNiKj3AkZyvfZu7nH3mMEcYaRoHjR55Q3OmU8JU9gWbBYry1BjaCCD4Fc8LBtmNaFSnGSxUgAVpM0KGJUy6KsTJBKN19DAZCW0rE3Kd/fh+Ed/qsywXUCLBSoiKWDeDXRkTFkVoG8C9g8Oq4q804RYPHMeFpZjuEGyf6vt24RbbJtFXfg+NcV6K3uN+4+dv1H/R8NDP6vAV6P9zfVT3KiHpZj6yhY4h231TjnE4pzWLtqpidQe6oVy2VRtk9D8HPOzau6qjVUH8GCk+zzJF0gom5NqF+ab1vUB5638n18BYuIzwBDCW92qTx+YbnxERXLTZ8/1vVXN6c9lzxvDK3ZMVk35juQQPzpmgRtKPS4+Jp/VmkevJXriK0dPzxOvtEwTGbiJKbZ8wdNAVNuFnP6TfNd48cMHHO+L9wmeYuF8W6aFgx9/EcSvNqSAYRpQVjflUvBLteXONlzhuw3pXdmynnyuiCs6YcLwp/hwOesmwB5q4v/W1nBZbtAxG9RXGJpyWu+63LnZLYzW14BHh0vdbP32XjZj6T9TvxespPTw/fQ/gs=</con:value></con:property><con:property><con:name>SAMLFAU1_5</con:name><con:value>nVZbb+o4EH7vr4jS55AEUi4RIHFZaLb0coBS2peVcSbBh+CksROgv37t0KRAabdnJSTkyXjmm5nPn91kaB2U7Q5jEHMSUsXpt9R/THDdBq5WNKtuNTTLMzytgStIq1m46pYN113UKqriMJaAQxlHlLfUsmFamlHVytbUtGyjYpdrpbLVeFGVGcRMhBYuJUNVtuuAMjtL21KTmNohYoTZFK2B2Rzbk87tyBaeNsoxqe3mHmWWMG4vOY9sXcclFzAEAS7hcK039SOfpsvsCfEp4kkM7zld1lLf9242m9KmUgpjXy8bhqEbDV34uIz4l2r7It8MrkO9cL/uIRpSglFA3pAEdQt8GbpKJ/DDmPDl+ovQpm4aMrQGW6xh06KXqv6RIEP3w0hHIGOGNLZEZh5sDB7EQDEoj2OnpV7+bIL7vdMYUeaF8ZqdrP8MEtAUgjACV2N5ZTm6n0c80652E7DtUBwkjKRwJ2kSIQxMeYjBI9sRYYJ8LlOy8StbJn4kZxngPxlLUz/EKqDrZ7rTJz4w/n9mdjivfZQZChJoPzMvmdWvx9u7soH+XhEHDCcd+tF8u2plEA6d96CKcb+vT8lacOt9U9RIet7Vqp/6C4s/vf2K56PVtT5f3nswfPCHQ/cO3b/djJ6ep0/dm8rWois66I8mT72Rk84WwXBKo3Fw//xSDd9eLrw3YvowGr5Mp92nScrnJhpiBxpP9Zdd7xE2IanPr2c0qnQ6XXrVf8ZjFhErJWR315sNgoX/6FDrYYZm/dHgQq/TudFIHoeDkN/86sL4xm991HRYw7Exl4RJsvgNmOdLSQ+nrwzEvBD/Xl6khbial7nakdQoxoFytS13SWmxEyFAxLXFMPfrQa9RLZtWrVyvd3udaucvwzLMgdExrhqNyqBj5Rq0R3ECsRdSj8hcUmX3/PkeIF7bDKgLsZaGCV4CU7+J2EccKQ4di8MRUgbTUKh4skqBLIxoscPbKx8tN78Dli7SRFXuQn5P7+OOxyE+Vu7akXKPAZOIgJR3yW8mCM64aMUrShMemKUUlSgk4gKIpQbbZat+pTOyjgKQQPV16CYBlKJllDVGZ/v/soYwy6w4DGPXxiw7fF/Wdvotb4PwcYl0YLKgLohRwpl7yMyr+VT11dn7Kg/fSVwiz5joKY8J3iM5/vRBFcmRgid5WTnuwv3UcBRaP62qyOamBBeML65qofRCB9r5YF5R6bWUpGmSjaImNS4W4XUhdaY+AZwIodpNwxVQvQih/+ieKFCfZC7sx/gSvqQTjjisBXGUbPmDR8IEmHwkOILw25++QI5Sir5x2PJztl4g3hIS8bfPDWxj6SfMD+JvI0b4Ma4zsQ7yiDrFy4AT6suVvBF23zGDCAkL48Pg5wKcS35sLJpcYOGCTYuEw9dfFKlNLRVhHCaUO301MxzqZYaT7yKwP5w+hck0+f2S3bIvL9n57WgilGuN1MKX/LezRjK6YFDlXZ5haalb8WYUyal/oM/vAM9ItFk3ar1qxegWEl0TEt0Y1IsGHlXS/mT+bDno6el5aP8L</con:value></con:property><con:property><con:name>SAMLFAU1_4</con:name><con:value>nVZdc6pIEH3Pr6DI4xYCBkWoaJUfIctd86Xe3CQvW5Oh0UlgIMyguL9+Z1CIGpPN3SqrrGl6uk93nzkz5wzFUdPtMwYZJwlV/FFX/duBoG0ZVqC1OijQrOdOW3vuGKAFrbDVRo6FzwKkKj5jOfiUcUR5V20apqUZba1pzUzLNc7cptFwHPtJVe4hYyK0cGkYqlLEEWVumbar5hl1E8QIcymKgbkcu9P+1dgVni6qMKm98w3KMmHWW3CeurqOGwFgiCLcwEmsn+t7PucBc6dkThHPM9jmDFhX3e5drVaN1VkjyeZ60zAM3XB04RMwMj9VeyfVZgh8Giab9RDRhBKMIvIPkqCugC+SQOlH8yQjfBF/EtrUTUOG1qDAGjYteqrq7wlKdN+MtAcyY0hjC2RWwSYQQgYUg/Jz4nfV0+9NcLN3liHKwiSL2cH69yABXUKUpBBorKqsQvf9iEfa1TsH7PoURzkjS7iWNEkRBqbcZhCSYkyYIF/AlHL8SsHEj1QsA/w7YznXd7EK6PqR7ozIHBj/PzPbndcmyj2KcuhdQtB6TP/iD+g+8gqWDO/GrTVurUbXF90Swq7zBlQ97u36kKw1t7abpsXszysGY+Y86rfR5WpoD9bNxTIuRj99uBz8Qa3bK29wu3zxXl9u2UvhTXAbvKepE6TFM/3hjEdm+8HOU3uceieXk4fhIG7aj3oYeO0lFA/Ythf5r6S17sQvWfgy89s3vPPQHvjDpbdO7ibrYX4TPd09re8t3HHu9NHM7xTh+jq+O+nT0eTRmr+a9/bAGf26h/VF972m3Rr2jZUkTPPnF8C8Wkp6+CPFE/NC/Gt5kRYSaGHp6qZSoxgHytWe3CWlxc2FAJHAFcPcrL2h026alt3sdPrDfrt/YViG6Rl9o+U4Z17fqjRog+IA4jChIZG5pMpu+PM1QBy7DGgAmbZMcrwApn4RcYQ4Unw6EYcjoQxmiVBxs8UXYQjUQc8RDVqr2DBpZsyZqlwn/IbeZP2QQ7av3Paeck8Ak5SAlHfJbyYIzrhoxRta5jwyG0vUoJCLCyCTGuw2rU5LZyROI5BA9TgJ8gga6SItG6OzzX9TQ5iV1rKrmJVn79PSDr9VXRA+AZEOTNYzADFJOHINmVUxnxTdOriuqvD9PCDyiImW8ozgDZL9T+9MkRSpabKtqoJdex8a9iLrh0XVyYIlwTXf64ta6LxQgV41ljfUeGvky2VeDsKWCpeJ8LoQOlOfAs6FTK1nyStQvQ6hf+uWqFEfZK7t+/hyvqBTjjjEgjZKufzGE2EKTD4RfEH34rvvj72Uom8cCn7MNozES0Ii/vKxgV0s/YT5Vvytkix4H9eRWDt5RJ3iXcAJncuVvA/WnxADJyIsEQKWZLvBjwU4lnzfWDe5xsIFm55zDp9/UaQydVWEcZJT7o/U0rCrliVOvk7BfXf6EKZU5O0VW7BPr9iHq/FU6FaM1NqX/LezRkq6YFDlTV5i6aqFeDGK5HS+o85bgEcE2uwY9qB9ZgxqgbaFQDtep27gXiW9D+aPlp2eHp6H3r8=</con:value></con:property><con:property><con:name>SAMLFAU1_3</con:name><con:value>pVZbc9o6EP4rjPvIGF8wN09ghkJomEAgMUnP9CUj5AWU2BJIMpf8+koGHCAkh7ZPHq1X33570e5eCRRHrt8UArgkjObWcUSFn0rrRsKpz5AgwqcoBuFL7AfNfs93C7aP9leMXLddN54dVPRC5E1M16mOTa+KkDmuOmCOy5Ow6NrI9pCnVIVIoEuFRFTWDdd2SqZdNp3SyK76Ts0vVQtFu/zLyD0BFwpbqRRsY0dqLerGTMq5b1mr1aqwKhYYn1qubTvWf/1egGcQI6NxtfUoNcQbO31cCAFDFOECZrF1ZR3pXIXCD8iUIplw2NkKP7NlW3bNUjqhINNvRnYXwi6dsPTYQpRRglFE3pCOTx/kjIW5ZjRlnMhZ/KkTjq2BTVhjEzse/WZYx9QuBDpiyAUyxQw5O6wHmAAHiiH3+NCtG98uy1p6dcQRFRPGY3F8/DM+QJcQsTmEpti7taN2OeCZSDWuAPtdiqNEkCXc6WKdIwxil03Al0PlhhwmZN0jQhXoWmh21iG9k+M2Gm0yBSH/JkEHydmCPKEogYZbGeWjW9zq3JYrIRYLDtXZGNk3+dljPSVwqJwKstRujydFmRXR9gbrtKTjogBJ+oSf2twbvQU/+/D6g99MW/ePj/ONU5JPrWGtCKS2Ca7jyo8+yd8heuv0x4+YDHjQqriQ78abh6a4sdkA2S/r7o20hvPm233pF261B5sFspb3+TZpt/qd1c/a2l33X/MVMamifvd2VkLBBr+EHSYH60dreH+Di/PrUWnYc5eLKMrXNi93LBq81jN3Dvgfy/ZvPkjGL4Dl/qjLoNvOdVSWkPy6mWkJCc1JqurPdfMREqg0GvqW7h1+otodCX2Vw+3ZqVab1853r1wqVop2zbu2S8Viu1ZzOnaz0vScfZPZsjih2GJ0QrQt3XK3ZfM1QRz7AmgI3FyyRHU6YXyB2EYS5br0QT0CRgWMmGrPy6SKSXlVY4zyFWPhCuR6Ol6CkbtTCaAD3pxI4Ect2XGOWvIDYDInoPu2Lmuh6lpIFYoFWiYycgpLVKCQqM7OdZP1Xa9asgSJ5xFoolbMwiSCwnw2TwNjie3XNREWqfThepQ+tk/dOv23j4DSCYlWENqX76CyCGdmi7d35IPD5bMzaA/fTEKi35UKp+QEb5kc/3qvEl0eWYm0e81guCed6f7B3edW8Oz8JUDvH4z3/tW4yuXHm9YX8bROU5kZCpfkwOx+6VDjSzW8xr4QF8gpLArJcpmkted5RYsreEsXgWW7VgA4US15M2KvQK0Mxbpo/mXET4xn8mOKiZzRQCIJsXorufR4wcITgNALT1e98fWl29SRSRU6CWt5TtaK1LKmGX+5z2Efaz0lHqrPivHwPWNnsA7sKD/VviMJneqTnn2bT+oCMwVLVNdm/BD8HMA548fCLMgZF6kKapxI+PxPTrfjuoEwZgmV3baRCg5HRMpTbubgvyt9gEmnULaWkv/fS02SlgBW/Vbpp/h6u/D1E6DTgzGzM/rJpCl/NWmO2TU+iD9KDuJ0WuON3w==</con:value></con:property><con:property><con:name>SAMLFAU1_2</con:name><con:value>pVZbc9o6EP4rjPvIGF8wN09ghkJomEAgMUnP9CUj5AWU2BJIMpf8+koGHCAkh7ZPHq1X33570e5eCRRHrt8UArgkjObWcUSFn0rrRsKpz5AgwqcoBuFL7AfNfs93C7aP9leMXLddN54dVPRC5E1M16mOTa+KkDmuOmCOy5Ow6NrI9pCnVIVIoEuFRFTWDdd2SqZdNp3SyK76Ts0vVQtFu/zLyD0BFwpbqRRsY0dqLerGTMq5b1mr1aqwKhYYn1qubTvWf/1egGcQI6NxtfUoNcQbO31cCAFDFOECZrF1ZR3pXIXCD8iUIplw2NkKP7NlW3bNUjqhINNvRnYXwi6dsPTYQpRRglFE3pCOTx/kjIW5ZjRlnMhZ/KkTjq2BTVhjEzse/WZYx9QuBDpiyAUyxQw5O6wHmAAHiiH3+NCtG98uy1p6dcQRFRPGY3F8/DM+QJcQsTmEpti7taN2OeCZSDWuAPtdiqNEkCXc6WKdIwxil03Al0PlhhwmZN0jQhXoWmh21iG9k+M2Gm0yBSH/JkEHydmCPKEogYZbGeWjW9zq3JYrIRYLDtXZGNk3+dljPSVwqJwKstRujydFmRXR9gbrtKTjogBJ+oSf2twbvQU/+/D6g99MW/ePj/ONU5JPrWGtCKS2Ca7jyo8+yd8heuv0x4+YDHjQqriQ78abh6a4sdkA2S/r7o20hvPm233pF261B5sFspb3+TZpt/qd1c/a2l33X/MVMamifvd2VkLBBr+EHSYH60dreH+Di/PrUWnYc5eLKMrXNi93LBq81jN3Dvgfy/ZvPkjGL4Dl/qjLoNvOdVSWkPy6mWkJCc1JqurPdfMREqg0GvqW7h1+otodCX2Vw+3ZqVab1853r1wqVop2zbu2S8Viu1ZzOnaz0vScfZPZsjih2GJ0QrQt3XK3ZfM1QRz7AmgI3FyyRHU6YXyB2EYS5br0QT0CRgWMmGrPy6SKSXlVY4zyFWPhCuR6Ol6CkbtTCaAD3pxI4Ect2XGOWvIDYDInoPu2Lmuh6lpIFYoFWiYycgpLVKCQqM7OdZP1Xa9asgSJ5xFoolbMwiSCwnw2TwNjie3XNREWqfThepQ+tk/dOv23j4DSCYlWENqX76CyCGdmi7d35IPD5bMzaA/fTEKi35UKp+QEb5kc/3qvEl0eWYm0e81guCed6f7B3edW8Oz8JUDvH4z3/tW4yuXHm9YX8bROU5kZCpfkwOx+6VDjSzW8xr4QF8gpLArJcpmkted5RYsreEsXgWW7VgA4US15M2KvQK0Mxbpo/mXET4xn8mOKiZzRQCIJsXorufR4wcITgNALT1e98fWl29SRSRU6CWt5TtaK1LKmGX+5z2Efaz0lHqrPivHwPWNnsA7sKD/VviMJneqTnn2bT+oCMwVLVNdm/BD8HMA548fCLMgZF6kKapxI+PxPTrfjuoEwZgmV3baRCg5HRMpTbubgvyt9gEmnULaWkv/fS02SlgBW/Vbpp/h6u/D1E6DTgzGzM/rJpCl/NWmO2TU+iD9KDuJ0WuON3w==</con:value></con:property><con:property><con:name>SAMLFAU1_1</con:name><con:value>pVZbc+I6DP4rTPaxE5JAQkOmMMOl3ZNTaLtNb9uXHeOI4G1ig+1w6a8/doAs0Mthd58yVmTpk/RZ0plAWVoLOkIAl4TRyjJLqQgKacvIOQ0YEkQEFGUgAomDqDMcBLWqHaDtFaMS9lvGDwcjv4GdUxO7UDddvw4mcuoNs+67tt/wodYYI6UqRA4hFRJR2TJqtuOZdsN0vDvbD2peYNtV3/OejcoDcKFsK5WqbWxALUXLmEg5DSxrsVhUF/Uq44lVs23HehoOIjyBDBnts3VEhSPe3ujjagwY0hRXMcusM2tP5ywWQUQSimTOYeMr/siXbdlNS+nEgiRfjPIuxCEds+LYQ5RRglFKXpHOzxDkhMWVTpowTuQk+zAIx9aGTVhiEzsu/WJY+9CONLSHkAtkiglyNrZuYQwcKIbK/W3YMr4cV7Xi6h1HVIwZz8T+8ffwAJ1DyqYQm2Ib1gba8QbfyVT7DHAQUpzmgszhSpN1ijCITTUBH2+qcsNhTJYDIhRBl0Kjs3bhHRzX2eiTBIT8kwLtFGdt5AGlObT5KiH+8zT5/jA5mXyfNdzo5uJb8pzPL4etAsCuciEoS7s+HpCyJNH6RsTp6+KkhgY/L5K0dt+wZff5Rqb/PD6E9yfnr9nL5bJ3HTbD1aP/tXk+fFrMTha9gTPvjL2rzK/74egiGlj31L2cPD72ZqukHzrDr8MLb/jykCejf0K7+xill6Leca8W9vLr3elp7zqJOMvqzX+TB+fbtyy68qb98JLnT4g/Mnhx80W3M24sT4kc4nz+1O2+4pFFXlplODv492XbNx/lo5+A5faoaRD2KxeqSkh+3sy0hMTmuFANprr5CAlUGm19S/eOIFftjsSBquH67Ph+59zpug2v16vbTffc9ur1frPpXNid047rbJvMGsUBxB6jY6J96Za7ps3nAHEWCKAxcHPOctXphPGJxT6SqBLSW/UIGBVwx3R7FvbMk3Ilcjaizs/0ZcziVbpcjVKjcsXkNb3mnbEEvteUHWevKd8CJlMCunNrYgvFbCFVMmZonsvUqc5RlUKuejvXbTaoub5nCZJNU9BQrYzFeQrV6WRapMYS62/NRFgU0tvzu+K5fRjY4b9tDpROTLSC0LF0QdUR3kwXN/C2gbwJuPHuFNqa7+Qx0S9LJVRygtdI9n/94okmSEmS/qAT3WxBl7q/cfdHL/rh/KGBwV84H/ytc1XLtzetT/JpHZaydBTPyY7b7dqhBphqee0tEWfIqc6q+XyeF9xz3brFlXlLk8Cya1YEOFdNeXXHXoBapRXrqAlYAj9wXsr3IeZyQiOJJGTqrVSK4xErTwRCrzyheuXLY/epPZcqdRKW8j1ZL1Xrmkb86UaHA6z1lPhGfRaMx78q9o6tHT8qTrXxSEITfdLTb/UBLzBTZonq24zvGn/PwHvO94VlkkssUhFqlEv4+E9FN+SWgTBmOZVh3ygEu0OiwClXUwh+Kb0xU8yhcjEl/7+ZmqSgAAa1zgpS2Nf7RaCfAE12Bs3G6QezpvvZrNlH134jfivZydMhx9v/AQ==</con:value></con:property><con:property><con:name>SAMLBAU2_5</con:name><con:value>nVbbcuI4EH3PV1Cex5SxbAhgV6DK3BJ2cuWSyeRlS8ht0I4tgSUbM1+/sokdICSb2SeX2q3u091HR7oUOAwsxxUCIkk5q4z6be1vq2XbPrpo6QgaoNdrvq3PvZalN5rInOMG1Osm0iojIWIYMSExk23NQmZNN03dbE1R00E1B1nVWg29aJUniIQKrVyqalcaBkw4edq2FkfM4VhQ4TAcgnAkcSbu7Y2jPB1cYNI6lzuUecKos5Ry5RgGqXpAIAhIlfDQuDQOfC494UzogmEZR/Ca0xNt7XXvZrOpbmpVHi0MCyFkINtQPp6gi29a56zYDN6I+Xy37mHGGSU4oL9xBuoW5JJ7FTdY8IjKZfhBaNMwURZah5ToxKyzb5rxliBH98VIByAjgXWxxGYRbAw+RMAIVGbjUVv79rUJ7vZOI8yEz6NQHK3/DBKwBAK+Ak8XRWUFuq9HPNGuziUQZ8RIEAuawF1GkxUmICoPEfg0vaFCkc8TlXz8lVQUDAPyJyO5NPZxKtjGic706QKE/D/z2p/VLsoTDmLoBP5P2/hph6tQvMzTB3dwdXHHxfP5IHTbOYR95x2octSv62Oilrx63TRbvtDEZOPZy/WsQRovaeLR815SI3fr7tNfN3GYWLJ2zkOZ3G49E23972x2cwNGTI1tfCvmvPXjbvxoPNl4bJ49JtdsfoVGm1myrjeX4yd+9dRf96eNq1795/Y6ZOl10uII8/vf4aIfu9PZuvnL957d1Z1M/Rf0MHV/3PefH9MV7p4NfTn5Dkb6aF3PthvGpt6g/VbTfg2HxkIOJvH8HyCyWGbUGPUrQzUvLD+XlsxCPd3PXZ1Vpk9CApNaJ9uVyYoTK/GhnqOGuVsPuo1Bz+q5dqvR65uD4QDVkTlELmraNhoOu4X+7FAcQexx5tMsV6awO/58DpCEjgDmQaQnPCZLENonEftY4sqIjdXB4EzAlCsFb7aQbV10e63GRatrWXav5ZpWw224dbvZb1pDrXLH5T27j1xfQnSg3iY6UO8xELqikEl8xnOhiC6kaskaJ7EMzGqCqwxidQlEmQ47Vr11YQgargLIABsh9+IAqqvlKm+QIXZfS8dE5FbCeeQ5ROSH8MMaj/8V7VA+Hs0cRFZQF9RI4d1dZDkXRTXvqq6fvLOK8G7s0eysqd7KiJIdksNfb5TJuFLypSirwF26HxsOQhvHVZXZvISSkvnlda3UXulBpxjMGlfX1ThJ4nwUzUzrIhXeMA3UNCZAYiVY2yn/BcwoQxhfuitK1EeZS/shvlgu2URiCaEiTiVffuGhMAGRPRRGivjpV18hBylV3ySk8pStF6j3RIb40ycHcUjmp8wP6rNRI3wb14lYe3lUnep1IClbZKvsZth+xgyqpIxH+8FPBTiV/NBYNrnEIhWb5rGEj/9UMo1qa5gQHjM56mu5YV83c5xyuwLnzeldmFybXy/bVHx42T7f3kyUgoVYK33pfzvrNKcLAbVL0BxLW0vVu1ElZ4s9nX4FeFKqG/X+Z1J9WEnnnfm9Za+nx+eh8y8=</con:value></con:property><con:property><con:name>SAMLBAU2_4</con:name><con:value>nVbfU+o6EH73r+jUR6a0pYVCR5jhp/aoqKAc9eVOTBeItCk0Kdbz19+k0AqIXs996mS72f1298uXnDEUBhW3zRjEnERU8XpN9R/HmlqoajY0C5svmm1VQXvxbUeznYbjV18qpjCpisdYAh5lHFHeVCuGaWmmqZn1e8NxDdOtWGWnWntWlQnETIQWLmVDVdIwoMzN0jbVJKZuhBhhLkUhMJdjd9y+vnKFp4tyTGrrbIMySxi35pwvXV3HZR8wBAEu4yjUz/Q9nzOfuWMyo4gnMWxz+qypbve+vb2V36xyFM/0imEYutHQhY/PyOxUbZ3km8H36DTarLuIRpRgFJA/SIK6Bj6PfKUdzKKY8Hn4RWhTNw0ZWoMUa9i06amqfyTI0P0w0h7ImCGNzZGZBxvBFGKgGJSHkddUT382wc3e+xhRNo3ikB2s/w4S0DUE0RJ8jeWV5eh+HvFIu1pngF2P4iBhZA1DSZMlwsCU2ximJL0iTJDPZ0o2fiVlOcMA/81IzvRdnAK2fqQzPTIDxv/PvHZntYkyQUECLfow7E3uwqVn/x7jhxsU1aL6r0X4vF54zQzCrvMGVDHq7fqQqAWvtpu6b5PGxZ138XuU4P44fbIX3enDZTi7TxeL1JmYabcTzGuLa29VnfHJ6Jzf3sSluWE9lXrnUXKbODY0atP6eDi+HJxcTszH2TysdaajxZ9liYbBA0nvdJv6r6+XN+e/0mHQvdFXSWVpJQ+lx9WTsbouQa9q6o9obQ9uk5I1vPDuHIu1hye3Hcuo257Tf77kvRIPwnvc/Khpt4Z9Yy4H4+TlFTDPl5IaXk8ZiHkh/r20SAvxtWnm6i6lPjEOlKstuUvKipsI8SG+K4a5Wfc7tX630m036rVOz+wP+oZtmAOjbTiNhjEYdHL92aA4gNiN6JTIXFJhN/z5HiAOXQbUh1hbRwmeA1O/idhDHCkeHYmDEVEG95FQcLtvVPv9erVhGZXaoDfoNBqWQG06drVar1sDVRlG/IbexO0ph3hPvU1jT71HgMmSgJR4yXMmiM64aMkKrRMemOU1KlNIxCUQSx12K3a9qjMSLgOQgPUw8pMAysv5MmuQzjbfioYwy6xZdzHLzuCXJR7+y7shfHwiHZispwNionDkKjLzYr4ounFwZeXh24lP5FETreUxwRsk+78+GCOpUtBlW1UOu/A+NOxF1g+LKpL5a4IL3heXtdB6oQatfCwrVF6Vk/U6yQbhSKWLRXjd1A1HHwNOhFy930cLoHoRQv/RTVGgPshc2PfxJXxOxxxxCAVtlGz5g2fCGJh8JniC9ulP3yB7KUXfOKT8mK0biNeERPztgwO7WPoJ8634vEWx/zGuI7F28og6xduAEzqTK3kvvH9BDByJsEQIWRTvBj8W4FjyfWPR5AILF2x6STh8/UeRCtVUEcZRQrnXUzPDrmpmOPn7EtwPp09hMmXeXrUp+/Kqfby+Ggv9CpFa+JL/dtZIRhcMYhcjGZammopXo0hOZzsqvQV4VKhrdvc7od6vpPXJ/Nmy09PD89D6Fw==</con:value></con:property><con:property><con:name>SAMLBAU2_3</con:name><con:value>nVZdd6o6EH3vr2DRx7OQgFKFVV1LQVvO0dYr/fD05awYoqaFYEnwo7/+JlioWtvruU+sDJOZPTM7O7lkMI5Mp80YTjlJqOJ7TfUPsMLapDExtCoOoVabhFMNQsPWbAOAiWGCaVg3VMVnLMM+ZRxS3lRNYFQ1w9CMxh24cCzbqTYqFrCeVOUBp0yEFi4VoCrrOKLMydM21SylTgIZYQ6FMWYOR07QHvQd4enAApPautyizBOmrTnnC0fXUSXECEcRqqAk1i/1PZ/LkDkBmVHIsxS/5wxZU33fu1qtKqtqJUlnugkA0IGtC5+Qkdm52jorNuPQp9Nku3YhTShBMCJvUIIaYD5PQqUdzZKU8Hn8RWhDN4AMreE10pBRo+eq/pEgR3dipD2QKYMam0OjCDbCU5xiirByP/Kb6vlpE9zuvUshZdMkjdnB+u8gYbrEUbLAocaKygp0p0c80q7WJUaOT1GUMbLEN5ImC4gwU4YpnpJ1nzBBvpAp+fiVNSsYhtHfjORS38UpYOtHOuORGWb8/8xrd1bbKA8wynDLbdR/b/jg5oU/P7zdXI/A/fKHefVycZO+NHMIu85bUOWo39eHRC159b7prd+24gb59evurXO7Xk8eLv7xA7vTXtUbxjDtd++fb5fDaw77nsH7G/+Jz0Juu43QvFozw5ste9eLSfI8Dbpgo5/VAmJfXCcxWY99Xg2fR+YjHA6ugivvfhjdd57oIJqM6WNtXv8RgWnfGFSjh8dx+nP+DMf1zcp6sa66LrXAlHujs0n3zet747bRr3EaUC+6/938qGm3hn1jIQdBNnnGiBdLSQ3fU3piXpB/Ly3SQkJtmrs6C6lPjGPK1ZbcJWXFyYT4kNARw9yuu52Lrmu6bdvudDyj2+uCGjB6oA3qtg16vU6hP1sUBxDdhE6JzCUVdsuf7wGi2GGYhjjVlkmG5pip30T0IIeKT0fiYCSU4btEKLjtmlan4XYvaqblNeo90PMartmzXNC1bKvdUZWbhN/S27Q95TjdV297T71HGJEFwVLiJc+ZIDrjoiWvcJnxyKgsYYXiTFwCqdRhx6w1LJ2ReBFhCViPkzCLcGUxX+QN0tn2a2oQsdzq9dvB8I8b/DHzY/hllYf/ioYIn5BIByZL6mAxVHzkNjKLej7VXTt6axXh21lI5GkT3eUpQVsk+78+SCPZUjLmo7ACebnh0LAXXD+sq8wXLgkq2V9e2ULxhSa0iuG8wsprJVsus3wcdal3qQivGzqo6wFGmRCtzV3ygqlehtBPui9K1AeZS/s+vozPacAhx7Egj5IvT3gsBJjJx4IvyL8+9SWyl1L0jeM1P2ZzI/GmkIi/fXYgB0k/YR6KzypJw49xHYm1k0fUKV4InNCZXMnbYfMFN1AiwhIhZ0m6G/xYgGPJ941lk0ssXLBpknH89R9F6lRThQglGeW+p+aGXe3McfLNAjsfTp/C5Pr8fuGu2ZcX7njQD4SKxVAtfcl/O2skpwvCYhcjOZamuhZvR5Gczna0+h3gUblueOA7ud6vpPXJ/Nmy09PD89D6Fw==</con:value></con:property><con:property><con:name>SAMLBAU2_2</con:name><con:value>nVZdc9o6EH3vr/C4z8aW+bQnMGNwSHwDaRJI2ulLR8iLLWJksGSg/fVXMrEDhOSm98mj9Wr37O7RkS44Xia263EOmaAp0wK/q/9qt50WECBGs4lmRqPhNIxZa143OraNcHuGMJkjXQs4zyFgXGAmurptobqBkIE6U6vlNjuuZdXqrfpPXXuCjMvQ0qVm6dpumTDuFmm7ep4xN8WccpfhJXBXEHfijUeu9HRxiUnvXexRFgmzXizEyjVNUgslxiQhNZIuzQvzyOci5O6ERgyLPIOXnCHv6i97t9ttbVuvpVlk2pZlmZZjSp+Q0+ir3vtSboYwYPN0vx5gljJKcEL/YAVqDCJOQ81LojSjIl6+ExqZyFKhDdgRg6AG+6qbrwkKdJ+MdAQy49jgMUZlsAeYQwaMgPb4EHT1r5+b4H7vNMOMz9NsyU/WfwcJ2AaSdAWhwcvKSnSfj3imXb0LIG7ASJJzuoFbRZMVJsC1uwzmdDeiXJIv5Foxfm3HS4YB+ZuRXJiHOCVs80xnfBoBF/9nXoez2kd5wkkOvWbavp5GG3gU4Wg86pvBU/4zosmjtX3uFhAOnfegqlG/rE+JWvHqZdM1W8T3f3x804wHc1+Mpk+bSRys0WLRXMQ3fLT20K037LQbeBwkO8SylpVPV1Q8Ne+Sxnfz6set3bnK/OiW1cdfHv+5nU/jkI0ffj4v/Lr13ffurch5HtSJuAkeRR0u19ft0Ux4i3yzgcWAWKN4e9MKggaNOuYaR/c4IsSZ+P+ILym6e7oyV9vn9tXse9h/vp7dd19rOqzh2FjKwSSfLYCIcqmoEfjaUM4Li4+lRVloaMwLV3el9IkLYELvqV1KVtxcig8NXTnM/fqy37oc2APPcfp9H10OL62GhYaWZ7UdxxoO+6X+7FGcQBykbE5VLqWwe/58DJAsXQ4shMzYpDmJgesfRPSxwFrAHuTBSBmHaSoV3OmgttOx+3XbHiDUQsj27VanZbW8pofqw76u3abiG/uWeXMB2bF6O0fq/QCErigoiVc855LoXMiWrPEmFwmqbXCNQS4vgUzpsGs3Ok2T0+UqAQXYXKZhnkBtFa+KBpl8/7UNTHhhHY28yd2vweSXXRzDd6s8/Vc2RPqEVDlwVVIf5FDhzW3UdptlPe/U7ZzcWmV4Lw+pOm2yuyKjZI/k+NcraRRbKsa8FlYirzacGo6Cm6d1VfnCDSUV+6srWyq+1IReOZw1rq1r8vDlxTjaSu8yGd5EptU2J0ByKVq/p+kzMLMKYX7qvqhQn2Su7Mf4chGzicAClpI8WrH8xGNhAlw9FgJJ/t1nXyJHKWXfBOzEOdsgkW8KhfjDZwdxifKT5jv52aZZ+DquM7EO8sg65QtBUBaplbodfr/DDZLKsFTKWZodBj8X4FzyY2PV5AqLkGya5QLe/6MpnerqmJA0ZyLw9cJwqJ0FTvF7Be6r05swhT6/XLg7/u6F+2M8mkgVW2K98qX/7WzQgi4E5C5OCyxdfSffjjI5iw60+gXgWbnu+NZHcn1cSe+N+a3loKen56H3Lw==</con:value></con:property><con:property><con:name>SAMLBAU2_1</con:name><con:value>pVZdc5s6EH3vr2DoMxZggm0m9gzh45bm23bSpC8dWaxttSAIEraTX38FDo7tOLlJ7xOjZbV7tHt0Vsccp4npuJxDIWjGlMjvq796k850QoipTY2OqVkTE2uTtmVo9kQ39e7E6ExsS1UizkuIGBeYib5q6kZbMwzN6I512zmyHbPd0o3eT1W5hYLL0NKlpavKKk0Yd+q0fbUsmJNhTrnDcArcEcQZuednjvR0cINJHRyvUdYJi8FciNxBiLRiIJAkpEWyFB2jHZ/jmDsjOmNYlAU854x5X33eu1wuW8t2KytmyNR1Hek9JH1iTmdf1cGXZjPEEZtm67WHWcYowQl9whWocxDzLFbcZJYVVMzTN0IbyNCr0BqsiEYMi31V0UuCGt0HI+2ALDjW+BwbTbAhTKEARkC5GUZ99evHOrjeOy4w49OsSPne+nOQgC0gyXKINd6crEH38YgHyjU4BuJEjCQlpwu4qGiSYwJcuSpgSldnlEvyxVyp26+seMMwIJ9pyTHaxilhowOV8ekMuPibfm33ah3lFiclDKZ3Zje/Ca4vPfv3GC3/ZNatu4yCo8XK7dcQtp3XoDatfl7vE3XDq+dNISqHP7u54Y3+8S9H5oWH4ofIgNPv6R1ZnlxbbprNFjNxqj/2DP0puvg2vh/aT25OLm/a6cOf77NZ0Mb2tyuRH519mYhbADzxO6e+F18feXcJcGs4z0ngJUPbOg1XpvezN36ynyw2vSBP7uMKXXF/lVs/rnPfvn40f1xFd50ovufsS29u+/fFLfzw7Zimfnkb3vRfzrR9hl1jIwejcvIbiGiWFTUiXwllv7B4X1oqC421ae3q5JU+cQFMqINqVyUrTinFh8aObOZ6HZzYgWd6bq9rB74RhIFu6Uaou3qn19PD8KTRnzWKPYhexqa0ylUp7Jo/7wMkqcOBxVBoi6wkc+DqOxF9LLASsaG8GBnjMM6kgne9sGcGtqF3QsPyAqvrWkFoGuGRHrqB3T5RlYtMXLLLwp0KKHbVu7ej3kMgNKdQSXzFcy6JzoUsyQNelCIxWgvcYlDKIVBUOuyYVvcIcZrmkhkSMEqzuEyglc/zukCIr7+mhgmvrcNgXN+/N4+3/6+phPSJaeXAq7OcgOwmHBhDRnOQVwe2Do6rJrxbxrS6ZrKsoqBkjWT31wtbKppsqOKfuaOrBvTG9xN7f3mjX8ZfBjj7vwFkP17vRO/UBO23Y5MoXtCttM04lxNKatigIdMDbj20ysWirOnTqfS5kOGRgfQOGgEppcg+jrM/wNAmBPrQfNug3su8se/iK8WcjQQWkEqyK/XyA4+bEfDqcRPJy7r66MtpJ6Wsm4CVOGTzEvkGqhC/+0wiDqn8pPlKfpZZEb+060CsrTzynPJFIyibVatqmj2+QQqSybBUym9WbAc/FOBQ8l3jpsgbLEKyaVIKePuPUulqX8WEZCUTka/Whm2tr3GKxxycF6dXYep58vxAWPE3Hwh352cjqbopVje+9L+dNVrThYDcxWmNpa+u5FtXJmezrdnyDPDgeLGt8L3xsnuSwSvza8tWTffvw+Bf</con:value></con:property><con:property><con:name>SAMLBAU1_5</con:name><con:value>nVbbcuI4EH2fr3B5HreMZUMwuAJVhMuEjAlZIJkkL1uK3AZlbNlYMpd8/UomdoCQbGaLB0rtVvfp7qMjnXMchbbb4RxSQWOmDXst/Z8An1lVchYYlt84M2o2PjMadrVpVBt1B8CXvwB0bch5BkPGBWaipdvIqhqWZViNGXJcZLuWXXHs+qOu3UHKZWjpUkG6tolCxt08bUvPUubGmFPuMhwBdwVxp52R50pPFxeY9Pb5DmWeMG0vhEhc0yQVHwiEIamQODLPzQOfc5+7UzpnWGQpvOb0eUt/3bteryvraiVO56aNEDJR05Q+Pqfz73r7W7EZ/CEL4t26i1nMKMEhfcEK1AjEIva1TjiPUyoW0QehLdNCKrQBG2IQq8a+6+ZbghzdFyMdgEw5NvgCW0WwiRxICoyAdjsZtvTvX5vgbu8sxYwHcRrxo/WfQQK2gjBOwDd4UVmB7usRT7SrfQ7EHTISZpyu4FrRJMEEuHaTQkA3HuWSfD7X8vFrG14wDMifjOTc3McpYZsnOtOjc+Di/8xrf1a7KHc4zKB9G8yur5z4799RfXn5RJ0IbuyHpwm8bH63cgj7zjtQ5ahf18dELXn1uin6ibzkccy3TwF4V3959WRti2fPJ49XaS0Rk+zFCbbjCbm8NOczkXizEbArL2h6C3I/sHqT/jXdBqNm1+rZ/W83Xhp6fJneL8gQX6D7y8Uo+JHZN8Puzwf4tR48jwa1y5r3+OJXH26vH9ZX2fgSLdF4nPRh0CDidnkX81XXCWyBvzm/ni46P2A4MLdXvD66H/9Erbea9ms4NBZyMM2enoGIYqmoMexpAzkvLD6XFmWhvhHkrm6i9IkLYEJvq11KVtxMig/1XTnM3bp/Ue937W6n6Zx1e1Z/0Ec1ZA1QBznNJhoMLgr92aE4gtiNWUBVLqWwO/58DpBELgfmQ2qs4owsgOufROxhgbUhm8iDETMOs1gq+KDRsBt1+6KD6gj1kdOrNuxao1u1awpwt6dr17EYs3HaCQSkB+ptoQP1ngChCQUl8YrnXBKdC9mSJV5lIrQqK1xhkMlLIFU67MosZyanURKCAmxGsZ+FUEkWSd4gk+/+bQMTnltJHKe+S3h+CD+s8fhb0Q7p41PlwFVBFyBHCifuIlRU867q2sk7qwjfyXyqzprsrUgp2SE5/PRGGcWVki9FWQXu0v3YcBDaPK6qzOavKCmZX17XUu2lHrSLwSxxZVnJVqssH4WjtC6V4U3LRI45BZJJwdrO4t/AzDKE+aW7okR9lLm0H+LLxIJNBRYQSeJo+fILD4UpcPVQGErib776CjlIKfsmYCNO2bqhfE8oxJ8+OYhLlJ8038i/tRzh27hOxNrLI+uUrwNB2Vyt1M2w/YwZVEpZnO4HPxXgVPJDY9nkEouQbHrKBHz8RVMa1dIxIXHGxFBpgTTs62aOU2wTcN+c3oXJtfn1st3wDy/b+5E3lQoWYb30pf/tbNCcLkQ+M6V/jqWlb+S7USZn8z2dfgV4Uqrrtd5nUn1YSfud+b1lr6fH56H9Lw==</con:value></con:property><con:property><con:name>SAMLBAU1_4</con:name><con:value>nVbLcuo4EN3fr3A5y5SxbN6uQBXPGSckIRByU2ymjNwGBVs2lswjXz+SwQ4QksmdDZTare7T3UdHumFO4JtWizGIOQmpYncb6j/I82ZeHc20suvVtZJXqWq1Ei5qrosA1cSvieuqYjOWgE0ZdyhvqCYyipphaEbtGVUthKwiKpRNc6oqLxAzEVq4FJCqbAOfMitN21CTmFqhwwizqBMAszi2xq37gSU8LSfDpDZv9ijThHFzwXlk6TouuIDB93EBh4F+o5/43LjMGpM5dXgSwyGnyxrqYe9msylsioUwnusmQkhHdV34uIzMr9Tmr2wzuDb1wv2649CQEuz45N2RoO6BL0JXafnzMCZ8EXwR2tANJENrsMUaNkr0StU/EqTofhjpBGTMHI0tHCMLNgIPYqAYlMnIbqhXP5vgfu9z7FDmhXHAztZ/BgnoGvwwAldjWWUZup9HvNCu5g1gy6bYTxhZw4OkSeRgYMowBo9sB4QJ8rlMScevbFnGMMB/MpIb/RingK1f6EyXzIHx/zOv41nto7w4fgLNVptevz0Zt/PBYPo+jsqL6axY79MO3bJGCuHYeQ8qH/VhfU7UnFeHTU/R2/Vs+DRvB5V3m7/4xuNwubzbTf3KaDQfPbSK5ZcNTGb0qb7c7ZJ39DgcdkvBjvSfptHUpR3frK90b9xbv97hX1N73vp79Baa1ems/VL5/Y4Wr7d6cflXb9ouBWhau20bg9/t7vNqmtjrdX8SvkaTV32y2wRlbpDFe2mwelhMat3FgP2qLofT69fJ3W3JxbMlGBFnjY+ajms4NWZyME5mb4B5tpTUsLtKX8zL4d9Li7QQV/NSVyuS+sQ4UK425S4pK1YixIe4lhjmft1rV3ods9OqV8vtrtHr91AJGX3UQtV6HfX77Ux/9ijOIHZC6hGZSyrsnj/fA8SBxYC6EGvrMMELYOo3EbsOdxSbjsTBCCmD51AouGm0e2alVqu1ar1euWx2e2axa1QE5GKr3zWEDj+E/JE+xi2PQ3yi3gY6Ue8RYBIRkBIvec4E0RkXLVk564T7RmHtFCgk4hKIpQ5bZqlW1hkJIh8kYD0I3cSHQrSI0gbpbP9vag5mqTXtLmbpGfyyxPNvWTeEj0ukA5P1tEFMFC5cRWZWzBdF18+urCx8K3GJPGqitTwmeI/k9NMHYyRVcrocqspg597nhpPI+nlReTJ3TXDO+/yyFlov1KCZjWXlFFaFZL1O0kFUpdLFIrxu6KiqjwEnQq52z+ESqJ6H0H90U+SozzLn9lN8CV/QMXc4BII2Srr8wTNhDEw+E2xB++1P3yAnKUXfOGz5JVvHF68JifjbBwe2sPQT5qH424Sx+zGuC7GO8og6xduAEzqXK3kv7L4gBg5FWCKELIyPg18KcCn5qTFvco6FCzbNEg5ff1GkQjVUB+MwodzuqqnhWDVTnHwXgfXh9ClMqsyHq3bLvrxqX+8HY6FfgaPmvuS/nTWS0gWD2MVIiqWhbsWrUSSn8yOVPgC8KNSVUuc7oT6tpPnJ/Nly1NPz89D8Fw==</con:value></con:property><con:property><con:name>SAMLBAU1_3</con:name><con:value>nVbbcuI4EH3PV7icxynjCwaMK1AFBmbYDYEASyV5SQm5AQVbdiyZy3z9SiZ2gJBsZp9care6T3cfHemGoTCw3BZjkHASUaXfaajPtapl+waaa4a9cDR7jpFWr5Tr2mJhLhw8t+ZV01aVPmMp9CnjiPKGahlmWTNNzXSmRtWtOK7tlGy78qQqM0iYCC1cSoaq7MKAMjdL21DThLoRYoS5FIXAXI7dSWtw6wpPF+WY1ObNAWWWMGmuOI9dXcclHzAEAS7hKNRv9BOfG5+5E7KkiKcJvOX0WUN927vdbkvbcilKlrplGIZu1HXh4zOyvFabV/lm8Pt0ER3WHqIRJRgF5DeSoAbAV5GvtIJllBC+Cj8JbeqmIUNrsMMaNm16rervCTJ034x0AjJhSGMrZObBxrCABCgG5Z9xv6Fef2+Ch73TBFG2iJKQna3/DBLQDQRRDL7G8spydN+PeKFdzRvAbp/iIGVkA3eSJjHCwJRRAguyuyVMkM9nSjZ+ZcdyhgH+k5Hc6Mc4BWz9Qmc6ZAmM/595Hc/qEGWGghSaQYIfRpz9tqqJ6TzaobWdMf12ydjPQSODcOx8AFWM+m19TtSCV2+bBunIG3TIuDb7YeznL7+eBtwyVr2guo768V+zzbA1mAw5tFDP29Gpd78XfQ4RgXQzL4/S9hjF+NF+eBr5O/pyVSPraF13xsPl03a+Jv59Nxq2BzZ4od7rO4N4XB7GA6v9E55mdLpgNQfdGd4jqyVkymOvxr3KPam8wL6m/x1esXXVx6Nf99XZcgg/6r15zWi813Rcw6kxl4NJOn8BzPOlpEa/o/TEvBD/WlqkhfjaInN1Y6lPjAPlalPukrLipkJ8iO+KYR7W3Xa161leq153nI7Z7XUN2zB7Rsuo1etGr9fO9eeA4gyiF9EFkbmkwh748zVAHLoMqA+JtolSvAKmfhGxgzhS+nQsDkZEGUwjoeB1o+t1LdO0eu1KpWVX7brl2JVOrVq120KV26pyF/EhHSatBYfkVL3rJ+o9BkxiAlLiJc+ZIDrjoiWvaJPywCxtUIlCKi6BROqwa9lORRcMigOQgPUw8tMASvEqzhqks8PX0hBmmbVz25qMnr3Js5Udw0+rPP+XN0T4+EQ6MFlSG8RQ4cJtVM7r+VC3ffHWysO3Up/I0ya6yxOCD0hOf72TRrKlYMx7YTnyYsO54SS4fl5Xkc/fEFywv7iyheILTWjmw3lFpddSutmk2ThqUu8SEV43daOmTwCnQrT202gNVC9C6N+6LwrUZ5kL+ym+lK/ohCMOoSCPki2/8ViYAJOPhb4g/+67L5GTlKJvHHb8ks0LxJtCIv7y2YFdLP2EeSQ+2yjx38d1IdZRHlGneCFwQpdyJW+H/SfcwJEIS4ScRclx8EsBLiU/NRZNLrBwwaZ5yuHzP4rUqYaKMI5SyvsdNTMca2eGk+9jcN+dPoTJ9Pntwt2xTy/ch8HtRKhYiNTCl/y3s0YyumAQuxjJsDTUnXg7iuR0eaTVbwAvyrXTMb6S69NKmh/MHy1HPT0/D81/AQ==</con:value></con:property><con:property><con:name>SAMLBAU1_2</con:name><con:value>nVZdc6o8EL7vr2Do5RkEFBUZdYZC6aHVfmE7rTedGILmFIIlwWp//UmwULXa1/NeMVk2u8/uPnmSLgVJXLdsSlHGcEok3+3JL5E5mcBJY6I0jHaoGG2gKwCAljJpanWz3pgYBtBkyac0Rz6hDBDWk+ua3lB0XdHNkdaymm1LN2pNsz2WpUeUUR6au9T4rmUSE2oVaXtynhErBRRTi4AEUYtBK7CHA4t7WqDEJPe7a5RFwqw/Y2xuqSqshQiiOIY1mCZqV93y6YbUCvCUAJZn6DNnSHvy59739/fae6OWZlO1rmmaqnVU7hNSPD2V+yflZhT6JErXaweQlGAIYvwBBKghYrM0lOx4mmaYzZIDoXVV10RoBS2hAnWDnMrqV4IC3ZGRtkBmFCh0BvQy2D2KUIYIRNLDvd+TT4+b4HrvKAOERmmW0J31v0FCZIHidI5ChZaVleiOj7inXf0ugpZPYJxTvEDXgiZzABGVbjMU4eUAU06+kErF+KUlLRmG4L+MpKtu4uSw1T2dcfEUUfZ/5rU5q3WURxDnqO8Z48iA7sxdLh/DhjNeDbVpnY2fg9Frr4Cw6bwGVY36c71L1IpXn5tmv/8MLseNcIHxm20/+86F8YDdfPo6dpuzwCV3OQpuo7tHeBfRYZRHLefaizFof4DkvoF+mRpc6Oqz83oR3UcnD/6rrRnziyuvBa70Rj0crEbORzN31XioDy6zxlX7arQyX28e0+n8IViZZ28tjXV88vBrsBqn09+Xz5578w46zHg6wa3k8vYpadtu9HzRvH1LO9PeV02bNWwbSzkI8skfBFm5FNTwXcnj8wLsZ2kRFhwqUeFqzYU+UYYIk/til5AVK+fig0OLD3O9Pj9rnTt1x+50TNPVz71zzdB0T7O1dqejed5ZqT9rFDsQnZREWOQSCrvmz88AYWJRREKUKYs0hzNE5R8iuoABySf3/GCkhKJRyhXcbTqm0dQ8zdN10+gYulf3XPvcbNv2mcONsnSdshtyk9kRQ9m2ene21PseQTzHSEi84DnlRKeMt+QNLHIW67UFqBGU80sgEzps1Q2zqVKczGMkAKtJGuYxqs1n86JBKl1/6wqAtLAOBnZw++IEL/XiGB6scvdf2RDuE2LhQEVJZ4gPFe25jbSyngN1d3ZurTK8nYdYnDbeXZZhuEay/euLNIItFWO+CiuRVxt2DVvB1d26qnz8DMOK/dWVzRWfa0K/HM4bqL3V8sUiL8bRFnqX8fCqrmptNUAw56K1GqWviKhVCPWo+6JCvZO5sm/jy9mMBAwwlHDySMXyiMdCgKh4LPic/MtjXyJbKXnfGFqyfTYn5m8KgfjHZwe0oPDj5lv+eU+z8Gtce2Jt5OF18hcCw2QqVuJ2WB3gBkx5WMzlLM02g+8LsC/5trFqcoWFcTZNcoYO/5GETvVkAGGaE+a7cmHY1M4CJ1vNkfXl9C1Moc+fF+6SHrxwn4aDgKtYAuTKF/+3s4ILukDEd1FcYOnJS/525MnJdEOrPwHulWvT1X6S6+1K+t/M3y0bPd09D/2/</con:value></con:property><con:property><con:name>SAMLBAU1_1</con:name><con:value>pVZbc9o6EH7vr/C4jxkj29yMJzADNrTuIYEAIS0vHUVeg1JbdiyZkP76IxtMgJCctGeGGUbr1e63F327lxxHoWl3OYdU0JgpnttWf9439XqAddDA0nWtZvkNraVjQ6veV1s4gFrNB19VPM4z8BgXmIm2aupGVTMMzbBmesOu12y9WjEta6Eqc0i5NC1VKrqqbKKQcbtw21azlNkx5pTbDEfAbUHsafdqaEtNG5eY1M7lFmXhMO2shEhshEjFBwJhSCokjtAlOtK59Lk9pUuGRZbCzqfP2+ru7tPTU+WpWonTJTJ1XUd6C0kdn9PlZ7XzqbwMvseCeHt2MIsZJTikv3EO6grEKvaVbriMUypW0RumDWTouWkNNkQjRo19VtGLgwLdBy0dgUw51vgKG6WxCQSQAiOg3E68tvr5YxXc3p2lmPEgTiN+cv4zSMDWEMYJ+BovIyvRfdzimXR1LoHYHiNhxukarvM2STABroxTCOhmSLlsPp8rRfmVDS87DMiflOQSHeKUsNGZzLh0CVz8Tb0Oa7W1MsdhBp25c53Vr8c8bvzygosrujB71bsA9dLvVruAcKi8BbUv9e582qj7vtpdGvMv/McFu+sTWr34CkFvfuMgcHTDCx710Xi2Hn3Fm9/3lnt7f9ubt34Ngsm3vvloureT1HJb48V3p4muhneb+Gnw6avrGRO4XfiJv2APbp+jIelnSRY1pt07ccPqMLYWTTPqWua1d3G3cZKb3/G3h39qDD9kX+Z3iUV+WHx+NVuMqp9GNxcujkYRumk4t9WHIB5Y7ZeYDmM4FpZ0MM3uH4CI8pi3hucqA1kvLN6nllxCfS0oVO0k5ycugAm1k9/KacXOJPlQ35bF3J77vUbfMZ1uq1nvu0Z/0NdrujHQu3qz1dIHg17JP1sUJxCdmAU095Uz7LZ/3gdIIpsD8yHV1nFGVsDVdyy6WGDFYxP5MGLGYRZLBjeblutUB2arb7bqljVwu0ZDgu43apY+0GuGqlzHYsRGaTcQkB6zd+uIvSdAaEIhp/i8z7lsdC5kSh7xOhOhUVnjCoNMDoE052HbrFl1xGmUhJADRlHsZyFUklVSJAjx7b+pYcIL6aQ/K97fm+GdfiszIXV8mivwPJYeyGrCqzFUlb9dIK8Crp0dV6X5bubT/JnJtIqUki2S408v3ZK3yb5V3GF3Oi5B73X/4O5PZ/rT+EsDw/9rQNbj9U30Tk7QaTn2jvw1PXBbjnM5oSSHdcpmesSVx0q2XmdF+zRzfk6leWQgvYmmQDJJss+z+BcwtDeBPjTf9qhPPO/lx/gysWJTgQVEstmV4viB5WYKPF9uPPlYNx/dnI5cyrwJ2IhzMieUO1CO+N01idgk15Pisfx7itOXwM/ZOvAj45QbjaBsmZ/yafb8RlOQWJqlkn7j9ND4OQPnnB8L90neYxGym+4zAW9/UXJebauYkDhjwnPVQnDI9QVO8ZyA/aL0ykwxT3YLwoa/uSB8vxpOJetGWN3r0v9W1mjRLgTkLU4LLG11I3dd6ZwtD2bLDuDZ8dKoDd4bL8eRdF6JX0sOcnr6Hjr/Ag==</con:value></con:property><con:property><con:name>SAML</con:name><con:value>pVZbc+I6DP4rTPaxE5JAQkOmMMOl3ZNTaLtNb9uXHeOI4G1ig+1w6a8/doAs0Mthd58yVmTpk/RZ0plAWVoLOkIAl4TRyjJLqQgKacvIOQ0YEkQEFGUgAomDqDMcBLWqHaDtFaMS9lvGDwcjv4GdUxO7UDddvw4mcuoNs+67tt/wodYYI6UqRA4hFRJR2TJqtuOZdsN0vDvbD2peYNtV3/OejcoDcKFsK5WqbWxALUXLmEg5DSxrsVhUF/Uq44lVs23HehoOIjyBDBnts3VEhSPe3ujjagwY0hRXMcusM2tP5ywWQUQSimTOYeMr/siXbdlNS+nEgiRfjPIuxCEds+LYQ5RRglFKXpHOzxDkhMWVTpowTuQk+zAIx9aGTVhiEzsu/WJY+9CONLSHkAtkiglyNrZuYQwcKIbK/W3YMr4cV7Xi6h1HVIwZz8T+8ffwAJ1DyqYQm2Ib1gba8QbfyVT7DHAQUpzmgszhSpN1ijCITTUBH2+qcsNhTJYDIhRBl0Kjs3bhHRzX2eiTBIT8kwLtFGdt5AGlObT5KiH+8zT5/jA5mXyfNdzo5uJb8pzPL4etAsCuciEoS7s+HpCyJNH6RsTp6+KkhgY/L5K0dt+wZff5Rqb/PD6E9yfnr9nL5bJ3HTbD1aP/tXk+fFrMTha9gTPvjL2rzK/74egiGlj31L2cPD72ZqukHzrDr8MLb/jykCejf0K7+xill6Leca8W9vLr3elp7zqJOMvqzX+TB+fbtyy68qb98JLnT4g/Mnhx80W3M24sT4kc4nz+1O2+4pFFXlplODv492XbNx/lo5+A5faoaRD2KxeqSkh+3sy0hMTmuFANprr5CAlUGm19S/eOIFftjsSBquH67Ph+59zpug2v16vbTffc9ur1frPpXNid047rbJvMGsUBxB6jY6J96Za7ps3nAHEWCKAxcHPOctXphPGJxT6SqBLSW/UIGBVwx3R7FvbMk3Ilcjaizs/0ZcziVbpcjVKjcsXkNb3mnbEEvteUHWevKd8CJlMCunNrYgvFbCFVMmZonsvUqc5RlUKuejvXbTaoub5nCZJNU9BQrYzFeQrV6WRapMYS62/NRFgU0tvzu+K5fRjY4b9tDpROTLSC0LF0QdUR3kwXN/C2gbwJuPHuFNqa7+Qx0S9LJVRygtdI9n/94okmSEmS/qAT3WxBl7q/cfdHL/rh/KGBwV84H/ytc1XLtzetT/JpHZaydBTPyY7b7dqhBphqee0tEWfIqc6q+XyeF9xz3brFlXlLk8Cya1YEOFdNeXXHXoBapRXrqAlYAj9wXsr3IeZyQiOJJGTqrVSK4xErTwRCrzyheuXLY/epPZcqdRKW8j1ZL1Xrmkb86UaHA6z1lPhGfRaMx78q9o6tHT8qTrXxSEITfdLTb/UBLzBTZonq24zvGn/PwHvO94VlkkssUhFqlEv4+E9FN+SWgTBmOZVh3ygEu0OiwClXUwh+Kb0xU8yhcjEl/7+ZmqSgAAa1zgpS2Nf7RaCfAE12Bs3G6QezpvvZrNlH134jfivZydMhx9v/AQ==</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>pgentry</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>StreamListView</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\StreamListView</con:value></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_FINAL_REGRESSION_1.0.1.5</con:value></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>off</con:value></con:property><con:property><con:name>QC_ReExport</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>enabled</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>primaryemail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>Node_ID</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_5</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9816D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_4</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9815D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_3</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA99A8D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_2</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA99A8D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_1</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9818D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_5</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9706D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_4</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9705D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_3</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9975D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_2</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9975D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_1</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9708D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE072D07F07FC9AC4E0401F0A07993B75</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_5</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA97C1D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_4</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA97C0D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_3</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9995D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_2</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9995D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_1</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA97C3D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_5</con:name><con:value>urn:dece:userid:org:dece:FC962147288BCA6AE0401F0A05993FA4</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_4</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_3</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_2</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_1</con:name><con:value>urn:dece:userid:org:dece:188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_5</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA986CD1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_4</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA986BD1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_3</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA99BBD1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_2</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA99BBD1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_1</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA986ED1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_5</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA975CD1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_4</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA975BD1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_3</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9988D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_2</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA9988D1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_1</con:name><con:value>urn:dece:userid:org:dece:EB6EC2CA975ED1EFE0401F0A07990FFB</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:188AE1B465CC3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>nodeoid50</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeoid40</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeoid31</con:name><con:value>3711</con:value></con:property><con:property><con:name>nodeoid30</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid21</con:name><con:value>3611</con:value></con:property><con:property><con:name>nodeoid20</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid14</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid13</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeoid12</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid11</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeoid10</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdportalCS2</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportal2</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeDLP</con:name><con:value>0914</con:value></con:property><con:property><con:name>NODEACCOUNTID_5</con:name><con:value>urn:dece:accountid:org:dece:FC962141807C630BE0401F0A079939F8</con:value></con:property><con:property><con:name>NODEACCOUNTID_4</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_3</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_2</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_1</con:name><con:value>urn:dece:accountid:org:dece:188AE1B465CB3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn:dece:accountid:org:dece:188AE1B465CB3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>microService</con:name><con:value>ON</con:value></con:property><con:property><con:name>loop</con:name><con:value>3</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>idempotentdelaymillisecs</con:name><con:value>60000</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>all</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2015-04-30T19:33:44.714Z</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>DeleteCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>cidUK</con:name><con:value>urn:dece:cid:file:Pat_Do_Not_Touch_UK_UK_BBFC_Rating_R18.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certspath</con:name><con:value>C:\certificates\</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>audiencelist5</con:name><con:value>urn:dece:org:org:dece:coord:cs</con:value></con:property><con:property><con:name>audiencelist4</con:name><con:value>urn:dece:org:org:dece:cs</con:value></con:property><con:property><con:name>audiencelist3</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist2</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist1</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>APItestSuite</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>apid</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>alidUK</con:name><con:value>urn:dece:alid:file:Pat_Do_Not_Touch_UK_UK_BBFC_Rating_R18.txt</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>ActualStreamHandleIDList</con:name><con:value/></con:property><con:property><con:name>accountListDLT</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>accountList</con:name><con:value>urn:dece:accountid:org:dece:15541CAF104D1E9CE05307991F0A0A7A</con:value></con:property><con:property><con:name>ACCOUNTID_1</con:name><con:value>188AE1B465CB3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>ACCOUNTID</con:name><con:value>188AE1B465CB3094E0533D991F0A7A41</con:value></con:property><con:property><con:name>AccountDisplayName</con:name><con:value>Ashwin_Acc_Create_20150615_015833</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
                byte [] tempByteArrRequest = testStepResult.getRawRequestData();
                String tempRequest = new String(tempByteArrRequest);

                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
                log.info(tempRequest);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

                byte [] tempByteArrResponse = testStepResult.getRawResponseData();
                String tempResponse = new String(tempByteArrResponse);


                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
                log.info(tempResponse);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}
</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.afterTestCase" name="TestSuiteRunListener.afterTestCase"><con:script>log.info "#####################    Listener Started ######################################"

import com.eviware.soapui.model.testsuite.TestRunner.Status

def tS = testRunner.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamListView tear down")

//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

log.info "          Listner StreamListview callled               "

def activeCount=myTC.getPropertyValue("ActiveStreamCountList");
assert runnerTC.status == Status.FINISHED;

int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info "  listner StreamCreateCount   :  $StreamCreateCount   "  

if(StreamCreateCount>0)
{
def myTC1 = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete for TearDown")

//	myTC1.setPropertyValue("tName",tC.getName());
//	myTC1.setPropertyValue("sName",tS.getName());


	def runnerTC1 = myTC1.run( null , false );

	assert runnerTC1.status == Status.FINISHED;
	
}
log.info "#####################    Listener Finished ######################################"

</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>