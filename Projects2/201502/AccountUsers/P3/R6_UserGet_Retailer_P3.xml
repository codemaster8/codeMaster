<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="UserGet_API_Retailer_P3" resourceRoot="${projectDir}" soapui-version="4.5.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="E:\DECE API\STS\Builds\R3\106.2.3\Reports106\STSAPI_Payload_NodeOId_TCs_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Multiple Pages</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#V1}/${#Project#V2}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#V1}/${#Project#V2}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUVSsnVQNFwlGNCBeX77CYQSUizIg6K8/A26NZif77PM9pMw00z2ruxfNmp/YCny2BzBGceJFYVWVnmv/23Sam9a6YzWasAUbLR7BRpffWOS/Lt1imSYNrU2tqmKcIjXEiRUmzzWWZpoNutlgeJNu91psj2s9sXR3VavOUIxJaLLlia5V88APca889rmWxmEvsrCHe6EVINxLYG8CtGGP7OxZV0y1l58XlOWB8YubJPseRcEnG0Hk+/AJRgH1k3rY89PGvYnnhFaSxujXmTZ+rv3yzbLsKWs+RbFDsTRNUzRPkT029pwftZfK1RnZariJLmvRCqPQg5bvna0ClIYSN7KrwHei2Evc4JvQDMXQRegGymEDMq3wR436OKBE95eRHkDG2Gpg12KuwQy0QTEKIapODfW59uPvOnjxNWMrxJsoDvCn9X+DhMIj8qM9shv4mtkV3d9H/KJcLz8R7Kkh9FPsHdGooMnegghX32O08fKhhwn5bFwt21/N8ZVhCP6Xlvyk7nES2NQXlZE8B+Hk/+nXfa8uUWaWn6KXXI2d8M2SxtrQmeTjlQnoLZx0ZnLmPJcQ7jdfQN1a/Wv9mag3Xv1y0jZd+lCfxpvhCEFXOq60bmBxC44fs4o/PATjZTte8trIkUzROvLteYtdjsRkNqGwzw0RPzeNFd1nopVOwQpKjrtOyAz4oLudniXVW2AtXEfZajaM11x/O2VSHDj1MUoWM+s4YrtuwmC3Xp/X1abHRqyhHzkNrKEB17OKQYtma7v1vZYKzJXbByl4/sjpPocirzd0KpMs/l9wNC9ZiXVbiMWk2JDXM0EvmqpK6VkUwWnigEwVgEP+tmAkOLuDu/MUPqMFoOt9IImCv5WHGtgpgJnKgquJs5mWi2cwEJzRjDiaFeCvBM2QMylbSjNdf5Uz17SV2Wmt+OnqLI80gEtn0dVkQ55JhilrGogutlyT1kq+1SZapupLqUICSHK+P9sKnyAl9yCrctqEY5cTLl0tZsTePw2D0XFtyr4maoo4OSgTdd2UdHkAjOUcsv2U+J6HwT6qLKfCndNgj7YA9TOanAnOmrnLNHPKjiTDKm3mo01TlYGm40zUy6yUipwNZtPzRy1EQRPtQM5lE7xfagFNsT+iV4sBtuZcqBkgk5zS+U3O7PEViKbTWUW81GooZ4ZsTEd9zVAzGZQ2Sc58vGZH7lpxj7Cp5wMTbO8bI+ryvB+S56FxhCfuULGUPlgHMwY2DRd6nGctosxZdTNJXw7eopVKwoyALguCDgggGhSpkfoLYCjMuPHe41kPDTf9KEBuXNGY6G13POd012uOnffRnJM2u8674r03LdulVB+y2+YOqCqy3xhXt2xjSRlS6J3b47fpAnnx8pyMOJ1pe12uYszT6UKK/I79ulhO3+r5Eurm+H0ynb+f83x02HbPfvI6Fl7jyUCTnPEIoXcM6xRt9QWzK3Hi8nVL+LQxaMRVgKMJAChbx5E9QmDhdXsh4auhyYS8QBMzRZyLygQoSl1WBUnXN32XeYfKLJ0yI02VbZ+U6bRcGH5lJQoS6RRtzVf7JdunyVixy2B6S+47+pSrDxZopY98c5aAbD/bhAxDK3v9daNlDtQKBthqNhHIWyRUUhVMrfF+QOdvszbNHHTbH0x4MG3mE3aXj11nddo5qx1pyvLu1VmawJ+ZdxxTCcXmFd2UDQ10L+9brqnTpuHDIN+vA5hLJulZ6RyZgmz0dXqaSxJ4u9iwCdgcL8/yVhPl0r8Ccs0itDiuFy5ehiNvbMopIW16R5ftmqX/lWMFxSqPHDuIQAefOSZfOCaDzaGudiUGc21xj+eZIyjyQe/MhgN+T+uL4a4i1PuUk3h+axx2M/OtPmdOWcfd6vM5r0quWA83S7e5TgTaOkMdDXYdxTN2Uthu+SdtqOnc1KP8E71FhwwPKyOVCeVmcu5TfJzWhWDlBedzs8VOg/dJelSn1htmTu76MOez7ftrm6Ji5cSdO6uj3l9EcHn5jnwekjfjZYxS9wP2YQJftdckXW8RTK7L4jusStU++ThayZ91XGHx7Mam3NrbF2IQJyhMai+FV6HheilRep7dI1/Oy1rqttg2x8gCw3dlwLZkukUzfRrQHZ5vcm3uKvYuKD5BFKNw4xVnFXL28rH+M0AY9DAKbRQ3jlEKXYRrf4hY1KuqhgZRIVGIkRkRudzuCu12h5VZmZY7Qr9NS0QLyy0R8C2O4UW+Vh1FyTgcx2CToPhRKvMPUtlA0Nt7qNDThajARFXghJTkYB3TxGeejtZTiFKiuONC9PbYVpejsBfsfVQApoLITn30tHf3ZYEofPllGxbEpbXTpulS7Xyb3+dn11KQPbZXbMBFMgIi7URfiP7WNZNvM2bY+4yv4UFqe4WoIXVNYg9ekDw++qBLwZMbV4qUrphvWz8bHsJSnzO6nWQfPXhj/O1ORCQ1EV0v14YcrKfDU3o8pmULOoWgjEl4iqHoNjVBMCWq8GRGOxRStxDUXwnyG+pPJ9/sj/jSxA0nCXmbA0KYarn8i9vYBOHiNqYSwud/e9V7OJLULUF58pVN9MmlrUD8x3sd7MFiHzG/k58siu2Pdn0R6+4ckmcxvrzQKVaF/D59wwoYkbAeGWFRfB/8qwBfHf5ovBX5hiUhbFqnCfr+SbWYTc81C8IoDRNVqpWG+3lZ4kxOe9T72PRbmFIA/7rR5PjbG81CG07I5Aqs2m2v9++bG15JF4iIF/ZKLM+1nFzOyeGhczeffwH8ekR3/ziiHzN5+c38u+Wupp/fh5d/AA=="/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXrxBGQBGQAUF//RkwGs1O9tnne0iZaaZ7VncvmjWvyDh4dBcgBKPYDfyyzL9V/mcxDNmuG62a0aq3aw0S1msdkyFrcEM2yLphkpZBVcoyQgmUfRQbfvxWoUmqXiPrNaqjk81uo9UlqZdOg1lXynMYIRwab3khK+Xs4PmoWxz7VkkivxsYyEVd3zhA1I3N7hQowy7e2TVumCrvr1eUxYHRuxPHYZcgzBcLmtDzzBczOBCvxNOeVwt1p67tG3ESwY8zLfRW+fBN0/Qlrb8EkU3QJEkSZIfAeyzk2r8q76WbM7Rkfxtc15zhB75rGp57MXJQCoydwCoDzw4iN3YOP4SmCIrMQ9dgZtZMquH/qhCfBxTo/jLSE8gIGTXk4CZ8BNPgFkbQN2F5pslvlV9/18Grrx4ZPtoG0QF9Wf83SNA/QS8IoVVDt8xu6P4+4jflen+FZlf2TS9B7gmOcpqEhglReRLBrZsNXYTJZ6Fy0f5yhm4Mg+Z/ackr8YgTwya+qQzv2hDF/0+/Hnt1jTI3vAS+E+LO8wZue+P0U6XPu5zTm874yXaBuVpAeNx8BXVv9cf6K1HvvPpw0mxHlY2YllqTem9z1vn2xmukVRZcQMsm6bS9jjsWN5A3l3GgR0q23ynygW5yQ1hN5mGk9IdNi/ZW8upgqSXTQWF/GEI/JAVlOgonhNpL25BYDw9xXal6kqbOm5Pjxc/801gC88H5aFFeqrfQuLpTdmF6Jlc7bxbF9Hxbaqh9jWH98dbaj+utrXsh0NtnTo855HkN4LlIMv9/yZAd3oiN+4LLJ8UWv54xfFdkmU8uHAfOUxukMgts/LcDI9beH529K3VSkgWqKgKeY72dMFTAXgLUTGAdhZvPlYy7gD5rj+bYUS8Bb80qmpDy6Yqfq2pPSB3dkubnjeQl64swUgAqnDlHETRhzmu6oCgguNoyhd9I2U6ZKqmsrvgSDsALWXixpE4Mpcw1aZlRpgy9mjLJejnHdvE8PIxOG13wFE6RuOlRmsqbOq8KfaCtFiYtJtj3MjyEQWk1Yx+c+iHcASimJD4TXBR9nyr6jB7xmlHY9GebIkt9RUUppxZZSSUh7c9nl89acKzCWQchE3QwudbC1DlxRK6XfWQsGF/RQMrbhfNASK3xDYiikmmJu9ZqKKSaoM1GoqLJqQAKGy+kHtrQI2cjOSezrmZ9HeweG8OpwkL08XNfO5ln5lgyJBFsDnPKrGuO6TKusQxSe91OeXXVHwRrGYcZAVVgWRVgQCTIU8P1Z8GQnTPj0O3QLhxuxeAAnaikUMFgf7pkZNutj+3JaMHw231rIrmTumE5hOyZ9K6+B7IMrQHlqIalrQiN991LczyYLaEbrS7xiFGppttmStoimS35wGtZveVqNqhmK1PVx5PpbDG5ZNnouGtfvLg3ZnvRtK/w9ngE4QSZVYI0RFZv8wy36u0wn7YaCZkSsBUWAGln24KLCcz2dlcS9jRFwOQFCpdK3IKTpkCSqoLM8qq6FR1qYkrzZEaNFFmwPFym82qpeaU1x/K4U6SxWIcrWiTXOrCKYGpDEG11xlT7S7hWR54+j0Eazrc+RZFSqPa2SmqbSs4AS06nLH6L2FIig5kxDvtkNpg3SeqoWl5/2gGzejal99nYsdfnvb3e46asHl6dlQ68uf7AMRlTbFFSdUFTQPv6vmWKPKtrnnnIws3BzHgd96xwDnRW0ESVnGU8DwZXG9IBnaHVRdgpnFD4l0CmGJgWp83SQSt/5I51IcGkTR7ostvQ5L9yLKdY6ZljRw6o4CvHhCvHBLA9VuU2TyGmyYVokdqsJBzV1nzY74SkuhzuS2xVJOzY9Rpjv53qg+qCOqctZ6cuFh2Zd7iqv1059U3MksbFVGF/35Jcbc/7zYZ3VoaKysxcwjuTO3hM0bA0kilfqMcXkehESZU9rN3D5VJv0LPDZJqc5JkxQNTZ2RwXnXQ36TUJIpLOzKW1PqniMjBX1+/I1yF5N17HKPE4YJ8m8E17TZPNDprxbZl/h2W+LOKPoxH/WcflFteqbYut3TAXgyiGflx5z71yDddNsNJzrS7+cl7XfLtBt9oUAKABKKEpCli0UCIJyFanwzQ74Cb2rii+QOQCf+vmZ+Vy9vqx/jNA89BF0LdgVDsFielAVPlDxLxeZdnXsAoJfAT1AMtljmRYQHIt/E43WiLbFltNsQMYkRE4ssPUhUp5FMRjfxyBbQyjZ6nceZLKGjTd0IW5ns5FBcKqAsW4JEfjlMQe9XIyXnyYYMUd5aK3SzfaDIHcQ+jBHDBxCKzEgy+hExYFItD1l64ZJiqsrSZJFmrnx/y+PruVAu+x3HwDypNhIW4n/E30N7vMLZMfM6box4xv4UFiubmowXWNI9e8Inl+9EmXnCd3ruQp3TDft341PIUlvmZ0P8k6uead8fc7EZbUWHS93xpyNF6OL8nplBQtaOWCMsLhCYogm8QUmglWhWc92EOfuIcg/kqQ31F/Ofluf8aXxI4/jfHbfMCEKRfLv7iNTSHKb2MyJnz2t1e9pyNx3WKYxd/ZOA9f2nLEf7zXmV0z34fNE/yTBpH12a5vYj2cg/PMx5fr2/kql9/nH1hhBjisi0dYED0G/y7Ad4c/G+9FvmOJMZs2SQx/flLOZ9NbxTDNIPFjma8Uhsd5WeCMzyHsfm76LUwhgD9uNBn68UazVIZTPLkORuW+1/33zTW3oIsJsRdyCyxvlQxfzvHhvv0wnz8Afj+i6+yfRvRzJu+/mX+3PNT06/vw/g8="/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2013/10/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="3c0ff9bd-188e-4595-ac97-ec945cbf1b34" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="a72ea2ab-ce4e-47cc-b28d-787420d41eae"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="bae01694-be77-463a-bcef-02134d4e45fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ResourceStatus</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d9791dad-3957-43a7-9916-acc98d6cfcfe"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="d2b48757-d9d7-48b6-99e2-5ffaec2a0276" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/ResourceStatus/Current/Update" id="087a86a9-8ddc-4222-aa5e-8ea5f58f3b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT" id="a3720389-3d1d-49ca-8d11-1e6c7977a6b6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c5de7daa-09fc-46a7-9439-7290f79b45c1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="2b399c77-329a-43cb-9c65-b90e43e27bf5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" id="c9f3de54-1283-4f02-b8ea-7030652e5a47"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="dd8dec87-e935-415f-91f4-ef072cb2b292"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8eccae92-53c1-462c-ad88-7bb2ab6bc7a9"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" id="f7ffc3a2-890e-4d43-8f2a-582eb82ffd58"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="5edddbc8-bc7c-4b0d-9fa5-394b1f0932ed"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="198a8863-08df-42da-87ef-91fde7f4ac06"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Head" method="HEAD"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Options" method="OPTIONS"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy_Create" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="Policy_Create_User" path="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>NodeUserId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeUserId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Policy_Create_User" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:PolicyList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="Policy_Create_Account" path="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Policy_Create_Account" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="6deffdf6-8888-4ac0-bba9-62ac3f5a0a8b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate API" searchProperties="true" id="11a715f3-fabc-4fee-900a-f24ebd6d9c5a"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set Environment Properties" id="dbd205af-6a2e-447d-a1c5-eb49c82ff6e4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def env = context.expand( '${#Project#ENV}' )
log.info 'Env == '+env

if (env == 'QALP1')
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7001");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
tP.setPropertyValue("Batch_HostName","https://qa.b.uvvu.com:7001");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7001");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7001");
tP.setPropertyValue("targetPortq","7001");
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7001");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tP.setPropertyValue("TOUUrl","qa.c.uvvu.com");
}
else
{
	tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}

}
else if (env == "QALP2")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7002");
tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","LP2_RET");
tP.setPropertyValue("nodeIdRTLCS","LP2_RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7002");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7002");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7002");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7002");
tP.setPropertyValue("targetPortq","7002");
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7002");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7002");
tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}
else if (env == "QALP3")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7003");
tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","loadtest_retailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7003");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7003");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7003");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7003");
tP.setPropertyValue("targetPortq","7003");
tP.setPropertyValue("targetSystem","LP3");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7003");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7003");
tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}
else if (env == "DEV")
{
tP.setPropertyValue("Device_HostName","https://lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("nodeIdDECECS","truststore-dece-cs");
tP.setPropertyValue("nodeIdRTL","sriniretailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("Query_HostName","https://lp2.dev.q.uvvu.com:8443");
tP.setPropertyValue("targerHostd","lp2.dev.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("targetHost","lp2.dev.p.uvvu.com");
tP.setPropertyValue("targetHostq","lp2.dev.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","8443");
tP.setPropertyValue("targetPortq","8443");
tP.setPropertyValue("targetSystem","DEV");
tP.setPropertyValue("targetURL","lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("targetUrlSHost","lp2.dev.s.uvvu.com:8443");
tP.setPropertyValue("TOUUrl","lp3.dev.uvvu.com");
}





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="9ce61892-9d8a-4055-b161-e19938292410"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4dc8aec7-2e8e-4eef-9a55-46dedaad9403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName" id="b8ba87db-df08-4f36-8c88-c580bb3ec25b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1671024d-d72f-4387-92d2-ba0ce6079396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="63a3307b-6106-4786-9cd4-e176efd0bf16"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="23303af8-41d1-41dc-8fef-fb959f9c4a2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="bd82d430-2a93-49e7-b2a1-7b84f0809636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      //def a = context.expand( '${#TestCase#httpLocation}');
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case" id="35d38137-3ff3-47da-9602-9bed11652bbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20140223_120251393174925906</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20130923</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dbd205af-6a2e-447d-a1c5-eb49c82ff6e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="51ed92e6-c568-4115-881a-88771404b0de" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2842594e-4ff8-47cb-afd9-7d9447bd34b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1c828cc6-c718-4458-8285-8f3412120ef1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="aec46fe2-046b-4208-9b99-b3f8610a7a8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="e434e6ab-627f-454e-a457-6101a23db2bf"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bef51ec6-85bf-456b-9ec3-670fd87002cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="518795a7-9465-4ca9-aaa5-d30618461158"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1juR8twUxQrSdUgoKh4A68vp2AYEOUmA4L++jOY6EqyknXWPi/iND3dX1/o+eYZm4HPdgHGKEm9KKyq0kvtP4KFOLbV5hqCzTuNpsWihmXxfKPVsRjIMBxtW0ytqmKcITXEqRmmLzWWZrgGzTdY3qD5LkN3Oe6JbQm7WnWFEkxME5UnulYtAj/E3Zvbl1qWhN3IxB7uhmaAcDeFXR1o4y7R7Jp3TLXX5zeUN4fJ6z5N4y5FwScbQeT78AlGAfVMfdJ5tnFX99zQTLMEvfu08UvtfW+e50859xQlLsXSNE3RAkV0bOy5/9ReK/fNyFZDJ3pb98wwCj1o+t7VLEFpKN1HdhX4bpR46T74wTRDMXRpuoEK2IBMM/ynRv1ycEP3l5Y+gUyw2cB7k7kbWyAHJSiEqLpcqC+1f/6ugm97jcQMsRMlAf6y/neQUHhGfhQju4Hvkd3R/b3Fb9L1+oxgVw2hn2HvjCZlm8QmRLg6S5DjFWMPk+azcfVW/mqB7x2G4L8pyTP1ESeBTX2TGclzEU7/n3p9rNWblZXpZ+h1tEGzc09SVoMITuGRNi5nvdhFvenh+HKD8FH5DdSj1O/rr4366Kv3TTBQ+tv6QKRaOdd3lmzfadWHQ784jK9+PwgKxvLb2mIWnXnR2iS2MMuRqjgzwwg3Np+dFOfoZs2Ddxz5/KASnizqNDD6So+eJkW+TXNJaXHHUNmitAiGkj4YnCYnOhDxfGLNZzo1MqOJdCkGzUiQfaUFZgatHZPdHoyjiiPPj+tkwTS13WmZCnqyd19+xfQxhjKuEbrcgiz/b1q0IJmp+Vj0yknhkM8zRa+aqvbqUq8HUM8FuSoCVxXHVzAR3eNpf/T6Qk6LYL5UgAQu2gLkkruVVvP5SM7t1crfrVRFEbVFMx+ArVQhLyS5WEm7zZA217t4yyr0ThdFe7OILG4Y24NjPtjDiWZo+cRQL9pBLiaGTK9vMrcg66t20JipseQq64MoaAs5l/KbR0nO95PdehFvl0IOr/JcA80+YJZyb68NjGDFQG6xhwd5rIHjTS7utd5qpRWyAWYV0Z2sSGxGT9nFMLBjK/D3H4wPiHHD7q8uVt/Pdlf5oPXkfk8/9XXV4qS5PASL7dJar47mWjlX4GACrLtHr+WZmyh3d51cmm+Ho2in7s9wAuayKM4BSRcNNLU/BFFfBFoTeMW1dxD5qGcrOTVkcaUu+H1+c/FOG2z2ad9kOh1mO17zsxMvyWF9N8qsw17bb5RpfaTb56WQCtctPtfPvOkxsIid+UYepKPCGcz1ijWTig0c1G13SPlXQUm09hAk18ve19xFuuan+GJ5jrMWN9Om33Z8jVvEju/EF1w3ovkxoXmRTEJqezmP0gpwNRGA/mF5EOea2CmTaqv5fKuJJlDkNAPXA5uO2NVpODj7cMuBqBitybf4XhhbymWRyucyaSu50pGAXRZhoC9l5QCWousmoisr4hxKYL5VR/mW5Gs5IMpf86jc8ujKIpC5HeCFQYVb0kI6TfVmE1xCcRkqwl47FWubD+j2CcljfRI3cw1PnHC3jo5a4CXLJNOXo9FkXFhG1j8eyKxyaH105nYV+XyMgTcZGfujFEnmLN5u07gewgSmahxoanGd7vCh41kBPay3GHFGS7DNLgMrX/ZNeTdKXJ0ZDRbhjGsLFZw5l0FQP3Tydd3Q+bht90JHulyoXbKiIxApwqJ1sguWPe6X+ZjPnSE4WiY7KXxBvAjyaGfAfDEfrfWg3qq0zuNxQF8NqjmJp7nez5vyfF7nbNEYGDhOvG3WcYtkGtrs1kz5845e8V7sHwU2OxrNmFu5ASnW7GzHbW1WmTc3cBe47RgOqQV1BnLbGav9i3U1r3EwhW8D9Ot0eAjf5gf1cbJ8Gj130qGTbkUwvS/LA0iVqgo5Fcz0zwSmlHh2w7mpduOSBeEUhWnttdxVkpduRiiOZ3fJkfG2lmlaaHd6rKAApsPIkkw3aUahAd0SBLbN8XeW84biC8ReFDpe6avkcW+n1J8BwqCLUWijpHGOMrhHuPYHi2W+qmq4IMdvFGJkRIQnttgWEAEDOL7VYsgPL3O8rLAcxypKS2L4WnUSpdNwmgAnRclnjih84ogLBL3YQyWRLE9TTI5TnJKUnMxzlvrM09l8ClFGqGZSsr0u2+y0KOwFsY9KwFQQ2ZmPnuJ9fEsQhd+ebMOE+CYtswvx7aD/McKv7+7JIDq2VyrgMhwRkYKib/gue4/lx5gZ9mPMd/Mgs73yPCeZTRMPviH5/OpXw5Sd8uiW2w/Ed9gP7a+CT5apr0E9nNlnDz7a/nEjIISSUI7Xe1VO5tPpKTufs1sd2iWdSoh5iqFontIRzAgnuhjREYXUwwT1V3T0gfqL54f8M74s3Yd6Sj7pgHRN9bb8i7uIjnB5F1FJ1xd/e9H55JLkLUVF+p2s55MrS4n4j7ca2IWlHhHPyCOPEvtXub6x9cEPibOcYV7olquSfF5+aAwYEbMemWNR8tH4dwa+c/5Z+EjyA0tKusnKUvTzm2o5oF5qJoRRFqaqVLsJPg7NG870EqPuL6XfzNzo3zufL/CPfH6jjXUyvgKz9tD1/rdyw7u1C0RkF/ZuWF5qBbmaEueh+2FIvwP8bU4LLC01m5LcJMf4pznNyo8Efork9Tfx75IPOf36Pbz+Fw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="32279977-861a-426e-81a7-71cea06f5005"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		////assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8YMCmklTJExgwk834csrI8gCe8IANX39kCOwkO9k35z6B2q3u1YNaS8+J4Xt0FyQJilM3DKqK+FL7Z9eyOgzsmI32rtlqMDTHNrgWQzaQ1WQY2GQsps3WqkqSZEgJktQI0pcaTVLNBsk2qLZOsl261aXZJ6rNbWvVJYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuBtRRF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0tVcOzDSLEZvPs3kpfa2N8/zp7z5FMY2QZMkSZAcgXXMxLV/1V4r983IVAIrvK0FIwgDFxqeezFKUCpKndCsAs8OYzd1/G9MUwRFlqYbqIANSDHBrxrx28EV3Q8tfQAZJ0YjcQzqbmyOLBSjAKLqYq681H79rIK3vXpsBIkVxn7yaf3fIKHghLwwQmYjuUd2R/dzi1+k6/UZwa4SQC9L3BMal20SGRAl1WmMLLcYuQluPjOpXstfLZJ7hyH4X0ryTLzHiWETX2RGdG2UpP9Pvd7X6mZlaXgZemWjzhCq4+mOnCC2SfaPUtPTIsPqWYeXK4T3yjdQj1K/rT836qOv3jZ5gxMrpAdLFk6UU8wtskhXG2FLG5dLDlnHWmiiTnnDneaZIeTSlRppNtnq+EMJjSaivrWV0bA1PNvkHLEVZ7/RWSdb0bvj7qixeS84K/OWIcHxcdKr99cpNQWjQpYtj++srI0rprM1IthIydtyX1+CsZA241lzQs21rLKf7UfGqDUYsfVeKLLT+pZ5+R3T+xjKuIbofA2y/L9ukZxopMZjIZSTwsLHM0WvqqIIdVEQABJskCs8sBV+dAFj3j4cnYPb43KSB7OFDERwVucgF+2NuJzNhlJuLpfedqnIMq/OmbwPNmIFfxClYilu1wPSWG2jDS2TW43nzfU83DUHkdk/5H0HjlVdzce6clb3UjHWJXJ1ldkFXl/UvUpN9EWzstrznDqXcjG/ehSl3BlvV/Nos+ByeJFmKmB6gFpIgqP2dX9JwebcgXtppILDVc47qrBcqoWkg2mFt8dLHJsuyNsI+ma08z3nnfE+Nq6bveV51/Oy7UXaq4LUE7RjT1N2TXEmDcB8s9itlgdjJZ8qsD8Gu7tHt+Ua6zC3t2wuzjaDYbhVnBMcg5nE8zOA00UCVekNQNjjgcoAt7gIe74dCqacEwM6qdQ5r9den93jOjF6pGdQLEttRqv29NgWpaC+HWa7vaM6a3lSH2rmacGl3GWTnOqntuFSsIis2Vrqp8PC6s+0ym4qFmvYr5v2gPAunByrnQGIL2fHU+15umpPkvPOtawVv54wXsfy1OY8sjwrOid1PZwdYrLNoyZNbM6nYVoBtsoD0Nsv9vxM5dkyqaaSzzYqbwBZSjNw2dPpkF4eB/2TBzdNEBbD1WR/eCuMKeYST+QzCbeVVGFFYJZF6GsLSd6DBW/bMW9LMj+DIphtlGG+wfla9LHy5zzK1zzaEg+k5ha0uX6luSC5dJJqDAPOAb8IZM5Rj8XKbPtk54ikkTaOmFxNxlawXYUH1XfjRZxpi+FwPCp2etY77PGsskhteGpuK9LpEAF3PNSdgxiKxjTabNKoHsAYpkrkq0pxmWyTPevufHJQb1H8lBRhh174u3zRM6TtMLY1atifB9Nmh6skmXXu+/U9m6/qutaOOqYQWOL5TGzjJRmCUObmraNZ0PTBWeSjdm4NwGFn0OPC4/gzJw23Oszns+FK8+utSus0GvnkRSeYcTTJtV7OSLNZvWnyel9PotjdZKxdxJPApDdG2j5tyWXbjbwDR2cHnYmaS9vHxZqezKijTiszZg23vt2J4ICYEycgdayR0jvvLsYl8ifwNkA/T4eH8DY/iPeT5cPouZMODXcrgul9WV5AiliV8a1gpH8nMKXENRvWVbUblSwoSVGQ1l7LXSV56WaY4rhmF18Zt7XEkGILXx4cRzcFgeUkkiEpmQRkh+NICkh3lnND8QmiEAaWW/oqedztlvo7QOh3ExSYKG6cwgw6KKn9xWKZr6oSzPH1GwYJ0kPME2mKavMSJQGWJYWWKLUkQMuUyJMi3+YFjq5Vx2E6CSYxsFIUf+CIFPWBI84RdCMXlUSyvE0TfJ0mKU7J0ThlqUc9nYynAGWYasYl2+vSDNsiEtePPFQCJvzQzDz0FDnRNUFEcvulGwZMrlKBFCSZlUhWwDdDR2w/EtviOIom+SsF+Db2z9/uacI6plsqJGWgPMKlRl8wYeoe5ffZYN5n424eZKZb3vQ452nswhuSj59+t1LZQ48+mkv6P4L2D3XH/VD/LPhgmvgc1cObeXLh40Q8HguYa2I28nov2NF4Oj5lp1N2LVGnZFoxNk9QBNkhNAQzTJfOenhAAfEwQfyIqT5Qf/L8kH/El6VOoKX4tPu4oarX5Q+eKRpKymeKgg9E8dM30AeXOG8pKtKvZIKHXzMl4r8+eGAXlnpYPMU/eRibv8v1ha13fnCc5XhzA7tclbz0/E1nwBCbdfGIC+P3xr8y8JXzj8JHkh9YUtxNuyxF33+plrPrpWZAGGZBqoi1q+D9PL3iTM8R6v5W+sPMlRm+Uf0i+Zbqr9WRhiebb9Qeuu7/Vm6413aBCO9K3CuWl1qBX63YeWC/m99vAL8c4Swn/22Ef4zk9Q/xn5J3Of18Hl7/BQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_DB_Validations" searchProperties="true" id="1cc8c7f1-8717-461e-801a-f31149324c32"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="43c5dbf9-3574-4373-9d3f-f1b49a7247c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("user_oid",null);
tC.setPropertyValue("account_oid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("IsMinor","");

def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

def BirthDate = null;
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

Result = b.userGetRow(userID);

myXML1 = new XmlSlurper().parseText(Result);

log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
 if(context.expand( '${#TestCase#ResponseType}')=='SUCCESS')
     {
        assert  myXML1.ResultSet.Row.size() == 1;
       	
       // assert myXML1.ResultSet.Row.STATUS == 'pending';
        assert myXML1.ResultSet.Row.PRIVILEGE == context.expand( '${#TestCase#Privilege}' );
        assert myXML1.ResultSet.Row.USERNAME == context.expand( '${#TestCase#UserName}' ) ;
        assert myXML1.ResultSet.Row.GIVEN_NAME == context.expand( '${#TestCase#GivenName}' ) ;
        assert myXML1.ResultSet.Row.SURNAME == context.expand( '${#TestCase#SurName}' ) ;
        assert myXML1.ResultSet.Row.PRIMARY_EMAIL == context.expand( '${#TestCase#PrimaryEmail}' ) ;
        assert myXML1.ResultSet.Row.TELEPHONE == context.expand( '${#TestCase#TelephoneNumber}' ) ;
        assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == context.expand( '${#TestCase#MobileTelephoneNumber}' ) ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#CHILD_DOB_XML}' ))
        {

        	 log.info "I am CHILD";
        	 
           BirthDate = context.expand( '${#Project#CHILD_DOB_XML}' );
           assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';

           tC.setPropertyValue("IsMinor","true");
           
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
       
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#YOUTH_DOB_XML}' ))
        {
        	log.info "I am YOUTH";
        	
          BirthDate = context.expand( '${#Project#YOUTH_DOB_XML}' );
          assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';

          tC.setPropertyValue("IsMinor","true");

                    
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;

         } 
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#ADULT_DOB_XML}' ))
        {

        	log.info "I am ADULT";
        	
          BirthDate = context.expand( '${#Project#ADULT_DOB_XML}' );
          
          assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';

          tC.setPropertyValue("IsMinor","false");
          
        /* if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
          */ 
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}' );

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User Validations Passed";
               
   }// end if for success response check
  else
  {
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  }
  

   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );
def nodeid =context.expand('${#TestCase#nodeid}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c=  new dbUtils.dbNode(log,dbHost);
//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = '$userID'""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

log.info results;

/*
*  If zero length, no need to continue;
*/
 assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (context.expand( '${#TestCase#ResponseType}' ) == 'SUCCESS')
{
	assert myXML.ResultSet.Row.size() > 0;


	if(nodeid=="dece:cs"|| nodeid=="coord:cs" || nodeid=="portal" || nodeid=="portal:cs")
     {  
       assert myXML.ResultSet.Row.size() == 4;  
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";     
     }
     else
     { 
       assert myXML.ResultSet.Row.size() == 5;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' );    
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID ='$userID'""";
  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select POLICY_CLASS,STATUS from POLICY P, POLICY_RELATIONSHIP PR where PR.POLICY_ACTOR = '"""+b.userGetfromNodeUserId(userID)+"""'
  and P.POLICY_OID = PR.POLICY_OID""";

  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>IsMinor</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00004_UserUpdate_FUNC_CLG_Update_CHILD_DOB_TO_YOUTH_AGE</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>Username</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>DOB_NOT_EDITABLE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value>E2A349A2ABBCCB1DE0401F0A059926E1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E3CF68DF2A8DD783E0401F0A07994C97</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3CF692D5BE44697E0401F0A05993AD3</con:value></con:property><con:property><con:name>attested</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountDelete API" searchProperties="true" id="50689f7a-271a-48af-ac58-51a00dcf25e1" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3b865a-29ea-477d-b95b-c43f031f13b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="7bed7b31-f1e7-4d93-a26b-7c4f3fd4364f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="b5272ae6-82f1-4167-a218-91364f720ae1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("SecondUserName","username_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="efdeccdb-6452-4757-8742-168412fcf27b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="7dfbf775-9a67-431b-bdda-786ea95cc0e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e33b673a-0ef4-4681-bc6f-abfbbf10e33c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="aa74adfe-6f1a-4eb3-8891-56556b47f6c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.8. Account Delete [Your UltraViolet account has been closed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1iuR8twEUGsJFWDgKKiInh92YXDiCg3GRD11+/BRJfJStbJPk86TU/315fp+eYZ24HPtgDGKEm9KCxr8kvlH5ut2yLNsLXmRlzXOF6s10ROsGs0BzmO5aCDHFgpaxhnSAtxaofpS4WlmXqN5mtM02K4VkNoMcITL/CrSnmGEkxME5UnulI+BX6IW1e3L5UsCVuRjT3cCu0A4VYKWybQBy2i2bJvmCqvz28orw6T122axi2Kgk8Ogsj34ROMAuqZ+qDz7OCW6bmhnWYJevfp4JfK+948z5/y+lOUuBRL0zRFixTRcbDn/qq8lm6bkaOFm+ht3bbDKPSg7XsXuwClo3QbOWXgu1HipdvgG9MMxdCF6Ro6wRpkuPBXhfrt4Iruh5Y+gEywXcNbm7kZm6ANSlAIUXk60V4qv35Wwbe9VmKHeBMlAf60/m+QUHhEfhQjp4Zvkd3Q/dziF+l6fUawpYXQz7B3RMOiTWIbIlweJ2jjnQYeJs3n4PK1/OUTvnUYgv+lJM/UI04Cm/oiM7LnIpz+P/V6rNWblZntZ+g1Zg6mNj4GI5NXE90Nqrg3YbuKHAjGyxXCo/IbqHup39efG/XeV++bho2ZoHZ0O2CD0LfBSjybGuftw3M/GNeX81GYjinLQns47VXnybJBeRTkwOjA+z41mLMNiQ53Trw0Qn5hlKbNg63KvJRjZzrXBEvb6ZOxRQdDq3kZdNXlsguGdt3pqdOF0pkYcu+gUybcjwNOX/gz2ZhmsuDNoubAlvUSSzHGsRkdeueYW+adPLG4l98xPcZQxNVH52uQxf9FgxZlO7Xvi3YxKTbkeKboVde0dlVutwFquyDXJOBq0uAChpK7P2z3XkfMaQkYUxXI4KxPQC67S3lmGH0ld2YzfzXTVFXSJ1zeBUu5RD7IymkmrxY92p6v4iWr0itTkpzFJFrXe7HT3efdLRzqlp4PLe2s75TT0FLo+VXmnsj6ou90ZmRN66X5ThL1iZLL+dWjrOTb4Wo+iZdTMYcXxdAB1wHMVGlv9a4VzBhYn2zhThnoYH+VS1u9PZvpJ8UC45LkDmckNqutrmIYOPE68LcPxrvEuOV0Zud1x89WF2Wnt5VO2zx0TG1dlw2lBybL6Xo+29tz9ViC3SFY3zx6Dc9eRLm7auaysez1o5W2PcIhMBRJMgBJFw10rdMDUUcCOge806W9k/io7ag51WNxqSr6HX5x9g4LbHdo32aaTWY5mPPjAy8rYXXVz9a7rb5dqKNq33SOUzEVL0t8rB5522PgKd4YC6Wb9k+brmGW1mP5tIDdquP2KP8iklMi9EByOW993Z2kc36Ez2tvs5lLixHnCxtfr0/ijb+Jz7hqRcY+oXkJ1VlqeT720xJwdQmAzm66kwxdahZJdbTcWOqSDVQlzcBlx6Z9dnbodY8+XNZBdOrPR7v9e2EcOVckKjcU0lZKqSkDpyhC15wq6g5MJddNJFdRJQPKwFhq/XxJ8jXtEuXPeVSveXQVCSj1FeDFbqk+pcV0lJocB86hNA1VcasfTnOHD2jhgJSBOYy5XMfDTbiaR3s98JJpkpnTfn84OK2trLPfkVm1oc3+sb4qKcd9DLxh39ru5Ui2x/FymcbVECYw1eJA106X0Qrvmt46oHvVBiONaRkK7DRY59OOraz6iWsy/e4kHNcFsYSzzbkbVHfNfF61TD4WnHa4kc9napXM6AhEqjhpHJwTy+6303zA55se2K9tdnjyReksKv2VBfOJ0Z+bQbVRahwHg4C+WBQ3jEe52ck5xTCqdUeyuhaOE2+ZNd1TMgoddmmn/HFFz3gv9vcim+0tLq7P3IAUa3x0YkEflwxuAVeBK8SwR02oI1CEzUDrnNcX+xIHI/g2QD9Ph7vwbX5Qj5Plw+i5kQ6TdCuC6W1ZXECaXFbJrWCnfycwhcRzapuraisuWBBOUZhWXotdBXlpZYTieE6LXBlva1nlVUVoKqrA1zmpISk0RzMqDeiGKHJ0g76xnDcUnyC2o3DjFb4KHvd2S/0dIAxaGIUOSmrHKINbhCt/sVjkq6yFE3L9RiFGVkR4IgskRqCbgsJw7booygwncw1F5AAvNNtik7C9YZSOwlECNilKPnJE4QNHnCDoxR4qiGRxm2JyneKUpORgH7PUZ56O9lOIMkI1k4LttViu2aCwF8Q+KgBTQeRkPnqKt/E1QRR++2VrNsRXaZtuK2pToZttcjMIMv+YWIalpSsF+Db2z99uaSI6jlco4CJQCZFSoy+YMH2L8ttssPRjNm7mQeZ4xU1Pcp4mHnxD8vHT71YqeujeRxPF+qdt/sPccN/VPws+mKY+R3X35hw9eD8R98cC4ZqEjbzeCnawnw5P2fGYXUskFEwrIeYphqJ5ykQwI3TpbEV7FFJ3E9SPmOod9SfPd/lHfFm6Dc2UnPaANFT5uvzBM8VEuHimaORAnH76BvrgkuQtRaf0K1nbJ6+ZAvFfHzywBQs9Ih6TnzxKnN/l+sLWgx8SZzHevNAtVgUvPX/TGTAiZj0y4qLk0fhXBr5y/lF4T/IdS0q6aZ2l6Psv5WJ2vVRsCKMsTDW5chU8ztMrzvQco9ZvpT/MXJnhO9U/4W+p/kIfmGSyBXblruv9b+Wad20XiMgu7F2xvFRO5NVKnIfuw/x+B/j1CG80/jbCP0by+of4T8lDTj+fh9d/AQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate API" searchProperties="true" id="0559683a-89a8-4543-9672-06581fc3aece"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" id="6afcd2ee-d125-48d3-86d9-0b8f90dcad31" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
	xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {

         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

        tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
       }
      }
                                

else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1995-02-28</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8/User/urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">en</con:value></con:property><con:property><con:name>Locality</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1650</con:value></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>userType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADULT</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>210616552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>400681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-02-28</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true" id="30aefa36-5265-4855-8432-a953e41b8771"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cc7ab515-dee1-4301-a271-69c0066d67df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="815bff3b-842a-4070-86bb-cece5b19c7a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="f23d9bb0-0bd1-4723-928b-a9c1d99c147f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		log.info curYear;
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay); 
		log.info now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		log.info curYear1;
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		log.info now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="5aec259f-6efc-4047-958a-f404549b66a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="bdbb05a4-3195-40a4-a273-e98edb919cda"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}
</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bc996057-be4c-4bee-a9ac-43bd22a866c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Test Case Name with Expected Result" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def httpStatus = context.expand( '${#TestCase#httpStatus}' )

logFile.append("${callTCname}"+"\t"+"$httpStatus" +"\n");</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b31e8838-e244-4a70-b23e-27ecedeb39ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="95f3189f-715e-4cef-bc91-14a1b4138b68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 //assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                //tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="419e9428-03d9-4db9-8ef2-4eaee630ffe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
<!--	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>-->
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQj3eQF0GQUWeotpZb7Ysv57T90okhaFoISILa/vqboFi1tsdzZzpjs2x2n9198iQNCuLIcD1KUcZwQiS/05RfNAcaDrImiu4AXTHrRk0BmgGUmj2pBYbuwKBmyJJPaY58QhkgrCkbml5VdEMxnJFuuIbtVrVK1dSeZekXyigPzV0qmiyt4ohQt0jblPOMuAmgmLoExIi6DLpDr99zuacLSkxyq7FGWSTMWjPGUldVYSVAEEURrMAkVhvqnk8joO4QTwlgeYY2OQPalDd7l8tlZVmtJNlUNTRNU7W6yn0Ciqfncuus3IwCn4TJet0GJCEYggh/AAGqj9gsCSQvmiYZZrP4m9C6qmsitIJWUIG6Sc5l9TNBge7ESHsgMwoUOgN6GWyAQpQhApE0HvhN+fy0Ca73jjJAaJhkMT1Y/x0kRBYoSlIUKLSsrER3esQj7Wo1EHR9AqOc4gW6FTRJAURUus9QiFc9TDn5AioV45dWlP/hkmUI/s1YGuouVg5dPdKdDp4iyv7PzHbntY7yC0Q5ao1rzzjuxfbd2416ddN1ur4V3He6Zjv0mgWEXec1qO24N+tDsm65tdn0Np8/X05+f+RGduGnQ20wmT0OHp0rOh5fB/eTYS8d25p9e33529EfhzkIzGXydMt5MvGy139Wq2TaHYUsXGX31vWZEYU+/Eifu+aY9r2njjNwBu/j6r/3Uwdes65tLuYfM683fn99sOzube/u0Qr789eH5zgNQpr2wtGNoy7T4SDU4Vl/3r21jSe9E45m1bs8ffAemp817dawbywlYZhPXhFk5VLQw+9IV3xegP0sL8KCAyUsXN1UaBRliDC5JXYJaXFzLkA4cPkw12vL0gzP7NTaRr1aNXWtfVH3DP5f3XT0q7rnlBq0RnEAsZ2QEItcQmXX/PkZIIxdikiAMmWR5HCGqPxDxA5gQPLJgB+OhFA0SriK25eWbdlO9aLWcTTTdtqe5fFF1Xa0qyv7oi5Ltwm7I3eZFzKU7Su4tafgAwRxipGQecFzyolOGW/JHCxyFumVBagQlPOLIBNa7BqmY6kUx2mEBGA1ToI8QpV0lhYNUun611AApIV1cDkqzt+35R1+KzvBfQIsHKio5QLxaaIjV5FRFvJ9wc5uwWV4Lw+wOGa8rSzDcI1k/9MnWwRNtlThFb20hy96iXvrfvL2rzvVH0Cph/3YJgoWeCdteafya4KLSKuc5hxU5pV8sciL+dlCIDMeXuU6qatDBHOucu+j5A0RdRtCPemS2aI+yLy17+PL2YwMGWAo5myTiuUJL4whouKF4fPTsjr1+bKXkveNoRU7ZmtH/CEiEP/4VoEuFH7cfM9/lkkWfI7rSKydPLxO/qxgmEzFSlwn79+QAiY8LOb6l2S7wY8FOJZ837ht8hYL42ya5Ax9/0USwtaUAYRJTpjfkQvDrtgWONl7itxPpy9hCkHf3NAr+u0N/djvDbnsxUDe+uI/Oyu4oAtEsngIFFia8oo/OHlyMt0R9w3AXX2vm5pRsy7+qO/7lbS+mL9adnp6eB5a/wE=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>6B02C6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E6078B27BD7C72E6E0401F0A059976B6</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true" id="590b402e-4d94-4c2b-a26d-a4d3267a4ef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

//callTC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//callTC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL2"));
//callTC.setPropertyValue("UserName2",tC.getPropertyValue("UserName"));
//callTC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42/User/urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwimIlqRo2RcUNXG/eQhgQZZMBQX/9O5joMTnJ+fJ+VzpNT/fTy/Q884zMwKc7ACGYpF4UVlXppfaPzbEm6fBcg7J4ssG2zHbD5KxWw3Z4ewsZyLCkWauqCGVQDVFqhulLjSYppkHyDbJpUGSHbnVY+qnNUJtadQEThE1jlSeyVi0CP0Sdq9uXWpaEnchEHuqEZgBRJ7U6OtCGHazZMW+Yaq/PbyivDpPXXZrGHYKwnmxoQd+3nqwoIJ6JDzrPNuronhuaaZbAd582eqm9783z/ClnnqLEJWiSJAmSJ7COjTz3V+21ctsMbTV0ore1aIZR6Fmm713MEpQG011kV4HvRomX7oJvTFMERZamG7CwGhbFhr9qxG8HV3Q/tPQBZILMBtqZ1M3YDDowgaEFq/OZ+lL79bMKvu01EjNETpQE6NP6v0GC4Qn6UQztBrpFdkP3c4tfpOv1GVodNbT8DHknOCrbJDYtiKqTBDpeMfQQbj4bVa/lrxbo1mHQ+i8leSYecWLYxBeZkTwXovT/qddjrd6sLEw/g6+9aBnyXBOJdA5WS4WZ5mRkMmvZmoCXK4RH5TdQ91K/rz836r2v3jelTLaeDODZ5PuTurmwHGFJ6kVr7K72MfDycW+w34otwXDEqaxd6sJx6abSQWW7vRXX22ah4BVrsIhHg6Z+rHDk7MBdLnSyTVYtokeiJiGcJmOZmJi9ppRPt8wyWpK+fbRnI0XhocHQJuuPE9frOoIi7JpFN3VITmVT1qksjIw6ToJYHC0WxbgvG+vo5XdMjzGUceEQrkGW/1dNkpfM1LwvxHJSOPh4pvBVU1WxLokigKILclUArioML2AkuIfj7uB1+ZwUwHSuAAmctRnIJXctLabTgZzbi4W/WaiKImgzNu+BtVTBHyS5WEibVZ80l5t4TSvkRhcEezWLtkw/tnuHvLezRpqh5SNDPWt7uRgZMrm8ytwCry/aXqPGxpypLPcCr83kXMqvHiU53402y1m8nvO5dZGnGmC7gJrL4k7rGcGCspjZztrLQw0crnJhp4mLhVbIBphUBHe0wLEZorKJrcCOt4G/ezDew8YNu7s4b7t+trnIe02Uu6J+7OrqlpGmch/M1vPtcnEwl8qpYvVGYHvz6DU9cxXl7qadS9N1fxBt1N3JGoGpLAhTgNNFAk3t9kHUFYDGAq+4iHuBi0RbyYk+jSp13u9yq7N3XCGzS/om1W5T6+GSmxw5SQ7rm0G23e+03UoZ1we6fZrzKX9Zo1P9xJkeZRWxM13JvXRQOL2pXtlOpGJl9eq22yf8C68kWqsPkst552vuLF1yY3Teeo6zFFZj1m85vsbMYsd34jOqG9H0kJCcABmaWJ9Pg7QCXE0AoLuf74WpJrTLpNpqPl1rggkUOc3AZU+nA3px7PdOvrVmQFQMluP94b0wtpTLApFPZdxWcqUtAbssQk+fy8oezAXXTQRXVoSpJYHpWh3ka5yveQ8rf86jcs2jKwtAZjaA43sVZk7y6TjVWRacQ2EeKvxOOxZLmwvI1hHKQ30Us7mGRk64WUYHLfCSeZLp88FgNCy2RtY97PGsckh9cGI2Ffl0wEd7NDB2BymSzEm8XqdxPbQSK1XjQFOLy3iD9m1vG5D9epMSJqRkteh5sM3nXVPeDBJXpwa9WThhWnwFZc65F9T37XxZN3Qubtli6EjnM7FJFmQEIoWfNY92QdOH3TwfcrnTB4etSY8KnxfOvDzYGFY+mw6WelBvVpqn4TAgLwbBjuJxrndzVp5O64wtGD0DxYm3ztpukYxDm16bKXfakAvOi/0DT2cHg42ZhRvgYk1OdtzSJpUpu7I2gduKrT4xI05AbjlDtXveXsxLHIyttwH6eTrchW/zg3icLB9Gz4106LhboZXeluUFpEpVBd8KZvp3AlNKPLvhXFU7ccmCUArDtPZa7irJSyfDFMezO/jKeFvLTUA123JbAbLU4hlSJlmSUkhANnkeHyPhxnLeUHyCKEah45W+Sh73dkv9HaAVdBAMbZg0TlFm7SCq/cVima+qGs7w9RuFCBoR5om0QMlNrimxLKU0KRKILaUNRJ5TpCYvkKxSq46idByOE+CkMPnIEZkPHHEGLS/2YEkky9sU4esUpTglR/OUpT71dDKfQphhqpmUbK9Ds+0mgbwg9mEJmAgiO/PhU7yLrwki0Nsv3TAtdJXOZOMfVRevN/23IX7+dssG1rG9UgGV8QgQVxR+QXiZWzDfB809Bn0zDzLbKy90nNo08aw3JB8//e6YslXu7VJGJer/UDfcd/Ufb/9zJ/EXUMTnfNwd2Sfvwe2NuWMyiunK662iR/Pp+JSdTtm1hq2SiiXYPEERZIvQoZVhPnU2ogMMibsJ4kdU9o76k+e7/CO+LN2FeorHQYA7rnpd/uAdo0NUvmNUfGKKnz6SPrjEeUthkX4lE3383CkR//VFZHWsUg+LJ/gnjxL7d7m+sPXgB8dZzj8vdMtVSVzP3zSFFWGzHp6BUfJo/CsDXzn/KLwn+Y4lxd20zVL4/ZdqOdxeaqZlRVmYqlLtKngcuFec6TmGnd9Kf5i5Usf3t0CBvn0LrLShjkdfYNbuut7/Vm5413axIN6FvCuWl1qBn7XYeeg+DPh3gH/OeEGRFZoiuVbzPuNbPE9LLH1P4IdIXv8Q/yl5yOnn8/D6Lw==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00033_UserCreate_AUTH_Creator_ADULT_Full_New_CHILD_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5A158BFF59D0675E0401F0A07992D42</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="18d6dbdf-5594-4023-8f59-664e83628798" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40b51506-e7ed-484f-9cef-144c355c10b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0e921030-fc0e-4088-8519-d2ea05acede9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="8dac2685-8684-45a7-9383-18906924bc23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="9edfc5bd-e710-4adb-a343-f24a81968540"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5be437dd-519a-4ddb-9991-82608accc06d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a34e05a2-007f-4659-9d23-4e5f076e5223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="19cc486a-a16d-4ec8-86ef-9f451f07ebed" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46e67ffd-7362-4e1c-a502-21e353b9227c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="277c6a80-14fb-4da5-bd51-3f2ccc23180d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="11565952-3245-4993-9a90-b45b77daa42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="aa2ec204-f680-47ad-98fb-51d2d96fbf59"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="367744f1-376f-4646-9264-0e788eced0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e8904455-2076-49b1-9371-9836b5d0c1cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8sAgihWkqphU1TcwPXmLRwGRNlk11//DiZ6TE5yvrxf5cJM09P99DI9zzzHhuc2uyCOUZQ4gV9VxJfaPxzTJBkWNRt00zIbDLczG0aT6uBlh2pRBkVZDFerKnGcIsWPE8NPXmpNkqIbJNugOJ1sdelOl+k8sSyzrVWXKIqxaazyRNaqhef6cffq9qWWRn43MGIn7vqGh+JuArsaUEddrNk1bphqr89vKK8Oo9d9koRdgoBPJoLIdeETDDzimfig82zGXc2xfSNJI/Tu04xfau978zx/yumnILKJJkmSBMkRWMeMHftX7bVy24xMxbeCt7Vg+IHvQMN1LkYJSkXJPjCrwLWDyEn23jemKYIiS9MNVMAGpBj/V4347eCK7oeWPoCMYqMR7w3qZmyOLBQhH6LqYq681H79rIJve/XI8GMriLz40/q/QUJ+htwgRGYjvkV2Q/dzi1+k6/UZwa7iQzeNnQyNyzYJDYji6jRCllOMnBg3nxlXr+WvFvGtwxD8LyV5Jh5xYtjEF5kRHRvFyf9Tr8davVlZGm6KXgGVdJC/9rRR1qunMuNpHH8O80vnQL5cITwqv4G6l/p9/blR7331vmkizeSkl02UHWImJKhPLrBlSqucXmx1rW+QuUJL9mAEt9qw3TZMYw6glp6QSazSvdXL8mBdEELCd5RLqFdcuJ0o7eKkjdzW+UgeXd8VNDSVpuqRS0HeonkhPE5mobsMZcsMBQseTO7ILkfncM+yxakN/Nhklwf2rO8qy0l4CS7H1B4yUXDOaWO9efkd02MMZVxDdL4GWf6/bpGcaCTGfSGUk8LCxzNBr6qiCHVREAASbJArPLAVfnQBY94+nvZHp8flJA9mCxmI4KzOQS7aG3E5mw2l3Fwu3e1SkWVenTN5H2zECv4gSsVS3K4HpLHahpumTG41njfX82BHD0Kzf8z7ezhWdTUf68pZPUjFWJfI1VVmF3h9UQ8qNdEXdGV14Dl1LuVifvUoSvl+vF3Nw82Cy+FFmqmA6QFqIQl7ta97SwrS8z08SCMVHK9yfq8Ky6VaSDqYVnh7vMSx6YK8DaFnhjvP3T8Y72Pjutlbnnc9N91epIMqSD1BO/U0ZUeLM2kA5pvFbrU8Gis5q8D+GOxuHp2WY6yD3N52cnG2GQyDrbLP4BjMJJ6fAZwuEqhKbwCCHg9UBjjFRTjwbCCYck4MmnGlzrk9dn12TuvY6JGuQXU61Ga0YqcnVpT8+naY7g57db+WJ/WhZmYLLuEumzirZ6zhULAIrdla6ifDwurPtMpuKhZr2K+b9oBwL5wcqe0BiC7nvava82TFTuLzzrGsFb+eMG7bclV6HlquFZ7juh7MjhHJ8ohuEptzNkwqwFZ5AHqHxYGfqXynTKqp5LONyhtAlpIUXA7NZNhcngb9zIUbGgTFcDU5HN8LY4q5xBP5TMJtJVU6IjDLIvS1hSQfwIK37Yi3JZmfQRHMNsow3+B8LfpY+XMe5WsebYkHEr0FLNev0AuSSyaJxjDg7PMLX+b26qlYmaxHtk9IGmnjkMnVeGz521VwVD0nWkSpthgOx6Nip6e94wHPKovUhhm9rUjZMQTOeKjvj2IgGtNws0nCug8jmCihpyrFZbKNDx1n55GDeovip6QI282Ft8sXPUPaDiNbo4b9uT+l21wlTq1z36sfOvmqrmts2DYF3xLPZ2IbLckABDI3b53Motk87hf5iM2tATjujOa4cPEo46ThVof5fDZcaV69VWllo5FHXnSCGYeTXOvljDSb1WmT1/t6HEbOJu3YRTTxzebGSNhsSy5ZJ3SPXDM96kxIL20PF2uamWFbnVZmzBpuPbsdwgExJzIgta2R0jvvLsYl9CbwbYB+ng534dv8IB4ny4fRcyMdGu5WBJPbsryAFLEq41vBSP5OYEqJYzasq2o3LFlQnCA/qb2Wu0ry0k0xxXHMLr4y3tai3BZoieFEQRY6UouUSIakZBKQLY5ryXTnxnLeUHyCKAS+5ZS+Sh73dkv9HSD0ujHyTRQ1siCFexTX/mKxzFdV8ef4+g38GOkB5okMIGmB4QX8x9ACxTG8SLdFSQJcu0UJfKdWHQfJxJ9EwEpQ9JEjdj5wxDmCTuigkkiWt2mMr9M4wSk5GVmauNRTZjz5KMVUMyrZXrfJdFpE7Hihi0rAhBeYqYuewn14TRARv/02GwaMr1KBFCS5I5EdAd8MbZF9TCzVJPkrBfg29s/fbmnCOqZTKsRloDzCpUZfMGH6FuW32aCox2zczIPUdMqbHuc8iRz4huTjp9+tVPbQvY/mkv6PoP1D3XDf1T8LPpgmPkd192ZmDryfiPtjAXNNzEZebwU7GU+npzTL0muJ2iXTirB5giJIltAQTDFdOuvBEfnE3QTxI6Z6R/3J813+EV+a7H0twafdww1VvS5/8EzRUFw+UxR8IIqfvoE+uMR5S1CRfCUTXPyaKRH/9cEDu7DUw+Ip/smDyPxdri9sPfjBcZbjzfHtclXy0vM3nQEDbNbBIy6IHo1/ZeAr5x+F9yTfsSS4m3Zpgr7/Ui1n10vNgDBI/UQRa1fB4zy94kzOIer+VvrDzJUZvlP9Iv6W6q/VkYYnm2fU7rrO/1ZuONd2gQjvip0rlpdagV+t2LlvP8zvd4B/jHCBEzhGaso0Jd0nTZvjmhzVvifwQySvf4j/lDzk9PN5eP0X</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="3ad94f34-6a5c-418b-b8f8-a203cab10bc0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a41d2cef-51b0-46b7-b40c-1d6923e3263d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e0e1fe9a-79d7-42ce-8931-9ee2304fe307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="dc69f304-d0b1-4059-89ba-47e13860aae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="f64f1781-9c0e-4af0-98c4-96319bba32ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="1e9ae371-1bd0-4759-940c-81391e47aabd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="fc5935eb-e5d0-495a-bb33-6346b3b9fdb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" id="7862a908-a45a-4b81-bc0e-801e8e24856e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8e7711f-eb52-4a17-984b-8a6a0236e395"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="fc0f6904-5506-463b-adf0-9309f4db6c7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="15098d07-3e28-4bd9-8ce6-eddc712c561b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="02239d7c-1ce6-4d58-9ae0-6470a8e1e472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="a1716223-f6c8-4dc3-856d-e8679a537744"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3af7e03a-0317-48f5-92bd-e35a465a120e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5d887a92-965a-45ab-ab45-7daaea74c225"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBUFHRgLjevIXDgCibDJv++nfQ6DE5yfnyflc6PT3dTy/0PPOMDc9lOwBjFMVO4Jdl8aXyT7PFcg2Th7WGVedqnNFu1Np0m6+xvGnVG3R7uzWYSlnGOEGyj2PDj18qLM3Ua3SzxvA6U+806E69+USz3KZSXqAIE9NE5YmulHPP9XHn4valkkR+JzCwgzu+4SHciWFnBpRxh2h2jBumyuvzFeXFYfS6i+OwQ1HwyUQQuS58goFHPVMfdJ5N3Jk5tm/ESYTefZr4pfJ+Nsuyp6z+FEQ2xdI0TdE8RXRM7Ni/Kq+l22Fkyr4VXNddww98BxquczYKUAqKd4FZBq4dRE68874xzVAMXZiuoRzWIMP5vyrUbwcXdD+09AFkhI0a3pEivBvTkIUi5ENUnmvyS+XXzyp4PatHho+tIPLwp/V/g4T8FLlBiMwavkV2Q/dzi1+k6/UZwY7sQzfBToomRZuEBkS4/BYhy8nHDibNZ+LypfzlHN86DMH/UpJn6hEngU19kRnRsRGO/596PdbqamVhuAl6bc4Ye7D3+oln7yJRsFdmQ+NWIuqGwcsFwqPyFdS91O/rz41676v3Q9aSsua+vTwziatnYX7O1S7XPMxTS287OQgHbhuej/l5U9dVaz3Ydkchv6H9pDoc5Nvxymc0zemP9y0eSNtSg6/i5bq614ataj5fRlqaCNXT0lw38154ipqWeaB8VU0MwVjM1UzdU6c8dLhwoEtWjH1/82ZQPSMVFG0pl05QYbdiHhyEQ+jUe8yEll5+x/QYQxHXCJ0uQRb/Vw2aF43YuC+6xaSwyOcZo1dFlrtVsdsFqGuDTBaALQvjM5gI9uG4Ozh9PqMFoM57QAQnRQOZaK/FhaqOpMxcLNzNQu71CD4uG4C1WCIbopQvxM1qSBvLTbhme/RmJgjmSgu29WFoDg7ZYAcniq5kE10+KXspn+gSvbzI7Jysz8peYab6vF5a7gVe0aRMzC4eRSnbTTZLLVzP+QyeJVUBXB8wc6m7Uwa6t2BgXdvBvTRWwOEiF3ZKd7FQckkHbyXBnixIbHq3twmhZ4Zbz909GB8Q47rZX5y2fTfZnKW90pX63dmxP5O3dVGVhkBbz7fLxcFY9tISHEzA9ubRaTjGKsjsTTsT1fVwFGzkXQonQJUEQQUkXTRQ5P4QBH0BKBxw8nN3LzSDrtnLqCGLS1Xe7TdXJ+e4wkafdg2m3WbW42Xz7dgUJb+6GSXb/U7ZrXrT6mhmpnM+5s9rnFbTpuEwMA8tdSUN4lFuDdRZafsm5is4qJr2kHLPfC9SWkMQnU87V7G1eNmc4tPWsaylsJpybstylboWWq4VnnBVD9RDRDcFVGep9SkdxSVgKwIA/f18L6iK0C6SasqZulYEA/SkOAHnPRuP2MVxOEhduK6DIB8tp/vDe2FMMZMEKlMl0lZSqS0CsyjCYDaXenswF2w7EmypJ6hQBOpaHmVrkq/5gCh/zmPvkkdbEoBU34AmPyjV5zQfT+MZx4GTL8z9Hr9TjvnSbHp064ik8WwScpmCJ5a/WQYHxXOieZTM5qPRZJxv9aR/2JNZZdGzUVrflKT0EAJnMtJ3BzEQjbdwvY7Dqg8jGMuhp8j5ebrB+7az9ehhtcEIb7QIW+zc22bzviFtRpE9Y0YDzX+rt/gSTqzTwKvu29myqs+aYcvs+pZ4OlGbaEEHIOjxWuNo5ix72M2zcTOzhuCwNdhJ7vLCiZdGGx1mmjpazrxqo9RIx2OPPusUNwmn2ayfcZKqVuumoA90HEbOOmnbeTT1TXZtxM10Qy+aTugeeDY56FxYX9geKdZbaoYt5a2kciu48exWCIeURqVAalljuX/ano1z6E3hdYB+ng534XV+UI+T5cPouZGOGelWBOPbsriAZLHcI7eCEf+dwBQSx6xZF9VOWLAgHCM/rrwWpwry0kkIxXHMDrkyrmux164zXFvoMQ2eEeotieZopkcDusXzLbYBbizniuITxG7gW07hq+Bx11vq7wCh18HIN1FUS4ME7hCu/MVika+y7Gvk+g18jPSA8MSWxDFCQxJbvNBmWbbREOgGgS5227TYZFhQKU+CeOpPI2DFKPrIEZsfOKKGoBM6qCCSxW2KyXWKY5KSo5Emscs8pcaTjxJCNaOC7XVYrt2gsOOFLioAU15gJi56CnfhJUEUvv6yNQPii1ST9H/kWfdy038b4ue9WzaIjukUCriIR0CkougLwsvegvk+aP4x6Jt5kJhOcaGT1MaRA69IPm797piiVe7tQqK6Qb5rfhZ8sEp9DujuyEwdeO/5+3OAsEnCN15vJTkaT8enJE2TSxFaBZeKiHmKoegmNUMwIYTopAcH5FN3E9SPuOgd9SfPd/lHfEm882cx+Z490jLly/IHD5EZwsVDRCYtn//0lfPBJclbjPL4K1nXJe+VAvFfnzSwAws9In4jP1kQmb/L9YWtBz8kzmKAOb5drArmefqmKWBAzDpkiAXRo/GvDHzl/KPwnuQ7lph00zaJ0fc75WI6vVQMCIPEj2WxchE8TswLzvgUos5vpT/MXLjfO5nP8bdkfqWMZ2R2eUblruv8b+Wac2kXiMgp7FywvFRy8i4lzn37YUK/A/x6SHPgb0P6YySvf4j/lDzk9PP38Pov</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" id="9d562b4c-2b21-4e4b-9dee-ea86ba8721ce" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b6c59ddd-f128-45cc-acc1-fcb9c7601c10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d2122245-f595-48c8-b54c-ea78d0db3f52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="7060fe95-13b3-41ca-a150-3f0edc3adc54"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="20e9cc33-a9bd-4521-aef3-430d62debf4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer" id="f04ef3e0-3f34-4fd7-b08e-576d088813e1"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2479ab41-1198-444b-88a0-f69cfd793c9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5db4b6fe-99bc-4dbd-b846-0fe097588a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziANGd0cUgoqKIzi93MCiGJRJikm//hbauu3e3fvuc1/ESrIyVw5krXrFuueyHYAximIn8Muy+Fb5D982aNjQ27V9q8nUOJ5u1PZGE9ZgnWk1aYZrtPZ8pSxjnCDZx7Hux28VlmbqNbpZY3iVYTsc36HZlwbd2lXKKxRhYpqovNCVcu65Pu5c3b5VksjvBDp2cMfXPYQ7MewsgTLuEM2OfsdUeX+9obw6jN7tOA47FAVfDASR68IXGHjUK/VJ59XAnaVj+XqcROjDp4HfKh97syx7yeovQWRRLE3TFM1TRMfAjvVP5b1034wM2TeD27qr+4HvQN11LnoBSkGxHRhl4FpB5MS294NphmLownQN5SR9DOf/U6F+Obii+0tLn0BGWK9hW2fuxhbIRBHyISprC/mt8s/fVfC2V410H5tB5OEv638HCfkpcoMQGTV8j+yO7u8tfpOu91cEO7IP3QQ7KZoUbRLqEOHyLEKmk48dTJrPwOVr+cs5vncYgv+mJK/UM04Cm/omM6JjIRz/P/V6rtXNykp3E/TuyUIGD9To4Kz6m0G+mqqebMHQTBfa2xXCs/IN1KPUH+uvjfroq49Nvom2vBb6zqSrVJdSHc0uDNI0rX5m3KQXKs4md7e0H3PrFhsf061Nj05NdcP1VtrQmgB5jf3LxN/3N6JrlpSumc+r9TNX5UO6MWvSeDWecOP2KbCs4WXsJXbT32/8wclh2E2uL0/Was7tq+yskWvnoRtjmZ1Jl53tO5RZUvdOmrZlLrT9qDU1jzjevv2K6TmGIq4ROl+DLP5vGjQv6rH+WHSLSWGSzzNG74osd6titwtQ1wKZLABLFsYXMBGs48k+On0+owUw13pABGdlATLR2oqr+XwkZcZq5e5Wcq8nKAsuG4CtWCIvRClfibvNkNbXu3DL9ujdUhCMzSLY14ehMThmAxtOFFXJJqp8Vg5SPlElen2VWTlZX5SDwkxVrV5aHwReWUiZmF09ilJmT3brRbjV+AxepLkCuD5gNKlrKwPVWzGwvrDhQRor4HiVC7bSXa2UXFLBrCRYkxWJTe32diH0jHDvufaT8QExrhr91Xnfd5PdRTooXanfXZ76S3lfF+fSECy22n69OurrXlqCgwnY3z06DUffBJm1a2fifDscBTvZTuEEzCVBmAOSLhoocn8Igr4AFA44+aV7EJpB1+hl1JDFpSrv9pubs3PaYL1PuzrTbjPb8bo5OzVFya/uRsn+YCv2pjetjpZGqvExf9nitJo2dYeBeWjON9IgHuXmYL4s7WdivoGDqmENKffC9yKlNQTR5Wy7irWI180pPu8d01wLmynntkxXqS9C0zXDM66qwfwY0U0B1Vlqe05HcQlYigBA/6AdhLkitIukGnI23yqCDnpSnIDLgY1H7Oo0HKQu3NZBkI/W08PxozCGmEkClc0l0lZSqS0CoyjCYKlJvQPQBMuKBEvqCXMogvlWHmVbki9tQJS/5rF3zaMlCUCq70CTH5TqGs3H03jJceDsC5rf423llK+Npke3TkgaLychlyl4Yvq7dXBUPCfSomSpjUaTcb5Xk/7xQGaVSS9HaX1XktJjCJzJSLWPYiDqs3C7jcOqDyMYy6GnyPllusOHtrP36GG1wQgzWoQtVvP2mdbXpd0ospbMaLDwZ/UWX8KJeR541UM7W1fVZTNsGV3fFM9nahet6AAEPX7ROBk5yx5tLRs3M3MIjnudneQuL5x5abRTYbaYj9ZLr9ooNdLx2KMvKsVNwmm27GecNCfzxBDUgYrDyNkmbSuPpr7BbvW4me7oVdMJ3SPPJkeVC+sryyPFmqVG2FJmpTm3gTvPaoVwSC2oFEgtcyz3z/uLfgm9KbwN0K/T4SG8zQ/qebJ8Gj130rEk3YpgfF8WB5AslnvkVNDjPxOYQuIYNfOq2gkLFoRj5MeV92JXQV46CaE4jtEhR8ZtLfbaLEcLosSKTbHLSxLN0UyPBnSD51tCu3FnOTcUXyB2A990Cl8Fj7udUn8GCL0ORr6BoloaJNBGuPIHi0W+yrK/IMdv4GOkBoQnggYjtQHgu5LQYKVGlxPaXIsWabrBsW0SS6U8CeKpP42AGaPoM0dsfOKICwSd0EEFkSxOU0yOUxyTlJz0NIld5iXVX3yUEKoZFWyvw3LtBoUdL3RRAZjyAiNx0Utoh9cEUfj2ZGs6xFdpkV2Irwf9jxF+fXdPBtExnEIBF+EIiBQU/cZ3253GPZafY24/x3w3DxLDKc5zktk4cuANyedXvxqm6JRHt1x/IL7Dfmh/FXyyTH0N6uHMSB34aPvHjYAQSkI53u9VOekvp5ckTZNrHVoFnYqIeYqh6Ca1RDAhnOisBkfkUw8T1F/R0QfqL54f8s/4ktj2lzH5pD3SNeXr8i/uIkuEi7uITLo+/9uLzieXJG8xyuPvZF2XXFkKxH+81cAOLPSIeEYeWRAZv8r1ja0nPyTOYoY5vlWsCvJ5/qExYEDMOmSOBdGz8e8MfOf8s/CR5AeWmHTTPonRz2/KxYB6q+gQBokfy2LlKngemlec8TlEnV9Kv5m50r8PPp/jH/n8Rhkvyfjy9MpD1/nfyjXn2i4QkV3YuWJ5q+Tkakqc+9bTkP4A+P2c7vJ/mtOfI3n/Tfy75CmnX7+H9/8C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="16c677b6-f520-424c-859c-233d39f17e8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="7114ae03-40ca-42f0-a8ed-f3e7bad2dd89"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Create_TOU"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Create_TOU" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Policy_Create_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">822</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VInAQIESBx3aXLZQuU3falMo4Bt8GB2OH2648dCA0UuuyRKlFPxjPfXPzNFBmc+6ZbYQyHnARUadVL6mvesIysM85qBpg4mj3GBW1sOHkNIlDIecBG+YKjKi3GItyijEPKS6ppAFszTM20hiDvGqZrOBkrZ72oygiHTJgWKhlDVTZznzI3dltSo5C6AWSEuRTOMXM5cgeVTtsVmi5MMKnl4h5l7DAszzhfuLqOMh5G2PdRBgVzvaif6BQ95g7IlEIehfjg02Ml9XB3vV5n1lYmCKe6aRiGbhR0oeMxMr1Xy3fJZey16CTYn2uQBpQg6JMdlKA6mM8CT6n40yAkfDa/YhrowJCmNbxBGgI2vVf1DwcxuhstnYAMGdTYDILEWB9PcIgpwspTv1VS72+r4P7uMISUTYJwzs7O/wYJ0xX2gwX2NJZElqC73eKFdJWLGLktivyIkRXuyjZZQISZ8ivEE7JpEyaaz2NKXH5lw8QfSboMo38pS1FPYxXQ9QvZqZMpZvz/1Cxdr72VEfQjXK7+mDrNxpQ2wXcL2PXO/HGsG3zw3F4HpRhCWnkP6ljuw/m8WY+9dbjU67yPpoXO85rM8Joa/eVDbbtu/3j5vZvmtg/ddjjsouxzVKkWKOhUwcTn3wazXa82e9jZA3M9eVr5+ovlb/+MCpU7AqvvpJ93TOuhvlnld4/0bfPW7b9vds3gYfTu+La/NIH1jVDUmFYWz1b+++ixp2/zvWoh12/zAX35ydYjoNejt7tqrfK0+P78e7XsjKz1z2670yh9xJSO4VSYUMIgGr9hxJOjbI9WXWmKekH+Nb1ICfG0SazqLiRHMY4pV8vylqQWNxIERDxXFHN/BsDIGbls1qw2s7YNDBPksznxX8F2QLNQcRIO2qM4g1gL6IRIX5Jl9/3zNUA0dxmmHg61VRChGWbqFxbrkEOlRfvicQSU4WEgWLxQbdTrltOo1c1qowaadWA4lm0WqnYt5+TNmqp0A96jvbAy4Tg8YXDTOGHwPkZkQbCkednnTDQ64yIlS7iKuA8yK5ihOBKDIJRc7Jq2k9UZmS98LAHr88CLfJxZzBZxgnS2/zUFG7FY2m8M4/d3Nbzzb0kmhI5HpAKTsVSxqCb+NIqAm00CuR6wlQ44MV+JPCKfmUgrDwnaIzn99NEtsk2OrSIieq0NXkGC+6h+8/XPN/UvQOnn+Tg68lYk5TaZqWJMCBIpJ9VcwswyE61WUVy/vCTIUJjXBU8CfYBRJFhuOwzeMdWPJvSbhswR9Znno/wUX8RndMAhx3PRbUp8vGHDGGAmN4yWeC2bW9eXE5cibxxv+CVZzReLiET85a6CXCT1hPiX+FkHofdRrgu2Un5EnGKt4IRO5UmOk+2VpkCBMEsE/wVh2vglA5ecnwqPST5i4aKbxhHH178okthKKkQoiChv1dVYkCbbGCffLrD7ofTJTEzohwm9YVcn9J9OeyBobw7Voy75u7JG4nZBWJWLQIylpG7Ewimc02mK3A8A0/xuGUbOAdZf+f00kvIn8WdJKqfn76H8Hw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>110606552BF54410217565449481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7114ae03-40ca-42f0-a8ed-f3e7bad2dd89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true" id="69fd4170-842f-452d-b5ba-2a3dcb222763"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6f62f720-8990-433e-b87f-e5bfb4b7fa27" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreate_CLGAttestation"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreate_CLGAttestation" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreate_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyqEhEtIVJC4L73RBZbd9mVlnAm4G+wQO0D7648dGgoUuuyRKlFPxjPfXPzNXHM0D22vzjnEgjCq9VpV/XfJDsqVCcKGXcTYKDqFsoEsKBmo7Dg4KAdOaYJ1rcd5Aj3KBaKiqtt5q2BYtmFXRpbt2WWv4OSskvWsa2OIuTQtVXJ5XVvPQ8q91G1VT2LqMcQJ9yiaA/cE9ob1+ztPanoow6TXrjcoU4dxbSZE5JkmzvmAIQxxDrO5eW3u6Vz73BuSKUUiieHdp8+r+vvd1WqVWxVyLJ6adj6fN/OuKXV8TqaXeu0iuwx+jwZsc24iyijBKCRvSIG6BzFjvlYPpywmYjY/YdoyrbwybcAaG9gq0kvd/HCQojvT0h7ImCODz5CVGRtAADFQDNqPQa+qX55Xwc3dUYwoD1g85wfnf4MEdAkhi8A3eBZZhu58i0fSVbsG7PUoDhNOlvCg2iRCGLj2GENA1neEy+bzuZaWX1tz+UeyLgP8L2W5NnexSujmkey0yBS4+D81263XxsoYhQnUBg/cfbjrlPFjN8i/Ed54eIthcf8mnKdqCmFXeQNqW+7382Gzbnvr/VK3nWCnb40KP4qNxw4JbrqlTou1ExGw22FnPYpfJt1x33J4/5b2m8OX/liE32fjm8niibt1NHv+067QVfJ9eFWJLvpTc1qO3PB1ha9gyfL3Ykpfftrlu6vG06KynPphd3QVRaJyG7Bll4zRehAPOHGWg8Y9/GyAKD8/fIvnrZtir3Pxi4ye1q/fXOe5Py2vIjNssOpHTLsx7AszShgmkxfAIjuq9ui1tI6sFxJf04uSEN8IUlUvUhzFBVCh19QtRS1eIgmI+J4s5uZcajct12q7DdstFIpWvtlw67b8zy1WrI5br2QctEFxALHJaECUL8Wym/75GiCeexyoD7GxZAmeAde/sNhCAmk9OpCPg1EOIyZZ3C4U8yXHbbSdRqXZsdrtTqdoN8otp2iX6oVCRdcemOjTflwPBMT7DF7aY/ABYBIRUDSv+pzLRudCpmSBlokIrdwS5SgkchDEios9u1gpmZzMoxAUYHPO/CSEXDSL0gSZfPNrGwjzVDpoj9L3dzK8w29ZJqSOT5QCV7E0QFYTjowiOwvkdMCV3YAz8/XEJ+qZybSKmOANkv1PH92i2mTbKjKi383hbyvDvVU/+/rnm+YXoMzDfGwd+Uuy4zabqXJMSBKpZdVcoNwilyyXSVo/RxFkLM2bkictcwg4kSz3OmJ/gJpbE+ZZQ2aL+sDzVr6PLxEzOhRIwFx2m5Yez9gwhsDVhtGTr2V97vqy51LmTcBaHJM1Q7mIKMRf7irYw0pPih/lz4rF/ke5jtja8SPjlGuFIHSqTmqcvJ5oCsykWSL5j8W7xo8ZOOZ8X7hN8haLkN00SQSc/qIpYqvqCGOWUNFr6algl2xTnOI1Au9D6ZOZlNDfJ/San5zQv+7vhpL25kjf6pK/KxskbRcMuloEUixVfS0XTumcTnfI/R3gLr+7raZlW62/8vt+JLVP4s+SnZwevofafw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>Child_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Child_User_Create_API</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:54D1091BB2933410CB9A23349481F9A8/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5EC191E9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>54D1091BB2933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="7d85ebf5-2378-47de-9c73-bcc3be05c78c" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d4371971-21ff-4a90-a0e0-37d68d88fa6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1de7ab16-bf7b-4512-ae11-1599f01163bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4285855e-3060-462c-b83f-1d458ec03956"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bf51df31-427c-436d-aab8-95c2f091660b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9df4ad07-5eae-44d6-bbbf-fa0607afb8ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxjOo2Gzucd0RxSLNCoqiOvLCSxKQFmUAkF//S1wtLWne86c+9BhV5KZ9WXmV1lZP7Hpe2wXYIyi2A2DsiK+Vv5pNqFFWyxd27Ibq1Y30bbWaba4GsNxrdamSbe2zU2lrGCcICXAsRnErxWWZrga3ajRHYOud+tct954aTCddaU8RxEmronKC10pZ74X4G6x7WsliYJuaGIXdwPTR7gbw+4UqMMu0eyaN0yVt59XlMWG0ZsTx4cuRcEXC0HkefAFhj71k3rS+Wnh7tS1AzNOIvRrTwu/Vn7Zpmn6knIvYWRTLE3TFN2hiI6FXftH5a10M0aWEmzD61owgzBwoem5FzMHpaLYCa0y8OwwcmPH/8Y1QzF07rqGMliDTD34UaE+NijQ/aWnJ5ARNmvYMZmbMx1tUYQCiMozXXmt/Pi7Cl5tjcgM8DaMfPxp/d8goeCEvPCArBq+RXZD9/cev0jX208Eu0oAvQS7JzTKaXIwIcLlSYS2bjZ0MSGfhctF+csZvjEMwf9Skp/UI04Cm/oiM6JrIxz/P/V6rNXVy9z0EvQmWzvFn2yGBhOttYx6X66rBu11BCiFrwWER+UrqHupf60/E/XOq19G+xnsUdVLMuZ6ekpN14O9M9FAf9hsj0M8mZ4YD67aR6AKy4HV8O3jfBcyozZoR3rUV7lRc6gtk1Bp6aw98UtH2bEW+hG5lqDu7SMftweXfmZG65geuoiTW1bnwDQ3K5n32WS5wLjVwkrHXzPNkQa5o4J3avss6Lu2s4alZDXEVHVYx02r2qr3L4wRvn7E9BhDHtcAnYsg8/+XDbojmrF5Xwh5p9iS4xmjN1VRxOQiCOA8tUGq8MAmfzsw4u390dm7cieleaBpPSAKvLeThirYy4CZSbyjCvO5mgkX0Oft0ZwYGiXgrXlVl1IxXYlzTXuXUsew5Pl5I3vJ+iKNVIALY8FRJV2ai7ohqSoIr7JMFTdytlOnaqpoK7FEHIhSdrhYcidGcuZCVmmo0wa7mjaS9XJO5L3z0B+dNobkqYIqC9OjPFU2nKhJfaCvFpDtJcT2MvQPYWk14x+M+ge0A6iX0mRPcFGNfaoaM3Yk6mYhM55lqiL3VQ2nglZEJZektD+fXT5yIfCqYPlSJhlgcs0FNITeiF4v+9hcNAJVB6loF8YDKbXGNyCqRqcl4ZqroZTqkj4b9VRdSSVQyEQp9fCGHTkb2TlBTsv6Btg9FkbQpEUvIN8D/QTPjWPJlHtg488ZyOkOdBuuuQxTe91ORW3VH4RrhbgZAU3ieQ0QQDTIQyP558GQnzfGB7fDumi47YU+cqKSyoSD/emS0W2XG9uT0aIhbvetiexOONNyKMWD7I7bA0VB1oBxNNPSV5QuBu6lOR7MlsiNVpd41NCYpttulPRFMluKodey3per2aCaraBmjCfT2WJyybLRcde+ePH7mH+Ppn1VtMcjhCYYVina7PFGW2wIq/cd4dNWp1GjBGyVB0De2bbkEgLz77srCd91VSLkJcczlYWFIE+BLFclhRc1bdtzmAmU58mMGamKZHkkTefVUvdKa4EXSaVoc7E+rNgevTaAVTjT6lLP1maNan+J1trIM+YxSA/zbcAwtHzQ3rdqakM1Z4ClpFOenCK+lChgZo4PfTobzJs0c9Qsrz/tgBmXTdl9Nnbs9Xlvr/ekKKuHo7MygDc3HjimEIotSpoh6SpoX89bpiozTvegnx02PsxEg9SsMA4NXtJ7Gj3LRBEMrjJsADbDq4u0UwWpsC+BTDUJLU6bpYNXwcgdG1JCSJs80GW3Yel/5VhOsdIzx44C0MBnjklXjklge6wqbZHBjaZwwIvU5mXpqLXmw37nQGvL4b7EV3uUHbtefRy0U2NQXTDntOXstMWio4iOUA22K4fbxDxtXqCG+vuW7Op7MWjWvbM6VLXGzKW8M71DxxQPSyOFCSQuvvSoTpRUeX/t+pcLV2dn/mSanJSZOcDM2dkcF510N3lvUlQknxuX1vqk9ZYhXF3vkc9N8i68tlHqscE+deDb7DVNNjsE49syv4cVsdwjl6MZ/3mOyyWuVdsWqt1DPgziGAVx5S23yme4bkImPdfqkpvzuhaFOtvm221W4Jge3xYkuk4zPRrQrU6nKTa427B3RfEJohAGWzffKx9nr5f1nwFCv4tRYKGodgoT6CBc+YPHPF9lJdDJFBIGGJErq/JPi+FEscHyHCtxLbrdoJudVhO06Z5IxHQTVMqjMB4H4whsYxQ9j8qtp1FZR9A9uCifp/OhApOpAsckJUfzlMQe83IyXwKUkIk7yofeLltvNyjs+gcP5YApP7QSD70cnEORIApff9maCXEhbTVpuph2vo3v87dbKoiO5eYKOA+GR6Sc6Iuhn7tF8m3EDP0Y8c09SCw3H2pIXuPIhVckz58+6JLz5M6VPKQb5rvqZ8GTW+pzRPedrJML74y/v4nISE2GrrdbQY7my/ElOZ2SogStfKCMiHuKoegmNUUwIVPh2Qj3KKDuLqi/GsjvqD/tfJc/40tiJ5jG5DT7hDDlYvkXr7EpwvlrTCGEz/72qfe0JclbjLL4K5ngkUdbjviP7zrYhbkeEU/ITxpG1ke5vvD1sA+JM29fbmDnq3z8Pn/DChgSty5pYWH06PwrB19t/iy8J/mOJSZs2iQx+v5LOe9NrxUTwjAJYkWsFILHflngjM8H1P1Q+s1NMQD/etFk+NsXzVIdTknn8s3KXdf9d+WaW9AFImKF3QLLayUjj3OyeWA/9OdfAL9u0Sz3pxb9HMnbb+LfJQ85/Xwe3v4H</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1ed1186f-c5dd-457e-8f01-8a0cc98d07bb"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="e55544f2-194d-400f-9b20-0f2f08c38bf1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API" id="ff916405-df6f-46b9-a011-a6689d00989e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="ed28c5b3-0007-40cc-849a-38beaea556d6"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="26183098-d0ae-4f26-b4bb-e416676cf6a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8f0ba87-2757-4ec7-ac6d-427210632ea1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="23d09377-9e3c-47e0-92cd-8d7e2ed8d6fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f9a5121-1ba4-4ce7-9098-b2a7278fb180"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="21cf2586-d1ed-4fdc-832a-472a816d6528"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
			
			
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="eaa96ed5-3cca-4156-8a09-c54bea8b60f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Get"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Get" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3764bed9-292d-4b3e-8638-5dd84e1225de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3bb99271-32ca-4459-9ddc-4ca05ee135c6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2013/10/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="db2d7a86-6720-4405-a764-6b8d396ae082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333V1jux5ThoqhYO6kaLhKMqFy8vnyFw4gogjIgyK8/A26NZif77PM9pMw0PT2ruxfNmp/Y3vtsF2CMotgLg6oqvdT+10A0z3HtRp1r20y9ybf5+qrRseuw1aLXbMu2uRaqVVWME6QGOLaD+KXG0kyjTjfqDG/RXJdpdDn6mW63lrXqFEWYhCYuz3Stmu39AHfLY19qSRR0Qxt7uBvYe4S7MeyaQBt0iWfXvmKqvf68oCwPjF43cXzoUhR8dhBEvg+fYbinflIPPj8d3DU9N7DjJEK/znTwS+3X3jRNn9PGcxi5FEvTNEXzFPFxsOf+qL1WrpuRowbr8LIW7SAMPGj7Xm4XoDQUb0KnCnw3jLx4s/8mNEMxdBG6jjJYh0wz+FGjPg4o0f1lpAeQEbbreGMz12AGWqMIBRBVJ4b6Uvvxdx287LUiO8DrMNrjT+v/BgkFJ+SHB+TU8TWzK7q/j/hFuV5/IthVA+gn2DuhYUGTgw0Rro4jtPaygYcJ+RxcLdtfzfCVYQj+l5b8pO5xEtjUF5WRPBfh+P/p132vLlGmtp+gV9sMBHfXbPPnBuwvcl7XLKfZMuwx33wpIdw7X0DdWv1r/ZmoN1792rSd77DPOD3JT89j+riF4WIXQR3kST4Yj9KhstrzDS7ghe0CurTpjxWVbaKDcE4Yhl/uUqHVlyQ3cHuC9F5Zb8eJZybaiUmpPdSDzrH/JMFjzO5yzo4P5lv/CZ3W6ZA/SUKeqcF+8AYGa6+PBAuu7SdHbqkKd4zdviKCyiydthlT5xNjn6s9Lj5R+OUjp/scirze0blMsvh/ztG8ZMf2bSEWk2JNXs8YvWqqKiW5KIKz6YJUFYBL/rZgSAp93Ow8hU9pAeh6D0ii4G/lgQZ2CmAmsrDRxOlUy8Qc9AV3OCUbrQrwl4JmyKmULqSprr/J6cZylOl5pfjJMpeHGsDlZnGjyYY8lQxL1jQQXmyZJq2UbKuZWqrqC6lCAkhydsgdhY+RknmQVTnN5NiFySXL+ZTYe+fBfnhaWbKviZoimkfFVFcNSZf7wFjMINtLyN58sD+ElcVEuNvUP6AtQL2UJmeCXLN2qWZN2KFk2KXNerRpqtLXdJyKepmVUpHT/nSSf9RCFDTR2cuZbIHxpRbQEntDejnvY3vGBZoBUsktN7/LqTO6AtF0Oq2Il1oN5NSQjcmwpxlqKoPSJsmpj1fscLNSNifY0LO+Bbb3jRF1edYLyPPAOMEzd6zYSg+s9lMGNowN9DjPnoepu+ykkr7ov4dLlYQZAl0WBB0QQDQoUiP1F8BAmHKjg8ezHhqse+EebaKKxoTvu1Oe0R2vMXLHwxknrXftseKNG7azoVQfstvGDqgqct6ZjW47xoIypMDLW6P3yRx50SKPh5zOtLwOVzFmyWQuhX7beZsvJu9P2QLq1mhsTmbjPMuGx20n9+O3kfAWmX1NckdDhMYYPlG03ROsjsSJi7ct4dPaoBFXAa4mAKBsXVf2CIGFt+2FhG+GJhPyAk1MFXEmKiZQlCdZFSRdX/c2zBgq02TCDDVVdnxSpvNibviVpShIpFO0PVseFmyPXlrAKYPpTbnn6hPuqT9HS33oW9MYpIfpOmAYWjnob2stdaFWMMBRU1Mgb5FQSVQwsUeHPp29T1s0c9Qdv2/yYNLITHaXjTbu8rxzyZxwl4u7V2dhAX9q3XFMJRSbVXRLNjTQubxvmaZOGoYP99lhtYeZZJGelZtDS5CNnk5PMkkC7xcbtgCb4UUubzVRLvdXQKbZhBan1XyDF8HQG1lyQkib3NFlu2Lpf+VYQbHKI8eOItDBZ47JF47JYH18UjsSg7mWeMCz1BUU+ai3p4M+f6D1+WBXEZ56lBt7fnMUdFLr/WnGnNP2ZqvPZrwqbcSnYL3YNFaxQNs51FF/11Y8YycFraZ/1gaazk08yj/TW3RM8aAyVJlAbsR5j+Kj5EnYL719njea7GQ/NpOTOrHfMXPerI4zPt2O31oUFSlnLm8vT3pvHsLF5TvyeUjejJcxSt0P2IcJfNVeZrLaIhhfl8V3WJWqPfJxtOM/67jC4jn1denaPRRiEMcoiGuvxa5Cw3UTovQ8p0u+nJe11GkybLvR4UC7DQS+J9NNmunRgG7zfLvNS1exd0HxCaIYBmuvOKuQs5eP9Z8Bwn0Xo8BBUf0UJnCDcO0PEYt6VdXAICokDDCyQiKXW1yD7Ygdpg1anAQIYNDmANdpsoIosqDH1KrDMB4FowisYxQ9SuXOg1Q2EPQOHir0dCEqMFEVOCYlOdqnJPaZ55P9HKCEKO6oEL1dttnhKOztDz4qAFP70El89HzYHMoCUfjyy9ZtiEtru0XTpdr5Nr/Pz66lID6OVzjgIhkBkXaiL0R/85rJtxkzzH3G1/AgcbxC1JC6xpEHL0geH33QpeDJjStFSlfMN9fPhoew1OeMbic5Jw/eGH+7ExFJTUTX67UhR/v5+JycTknZgnYhKCMSnmIoukWZCCZEFZ6tcIcC6haC+itBfkP96eSb/RFfEm8CMyZv854Qplou/+I2ZiJc3MZUQvjsb696D0eSusUoi7+yiT65tBWI/3ivg11Y+BHzmPykYeR8tOuLWHfnkDyL8eUFbrEq5Pf5G1bAkIT1yAgLo/vgXwX46vBH463INywxYdMqidH3T6rFbHqp2RCGSRCrUq003M/LEmd8PqDuh9NvYUoB/OtGk+FvbzRzbWCSybW3azdf79+d615JF0ju8sS/xPJSy8jlnBweuHfz+RfA30Z0gxNotsXToNW+jWiO5zmW4W8FfMjk9Tfz75a7mn5+H17/AQ==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="16f91eb6-d036-4044-a104-3416700f4139" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ecbac18-bd7a-4df2-b9d2-c9fb4bc9817c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="dc3fbb0f-7f56-43ad-b37a-35c38bae3724"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="98cfc05d-90a4-4012-b47d-f1f449632e22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="fb4ef185-64fb-4374-8300-43409b18034e"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>testing_+428@uvvutesting.biz</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1990-07-01</DateOfBirth>
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b23cb4e2-2bd7-421f-91f3-9470fd51d912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="cd84f76e-b48f-43aa-8526-34731eaf10da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="c3f3c863-6773-4ad7-883e-f4966c2bcb43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="853b66b1-2855-4d93-8f16-0c0514cd932e"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6a0df690-63bf-4b9c-ae59-c6c2ff9420bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="17df3acf-9f74-4983-9c2c-7ca80c9272ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="3d442766-d852-4dda-8d00-1ca77ae70830">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwumAlqQIBRcUVN27ewmFAlE2G1V//Dho9SU5yvrzflU5PT/fTCz3PPCPDc+kujxCMYifwq4r4UvvHoKy9CcG+0TQBaLCsBRv7NttqdGALdEwDAthhalUFoQQqPooNP36p0STFNEiuQVEa2eo2mW6Te2pzjF6rrmGEsGms8kTWqrnn+qh7dftSSyK/GxjIQV3f8CDqxqC75NVxF2t2jTum2uvzDeXVYfR6iOOwSxDgCUOErgueQOARz8QHnWcTdZeO7RtxEsE3nyZ6qb2dzbLsKWOegsgmaJIkCZIjsI6JHPtX7bVyPwxNxbeC27pn+IHvAMN1LkYJSoXxITCrvGsHkRMfvG9MUwRFlqYbMAcNQLH+rxrx28EV3Q8tfQAZIaOBDgZ1N7aAFoygD2B1tVBear9+VsHbWS0yfGQFkYc+rf8bJOin0A1CaDbQPbI7up9b/CJdr88QdBUfuAlyUjgp2yQ0AETVWQQtJx87CDefiarX8ldzdO8wCP5LSZ6J9zgxbOKLzIiODVH8/9Trfa1uVtaGm8DXqekHKGkfizgNqPF6z9X3vKzavpWfXq4Q3ivfQD1K/bb+3KiPvno7BNZHitWms71eX+68MI20Y1CMW/GMiPXD+tQppsLFzTfaTs9D5rjT2dYYHXpyT2H7WfNopfFE7Aj0eLSxNLbSPPUnyW7qDDpN3XAhKcoztXCbCpCbEVswCtPMT6K8BmhEZGZSH+lpwLnNgOrslYCONuOF5F2SYt1eC/KqMqGzrT1hhgtCO7Oqv2VN8uV3TO9jKOMaweIaZPl/2yQ50YiNx6JXTgoLf54xfFUVpVcXez0e9mw+UwTeVoTxhZ8I9ul8ODl9LiMFfr6SeZEv1AWfifZOXM/nIykz12tXXyuyLKgLNhvwO7GCN0QpX4v6dkgaGz3c0TKpLwXB3C6CPTMMzcEpGxzARNXUbKIphXqU8okmkZurzM7x+qIeVWqqrZjK5ihw6kLKxOzqUZSyw0TfLMLdisvARZqrPNvnqZXUO6gDzVtTgFkcwFEaq/zpKhcOam+9VnNJ42cVwZ6scWxaT9ZD4Jnh3nMP74wPsHHN7K+Lfd9N9It0VHtSv7c895fKnhHn0pBf7Fb7zfpkbOS0AgYTfn/36DQdYxtktt7JxPluOAp05ZCCCT+XBGHO43SRvKr0h3zQF3iV5Z380jsKraBnyhkxpFGlzrn91rZwzltk9EnXoDodajfetGbnlij5dX2U7I8H9bCVp/XR0kxXXMxddiitpy3DoUAeWvOtNIhHuTWYLyv7mZhvwaBu2kPCvXBypLaHfHQpDq5qL+JNa4qKvWNZG2E7Zd225arMIrRcKyxQXQvmp4hsCZChiV2RjuIKb6sCz/ePq6MwV4VOmVRTyeY7VTB4WYoT/nKk4xG9Pg8HqQt2DB/ko830eHorjClmkkBkcwm3lVTpiLxZFmGwXEnykV8Jth0JtiQLcyDy850yynY4X6sBVv6cR/maR1sSeInR+RY3qDArkoun8ZJl+cIXVr7MHdRzvjFbHtk+Q2m8nIRspqKJ5eub4KR6TrSKkuVqNJqM872W9E9HPKsscjlKGb0ipaeQdyYj7XASA9GYhbtdHNZ9EIFYCT1VyS9THR07zt4jh/UmJcxIEbTplbfPVn1D0keRvaRGg4U/Y9pcBSVWMfDqx062qWvLVtg2e74lFgWhR2sy4AOZWzTPZk7Tp8MqG7cya8if9gY9yV1OKDhppGsgW8xHm6VXb1aa6XjskReNYCfhNFv2M1aaz+uMKWgDDYWRs0s6dh5NfZPeGXEr1cl1ywndE0cnJ40NmbXt4WLNUjNsq7PKnN0C3bPbIRgSCyLlpbY1VvrF/mJcQm8KbgP083R4CG/zg3g/WT6MnjvpWOJuhSC+L8sLSBGrMr4VjPjvBKaUOGbDuqp2w5IFoRj6ce21PFWSl26CKY5jdvGVcVtLLapNSpLcYiSalmlSIlmSkkmebHIcKzHcneXcUHyC2At8yyl9lTzudkv9HSDwugj6JowaaZCAA0S1v1gs81VV/AW+fgMfQS3APFGUqU6z3RFbFCtSJNOUmk2J69C8JJJNkWnRteokiKf+NOKtGEYfOSL3gSMuIHBCB5ZEsrxNEb5OUYxTcjbSJHapp9R48mGCqWZUsr0uzXaaBHK80IUlYMILzMSFT+EhvCaIQLdfumEAdJUuJO0fZdm73vTfhvh5754NrGM6pQIq4xEgrij8gvCy92C+DZqi3wd9N88nplNe6Di1ceSAG5KPW787pmyVR7vgqO6QH5qfBR+sEp8DejgyUwc8ev7xHMBsEvON13tJzsbT+SlJ0+RahHbJpSJsnqAIsk0sIUgwISq04AR94mGC+BEXfaD+5Pkh/4gviQ/+Msbfs4dbpnpd/uAhsoSofIgouOXzn75yPrjEeYthHn8l67n4vVIi/uuTBnRBqYfFM/yTBZH5u1xf2HrnB8dZDjDHt8tVyTyLb5oCBNisg4dYEL03/pWBr5x/FD6S/MAS427aJzH8fqdaTqeXmgFAkPixItaugvcT84ozLkLY/a30h5kr93sj8zn6lsxv1fESzy7PqD10nf+t3HCu7QIgPoWcK5aXWo7fpdi5b7+b0G8Avx7SPfFvQ/pjJK9/iP+UvMvp5+/h9V8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00011_US_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Get_GeoProfile</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>765</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
        <Reason Language="en">The policy was not found.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39/Policy/urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="9eefa1a9-efcc-493d-a73f-76683cebfde6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6512c4b0-42ef-4467-b104-ffa33eace57b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		certPath = testProject.getPropertyValue("certsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		certPath = testProject.getPropertyValue("certsPath_Linux");
	}

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
//String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>PolicyCreateTOU_API</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="e2c4e4ac-425a-4711-bf15-1e0925e0b8a1"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="bf86a2d2-4144-4811-a43f-1013547ebc99"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="4380f443-dbba-469e-a609-36e3fa51657a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="789968d3-8176-4b31-8f47-431e3011758b"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="80d70818-b5a8-4794-8ce0-8d82f461f03e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API" id="476e4efc-f319-4609-aa59-39cb705eb97a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge" id="5112a73a-602e-4296-8f8b-3bf52b94d139"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2013/10/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8b0dbffb-cde9-43ff-b2ab-4d8ab9a34c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1d6adba7-5667-4993-a3d5-c0da8990549f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8uwuWElqRoEFRU3cOPmLRyGRdlkQNBf/w4aPUlOcr6835VOT0/30ws9zzxjw/fYDsAYxYkbBmVZfKn80zR52uI4prbjjXat3uKMWrvO1GscbEKWqUOaa9CVsoxxiuQAJ0aQvFRYmuFqdLPG8Brd6nBch6k/MTyjV8orFGNimqg8kVO57wW4c3X7UknjoBMa2MWdwPAR7iSwowJl3CGaHeOOqfL6fEN5dRi/OkkSdSgKPpkIIs+DTzD0qWfqg86ziTuqawdGksbozaeJXypvZ7Mse8q4pzC2KZamaYrmKaJjYtf+VXkt3Q8jUw6s8LbuGkEYuNDw3ItRgFJQ4oRmGXh2GLuJ439jmqEYujBdQzmsQaYe/KpQvx1c0f3Q0geQMTZq2DGYu7EFslCMAojKy4X8Uvn1swrezmqxEWArjH38af3fIKHghLwwQmYN3yO7o/u5xS/S9fqMYEcOoJdi94QmRZtEBkS4PIuR5eZjF5PmM3H5Wv5yju8dhuB/Kckz9R4ngU19kRnRtRFO/p96va/VzcrK8FL0enaCfr81lePJOdHTlF0sj8amsRifMHi5QnivfAP1KPXb+nOjPvrq7VC0GjI6rM9ZCTsLlV16Q6clyJm/dy6UfzY1MXNlzeSkw7CvGkm0STWKEqeZprfj4Xrh2pvNyZ6sPcqUp7MS3ZIOl8CXdtXqaioOR64UNIbe1K5uq3LspOcmSgMutvoNDfGj8cAK3BaeJBultdHOvfZRrdaXE7Mpy3SoiyViq79pu9NVtT1O5BmdNw8vv2N6H0MR1widr0EW/zcNmheNxHgsusWksMjnmaBXRZa7VbHbBahrg0wWgC0L4wuYCPbh6BzcPp/RApgve0AEZ2UBMtHeiqv5fCRl5mrl6Su51xOURT0bgK1YIhuilK9EfTOkjbUebdkerauCYG4W4Y4bRubgkA0cOFE0JZto8lnZS/lEk+j1VWbnZH1R9goz1ZZcab0XeGUhZWJ29ShKmTPR14tou+QzeJHmCqj3AbOUuo4y0PwVA7mFA/fSWAGHq1xwlO5qpeSSBmYlwZ6sSGxat6dH0Dejne8574wPiHHN7K/Ou76X6hdpr3Slflc99lV5x4lzaQgW2+VuvToY696pBAcTsLt7dBuusQkzW29n4nw7HIW67JzgBMwlQZgDki4aKHJ/CMK+AJQ6cPNLdy80w67Zy6ghi0tV3us3N2f3uMFGn/YMpt1mtuN1c3ZsilJQ1Ufpbu8ozqY3rY5U87TkE/6yxafqqWm4DMwja76RBskotwZztbSbifkGDqqmPaS8C9+LldYQxJez4yn2Ilk3p/i8cy1rLWymda9leQq3iCzPis64qoXzQ0w3BcSx1PZ8GiUlYCsCAP39ci/MFaFdJNWUs/lWEQzQk5IUXPZsMmJXx+Hg5MEtB8J8tJ7uD2+FMcVMEqhsLpG2kkptEZhFEQbqUurtwVKw7ViwpZ4whyKYb+VRtiX5Wg6I8uc89q55tCUBSJwOmvygxC1pPpkmar0OzoGwDHq8oxzztdn06dYRSWN1EtUzBU+sQF+HB8V342WcqsvRaDLOd1raP+zJrLJodXTi9JJ0OkTAnYw05yCGojGLttskqgYwhokc+YqcX6Y63rfdnU8Pqw1GmNEibLFLf5ct+4akj2JbZUaDRTDjWnwJp9Z54Ff37Wxd1dRm1DK7gSWez5Qer+gQhD1+0TiaOcsenGU2bmbWEBx2BjvJPV4489JI12C2mI/Wql9tlBqn8dinLxpVn0TTTO1ndWk+r3KmoA00HMXuNm3beTwNTHZrJM2TTq+abuQdeDY9aPWIW9k+KdbsZEYtZVaa1zdQ9+1WBIfUgjoBqWWN5f55dzEukT+FtwH6eTo8hLf5Qb2fLB9Gz510qKRbEUzuy+ICksVyj9wKRvJ3AlNIXLNmXVU7UcGCcIKCpPJanCrISyclFMc1O+TKuK3FXksUW2xbbLNtiamLEl2nmR4N6AbPt8RG985ybig+QeyGgeUWvgoed7ul/g4Q+h2MAhPFtVOYQgfhyl8sFvkqy8GCXL9hgJEWEp7ICSzL0IDpNntsj23U2zxNSz2elqQG3aIZUClPwmQaTGNgJSj+wBEZ+gNHXCDoRi4qiGRxm2JyneKEpORonNLEY55OxlOAUkI144Ltddh6u0Fh1488VACm/NBMPfQUOdE1QRS+/bI1A+KrdCFp/8hq93rTfxvi5717NoiO6RYKuIhHQKSi6AvCS9+D+T5o7n3Qd/MgNd3iQiepTWIX3pB83PrdMUWrPNqFRHWH/ND8LPhglfoc0MOReXLho+cfzwHCJgnfeL2X5Gg8HZ/S0ym9FqFVcKmYmKcYim5SKoIpIURnLTyggHqYoH7ERR+oP3l+yD/iSxMnUBPyPfukZcrX5Q8eIirCxUNEJi2f//SV88ElyVuC8uQrWdcj75UC8V+fNLADCz0inpGfLIzN3+X6wtY7PyTOYoC5gV2sCuZ5/qYpYEjMumSIhfF7418Z+Mr5R+EjyQ8sCemmXZqg73fKxXR6qRgQhmmQyGLlKng/Ma84k3OEOr+V/jBz5X5vZD7H35L5jTJWyezyjcpD1/3fyjX32i4QkVPYvWJ5qeTkXUqcB/a7Cf0G8Oshzfx1SH+M5PUP8Z+Sdzn9/D28/gs=</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8sAggtWkio2FRWN4MrNWzgMi7LJsOmvfweNHpOTnC/vd6XT09P99ELPM8/I8L1mj0MIxokbBlVZfKn9s6ObVKezazVIyFINhmyDRrfFMA2GYRlmZ+1Yq8XWqjJCKZQDlBhB8lJrkhTdINsNil2QnR5N95jmE9Ol9Vp1BWOETWOVJ7JWLXwvQL2L25daGge90EAu6gWGD1EvAT2NUyY9rNkzbphqr89XlBeH8auTJFGPIMCTCQH0PPAEQp94Jj7oPJuop7l2YCRpDN99muil9n42z/OnnH4KY5tokiRJkCyBdUzk2r9qr5XbYWjKgRVe14IRhIELDM89GyUoBSZOaFY5zw5jN3H8b0xTBEWWphuwAA1AMcGvGvHbwQXdDy19ABkjo4Ecg7oZU6EFYxgAWF2q8kvt188qeD27iI0AWWHso0/r/wYJBhn0wgiaDXSL7Ibu5xa/SNfrMwQ9OQBeitwMTss2iQwAUfUthpZbTFyEm89E1Uv5qwW6dRgE/6Ukz8QjTgyb+CIzomtDlPw/9Xqs1dXKyvBS+EquYqe+ynZTYspNDGE8L4w1suP8uLdfLhAela+g7qV+X39u1HtfvR9S+fNYP+/71hkO9vT2kOh+2NlClW4XzHQy49k34yREwmmmuXKsJ/N2fGzyszFxXLfDeVPlVWuxnSYsE9sgqbiSeETUUY9zyG6GEU2Qe6E/G0yCtXtaa3Hbm4yccHfWgLskO0OVifaplq11lZkBKtjb0flEtDyTbCNnZFROZ1/S9CSjQZ3huakyy5cvv2N6jKGMawxPlyDL/5sWyYpGYtwXQjkpLPx5JvBVkWWhLgoCBwWby2Wes2V+cuamvH04Ogd3wOYkz82XfU7kTorK5aK9FVfz+VjKzdXK01dyv88rKpMPua1YwRuiVKxEfTMijbUebZt9Utd43tyo4Y4eRebwkA8dMFUWSj5dyCdlLxXThUSuLzK7wOuzsleo2WJJV9Z7nlVUKRfzi0dRyp2pvlaj7ZLNwVmaKxwz4KilJDjKcOGvKECrDthLE4U7XOS8owirlVJIC+6twtvTFY5tIfT1CPhmtPM958H4EBtfmIPVaTfwUv0s7RVBGgjacaDJO1qcSyNO3S5369XBWPezChhOud3No9tyjU2Y23o3F+fb0TjUZScDU24u8fycw+kiOUUejLhwwHMKw7nFWdjz7VAw+zkxaqJKnfUG7c3JPW6QMSA9g+p2qe1k3X47tkUpqOvjdLd3FGfTn9XHmpkt2YQ9b1FWz9qGS4EisuYbaZiMC2s41yq7N7HYgGHdtEeEd2b7sdIZcfH55HiKrSbr9gyddq5lrfnNjPE6lqfQamR5VnRC9UU4P8Rkm4d0k9iesnFS4WyF57jBfrnn5wrfLZNqyvl8q/AG15eSlDvvm8m4uTqOhpkHtjQXFuP1bH94L4wp5hJP5HMJt5VU6YqcWRZhqC2l/p5b8rYd87bU5+dA5OZbeZxvcb6WQ6z8OY/9Sx5tieckWufa7LBCL0k2mSUaw3CngF8GfdZRjsXabPtk5wiliTaNmFxBUyvQ1+FB8d14GafacjyeTordIh0c9nhWWaQ2zmi9ImWHiHOn44VzEEPReIu22ySqByAGiRz5ilycZzrad92dT47qLYp/I0XQaS79Xb4cGJI+jm2NGg/V4I3usBWUWqehX99383V9obWjjikElng6EXq8IkMu7LNq62gWzebBWeaTdm6NuMPOaE4Lj+VPrDTWFyBX5+O15tdblVY2mfjkeUEw02iWa4OckebzOm3yi+ECRbG7Tbt2Ec8Cs7k1knamk6u2G3kHtpkeFkxEr2wfF+stM6OO8laZMxug+3YnAiNCJTJO6lgTeXDanY1z5M/AdYB+ng534XV+EI+T5cPouZEODXcrBMltWV5Asljt41vBSP5OYEqJazasi2ovKlkQSmCQ1F7LUyV56aWY4rhmD18Z17XY74hip9kVu11OohhRIhmS6pMc2WLZjtgSbizniuITRCEMLLf0VfK46y31d4DA7yEYmDBuZGEKHIhqf7FY5qsqByq+fsMAwUWIeSJFdlu0yIptVqCojtBvMgLVpwVRovoU3e4Lteo0TGbBLOasBMYfOCJFfuCIKgRu5MKSSJa3KcLXKUpwSo5GliYe9ZQZTwFMMdWMS7bXazLdFoFcP/JgCZjwQzP14FPkRJcEEej622wYAF2kqrT4R9aEy03/bYif927ZwDqmWyqgMh4e4orCLwgvfQvm+6Dpx6Bv5rnUdMsLHac2iV1wRfJx63fHlK1ybxcc1Q3yXfOz4INV4nNAd0dm5oJ7z9+fA5hNYr7xeivJ0Xg6PqVZll6K0Cm5VIzNExRBtgkNghQTotMiPMCAuJsgfsRF76g/eb7LP+JLEyfQEvw9+7hlqpflDx4iGkTlQ0TGLV/89JXzwSXOWwKL5CuZ4OH3Son4r08a0AOlHha/4Z88jM3f5frC1oMfHGc5wNzALlcl8zx90xQgxGZdPMTC+NH4Vwa+cv5ReE/yHUuCu2mXJvD7nWo5nV5qBgBhGiSyWLsIHifmBWdyimDvt9IfZi7c753MF+hbMr9RJhqeXb5Ru+u6/1u54V7aBUB8CrkXLC+1Ar9LsfPAfpjQ7wC/HtId4W9D+mMkr3+I/5Q85PTz9/D6Lw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="bb7e7d8b-e8e3-4dc9-9073-6b2a9c8ac469"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="979f1903-1ef6-4a21-b7ed-3c829bec85dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API" id="9d27ef5d-226b-4710-91da-6a452b364641">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="ff86e280-8efc-438f-a0f8-c455f69b9e1e"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="355f30c0-6988-4a19-b98d-00eb17001332"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7b43b087-c6b1-41fa-9958-b3af8215ddd8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="3217055c-57f5-4f6b-8986-5c97d330161d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b00abc6-17e9-4793-8beb-c38a75a236da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a0a81299-e499-4d96-8fe3-ee9125bfe1ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afad6394-18c1-41f0-834e-d5fd2a0de724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4ed4c6fb-f157-4d76-90cf-c2111034e717">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7065e381-9693-46c0-afa3-f3f540ed93ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="02e196fd-6a33-458f-a779-20bdcb8f65f6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a1fa38b-4b5a-43bc-b4ac-c8b2cd422c62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="78a51972-e97c-4fcc-a444-ae8c86a62bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="45db53d0-e287-4b60-a809-f9e6735e4f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="517a95b3-ce83-437a-827d-5e49fdb10fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6a93b9aa-b6dc-4adf-983f-0d78466e7a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="96fdea5e-3165-42ad-86cd-31f66cb06840">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tP.setPropertyValue("audience",URLEncoder.encode(callTS.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="94b59c95-ff72-47e3-9fd0-fd8d7afd897f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			//tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
			
			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
	} 
	else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>audience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2986</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_703058b5-01f8-4be9-b087-ac196d14c798</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_703058b5-01f8-4be9-b087-ac196d14c798" IssueInstant="2014-02-23T17:02:08.363Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_703058b5-01f8-4be9-b087-ac196d14c798">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>BHg8FEgnF1G314DMmQb/0tSYLwo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
OMkVg9MYwihewn0RqJCywLHZWzg6yJNLrTNc5YuAB9n1MB1flt+ShzOChJz4S2wfUvl/Z3lyXV9A
iaBkiR7823JDxv7zQnjxjNRkxzFoJVk8l4lq213+incEgApY37GVQO/y7OB96RLtSnZKswV1/Duj
BCAUpGYWvqMV3wKNLME=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_9BEDD38ECD2BEC1FD1083429B4C6872C" NotOnOrAfter="2014-02-23T20:02:08.363Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-02-23T17:01:58.363Z" NotOnOrAfter="2014-02-23T23:02:08.363Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_703058b5-01f8-4be9-b087-ac196d14c798</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-02-23T17:02:08.363Z" SessionIndex="_703058b5-01f8-4be9-b087-ac196d14c798"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZbb+I6EH7vr4jSx1VInAQIESBx3aXLZQuU3falMo4Bt8GB2OH2648dCA0UuuyRKlFPxjPfXPzNFBmc+6ZbYQyHnARUadVL6mvesIysM85qBpg4mj3GBW1sOHkNIlDIecBG+YKjKi3GItyijEPKS6ppAFszTM20hiDvGqZrOBkrZ72oygiHTJgWKhlDVTZznzI3dltSo5C6AWSEuRTOMXM5cgeVTtsVmi5MMKnl4h5l7DAszzhfuLqOMh5G2PdRBgVzvaif6BQ95g7IlEIehfjg02Ml9XB3vV5n1lYmCKe6aRiGbhR0oeMxMr1Xy3fJZey16CTYn2uQBpQg6JMdlKA6mM8CT6n40yAkfDa/YhrowJCmNbxBGgI2vVf1DwcxuhstnYAMGdTYDILEWB9PcIgpwspTv1VS72+r4P7uMISUTYJwzs7O/wYJ0xX2gwX2NJZElqC73eKFdJWLGLktivyIkRXuyjZZQISZ8ivEE7JpEyaaz2NKXH5lw8QfSboMo38pS1FPYxXQ9QvZqZMpZvz/1Cxdr72VEfQjXK7+mDrNxpQ2wXcL2PXO/HGsG3zw3F4HpRhCWnkP6ljuw/m8WY+9dbjU67yPpoXO85rM8Joa/eVDbbtu/3j5vZvmtg/ddjjsouxzVKkWKOhUwcTn3wazXa82e9jZA3M9eVr5+ovlb/+MCpU7AqvvpJ93TOuhvlnld4/0bfPW7b9vds3gYfTu+La/NIH1jVDUmFYWz1b+++ixp2/zvWoh12/zAX35ydYjoNejt7tqrfK0+P78e7XsjKz1z2670yh9xJSO4VSYUMIgGr9hxJOjbI9WXWmKekH+Nb1ICfG0SazqLiRHMY4pV8vylqQWNxIERDxXFHN/BsDIGbls1qw2s7YNDBPksznxX8F2QLNQcRIO2qM4g1gL6IRIX5Jl9/3zNUA0dxmmHg61VRChGWbqFxbrkEOlRfvicQSU4WEgWLxQbdTrltOo1c1qowaadWA4lm0WqnYt5+TNmqp0A96jvbAy4Tg8YXDTOGHwPkZkQbCkednnTDQ64yIlS7iKuA8yK5ihOBKDIJRc7Jq2k9UZmS98LAHr88CLfJxZzBZxgnS2/zUFG7FY2m8M4/d3Nbzzb0kmhI5HpAKTsVSxqCb+NIqAm00CuR6wlQ44MV+JPCKfmUgrDwnaIzn99NEtsk2OrSIieq0NXkGC+6h+8/XPN/UvQOnn+Tg68lYk5TaZqWJMCBIpJ9VcwswyE61WUVy/vCTIUJjXBU8CfYBRJFhuOwzeMdWPJvSbhswR9Znno/wUX8RndMAhx3PRbUp8vGHDGGAmN4yWeC2bW9eXE5cibxxv+CVZzReLiET85a6CXCT1hPiX+FkHofdRrgu2Un5EnGKt4IRO5UmOk+2VpkCBMEsE/wVh2vglA5ecnwqPST5i4aKbxhHH178okthKKkQoiChv1dVYkCbbGCffLrD7ofTJTEzohwm9YVcn9J9OeyBobw7Voy75u7JG4nZBWJWLQIylpG7Ewimc02mK3A8A0/xuGUbOAdZf+f00kvIn8WdJKqfn76H8Hw==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2014-02-23T17:01:58.363Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2014-02-23T23:02:08.363Z</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2014-02-23T17:01:58.363Z</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_703058b5-01f8-4be9-b087-ac196d14c798</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true" id="e6d93400-ec29-487d-845d-0269783271b0"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation" id="36a03322-c94f-4c44-9b0d-8ed3193a4a59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("UserName").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true" id="a9371951-a0d7-4374-b477-39820ba727c5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34eab9ef-094b-4ea5-b816-16bad8f3019a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="ab184205-d3f8-4833-a390-e2590f4dff15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get"><con:settings/><con:config service="Users" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3475aa35-aee4-44f3-bc56-b7358d0abca8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="621e6c79-25ba-4fc8-86b5-0fa7a2e3401f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeUserGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
		expectHTTPconnection = "close";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
		expectHTTPconnection = "close";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS")|| (RequestorType == "SPLCS"))
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
            
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
  /*      
         def a = myXML.DisplayImage.DisplayImageURL;
         log.info a ;
		//def b = a.toURL();
		//log.info b;
		 log.info "Response_DisplayImageURL: "+a.getPath();
         assert  a.matches("https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=[0-9,A-F]*");
        log.info "here";
*/
        
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if ((RequestorType == "CS")|| (RequestorType == "SPLCS"))
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if ((RequestorType == "CS")|| (RequestorType == "SPLCS"))
          {
             this.log.info "Getting CHILD CLG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self")|| (RequestorType == "SPLCS")|| (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED265711FC94E0401F0A05991653:6B9E866D"</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2983</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>4902C2D7C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:4902C2D7C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>SAU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>ResponseTypeUserGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1VwEj4TFSQIZW+6QCugu737sjLOAN4mTogdPvrrrx0aCpR22StVop6MZ87MHB/7huMotN0255AKGjPN7zb1X/Va1ZnhadWoV6s1o4LJ1MBAsNGoEVx2ZrPAIYGu+Zxn4DMuMBNN3TatsmHZht2YWLZr191yo2TX7Z+69h1SLkNLl5Kpa5soZNzN0zb1LGVujDnlLsMRcFcQd9we9F3p6eICk9662aHME6athRCJixApBUAgDEmJxBG6QUc+NwF3x3TOsMhSeM0Z8Kb+une9XpfW5VKczpFtmiYyHSR9Ak7nX/TWVbEZAp/N4t3awyxmlOCQvmAFagBiEQdaO5zHKRWL6IPQFrJMFdqADTGIVWFfdPSWIEd3YaQjkCnHBl9gqwg2ghmkwAhojyO/qX+5bIK7vZMUMz6L04ifrP8OErAVhHECgcGLygp0l0c8067WDRDXZyTMOF3BUNEkwQS49pDCjG76lEvyBVzLx69tuPyjBcuA/M1YbtAhVgkdnelOl86Bi/8zs8N57aJ8x2EGLTRcvtjD2Ot/8+qOs3ZW3XFUv/buPVxp5hAOnXeg9uN+XZ+Sdc+t101sUvfot5fJc7IVFf/FGy2Q9WJ31797U37rRJtbSesEJYNuCtTDi6+8AubIYz+u4XZFr/nT/NvoqUx+oOUjSa6GQXQNj97y1t+MhxXUY/1R/edTfytW91+T3uMy9PxavBg+bKeRePyHPt2Zk3+D8G5dHTyM7p77d+Pk9wtZ9zvh42p6NakNeyGG9qaytgb3Uw8NSPOtpsMajo2FJIyz6W8golgqevhdrSfnhcXn8qIsNDBmuaubKI3iApjQW2qXkhY3kwJEA1cOc7eudky7U+s0PNsplyuW6XWcti3/cyoNq+e0G4UG7VCcQPRiNqMql1LZHX8+B0gilwMLIDVWcUYWwPVPInaxwJrPRvJwxIzDJJYqXvNq9Uav69QbDa9qW7bZ8bxqr37bqzUqZa/b07VhLO7ZfdqeCUiPFbx6pOAjIDShoGRe8ZxLonMhW7LEq0yEVmmFSwwyeRGkSotdu9KoIk6jJAQFGEVxkIVQShZJ3iDEd7+2gQnPraPbSX7+Pizv9FvRCekTUOXAVS0dkNOEM1eRXRTyccGNw4KL8O0soOqYybaKlJIdkuNPb2xRNNlTRVb0yxv/sgrce/eLt7/fiT4BhU77sU8UrOhB2uJOldeEFJFWMc0lLi1L2WqV5fOrK4FMZXgkddJCYyCZVLntJH4GhvYh0EWXzB71Sea9/RhfJhZsLLCASLJNy5cXvDDGwNULw5enZXPp8+UopeybgI04Z/NC+RBRiD99qxCXKD9pfpA/6zh9K/xcrIM8sk75rBCUzdVKXSfbD0hBYhmWSv2L08Pg5wKcS35s3Dd5j0VINk0zAR9/0ZSwNXVMSJwx4Xf13HAotjlOsU3AfXN6FyYX9NcbesM/vKGfBv2xlL0I63tf+mdng+Z0IaCrh0COpalv5INTJmfzA3F/BXio707FtGvVTu1P+n5cSeud+b3loKen56H1Hw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E603BD56DDEEF0CEE0401F0A07990E43</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F850C559FACD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:standard" UserID="urn:dece:userid:org:dece:4902C2D7C2933410CB9A23349481F9A8" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>usercreate20131228_0727331388233653263</GivenName>
      <SurName>usercreate20131228_0727331388233653263</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=5902D2D7C2933410CB9A23349481F9A8</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>CH</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">de-CH</Language>
      <Language primary="false">en</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">1995-01-02</DateOfBirth>
   <Credentials>
      <Username>usercreate20131228_0727331388233653263</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-28T12:27:36.123Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-28T12:27:33.541Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-28T12:27:33.548Z">
            <Value>urn:dece:type:status:blocked:tou</Value>
            <Description>User Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</User>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="b842e70d-a8b1-44af-91c2-44516599f032"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Create_MUC"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Create_MUC" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Policy_Create_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1VwEj4TFSQIZW+6QCugu737sjLOAN4mTogdPvrrrx0aCpR22StVop6MZ87MHB/7huMotN0255AKGjPN7zb1X/Va1ZnhadWoV6s1o4LJ1MBAsNGoEVx2ZrPAIYGu+Zxn4DMuMBNN3TatsmHZht2YWLZr191yo2TX7Z+69h1SLkNLl5Kpa5soZNzN0zb1LGVujDnlLsMRcFcQd9we9F3p6eICk9662aHME6athRCJixApBUAgDEmJxBG6QUc+NwF3x3TOsMhSeM0Z8Kb+une9XpfW5VKczpFtmiYyHSR9Ak7nX/TWVbEZAp/N4t3awyxmlOCQvmAFagBiEQdaO5zHKRWL6IPQFrJMFdqADTGIVWFfdPSWIEd3YaQjkCnHBl9gqwg2ghmkwAhojyO/qX+5bIK7vZMUMz6L04ifrP8OErAVhHECgcGLygp0l0c8067WDRDXZyTMOF3BUNEkwQS49pDCjG76lEvyBVzLx69tuPyjBcuA/M1YbtAhVgkdnelOl86Bi/8zs8N57aJ8x2EGLTRcvtjD2Ot/8+qOs3ZW3XFUv/buPVxp5hAOnXeg9uN+XZ+Sdc+t101sUvfot5fJc7IVFf/FGy2Q9WJ31797U37rRJtbSesEJYNuCtTDi6+8AubIYz+u4XZFr/nT/NvoqUx+oOUjSa6GQXQNj97y1t+MhxXUY/1R/edTfytW91+T3uMy9PxavBg+bKeRePyHPt2Zk3+D8G5dHTyM7p77d+Pk9wtZ9zvh42p6NakNeyGG9qaytgb3Uw8NSPOtpsMajo2FJIyz6W8golgqevhdrSfnhcXn8qIsNDBmuaubKI3iApjQW2qXkhY3kwJEA1cOc7eudky7U+s0PNsplyuW6XWcti3/cyoNq+e0G4UG7VCcQPRiNqMql1LZHX8+B0gilwMLIDVWcUYWwPVPInaxwJrPRvJwxIzDJJYqXvNq9Uav69QbDa9qW7bZ8bxqr37bqzUqZa/b07VhLO7ZfdqeCUiPFbx6pOAjIDShoGRe8ZxLonMhW7LEq0yEVmmFSwwyeRGkSotdu9KoIk6jJAQFGEVxkIVQShZJ3iDEd7+2gQnPraPbSX7+Pizv9FvRCekTUOXAVS0dkNOEM1eRXRTyccGNw4KL8O0soOqYybaKlJIdkuNPb2xRNNlTRVb0yxv/sgrce/eLt7/fiT4BhU77sU8UrOhB2uJOldeEFJFWMc0lLi1L2WqV5fOrK4FMZXgkddJCYyCZVLntJH4GhvYh0EWXzB71Sea9/RhfJhZsLLCASLJNy5cXvDDGwNULw5enZXPp8+UopeybgI04Z/NC+RBRiD99qxCXKD9pfpA/6zh9K/xcrIM8sk75rBCUzdVKXSfbD0hBYhmWSv2L08Pg5wKcS35s3Dd5j0VINk0zAR9/0ZSwNXVMSJwx4Xf13HAotjlOsU3AfXN6FyYX9NcbesM/vKGfBv2xlL0I63tf+mdng+Z0IaCrh0COpalv5INTJmfzA3F/BXio707FtGvVTu1P+n5cSeud+b3loKen56H1Hw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:5B02B6B8C2933410CB9A23349481F9A8/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreate_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreate_ULC"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreate_ULC" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreate_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzOmB0d0QhoKioDI4vJxBKRJmkQNCvP4W2bu3dvW+f+6SVlZW5ciBr1SsyfY9uA4RgnLhhUJaFt8o/LRquOabeqrVY2KyxNM3VOBtaNYtpbWjKXrNNq1kpywilUA5QYgbJW4UmKaZGNmt0w6DoNs21SfqFbFCrSnkGY4RNY5UXslLOfS9A7Yvbt0oaB+3QRC5qB6YPUTux2jpQhm2s2TZvmCrvr1eUF4fx+zZJojZBWC8YEvQ868UKfeKVeNJ5tVFbd53ATNIYfvi00Vvl42yWZS8Z8xLGDkGTJEmQHIF1bOQ6vyrvpdthaMvBJryuO2YQBq5leu7ZLEApMNmGdhl4Thi7ydb/xjRFUGRhugZznD6KDX5ViN8OLuh+aOkJZIzMGtqa1M2YBjcwhoEFy1NNfqv8+lkFr2eN2AzQJox99Gn93yDB4Ai9MIJ2Dd0iu6H7ucUv0vX+Cq22HFheitwjHBVtEpkWROVJDDduPnQRbj4blS/lL+fo1mHQ+i8leSUecWLYxBeZEVwHouT/qddjra5WZqaXwnc1FrhcZSxU1xxDyHtLoaUp41jP5su3C4RH5Suoe6k/1p8b9d5XH4e6LqsPIzmlFcI5S1yLGXDOStq3Zrpf7fEJT/fH+czprrSlRpGMv/Z6+aRbDXV90pUMjVn1grlsJvN0vHazUpOOBYXhlRgIBn0YZEgd+QfeHs+0eViNXGU8t4j0vDn3TXkYLB0tCNXG2WT0+mgvOZOtK9H9wzRTpozUlUotKdO0/ihr5Q3KhJE485Zvv2N6jKGIawBPlyCL/4s6yQlmYt4XnWJSbPDnmcB3RZY7VaHTAbDjgEzmgSPzwzMY8c7+sN27XS4jeaBOJSCAk6KBTHCWwkxVB2Jmz2beaiZLEq9obNYDS6GENwQxnwmrRZ8056toSUvkSud5e6GFa6Yf2b191ttaI8VQspEhn5SdmI8MkZxfZE6O12dlp1BjY8qU5jueUzQxE7KLR0HMtqPVXIuWUy6zzqKqALYLqKnY2So9w59RFqNtrZ04VMD+Iue3Smc2U3LRAJMS74xmODajI60iy7ejte9tH4z3sHHD7s5O666Xrs7iTumI3Y5+6OrymhFUsQ+05XQ9n+3NuXQsWb0RWN88unXXXISZs2plgrrsD8KVvD1aI6CKPK8CnC4SKHK3D8IuDxQWuPm5s+MbYceWMqJPo1KV87qNxck9LJDZJT2TarWo5XDemBwaghhUV4N0vdsq24U0rg50+zjlEu68RMfqsWG6lJVHG3Uh9pJBvumpemk9EfKF1avaTp/wzpwUK80+iM+nrac4WjJvjNFp7W42c34xZr3mxlMYLdp4m+iEqkao7mOywUOGJpan4yApAUfhAejupjteVfhWkVRbztSlwptAEpMUnHd0MqBnh37v6FlLBoT5YD7e7T8KYwuZyBOZKuK2EkstAdhFEXr6VJR2YMo7Tsw7osSrlgDUpTzIljhf0x5W/pxH6ZJHR+SByKxAg+uVmCnJJeNEZ1lwCvhpIHFb5ZDP7YZPNg9QHOqjiM0UNNoEq3m4V3w3nsapPh0MRsN8baTd/Q7Pqg2pD47MqiQe9xFwRwNjuxdCwZxEy2USVQMrthI58hU5P49XaNdy1z7Zr9YpfkIKVpOe+uts2jXF1SB2dGrQ04IJ0+RKKN2cen5118rmVUNvRE27E2yE04lYxTMyBKHEafWDndP0fjvNho1s0wf7tUmPco/jT5w4WBlWpqmDOR439VL9OBz65Nkg2FE0zvRuxoqqWmVs3ugZKIrdZdpy8ngc2PTSTBrHFTlruJG35+h0b7ARM3N8XKzJ0Y6ayqSksgtr5TvNyOoTGnEEYnMzlLun9dk8R/7Yug7Qz9PhLrzOD+JxsjyNnhvp0HG3Qiu5LYsLSBbKEr4VzOTvBKaQuHZtc1FtRwULQgkMksp7caogL+0UUxzXbuMr47oW6QZgGyQrUvWCT3EiyZKURAKyznEkz/M3lnNF8QliJww2buGr4HHXW+rvAC2/jWBgw7h2DFNrC1HlLxaLfJXlQMPXbxggaISYJ1IdUaBovikAukmzAiuyDUkkKYHnmgILBLpSHoXJOBjHYJPA+Jkj1p84ogYtN3JhQSSL2xTh6xQlOCUH85gmHvVyNF8CmGKqGRdsr02zrTqBXD/yYAGY8EM79eBLtI0uCSLQ9ZeumRa6SDXR+EfWO5eb/tsQP+/dsoF1bLdQQEU8PMQVhX8Q3la7fgvm+6Bbj0HfzIPUdosLHac2iV3riuR563fHFK1ybxcc1Q3yXfOz4Mkq8TmguyP76Fr3nr8/BzCbxHzj/VaSg/lyeEmPx/RShGbBpWJsnqAIskno0EoxIToZ4R4GxN0E8SMuekf9yfNd/owvTbaBnuDv2cctU74sf/AQ0SEqHiIybvn8p6+cJ5c4bwnMk69kHQ+/VwrEf33SWG2r0MPiCf7Jwtj+Xa4vbD34wXEWA8wNnGJVMM/TN01hhdisi4dYGD8a/8rAV86fhfck37EkuJvWaQK/3ykX0+mtYlpWmAaJLFQugseJecGZnCLY/q30h5kL9/sg8zn6lswvlKGOZ5dvVu667v9WrrmXdrEgPoXcC5a3So7fpdh54DxM6A+AXw5pUuz8bUg/R/L+h/hPyUNOP38P7/8C</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true" id="1a42b403-fac9-4e9b-beba-08428b612d51"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyqEhEtIVJC4L73RBZbd9mVlnAm4G+wQO0D7648dGgoUuuyRKlFPxjPfXPzNXHM0D22vzjnEgjCq9VpV/XfJDsqVCcKGXcTYKDqFsoEsKBmo7Dg4KAdOaYJ1rcd5Aj3KBaKiqtt5q2BYtmFXRpbt2WWv4OSskvWsa2OIuTQtVXJ5XVvPQ8q91G1VT2LqMcQJ9yiaA/cE9ob1+ztPanoow6TXrjcoU4dxbSZE5JkmzvmAIQxxDrO5eW3u6Vz73BuSKUUiieHdp8+r+vvd1WqVWxVyLJ6adj6fN/OuKXV8TqaXeu0iuwx+jwZsc24iyijBKCRvSIG6BzFjvlYPpywmYjY/YdoyrbwybcAaG9gq0kvd/HCQojvT0h7ImCODz5CVGRtAADFQDNqPQa+qX55Xwc3dUYwoD1g85wfnf4MEdAkhi8A3eBZZhu58i0fSVbsG7PUoDhNOlvCg2iRCGLj2GENA1neEy+bzuZaWX1tz+UeyLgP8L2W5NnexSujmkey0yBS4+D81263XxsoYhQnUBg/cfbjrlPFjN8i/Ed54eIthcf8mnKdqCmFXeQNqW+7382Gzbnvr/VK3nWCnb40KP4qNxw4JbrqlTou1ExGw22FnPYpfJt1x33J4/5b2m8OX/liE32fjm8niibt1NHv+067QVfJ9eFWJLvpTc1qO3PB1ha9gyfL3Ykpfftrlu6vG06KynPphd3QVRaJyG7Bll4zRehAPOHGWg8Y9/GyAKD8/fIvnrZtir3Pxi4ye1q/fXOe5Py2vIjNssOpHTLsx7AszShgmkxfAIjuq9ui1tI6sFxJf04uSEN8IUlUvUhzFBVCh19QtRS1eIgmI+J4s5uZcajct12q7DdstFIpWvtlw67b8zy1WrI5br2QctEFxALHJaECUL8Wym/75GiCeexyoD7GxZAmeAde/sNhCAmk9OpCPg1EOIyZZ3C4U8yXHbbSdRqXZsdrtTqdoN8otp2iX6oVCRdcemOjTflwPBMT7DF7aY/ABYBIRUDSv+pzLRudCpmSBlokIrdwS5SgkchDEios9u1gpmZzMoxAUYHPO/CSEXDSL0gSZfPNrGwjzVDpoj9L3dzK8w29ZJqSOT5QCV7E0QFYTjowiOwvkdMCV3YAz8/XEJ+qZybSKmOANkv1PH92i2mTbKjKi383hbyvDvVU/+/rnm+YXoMzDfGwd+Uuy4zabqXJMSBKpZdVcoNwilyyXSVo/RxFkLM2bkictcwg4kSz3OmJ/gJpbE+ZZQ2aL+sDzVr6PLxEzOhRIwFx2m5Yez9gwhsDVhtGTr2V97vqy51LmTcBaHJM1Q7mIKMRf7irYw0pPih/lz4rF/ke5jtja8SPjlGuFIHSqTmqcvJ5oCsykWSL5j8W7xo8ZOOZ8X7hN8haLkN00SQSc/qIpYqvqCGOWUNFr6algl2xTnOI1Au9D6ZOZlNDfJ/San5zQv+7vhpL25kjf6pK/KxskbRcMuloEUixVfS0XTumcTnfI/R3gLr+7raZlW62/8vt+JLVP4s+SnZwevofafw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:54D1091BB2933410CB9A23349481F9A8/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>5EC191E9B2933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true" id="8b84599f-9011-4a1a-a266-93bd146fbbc4"><con:settings/><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);

String sql = """update ACCOUNT_USER set STATUS = '$status' where USER_OID =  hextoraw('$userID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B8417E8B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130917_070832</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true" id="80487ede-aacb-4a03-9614-e48d276255d6"><con:settings/><con:testStep type="groovy" name="Update_AccStatus"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

a = new dbUtils.dbAccount(log,context.expand( '${#Project#targetSystem}' ));

assert a.accountSetStatus(accountID,status) == 1;

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>mergedeleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00040_UserGet_FUNC_SPLCS_Get_AccStatus_Mergedeleted_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>08.Functional_UserGet_SPLCS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true" id="0fe6ceb2-bf24-4dc3-a614-abc94dd19143"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def policyclass = context.expand( '${#TestCase#Policy}' )
def username = context.expand( '${#TestCase#Username}' )

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);


//String sql = """update POLICY set STATUS = '$status' where CREATED_BY = hextoraw('$userID') and POLICY_CLASS = '$Policy'""";


String sql = """update policy set status = '$status' where status = 'active' and policy_oid in (select policy_oid from policy_relationship where policy_actor in 
((select user_oid from account_user where lower(username) = lower('$username')),
(select account_oid from account_user where lower(username) = lower('$username')))) and policy_class='$policyclass'"""



log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);






</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E67B0B0EA6B4A35AE0401F0A059938AF</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00016_UserGet_FUNC_SPLCS_No_ManageUserConsent_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>08.Functional_UserGet_SPLCS</con:value></con:property><con:property><con:name>Policy</con:name><con:value>200</con:value></con:property><con:property><con:name>username</con:name><con:value>usercreate20131010_06322</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true" id="9dedc8c4-1bc7-4f3d-90f8-76fc1c3bb757"><con:settings/><con:testStep type="groovy" name="Rename"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "23.User_Get_CS_Geopolicy_Portal_US";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ralluri\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_Responses"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
      {
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
				{                                                                                         
                  	try {
                        		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
						def targetStep = targetTestCase.getTestStepByName(commonTestStep);
						log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                  		}
                  	catch(Throwable e) {
                        log.info "Exception : " + e;
                        }                                                                              
                   }                              
            }
      }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true" id="04c62a5f-b87c-4edf-81e6-67cf45583012"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true" id="d2b2d499-5c24-479e-9969-404560acf0db"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true" id="c4b23f47-43c5-4476-ac81-eaa1b66c5619"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d7765da1-c221-46a8-b0ee-4ada2ad4098a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("role",callTS.getPropertyValue("role"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName");
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

log.info "Role : --- " + role;

//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

		String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
		and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


		this.log.info "Query is:  " + sql;
		results = a.SelectFromDB(sql,dbHost);
		
		log.info "Policies Results : " + results;
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;

		//if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

		if (context.expand( '${#TestCase#IsMinor}')=="true") 
			{
				if((geoProfile == "US")|| (geoProfile == "CA"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					}
				else if ((geoProfile == "GB") || (geoProfile == "AU") || (geoProfile == "NZ") || (geoProfile == "IE") || (geoProfile == "AT") || (geoProfile == "CH") || (geoProfile == "DE") || (geoProfile == "FR"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

						assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					} 
			} 
		else
			{
				assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
			}


log.info "Policy Validation Passed";	


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dbHost = context.expand(  '${#Project#targetSystem}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations" id="418d894c-0d5e-41ce-af71-087c1cf97b82"><con:settings/><con:config><script>

log.info "DB Validations Complete";</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-09-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E60068AEF0205738E0401F0A07990D3F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00021_UserCreate_AUTH_Creator_ADULT_Full_New_YOUTH_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E60068AEF0215738E0401F0A07990D3F</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-09-14</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="First_User_Create" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_Firsrt_User_Create_STS_Policies" searchProperties="true" id="bf6be7d4-9561-4c60-9314-ec69bcea736d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f05e0c99-e0d5-45df-a3a3-69bdd405b626"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tS.getPropertyValue("nodeid"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usergetr4_firstuser"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20140223_120251393174925906</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usergetr4_firstuser20140223_120261393174926457</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:110606552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>210616552BF54410217565449481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>400681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-02-28</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_703058b5-01f8-4be9-b087-ac196d14c798</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_703058b5-01f8-4be9-b087-ac196d14c798</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VInAQIESBx3aXLZQuU3falMo4Bt8GB2OH2648dCA0UuuyRKlFPxjPfXPzNFBmc+6ZbYQyHnARUadVL6mvesIysM85qBpg4mj3GBW1sOHkNIlDIecBG+YKjKi3GItyijEPKS6ppAFszTM20hiDvGqZrOBkrZ72oygiHTJgWKhlDVTZznzI3dltSo5C6AWSEuRTOMXM5cgeVTtsVmi5MMKnl4h5l7DAszzhfuLqOMh5G2PdRBgVzvaif6BQ95g7IlEIehfjg02Ml9XB3vV5n1lYmCKe6aRiGbhR0oeMxMr1Xy3fJZey16CTYn2uQBpQg6JMdlKA6mM8CT6n40yAkfDa/YhrowJCmNbxBGgI2vVf1DwcxuhstnYAMGdTYDILEWB9PcIgpwspTv1VS72+r4P7uMISUTYJwzs7O/wYJ0xX2gwX2NJZElqC73eKFdJWLGLktivyIkRXuyjZZQISZ8ivEE7JpEyaaz2NKXH5lw8QfSboMo38pS1FPYxXQ9QvZqZMpZvz/1Cxdr72VEfQjXK7+mDrNxpQ2wXcL2PXO/HGsG3zw3F4HpRhCWnkP6ljuw/m8WY+9dbjU67yPpoXO85rM8Joa/eVDbbtu/3j5vZvmtg/ddjjsouxzVKkWKOhUwcTn3wazXa82e9jZA3M9eVr5+ovlb/+MCpU7AqvvpJ93TOuhvlnld4/0bfPW7b9vds3gYfTu+La/NIH1jVDUmFYWz1b+++ixp2/zvWoh12/zAX35ydYjoNejt7tqrfK0+P78e7XsjKz1z2670yh9xJSO4VSYUMIgGr9hxJOjbI9WXWmKekH+Nb1ICfG0SazqLiRHMY4pV8vylqQWNxIERDxXFHN/BsDIGbls1qw2s7YNDBPksznxX8F2QLNQcRIO2qM4g1gL6IRIX5Jl9/3zNUA0dxmmHg61VRChGWbqFxbrkEOlRfvicQSU4WEgWLxQbdTrltOo1c1qowaadWA4lm0WqnYt5+TNmqp0A96jvbAy4Tg8YXDTOGHwPkZkQbCkednnTDQ64yIlS7iKuA8yK5ihOBKDIJRc7Jq2k9UZmS98LAHr88CLfJxZzBZxgnS2/zUFG7FY2m8M4/d3Nbzzb0kmhI5HpAKTsVSxqCb+NIqAm00CuR6wlQ44MV+JPCKfmUgrDwnaIzn99NEtsk2OrSIieq0NXkGC+6h+8/XPN/UvQOnn+Tg68lYk5TaZqWJMCBIpJ9VcwswyE61WUVy/vCTIUJjXBU8CfYBRJFhuOwzeMdWPJvSbhswR9Znno/wUX8RndMAhx3PRbUp8vGHDGGAmN4yWeC2bW9eXE5cibxxv+CVZzReLiET85a6CXCT1hPiX+FkHofdRrgu2Un5EnGKt4IRO5UmOk+2VpkCBMEsE/wVh2vglA5ecnwqPST5i4aKbxhHH178okthKKkQoiChv1dVYkCbbGCffLrD7ofTJTEzohwm9YVcn9J9OeyBobw7Voy75u7JG4nZBWJWLQIylpG7Ewimc02mK3A8A0/xuGUbOAdZf+f00kvIn8WdJKqfn76H8Hw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VInAQIESBx3aXLZQuU3falMo4Bt8GB2OH2648dCA0UuuyRKlFPxjPfXPzNFBmc+6ZbYQyHnARUadVL6mvesIysM85qBpg4mj3GBW1sOHkNIlDIecBG+YKjKi3GItyijEPKS6ppAFszTM20hiDvGqZrOBkrZ72oygiHTJgWKhlDVTZznzI3dltSo5C6AWSEuRTOMXM5cgeVTtsVmi5MMKnl4h5l7DAszzhfuLqOMh5G2PdRBgVzvaif6BQ95g7IlEIehfjg02Ml9XB3vV5n1lYmCKe6aRiGbhR0oeMxMr1Xy3fJZey16CTYn2uQBpQg6JMdlKA6mM8CT6n40yAkfDa/YhrowJCmNbxBGgI2vVf1DwcxuhstnYAMGdTYDILEWB9PcIgpwspTv1VS72+r4P7uMISUTYJwzs7O/wYJ0xX2gwX2NJZElqC73eKFdJWLGLktivyIkRXuyjZZQISZ8ivEE7JpEyaaz2NKXH5lw8QfSboMo38pS1FPYxXQ9QvZqZMpZvz/1Cxdr72VEfQjXK7+mDrNxpQ2wXcL2PXO/HGsG3zw3F4HpRhCWnkP6ljuw/m8WY+9dbjU67yPpoXO85rM8Joa/eVDbbtu/3j5vZvmtg/ddjjsouxzVKkWKOhUwcTn3wazXa82e9jZA3M9eVr5+ovlb/+MCpU7AqvvpJ93TOuhvlnld4/0bfPW7b9vds3gYfTu+La/NIH1jVDUmFYWz1b+++ixp2/zvWoh12/zAX35ydYjoNejt7tqrfK0+P78e7XsjKz1z2670yh9xJSO4VSYUMIgGr9hxJOjbI9WXWmKekH+Nb1ICfG0SazqLiRHMY4pV8vylqQWNxIERDxXFHN/BsDIGbls1qw2s7YNDBPksznxX8F2QLNQcRIO2qM4g1gL6IRIX5Jl9/3zNUA0dxmmHg61VRChGWbqFxbrkEOlRfvicQSU4WEgWLxQbdTrltOo1c1qowaadWA4lm0WqnYt5+TNmqp0A96jvbAy4Tg8YXDTOGHwPkZkQbCkednnTDQ64yIlS7iKuA8yK5ihOBKDIJRc7Jq2k9UZmS98LAHr88CLfJxZzBZxgnS2/zUFG7FY2m8M4/d3Nbzzb0kmhI5HpAKTsVSxqCb+NIqAm00CuR6wlQ44MV+JPCKfmUgrDwnaIzn99NEtsk2OrSIieq0NXkGC+6h+8/XPN/UvQOnn+Tg68lYk5TaZqWJMCBIpJ9VcwswyE61WUVy/vCTIUJjXBU8CfYBRJFhuOwzeMdWPJvSbhswR9Znno/wUX8RndMAhx3PRbUp8vGHDGGAmN4yWeC2bW9eXE5cibxxv+CVZzReLiET85a6CXCT1hPiX+FkHofdRrgu2Un5EnGKt4IRO5UmOk+2VpkCBMEsE/wVh2vglA5ecnwqPST5i4aKbxhHH178okthKKkQoiChv1dVYkCbbGCffLrD7ofTJTEzohwm9YVcn9J9OeyBobw7Voy75u7JG4nZBWJWLQIylpG7Ewimc02mK3A8A0/xuGUbOAdZf+f00kvIn8WdJKqfn76H8Hw==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:300681352BF54410217565449481F9A8</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8AAZTSapkbMCAATPDyykjywN4wvIEX39kCGzITvbNuU+gVqt79eDW0ivWXIdtAYxRGNm+V5TFt9I/1Z2x46pNpsLp9XqlVq3ylV2TNyqI5njIQq5hQK1UlDGOkezhSPOitxJLM9UKzVcYek5zrTrfqjEvPMdsS8UlCjExTVRe6FIxcx0Pty5u30px6LV8Ddu45Wkuwq0ItmZAGbaIZku7YSq9v15RXhyG71YUBS2Kgi86gshx4Av0XeqVetJ51XFrZpueFsUh+vCp47fSx9k0TV/S6osfmhRL0zRF8xTR0bFt/iq9F26HkS57hn9dtzXP92yoOfZZy0EpKLJ8vQgc0w/tyHK/Mc1QDJ2brqAMViBT836VqN8OLuh+aOkJZIi1CrY05mZsigwUIg+i4mIqv5V+/ayC17PzUPOw4Ycu/rT+b5CQlyDHD5BewbfIbuh+bvGLdL2/ItiSPejE2E7QKG+TQIMIFychMuxsaGPSfDouXspfzPCtwxD8LyV5pR5xEtjUF5kRbRPh6P+p12OtrlaWmhOjd04ZCAfbU/dh2jcbYwuKZnBuyo1OffF2gfCofAV1L/XH+nOj3vvq49A4MHWLbaJqd7VXzzjuiSnf1J14aXnU6dDGXWFprSbChufpbS+pdSh7HVOy16e5pl12OxPT3525xEwGCFAFah/1FlEj2gLUHu/OCVOfHqaTU+fsZv6i6+9Mvxw2Tg05LCfUcLG0rIYv+gdmPDpQS7WmT1ZZfcodzLOaWnphMpa9zbgmzI7hyVdN97jevP2O6TGGPK4BOl2CzP+v6zQvapF2X7TzSWGQzzNC74ost8tiu00gmiCVBWDKwvAMRoJ5OFoHu8untADURQeI4KRMQSqaG3GpqgMp1ZdLZ7uUOx1BmdbSHtiIBbIhStlS3K77tLbaBhu2Q29ngqCvp/6u2g/03iHtWXCkzJV0NJdPyl7KRnOJXl1kZkbWZ2WvMOP5olpY7QVemUqpmF48ilJqjbarabBZ8Ck8S6oCal3ALKS2pfTm7pKB1akF99JQAYeLXLCU9nKpZNIcTAqCOVqS2ObtzjaArh7sXMd6MN4jxud6d3nadZ14e5b2SlvqtmfH7kzeVUVV6oPpZrFbLQ/aqpMUYG8EdjePdt3W1n5qbpupqG76A38rWwkcAVUSBBWQdNFAkbt94HcFoNSAnZ3be4Hz23onpfosLpR5p8utT/ZxjbUu7WhMs8lshitucuREyStvB/FubynWujMuD2Z6suAj/rzBSTnhNJuBWWCoa6kXDTKjp84Ku4mYrWGvrJt9yjnznVBp9EF4PlmOYk6jFTfGp51tGCthPa45DcNRqtPAcIzghMtzXz2ENCegKkttTskgKgBTEQDo7hd7QVWEZp5UXU7VjSJooCNFMTjv2WjALo/9XuLATRX42WA13h8+CqOLqSRQqSqRtpIKTRHoeRF6s4XU2YOFYJqhYEodQYUiUDfyIN2QfC16RPlzHjuXPJqSAKTqFnB8r1Bd0Hw0jma1Gjh5wsLr8JZyzFY659KNI5KGs1FQSxU8Mrztyj8orh0uwni2GAxGw2w3j7uHPZlVBj0bJNVtQUoOAbBHg7l1EH1RmwSbTRSUPRjCSA5cRc7O4y3eN+2dS/fLdUaY0CJssAt3ly66mrQdhOaMGfSm3qTa4As4Nk49t7xvpqvyfMYFDb3tGeLpRG3DJe0Dv8NP60c9Y9mDtUiHXGr0wWGnsaPM4YUTLw22c5hO1cFq5pbrhXoyHLr0eU7VRsE4nXXTmqSq5aouzHtzHIT2Jm6aWTj2dHajRVyypZecHTgHno0P81pQXZouKdYk0YOGMimotTXcumYjgH1qSiVAahhDuXvanbVz4I7hdYB+ng534XV+UI+T5Wn03EjHjHQrgtFtmV9AsljskFtBi/5OYHKJrVeMi2oryFkQjpAXld7zUzl5acWE4th6i1wZ17XE0VVaaHIMXRdolpEkukYzHRrQDZ5nJV66sZwrik8Q275n2LmvnMddb6m/A4RuCyNPR2El8WNoIVz6i8U8X0XZm5Lr1/cwmvuEJ9brosSwHAeabUB3hIbQZGjQEQRQFSW6Dtql4siPxt44BEaEwmeOyD9xxCmCdmCjnEjmtykm1ymOSEqOWhJHDvOSaC8eignVDHO212JrzTqFbTdwUA6Ycn09dtBLYAWXBFH4+stWNIgv0qk0/0eetS83/bchft67ZYPo6HaugPN4BEQqir4gvNVbMN8GzbCPQd/Mg1i38wudpDYKbXhF8rz1u2PyVrm3C4nqBvmu+VnwZJX6HNDdkZ7Y8N7z9+cAYZOEb7zfSnLUXo4vcZLElyI0ci4VEvMUQ9ENaoZgTAjRae4fkEfdTVA/4qJ31J883+XP+OLI8mYR+Z5d0jLFy/IHD5EZwvlDRCYtn/30lfPkkuQtQln0laztkPdKjvivTxrYgrkeEU/IT+qH+u9yfWHrwQ+JMx9gtmfmq5x5nr5pCugTszYZYn74aPwrA185fxbek3zHEpFu2sUR+n6nmE+nt5IGoR97kSyWLoLHiXnBGZ0C1Pqt9IeZC/f7IPMZ/pbMr5XhjMwuVyvdde3/rVyxL+0CETmF7QuWt1JG3qXEuWc+TOgPgH8MaZ4RaIETJEaq3Yd0nefrHMveE/gUyfsf4j8lDzn9/D28/ws=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="User_Create_API" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_STS_Policies" searchProperties="true" id="d4a22e7e-29ae-4d26-b76c-def0e45086de"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="27d7ed5d-3471-474a-90b0-bd0d0ce61dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e4457366-ffe3-4c20-9707-5fb5d033e5ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
//tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7659fab5-7556-4acb-aeca-86ca39ffd9cd</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_7659fab5-7556-4acb-aeca-86ca39ffd9cd</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6078B27BD7C72E6E0401F0A059976B6</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1997-01-01</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1VwEj4TFSQIZW+6QCugu737sjLOAN4mTogdPvrrrx0aCpR22StVop6MZ87MHB/7huMotN0255AKGjPN7zb1X/Va1ZnhadWoV6s1o4LJ1MBAsNGoEVx2ZrPAIYGu+Zxn4DMuMBNN3TatsmHZht2YWLZr191yo2TX7Z+69h1SLkNLl5Kpa5soZNzN0zb1LGVujDnlLsMRcFcQd9we9F3p6eICk9662aHME6athRCJixApBUAgDEmJxBG6QUc+NwF3x3TOsMhSeM0Z8Kb+une9XpfW5VKczpFtmiYyHSR9Ak7nX/TWVbEZAp/N4t3awyxmlOCQvmAFagBiEQdaO5zHKRWL6IPQFrJMFdqADTGIVWFfdPSWIEd3YaQjkCnHBl9gqwg2ghmkwAhojyO/qX+5bIK7vZMUMz6L04ifrP8OErAVhHECgcGLygp0l0c8067WDRDXZyTMOF3BUNEkwQS49pDCjG76lEvyBVzLx69tuPyjBcuA/M1YbtAhVgkdnelOl86Bi/8zs8N57aJ8x2EGLTRcvtjD2Ot/8+qOs3ZW3XFUv/buPVxp5hAOnXeg9uN+XZ+Sdc+t101sUvfot5fJc7IVFf/FGy2Q9WJ31797U37rRJtbSesEJYNuCtTDi6+8AubIYz+u4XZFr/nT/NvoqUx+oOUjSa6GQXQNj97y1t+MhxXUY/1R/edTfytW91+T3uMy9PxavBg+bKeRePyHPt2Zk3+D8G5dHTyM7p77d+Pk9wtZ9zvh42p6NakNeyGG9qaytgb3Uw8NSPOtpsMajo2FJIyz6W8golgqevhdrSfnhcXn8qIsNDBmuaubKI3iApjQW2qXkhY3kwJEA1cOc7eudky7U+s0PNsplyuW6XWcti3/cyoNq+e0G4UG7VCcQPRiNqMql1LZHX8+B0gilwMLIDVWcUYWwPVPInaxwJrPRvJwxIzDJJYqXvNq9Uav69QbDa9qW7bZ8bxqr37bqzUqZa/b07VhLO7ZfdqeCUiPFbx6pOAjIDShoGRe8ZxLonMhW7LEq0yEVmmFSwwyeRGkSotdu9KoIk6jJAQFGEVxkIVQShZJ3iDEd7+2gQnPraPbSX7+Pizv9FvRCekTUOXAVS0dkNOEM1eRXRTyccGNw4KL8O0soOqYybaKlJIdkuNPb2xRNNlTRVb0yxv/sgrce/eLt7/fiT4BhU77sU8UrOhB2uJOldeEFJFWMc0lLi1L2WqV5fOrK4FMZXgkddJCYyCZVLntJH4GhvYh0EWXzB71Sea9/RhfJhZsLLCASLJNy5cXvDDGwNULw5enZXPp8+UopeybgI04Z/NC+RBRiD99qxCXKD9pfpA/6zh9K/xcrIM8sk75rBCUzdVKXSfbD0hBYhmWSv2L08Pg5wKcS35s3Dd5j0VINk0zAR9/0ZSwNXVMSJwx4Xf13HAotjlOsU3AfXN6FyYX9NcbesM/vKGfBv2xlL0I63tf+mdng+Z0IaCrh0COpalv5INTJmfzA3F/BXio707FtGvVTu1P+n5cSeud+b3loKen56H1Hw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFQ0Ci745RYOA6JsMiDor7+DRo/Jycmb+1ZZhdP0dD+90PPMMzZ9j+0AjFGcuGFQVqSXyj8tdrOxbLZZa9Zpq1aHdb624Sy21m7V603YsK2N3a6UFYxTpAQ4MYPkpcLSDFejefLTmXaHa3Q4/olrsOtKeYFiTEwTlSe6Us59L8Cdi9uXShoHndDELu4Epo9wJ4EdDaijDtHsmDdMldfnK8qLw/h1myRRh6Lgk4Ug8jz4BEOfeqY+6DxbuKO5TmAmaYzefVr4pfK+N8uyp4x7CmOHYmmapmieIjoWdp1fldfSbTOylMAOr2vRDMLAhabnns0ClIqSbWiVgeeEsZts/b+YZiiGLkzXUA5rkKkHvyrUbwcXdD+09AFkjM0a3prMzdgM2ShGAUTl+Ux5qfz6WQWve/XYDLAdxj7+tP5vkFBwRF4YIauGb5Hd0P3c4hfpen1GsKME0Euxe0Tjok0iEyJcfouR7eYjF5Pms3D5Uv5yjm8dhuB/Kckz9YiTwKa+yIzkOggn/0+9Hmt1tbIwvRS9Ag6ON+ugTi9EhTmwSzzp9bZNenYUlZcLhEflK6h7qd/Xnxv13lfvm475xKCrvcHZaPQn8kCLm/1NbsSLbR+FAr1nTBnncQrF+WmS0nCUAGdXHXR7DS2o7jN7xfFyuNH93Kp6G780tTx+bMgwyVqWLslmMGxTjD8MrPF63RdpJs4X/nnmn2Z0Szb6PZTVR4YwXPSXs4bY0AR5vhrlGUttp0MMSv29L7BzBfYNyw0OLX/e3b/8jukxhiKuITpdgiz+rxo0L5mJeV+IxaSwyeeZoFdVUcSqJIoAiQ7IFAE4ijA6g7Hg7A/bvdvjM1oA03kXSOCkzkAmOYa0mE6HcmYtFt56oXS7gjqrZ31gSCXyQpLzhbReDWhzuY4MtkuvNUGwVrNwww0iq7/P+ls4VnU1G+vKSd3J+ViX6eVF5uRkfVZ3KjPR51xpuRN4dSZnUnbxKMnZdrxeziJjzmfwLE9VUO8BZi6LW7Wv+wsGcrMt3MkjFewvcmGriouFmss6eCsJznhBYtPF7jqCvhVtfG/7YLxPjOtWb3Ha9Lx0fZZ3qij3RO3Q05QNJ03lAZgZ881ysTeX3WMJ9sdgc/PoNlxzFWbOup1JU2MwDNfK9gjHYCoLwhSQdNFAVXoDEPYEoNaBm5/FndAMRaubUQMWl6q812uuTu5hhc0e7ZlMu80Yo2Xz7dCU5KC6Hqab3VbdrrqT6lCzjnM+4c8GPlaPTdNlYB7Z05XcT4a53Z9qpc2blK9gv2o5A8o7891YbQ1AfD5tPdWZJcvmBJ82rm0vhdWk7rVsT+Vmke3Z0QlX9XC6j+mmgDiWMk7HYVICjioA0NvNd8JUFdpFUi0lmxqqYIKunKTgvGOTIbs4DPpHDxocCPPhcrLbvxfGkjJZoLKpTNpKLrUlYBVF6GtzubsDc8FxYsGRu8IUSmBqKMPMIPma94ny5zx2L3l0ZAHI3Bo0+X6Jm9N8Mkm0eh2cAmEedPmtesiXVtOnWwckj7RxVM9UPLaD9TLcq74bz+NUmw+H41G+0dPefkdmlU1rwyO3LsnHfQTc8VDf7qVQMt8iw0iiagBjmCiRryr5ebLGu7a78elBtcEIb7QEW+zc32Tznimvh7GjMcP+LHjjWnwJp/ap71d37WxZ1bVm1LLEwJZOJ2odL+gQhF1+1jhYOcvut/Ns1MzsAdhvTHace7xw4uXhWofZbDpcan61UWocRyOfPutUfRxNMq2X1eXptMpZgt7XcRS7Rtp28ngSWKxhJs3jml403cjb82y61+sRt3B8Uqy3oxW11LfStL6Ca99pRXBAzagjkFv2SOmdNmfzHPkTeB2gn6fDXXidH9TjZPkwem6kQyPdimByWxYHkCKVu+RUMJPvCUwhca2afVHtRAULwgkKksprsasgL52UUBzX6pAj47qWG902DxiOFZtNtiG3ZLpOM10a0A2er8tC+8Zyrig+QRTDwHYLXwWPu55S3wOEfgejwEJx7RimcItw5RuLRb7KSjAjx28YYKSHhCdKPC1KDQDqtMixLE8DuS11G3W+LYBWl2aYSnkcJpNgEgM7QfEHjsgyHzjiDEE3clFBJIvTFJPjFCckJQfzmCYe83Q0nwKUEqoZF2yvw9bbDQq7fuShAjDlh1bqoadoG10SROHrk62ZEF+kM1n/R9HEy0n/1xA/v7tlg+hYbqGAi3gERCqKviC87C2Yr4NmaJ2mH4O+mQep5RYHOkltErvwiuTjq98dU7TKvV2KqETtH+aG+67+4+1/7qS+AUV9zsfdkXV0H9zemDsho4SuvN4qejCfDk/p8ZheatgqqFhMzFMMRbcoDcGU8KmTHu5RQN1NUD+isnfUnzzf5R/xpck20BIyDnzSceXL8gf3GA3h4h6jkC8m/+kl6YNLkrcE5clXMtEj150C8bc3ItiBhR4Rv5FHFsbW73J9YevBD4mzmH9u4BSrgrie/tIUMCRmXTIDw/jR+FcGvnL+UXhP8h1LQrppkybo72/KxXB7qZgQhmmQKFLlIngcuBecySlCnd9Kf5i5UMf3u0CO/3oXWKkjjYw+36zcdd3/rVxzL+0CEdmF3QuWl0pOrrXEeeA8DPh3gF/P+Ab33Yz/GMnrH+I/JQ85/fw9vP4L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8H62EzQ0rSdWwqKioCK5fbuEwIMomA4L++jto9JicnLy5b5WlTtPT/fRCzzMv2PQ9tg0wRnHihkFZkV4r/9A1zuabDeup2WjRT7VWvf5k0nSLfDUgzdW4eq1hVsoKxilSApyYQfJaYWmGe6J58jGYVptrtGn2mWly60p5jmJMTBOVZ7pSzn0vwO2L29dKGgft0MQubgemj3A7gW0dqMM20WybN0yVt5cryovD+G2bJFGbouCzhSDyPPgMQ596oT7ovFi4rbtOYCZpjN59Wvi18r43y7LnjHsOY4diaZqmaJ4iOhZ2nV+Vt9JtM7KUwA6va9EMwsCFpueezQKUipJtaJWB54Sxm2z9v5hmKIYuTD+hHD5Bphb8qlC/HVzQ/dDSB5AxNp/w1mRuxqbIRjEKICrPpspr5dfPKnjda8RmgO0w9vGn9X+DhIIj8sIIWU/4FtkN3c8tfpGutxcE20oAvRS7RzQq2iQyIcLlSYxsNx+6mDSfhcuX8pdzfOswBP9LSV6oR5wENvVFZiTXQTj5f+r1WKurlbnppegtlu3tYn+YwAFl9H0jm6pNrAf1rlRrvV4gPCpfQd1L/b7+3Kj3vnrfND2sxWpnwG3S6BCmtjSdg5zrn8edsScljDbyEteaBP0hO9w3++xczE6isbT2kY66rCeHrj4ODkk8GGK/hku1tCmy9r67OPXAqW/ySjo/UItw00tD+tyrG6ZMNTVPCxaTY+CtWSdcm07I9YfKZgyl8VzbBxbjNC3R902xFO4oYSaMFmig1aVdqs849fV3TI8xFHEN0OkSZPF/Wad5yUzM+0IsJoVNXs8EvamKIlYlUQRIdECmCMBRhOEZjARnf9ju3S6f0QLQZh0ggZM6BZnkrKS5pg3kzJrPvfVc6XQEdVrLemAllcgDSc7n0nrZp83FOlqxHXqtC4K1nIYbrh9ZvX3W28KRaqjZyFBO6k7OR4ZMLy4yJyfrs7pTmbEx40qLncCrUzmTsotHSc62o/ViGq1mfAbPsqaCWhcwM1ncqj3DnzOQm27hTh6qYH+RC1tVnM/VXDbApCQ4ozmJzRA76wj6VrTxve2D8R4xbljd+WnT9dL1Wd6potwV9UNXVzacpMl9MF3NNov53lx0jiXYG4HNzaNbd81lmDnrViZpq/4gXCvbIxwBTRYEDZB00UBVun0QdgWg1oCbn8Wd0AhFq5NRfRaXqrzXbSxP7mGJzS7tmUyrxayGi8bk0JDkoLoepJvdVt0uO+PqQLeOMz7hzyt8rB4bpsvAPLK1pdxLBrnd0/TSZiLlS9irWk6f8s58J1abfRCfT1tPdabJojHGp41r2wthOa55TdtTuWlke3Z0wlUj1PYx3RAQx1Kr03GQlICjCgB0d7OdoKlCq0iqpWTaShVM0JGTFJx3bDJg54d+7+jBFQfCfLAY7/bvhbGkTBaoTJNJW8mllgSsogg9fSZ3dmAmOE4sOHJH0KAEtJUyyFYkX7MeUf6cx84lj44sAJlbgwbfK3Ezmk/GiV6rgVMgzIIOv1UP+cJq+HTzgOShPopqmYpHdrBehHvVd+NZTN6YwWA0zDdG2t3vyKyyaX1w5NYl+biPgDsaGNu9FErmJFqtkqgawBgmSuSrSn4er/Gu5W58ul+tM8KElmCTnfmbbNY15fUgdnRm0JsGE67Jl3Bqn3p+ddfKFlVDb0Tk7Q1s6XSi1vGcDkHY4af1g5Wz7H47y4aNzO6D/cZkR7nHCydeHqwNmE21wUL3q/VS/Tgc+vTZoGqjaJzp3awma1qVswSjZ+Aodldpy8njcWCxKzNpHNf0vOFG3p5n071Ri7i545NiTY5W1FQnJa22hGvfaUawT02pI5Cb9lDpnjZn8xz5Y3gdoJ+nw114nR/U42T5MHpupEMn3YpgclsWB5AilTvkVDCT7wlMIXGtJ/ui2o4KFoQTFCSVt2JXQV7aKaE4rtUmR8Z1Ldc7LR4wHCt2Gmxdbsp0jWY6NKDrPF+ThdaN5VxRfIIohoHtFr4KHnc9pb4HCP02RoGF4qdjmMItwpVvLBb5KivBlBy/YYCRERKeKDZaHMM1mkILENQduiXKLC9KbIvmG3QDCJXyKEzGwTgGdoLiDxyRZT5wxCmCbuSigkgWpykmxylOSEoO5jFNPOb5aD4HKCVUMy7YXpsljIbCrh95qABM+aGVeug52kaXBFH4+ss+mRBfpFPZ+EfRxctJ/9cQPz+7ZYPoWG6hgIt4BEQqiv4gvPV2/RbM10EztEHTj0HfzIPUcosDnaQ2iV14RfLx0e+OKVrl3i5FVKL+D3PDfVf/8fY/d1LfgKI+5+PuyDq6D25vzJ2QUUJX3m4VPZjPh+f0eEwvNWwWVCwm5imGopuUjmBK+NTJCPcooO4mqB9R2TvqT57v8o/40mQb6AkZBz7puPJl+YN7jI5wcY9RyBuT//SS9MElyVuC8uQrmeiR606B+NsbEWzDQo+IJ+QnC2Prd7m+sPXgh8RZzD83cIpVQVxPf2kKGBKzLpmBYfxo/CsDXzn/KLwn+Y4lId20SRP09yflYri9VkwIwzRIFKlyETwO3AvO5BSh9m+lP8xcqOP7XSDHf70LLNWhTkafb1buuu7/Vn5yL+0CEdmF3QuW10pOrrXEeeA8DPh3gF/P+Dr33Yz/GMnbH+I/JQ85/fw+vP0L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieSythdcFKUjUsKioqiuvNWzgMi7LJgKi//h00ekxOcr683xVM09P99ELPMy/YDHy2BTBGSepFYVmVXyv/NGwa1liTfeKEJnziLfJm2gJ8YmybQxyyGa7OVcoqxhlSQ5yaYfpaYWmGe6KbT2zNYBotnm3x/HOz0VxXynOUYGKaqDzTlfIx8EPcurh9rWRJ2IpM7OFWaAYIt1LYmgJt0CKaLfOGqfL2ckV5cZi8uWkatygKPlsIIt+HzzAKqBfqg86LhVtTzwnNNEvQu08Lv1be9+Z5/pxzz1HiUCxN0xQtUETHwp7zq/JWum1Glhra0XUtmWEUetD0vbNZgNJQ6kZWGfhOlHipG3xjmqEYujD9hI7wCTJ8+KtC/XZwQfdDSx9AJth8wq7J3IxNkI0SFEJUnk3U18qvn1XwutdIzBDbURLgT+v/BgmFB+RHMbKe8C2yG7qfW/wiXW8vCLbUEPoZ9g5oWLRJbEKEy+ME2d5x4GHSfBYuX8pfPuJbhyH4X0ryQj3iJLCpLzIjew7C6f9Tr8daXa3MTT9Db3zeW4Ea3wSNfJFAu8+wjD/s84veUHm9QHhUvoK6l/p9/blR7331vulA2VLXGIxnQ2NWX43p1PW5Wb/aDV0RJwfYZIWaZpi7RBlhz1d2Sb4dro6GMQvHlmnwvdFwPmMlEwvd2XheigRKmDrV3paq6zG720oM3XQa48amx279hdDr6ubcDbqLZD5ZLLkTPxnm5mrXHujjtYqYLDS3frJVg2ENjbhSsPf7rKfj3anRtc+0sZ6sXn/H9BhDEVcfnS5BFu/LGi3IZmreF1IxKWzye6boTVNVqSpLEkCSA3JVBI4qDs5gKDq7vbvzOkJOi0CftYEMTtoE5LKzkue63ldyaz7313O13Ra1CZ93wUoukQ+ycpzL62WPNhfreMW26fVUFK3lJNpwvdjq7vKuC4eaoeVDQz1pW+U4NBR6cZE5R7I+a1uNGRkzrrTYioI2UXI5v3iUldwdrheTeDUTcnhWdA3wHcDMFMnVukYwZyA3ceFWGWhgd5GLribN59pRMcC4JDrDOYnNkNrrGAZWvAl898F4lxg3rM78tOn42fqsbDVJ6UjTfWeqbjhZV3pgspptFvOduWgfSrA7BJubR6/mmcsod9bNXNZXvX60Vt0DHAJdEUUdkHTRQFM7PRB1RKDxwDuepa1YjySrnVM9Fpeqgt+pL0/efonNDu2bTLPJrAaL+nhfl5Wwuu5nm62rucv2qNqfWoeZkArnFT5UD3XTY+AxtvWl0k37R7urT0ubsXxcwm7VcnqUfxbaidbogeR8cn3NmaSL+gifNp5tL8TliPcbtq9xk9j27fiEq0ak7xK6LiKOpVanQz8tAUcTAehsZ1tR18RmkVRLzfWVJpqgraQZOG/ZtM/O973uwYcrDkTH/mK03b0XxpJzRaRyXSFtpZSaMrCKInSnM6W9BTPRcRLRUdqiDmWgr9R+viL5mnWJ8uc8ti95dBQRKNwa1IVuiZvRQjpKpzwPTqE4C9uCq+2PC6se0I09UgbTYcznGh7a4XoR7bTAS2ZJNp31+8PBcWNknd2WzCqbnvYP3LqkHHYx8IZ9w93JkWyO49UqjashTGCqxoGmHs+jNd42vU1A96o1RhzTMmyws2CTzzqmsu4nzpTpdyfhmGsIJZzZp25Q3TbzRdWY1uOGJYW2fDpR62RORyBqC5Pa3jqy7M6d5YN6bvfAbmOyw6MviCdB6a8NmE/0/mIaVGul2mEwCOizQfHDeJRPOzmv6HqVs0Sja+A48VZZ0zkmo9BiV2ZaP6zped2L/Z3AZjuDj7m5E5BijQ9W3NDGJZ1fwnXgNGLYoybUASgNe6B2TpuzeY6DEbwO0M/T4S68zg/qcbJ8GD030jEl3YpgelsWB5Aql9vkVDDTvxOYQuJZT/ZFtRUXLAinKEwrb8Wugry0MkJxPKtFjozrWuElwLKgxgCuLXCSqNA8zbRpQDcEgW9wtRvLuaL4BFGKQtsrfBU87npK/R0gDFoYhRZKng5RBl2EK3+xWOSrrIYTcvxGIUZGRHgiD9rtGlcDktJmGwLDcEBmG01JatZrQGnKYqU8jNJROEqAnaLkA0dk6Q8ccYKgF3uoIJLFaYrJcYpTkpK9echSn3k+mM8hygjVTAq212L5Zo3CXhD7qABMBZGV+eg5duNLgih8fRLSA/FFOlGMf9SpdDnpvw3x87dbNoiO5RUKuIhHRKSi6AvCy92C+T5o7jHom3mQWV5xoJPUpokHr0g+fvrdMUWr3NuFRHWDfNf8LPhglfoc0N2RdfDgvefv1wHCJgnfeLuVZG8+75+zwyG7FKFRcKmEmKcYim5QUwQzQohORrRDIXU3Qf2Ii95Rf/J8l3/El6VuOE3J/xyQlilflj+4iEwRLi4iKmn5409vOR9ckryl6Jh+JZN8cl8pEP/1SgNbsNAj4jF55FFi/S7XF7Ye/JA4iwHmhU6xKpjn6ZumgBEx65EhFiWPxr8y8JXzj8J7ku9YUtJNmyxF338pF9PptWJCGGVhqsqVi+BxYl5wpqcYtX4r/WHmwv3eyfwRf0vml9pgSmZXYFbuut7/Vn7yLu0CEdmFvQuW18qR3EuJ89B5mNDvAL8c0kKz9rch/TGStz/Ef0oecvr5f3j7Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>6B02C6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Child_User_Create_API" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_User_Create_STS_Policies" searchProperties="true" id="d28a0c5d-89e3-4133-8e7a-f724774172a5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);


tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("CLG_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - CLGAttestation for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateCLGAttestation")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("NODE_ACCOUNT_ID", tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("CLG_NODE_USER_ID", tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CHILD", tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("NODE_USER_ID_FULL", tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - GeoPrivacyAssent for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateGeoPrivacyAssent")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));



//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API" id="c5295d99-5448-463a-a7c7-16da5cdfeac0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b447e6fa-253c-4d70-a51e-e0babc146b2d</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_b447e6fa-253c-4d70-a51e-e0babc146b2d</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5EC191E9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx1jyzY3T2AG7HDKmdCkQNI2Lx0hr0HBloklg5NffyQTEyAkpWcmM0Tr1e63F327Fxwnse31OIdM0JRpw6Cj/565bhMaETbsukMMN2xaBq4jMMCa4RlBbmNmh7o25DyHIeMCM9HRbQs5BrINuzVFtmc3PNeptez2va7dQcalaalSs3StSGLGvdJtR88z5qWYU+4xnAD3BPEmvdGVJzU9XGHSuxdblKXDrLsQYuWZJqmFQCCOSY2kiXlhHuhchNyb0DnDIs/gxWfIO/rL3c1mU9s4tTSbm7ZlWabVNqVOyOn8s979VF2GcMiidHv2MUsZJTimz1iBGoFYpKHWi+dpRsUiecc0MpGlTBtQEENmjn3WzVcHJbozLR2AzDg2+AKjytgYIsiAEdBux8OO/vm8Cm7vTjPMeJRmCT86/x0kYGuI0xWEBq8iq9Cdb/FEuroXQLwhI3HO6Rq+qTZZYQJcu8kgosUV5bL5Qq6V5dcKLv9o1WVA/qYsF+Y+VgndPJGdgM6Bi/9Ts/16ba3c4TiH7uDXWDj3P65/1GcrkRTzwaKxJNe/oijfdEoI+8pbULtyv5yPm3XXWy+Xosa9A4gl/WzKU+wOws3z/a1/GzXp9x6Kl0MyClDDviSbZxFfja6uaVoPkT35OveL5bMzevz+gJqP6FcLzEH6KR8/bvL4B+oPiqixIV8b86+O9ZPeLII7tCHk4WmNksXG9tFq0l4ubgdo8L0Zrdy762/39eDhS/jzS9FGA/PLDC2tTzd1f7m+9Qt7aTLz3/X06Z9R5zWm/RgOhRUlTPLZAxBRHVV7DANtIOuFxcf0oiQ0NKJS1VspjuICmNC76paiFi+XBERDTxZze667AbLaqN+3247jIsvvt3u2/K/tttCg3WtVHLRFcQTRT1lElS/Fstv++RggSTwOLITMWKc5WQDXP7AYYIG1IRvLx5EyDtNUsvjlpe27ftDoN+p+M7jsO4Om5TT9dmA5jZbbdHXtWyqu2XXWiwRkhwxeP2DwMRC6oqBoXvU5l43OhUzJI17nIka1Na4xyOUgyBQXe7bbqpucJqsYFGAzScM8htpqsSoTZPLtr21gwkvp+HJavr93wzv+VmVC6oRUKXAVSx9kNeHEKHKqQN4PuLUfcGW+l4dUPTOZVpFRskVy+Om1W1Sb7FpFRvTbn/xGFe6d+tnX3940PwBlHudj5yhc0z231UyVY0KSSLeq5iOuPdby9Tov69dUBJlJ86bkSWROgOSS5Z6m6RKYuTNhnjVkdqiPPO/kh/hysWATgQUkstu08njGhjEBrjaMoXwtxbnry4FLmTcBhTgl82O5iCjEH+4qxCNKT4pv5M8mzV4DP2Vrz4+MU64VgrK5Oqlx8vROU5BUmqWS/9Js3/gpA6ecHwp3Sd5hEbKbZrmA979oitg6OiYkzZkYBnop2CfbEqd4WoH3qvTGTEnoLxO64O9O6J+jq4mkvQTrO136Z2WDlu1CQFeLQImloxdy4ZTO2XyP3F8A7vN7O/CRjYL2n/j9MJLuG/FbyV5Oj99D9z8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFQ0Ci745RYOA6JsMiDor7+DRo/Jycmb+1ZZhdP0dD+90PPMMzZ9j+0AjFGcuGFQVqSXyj8tdrOxbLZZa9Zpq1aHdb624Sy21m7V603YsK2N3a6UFYxTpAQ4MYPkpcLSDFejefLTmXaHa3Q4/olrsOtKeYFiTEwTlSe6Us59L8Cdi9uXShoHndDELu4Epo9wJ4EdDaijDtHsmDdMldfnK8qLw/h1myRRh6Lgk4Ug8jz4BEOfeqY+6DxbuKO5TmAmaYzefVr4pfK+N8uyp4x7CmOHYmmapmieIjoWdp1fldfSbTOylMAOr2vRDMLAhabnns0ClIqSbWiVgeeEsZts/b+YZiiGLkzXUA5rkKkHvyrUbwcXdD+09AFkjM0a3prMzdgM2ShGAUTl+Ux5qfz6WQWve/XYDLAdxj7+tP5vkFBwRF4YIauGb5Hd0P3c4hfpen1GsKME0Euxe0Tjok0iEyJcfouR7eYjF5Pms3D5Uv5yjm8dhuB/Kckz9YiTwKa+yIzkOggn/0+9Hmt1tbIwvRS9Ag6ON+ugTi9EhTmwSzzp9bZNenYUlZcLhEflK6h7qd/Xnxv13lfvm475xKCrvcHZaPQn8kCLm/1NbsSLbR+FAr1nTBnncQrF+WmS0nCUAGdXHXR7DS2o7jN7xfFyuNH93Kp6G780tTx+bMgwyVqWLslmMGxTjD8MrPF63RdpJs4X/nnmn2Z0Szb6PZTVR4YwXPSXs4bY0AR5vhrlGUttp0MMSv29L7BzBfYNyw0OLX/e3b/8jukxhiKuITpdgiz+rxo0L5mJeV+IxaSwyeeZoFdVUcSqJIoAiQ7IFAE4ijA6g7Hg7A/bvdvjM1oA03kXSOCkzkAmOYa0mE6HcmYtFt56oXS7gjqrZ31gSCXyQpLzhbReDWhzuY4MtkuvNUGwVrNwww0iq7/P+ls4VnU1G+vKSd3J+ViX6eVF5uRkfVZ3KjPR51xpuRN4dSZnUnbxKMnZdrxeziJjzmfwLE9VUO8BZi6LW7Wv+wsGcrMt3MkjFewvcmGriouFmss6eCsJznhBYtPF7jqCvhVtfG/7YLxPjOtWb3Ha9Lx0fZZ3qij3RO3Q05QNJ03lAZgZ881ysTeX3WMJ9sdgc/PoNlxzFWbOup1JU2MwDNfK9gjHYCoLwhSQdNFAVXoDEPYEoNaBm5/FndAMRaubUQMWl6q812uuTu5hhc0e7ZlMu80Yo2Xz7dCU5KC6Hqab3VbdrrqT6lCzjnM+4c8GPlaPTdNlYB7Z05XcT4a53Z9qpc2blK9gv2o5A8o7891YbQ1AfD5tPdWZJcvmBJ82rm0vhdWk7rVsT+Vmke3Z0QlX9XC6j+mmgDiWMk7HYVICjioA0NvNd8JUFdpFUi0lmxqqYIKunKTgvGOTIbs4DPpHDxocCPPhcrLbvxfGkjJZoLKpTNpKLrUlYBVF6GtzubsDc8FxYsGRu8IUSmBqKMPMIPma94ny5zx2L3l0ZAHI3Bo0+X6Jm9N8Mkm0eh2cAmEedPmtesiXVtOnWwckj7RxVM9UPLaD9TLcq74bz+NUmw+H41G+0dPefkdmlU1rwyO3LsnHfQTc8VDf7qVQMt8iw0iiagBjmCiRryr5ebLGu7a78elBtcEIb7QEW+zc32Tznimvh7GjMcP+LHjjWnwJp/ap71d37WxZ1bVm1LLEwJZOJ2odL+gQhF1+1jhYOcvut/Ns1MzsAdhvTHace7xw4uXhWofZbDpcan61UWocRyOfPutUfRxNMq2X1eXptMpZgt7XcRS7Rtp28ngSWKxhJs3jml403cjb82y61+sRt3B8Uqy3oxW11LfStL6Ca99pRXBAzagjkFv2SOmdNmfzHPkTeB2gn6fDXXidH9TjZPkwem6kQyPdimByWxYHkCKVu+RUMJPvCUwhca2afVHtRAULwgkKksprsasgL52UUBzX6pAj47qWG902DxiOFZtNtiG3ZLpOM10a0A2er8tC+8Zyrig+QRTDwHYLXwWPu55S3wOEfgejwEJx7RimcItw5RuLRb7KSjAjx28YYKSHhCdKPC1KDQDqtMixLE8DuS11G3W+LYBWl2aYSnkcJpNgEgM7QfEHjsgyHzjiDEE3clFBJIvTFJPjFCckJQfzmCYe83Q0nwKUEqoZF2yvw9bbDQq7fuShAjDlh1bqoadoG10SROHrk62ZEF+kM1n/R9HEy0n/1xA/v7tlg+hYbqGAi3gERCqKviC87C2Yr4NmaJ2mH4O+mQep5RYHOkltErvwiuTjq98dU7TKvV2KqETtH+aG+67+4+1/7qS+AUV9zsfdkXV0H9zemDsho4SuvN4qejCfDk/p8ZheatgqqFhMzFMMRbcoDcGU8KmTHu5RQN1NUD+isnfUnzzf5R/xpck20BIyDnzSceXL8gf3GA3h4h6jkC8m/+kl6YNLkrcE5clXMtEj150C8bc3ItiBhR4Rv5FHFsbW73J9YevBD4mzmH9u4BSrgrie/tIUMCRmXTIDw/jR+FcGvnL+UXhP8h1LQrppkybo72/KxXB7qZgQhmmQKFLlIngcuBecySlCnd9Kf5i5UMf3u0CO/3oXWKkjjYw+36zcdd3/rVxzL+0CEdmF3QuWl0pOrrXEeeA8DPh3gF/P+Ab33Yz/GMnrH+I/JQ85/fw9vP4L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8H62EzQ0rSdWwqKioCK5fbuEwIMomA4L++jto9JicnLy5b5WlTtPT/fRCzzMv2PQ9tg0wRnHihkFZkV4r/9A1zuabDeup2WjRT7VWvf5k0nSLfDUgzdW4eq1hVsoKxilSApyYQfJaYWmGe6J58jGYVptrtGn2mWly60p5jmJMTBOVZ7pSzn0vwO2L29dKGgft0MQubgemj3A7gW0dqMM20WybN0yVt5cryovD+G2bJFGbouCzhSDyPPgMQ596oT7ovFi4rbtOYCZpjN59Wvi18r43y7LnjHsOY4diaZqmaJ4iOhZ2nV+Vt9JtM7KUwA6va9EMwsCFpueezQKUipJtaJWB54Sxm2z9v5hmKIYuTD+hHD5Bphb8qlC/HVzQ/dDSB5AxNp/w1mRuxqbIRjEKICrPpspr5dfPKnjda8RmgO0w9vGn9X+DhIIj8sIIWU/4FtkN3c8tfpGutxcE20oAvRS7RzQq2iQyIcLlSYxsNx+6mDSfhcuX8pdzfOswBP9LSV6oR5wENvVFZiTXQTj5f+r1WKurlbnppegtlu3tYn+YwAFl9H0jm6pNrAf1rlRrvV4gPCpfQd1L/b7+3Kj3vnrfND2sxWpnwG3S6BCmtjSdg5zrn8edsScljDbyEteaBP0hO9w3++xczE6isbT2kY66rCeHrj4ODkk8GGK/hku1tCmy9r67OPXAqW/ySjo/UItw00tD+tyrG6ZMNTVPCxaTY+CtWSdcm07I9YfKZgyl8VzbBxbjNC3R902xFO4oYSaMFmig1aVdqs849fV3TI8xFHEN0OkSZPF/Wad5yUzM+0IsJoVNXs8EvamKIlYlUQRIdECmCMBRhOEZjARnf9ju3S6f0QLQZh0ggZM6BZnkrKS5pg3kzJrPvfVc6XQEdVrLemAllcgDSc7n0nrZp83FOlqxHXqtC4K1nIYbrh9ZvX3W28KRaqjZyFBO6k7OR4ZMLy4yJyfrs7pTmbEx40qLncCrUzmTsotHSc62o/ViGq1mfAbPsqaCWhcwM1ncqj3DnzOQm27hTh6qYH+RC1tVnM/VXDbApCQ4ozmJzRA76wj6VrTxve2D8R4xbljd+WnT9dL1Wd6potwV9UNXVzacpMl9MF3NNov53lx0jiXYG4HNzaNbd81lmDnrViZpq/4gXCvbIxwBTRYEDZB00UBVun0QdgWg1oCbn8Wd0AhFq5NRfRaXqrzXbSxP7mGJzS7tmUyrxayGi8bk0JDkoLoepJvdVt0uO+PqQLeOMz7hzyt8rB4bpsvAPLK1pdxLBrnd0/TSZiLlS9irWk6f8s58J1abfRCfT1tPdabJojHGp41r2wthOa55TdtTuWlke3Z0wlUj1PYx3RAQx1Kr03GQlICjCgB0d7OdoKlCq0iqpWTaShVM0JGTFJx3bDJg54d+7+jBFQfCfLAY7/bvhbGkTBaoTJNJW8mllgSsogg9fSZ3dmAmOE4sOHJH0KAEtJUyyFYkX7MeUf6cx84lj44sAJlbgwbfK3Ezmk/GiV6rgVMgzIIOv1UP+cJq+HTzgOShPopqmYpHdrBehHvVd+NZTN6YwWA0zDdG2t3vyKyyaX1w5NYl+biPgDsaGNu9FErmJFqtkqgawBgmSuSrSn4er/Gu5W58ul+tM8KElmCTnfmbbNY15fUgdnRm0JsGE67Jl3Bqn3p+ddfKFlVDb0Tk7Q1s6XSi1vGcDkHY4af1g5Wz7H47y4aNzO6D/cZkR7nHCydeHqwNmE21wUL3q/VS/Tgc+vTZoGqjaJzp3awma1qVswSjZ+Aodldpy8njcWCxKzNpHNf0vOFG3p5n071Ri7i545NiTY5W1FQnJa22hGvfaUawT02pI5Cb9lDpnjZn8xz5Y3gdoJ+nw114nR/U42T5MHpupEMn3YpgclsWB5AilTvkVDCT7wlMIXGtJ/ui2o4KFoQTFCSVt2JXQV7aKaE4rtUmR8Z1Ldc7LR4wHCt2Gmxdbsp0jWY6NKDrPF+ThdaN5VxRfIIohoHtFr4KHnc9pb4HCP02RoGF4qdjmMItwpVvLBb5KivBlBy/YYCRERKeKDZaHMM1mkILENQduiXKLC9KbIvmG3QDCJXyKEzGwTgGdoLiDxyRZT5wxCmCbuSigkgWpykmxylOSEoO5jFNPOb5aD4HKCVUMy7YXpsljIbCrh95qABM+aGVeug52kaXBFH4+ss+mRBfpFPZ+EfRxctJ/9cQPz+7ZYPoWG6hgIt4BEQqiv4gvPV2/RbM10EztEHTj0HfzIPUcosDnaQ2iV14RfLx0e+OKVrl3i5FVKL+D3PDfVf/8fY/d1LfgKI+5+PuyDq6D25vzJ2QUUJX3m4VPZjPh+f0eEwvNWwWVCwm5imGopuUjmBK+NTJCPcooO4mqB9R2TvqT57v8o/40mQb6AkZBz7puPJl+YN7jI5wcY9RyBuT//SS9MElyVuC8uQrmeiR606B+NsbEWzDQo+IJ+QnC2Prd7m+sPXgh8RZzD83cIpVQVxPf2kKGBKzLpmBYfxo/CsDXzn/KLwn+Y4lId20SRP09yflYri9VkwIwzRIFKlyETwO3AvO5BSh9m+lP8xcqOP7XSDHf70LLNWhTkafb1buuu7/Vn5yL+0CEdmF3QuW10pOrrXEeeA8DPh3gF/P+Dr33Yz/GMnbH+I/JQ85/fw+vP0L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieSythdcFKUjUsKioqiuvNWzgMi7LJgKi//h00ekxOcr683xVM09P99ELPMy/YDHy2BTBGSepFYVmVXyv/NGwa1liTfeKEJnziLfJm2gJ8YmybQxyyGa7OVcoqxhlSQ5yaYfpaYWmGe6KbT2zNYBotnm3x/HOz0VxXynOUYGKaqDzTlfIx8EPcurh9rWRJ2IpM7OFWaAYIt1LYmgJt0CKaLfOGqfL2ckV5cZi8uWkatygKPlsIIt+HzzAKqBfqg86LhVtTzwnNNEvQu08Lv1be9+Z5/pxzz1HiUCxN0xQtUETHwp7zq/JWum1Glhra0XUtmWEUetD0vbNZgNJQ6kZWGfhOlHipG3xjmqEYujD9hI7wCTJ8+KtC/XZwQfdDSx9AJth8wq7J3IxNkI0SFEJUnk3U18qvn1XwutdIzBDbURLgT+v/BgmFB+RHMbKe8C2yG7qfW/wiXW8vCLbUEPoZ9g5oWLRJbEKEy+ME2d5x4GHSfBYuX8pfPuJbhyH4X0ryQj3iJLCpLzIjew7C6f9Tr8daXa3MTT9Db3zeW4Ea3wSNfJFAu8+wjD/s84veUHm9QHhUvoK6l/p9/blR7331vulA2VLXGIxnQ2NWX43p1PW5Wb/aDV0RJwfYZIWaZpi7RBlhz1d2Sb4dro6GMQvHlmnwvdFwPmMlEwvd2XheigRKmDrV3paq6zG720oM3XQa48amx279hdDr6ubcDbqLZD5ZLLkTPxnm5mrXHujjtYqYLDS3frJVg2ENjbhSsPf7rKfj3anRtc+0sZ6sXn/H9BhDEVcfnS5BFu/LGi3IZmreF1IxKWzye6boTVNVqSpLEkCSA3JVBI4qDs5gKDq7vbvzOkJOi0CftYEMTtoE5LKzkue63ldyaz7313O13Ra1CZ93wUoukQ+ycpzL62WPNhfreMW26fVUFK3lJNpwvdjq7vKuC4eaoeVDQz1pW+U4NBR6cZE5R7I+a1uNGRkzrrTYioI2UXI5v3iUldwdrheTeDUTcnhWdA3wHcDMFMnVukYwZyA3ceFWGWhgd5GLribN59pRMcC4JDrDOYnNkNrrGAZWvAl898F4lxg3rM78tOn42fqsbDVJ6UjTfWeqbjhZV3pgspptFvOduWgfSrA7BJubR6/mmcsod9bNXNZXvX60Vt0DHAJdEUUdkHTRQFM7PRB1RKDxwDuepa1YjySrnVM9Fpeqgt+pL0/efonNDu2bTLPJrAaL+nhfl5Wwuu5nm62rucv2qNqfWoeZkArnFT5UD3XTY+AxtvWl0k37R7urT0ubsXxcwm7VcnqUfxbaidbogeR8cn3NmaSL+gifNp5tL8TliPcbtq9xk9j27fiEq0ak7xK6LiKOpVanQz8tAUcTAehsZ1tR18RmkVRLzfWVJpqgraQZOG/ZtM/O973uwYcrDkTH/mK03b0XxpJzRaRyXSFtpZSaMrCKInSnM6W9BTPRcRLRUdqiDmWgr9R+viL5mnWJ8uc8ti95dBQRKNwa1IVuiZvRQjpKpzwPTqE4C9uCq+2PC6se0I09UgbTYcznGh7a4XoR7bTAS2ZJNp31+8PBcWNknd2WzCqbnvYP3LqkHHYx8IZ9w93JkWyO49UqjashTGCqxoGmHs+jNd42vU1A96o1RhzTMmyws2CTzzqmsu4nzpTpdyfhmGsIJZzZp25Q3TbzRdWY1uOGJYW2fDpR62RORyBqC5Pa3jqy7M6d5YN6bvfAbmOyw6MviCdB6a8NmE/0/mIaVGul2mEwCOizQfHDeJRPOzmv6HqVs0Sja+A48VZZ0zkmo9BiV2ZaP6zped2L/Z3AZjuDj7m5E5BijQ9W3NDGJZ1fwnXgNGLYoybUASgNe6B2TpuzeY6DEbwO0M/T4S68zg/qcbJ8GD030jEl3YpgelsWB5Aql9vkVDDTvxOYQuJZT/ZFtRUXLAinKEwrb8Wugry0MkJxPKtFjozrWuElwLKgxgCuLXCSqNA8zbRpQDcEgW9wtRvLuaL4BFGKQtsrfBU87npK/R0gDFoYhRZKng5RBl2EK3+xWOSrrIYTcvxGIUZGRHgiD9rtGlcDktJmGwLDcEBmG01JatZrQGnKYqU8jNJROEqAnaLkA0dk6Q8ccYKgF3uoIJLFaYrJcYpTkpK9echSn3k+mM8hygjVTAq212L5Zo3CXhD7qABMBZGV+eg5duNLgih8fRLSA/FFOlGMf9SpdDnpvw3x87dbNoiO5RUKuIhHRKSi6AvCy92C+T5o7jHom3mQWV5xoJPUpokHr0g+fvrdMUWr3NuFRHWDfNf8LPhglfoc0N2RdfDgvefv1wHCJgnfeLuVZG8+75+zwyG7FKFRcKmEmKcYim5QUwQzQohORrRDIXU3Qf2Ii95Rf/J8l3/El6VuOE3J/xyQlilflj+4iEwRLi4iKmn5409vOR9ckryl6Jh+JZN8cl8pEP/1SgNbsNAj4jF55FFi/S7XF7Ye/JA4iwHmhU6xKpjn6ZumgBEx65EhFiWPxr8y8JXzj8J7ku9YUtJNmyxF338pF9PptWJCGGVhqsqVi+BxYl5wpqcYtX4r/WHmwv3eyfwRf0vml9pgSmZXYFbuut7/Vn7yLu0CEdmFvQuW18qR3EuJ89B5mNDvAL8c0kKz9rch/TGStz/Ef0oecvr5f3j7Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>64D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5295d99-5448-463a-a7c7-16da5cdfeac0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="9853ee30-820a-41a5-abbd-6328d708f3b0"><con:settings/><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("V2");

def v2 = context.expand( '${#Project#V2}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140218</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="01.User_Get_GeoProfile" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_FUNC_CHILD_BAU_Get_Self_200_OK_P1" searchProperties="true" id="b0c2e4dd-9005-4abe-9360-387a84fdfe06"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BD67208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155BDF9208CE0401F0A059926FE:57D14AFA"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BD54208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BD54208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BD54208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BD67208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BDAF208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BD67208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BDAF208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vgJBA+ooKUhrKbLbRboN22L1euMwHfTewQO0D769cJDQVKe7tXQkKejM+c+fCxTwVOYtv1hIBMUs60oN/V/6lbzTB6tNpGpx2FRiN8JEYbNx2jhdsRdLCDwXZ0LRAih4AJiZns6rZp1Q3LVL+pZbqNjms3a41650HXbiETClq51ExdWycxE24ZtqvnGXM5FlS4DCcgXEnciTcausrTxRUnvXe6YVkGzHpzKVMXIVILgUAckxrhCTpFez6noXAndMawzDN4iRmKrv6yd7Va1Vb1Gs9myDZNE5kdpHxCQWdf9d6XajOEAYv4Zu1jxhklOKbPuCA1AjnnoebFM55ROU/egbaQZRbQBqyJQawG+6qj1wAlu08i7ZHMBDbEHFsV2BgiyIAR0G7GQVf/+rkObvZOM8xExLNEHKz/jhKwJcQ8hdAQVWYVu88jHilX7xSIGzAS54Iu4bIYkxQTENrPDCK6HlKhhi8UWtl+bS2qCQPyNy05Rbs8FW10pDJ9OgMh/0+/dnu1QbnFcQ496PenPoTNqJPOvUly+ZuPk7OTYdOmvFtS2HXekNq2+mV9OKjbuXrZhOdohGT7+/PwxA8vonbis1EuLhsXM962Rh4Lfy0QunnGdsP0/cGws8BPXv3hAj+dB7dpdn/9Qz6ldj2KJtdR/iX17sY3J4vB3e0qvb/5dnE1XqHHe+/s8uf0YjCV+Nf1s+/X4+8PWY4C2fjxPJyHyzScDZbXns+d3G/c+s7D9fLxWzb6cv9koevF7cls+exdJYM4+OZ1X3PazWHfWMnBJH/8F4islsVoBH1toPqF5cfSUlhoaESlq5sW+iQkMKn3il2FrLi5Eh8auqqZm/V5u2n5luOc9Zst22z752bDtAamZzqdjt0cnFf6s2FxQNHnLKJFrEJhN/PzMUGSuAJYCJmx5DmZg9A/QOxjibWAjdXB4EzAlCsFN88Hjtk6871207Y9R5HvOL5XHzRaXuusU2/q2iWXV+wq8yIJ2b561/fUewyEphQKiS/mXKhBF1KVZIGXuYyt2hLXGOTqEsgKHXbtRttBgiZpDAVhlPAwj6GWztOyQEhs/m0DE1FaqSApzySOy1P4bpKH36p6KJ+QFg6iyOgMVE/hyGVkVem8n3ZzN+0K3stDWhw2VVyZUbJhsv/pdWaKYdkOzDYvIqyK+3bLX0IcAUAf8EOHpdnGC5d0J3p1wao7Q6lKr2rvAtcWtXy5zMuGtgrFzBQ8spDZQhMguZK9pyn/DQxtIdCnbpwt64PIW/s+v1zO2URiCYkaP61cfuK5MQFRPDcCdXzWn33L7IVUdZOwlsdsfqxeJQXjDx8uxCWFnzL/VH8rnoWv7TqCtRNH5aneGJKyWbEq7pend2aDcAVLlSDybBf8GMCx4PvGbZG3XKSapsdcwvtftELpujomhOdMBn29NOyqb8lT3R7gvjq9gSkV/uXKXot3r+y70XCidDDB+taX/rezQctxIaB2CVpy6epr9fpUwdlsR+1fCB4XfKfxkeDvZ9J7Y35r2anp4Xno/QE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vgJBA+ooKUhrKbLbRboN22L1euMwHfTewQO0D769cJDQVKe7tXQkKejM+c+fCxTwVOYtv1hIBMUs60oN/V/6lbzTB6tNpGpx2FRiN8JEYbNx2jhdsRdLCDwXZ0LRAih4AJiZns6rZp1Q3LVL+pZbqNjms3a41650HXbiETClq51ExdWycxE24ZtqvnGXM5FlS4DCcgXEnciTcausrTxRUnvXe6YVkGzHpzKVMXIVILgUAckxrhCTpFez6noXAndMawzDN4iRmKrv6yd7Va1Vb1Gs9myDZNE5kdpHxCQWdf9d6XajOEAYv4Zu1jxhklOKbPuCA1AjnnoebFM55ROU/egbaQZRbQBqyJQawG+6qj1wAlu08i7ZHMBDbEHFsV2BgiyIAR0G7GQVf/+rkObvZOM8xExLNEHKz/jhKwJcQ8hdAQVWYVu88jHilX7xSIGzAS54Iu4bIYkxQTENrPDCK6HlKhhi8UWtl+bS2qCQPyNy05Rbs8FW10pDJ9OgMh/0+/dnu1QbnFcQ496PenPoTNqJPOvUly+ZuPk7OTYdOmvFtS2HXekNq2+mV9OKjbuXrZhOdohGT7+/PwxA8vonbis1EuLhsXM962Rh4Lfy0QunnGdsP0/cGws8BPXv3hAj+dB7dpdn/9Qz6ldj2KJtdR/iX17sY3J4vB3e0qvb/5dnE1XqHHe+/s8uf0YjCV+Nf1s+/X4+8PWY4C2fjxPJyHyzScDZbXns+d3G/c+s7D9fLxWzb6cv9koevF7cls+exdJYM4+OZ1X3PazWHfWMnBJH/8F4islsVoBH1toPqF5cfSUlhoaESlq5sW+iQkMKn3il2FrLi5Eh8auqqZm/V5u2n5luOc9Zst22z752bDtAamZzqdjt0cnFf6s2FxQNHnLKJFrEJhN/PzMUGSuAJYCJmx5DmZg9A/QOxjibWAjdXB4EzAlCsFN88Hjtk6871207Y9R5HvOL5XHzRaXuusU2/q2iWXV+wq8yIJ2b561/fUewyEphQKiS/mXKhBF1KVZIGXuYyt2hLXGOTqEsgKHXbtRttBgiZpDAVhlPAwj6GWztOyQEhs/m0DE1FaqSApzySOy1P4bpKH36p6KJ+QFg6iyOgMVE/hyGVkVem8n3ZzN+0K3stDWhw2VVyZUbJhsv/pdWaKYdkOzDYvIqyK+3bLX0IcAUAf8EOHpdnGC5d0J3p1wao7Q6lKr2rvAtcWtXy5zMuGtgrFzBQ8spDZQhMguZK9pyn/DQxtIdCnbpwt64PIW/s+v1zO2URiCYkaP61cfuK5MQFRPDcCdXzWn33L7IVUdZOwlsdsfqxeJQXjDx8uxCWFnzL/VH8rnoWv7TqCtRNH5aneGJKyWbEq7pend2aDcAVLlSDybBf8GMCx4PvGbZG3XKSapsdcwvtftELpujomhOdMBn29NOyqb8lT3R7gvjq9gSkV/uXKXot3r+y70XCidDDB+taX/rezQctxIaB2CVpy6epr9fpUwdlsR+1fCB4XfKfxkeDvZ9J7Y35r2anp4Xno/QE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHquQCwmQqCBxSWfTlrZAO9vZl5VxDuA2sUPsUNpfP3ZoKFDa7ayEhHxy/J3vXPzZpxyliRN0OYdcEEa1aNDW//XcuO5AY2bgluUYru+3jNbU9gwfpo7fwACNuqdrEecFRJQLREVbdyy7btiW/N3aVuD6gePXXM/+R9d+Qs4ltHSpWbq2ThPKgzJsWy9yGjDECQ8oSoEHAgeT7vAykJ4BqjjpndMNyzJg3lkIkQWmiWsxYEgSXMMsNU/NPZ/TmAcTMqdIFDm8xox5W3/d+/T0VHuq11g+Nx3LskzLN6VPzMn8u975Vm2GOKIztln3EWWUYJSQF6RIDUEsWKx1kznLiVikH0Dbpm0paAPW2MC2S7/r5luAkt0XkfZI5hwZfIHsCmwMM8iBYtDuxlFb//61Dm723uaI8hnLU36w/jNKQFeQsAxig1eZVey+jnikXJ1TwEFEcVJwsoIrNSYZwsC1mxxmZH1JuBy+mGtl+7U1ryYM8J+05NTc5Slpm0cqMyBz4OL/9Gu3VxuUnygpoPPz18KekEE4JFm4fBG/2Nl1eO66zlNqtUsKu84bUttWv64PB3U7V6+bwvXw7uS+hy+74WV49fcNWzt33vl9NLMKF5LZCek9mmMaPTimN5q2BtYFwlN28ZhmLz9Go9Ca/Jo2k8XIXwmz4X9LHpb1MY1js3uX2w/9KTyEcUKXV425NXjs263R8ja5Tls/knCQn2TzMWG91PMWM6e4HKV0eHtCT/4aXeP+OelF3wb0fhg+vPTPu/Xz0eRiIsJR+y2n3Rz2jZUcTIrpA2BRLdVoRAPtTPYLic+lRVlIbMxK1yBT+sQFUKF31C4lK0EhxYfEgWzmZh22Gnbf9rzeoHvmWK1+aLmWfWZ1Lc/3ncZZWOnPhsUBxT6jM6JiKYXdzM/nBHEacKAx5MaKFXgBXP8EcYAE0iI6lgeDUQ63TCp4y673fK8RyoY23G6v3+uHA9v3/V7TPmu2mn1du2Liml7n3ZmAfF+963vqPQZMMgJK4tWccznoXMiSLNGqEIldW6EahUJeArnS4cBxW57JSZoloAibKYuLBGrZIisLZPLNv2MgzEsr4ThjuUBJeQo/TPLwW1UP6RMT5cBVRj2QPYUjl5FdpfMubffopVXBd4uYqMMmiytygjdM9j+9zYwalu3AbPPC3K64b7f8IcQRAPMTfuZhabbx4hXZiV5dsPLOkKrSqdq7RLVlrVitirKhTaWYuYQ3bdNqmhPAhZS951v2CNTcQphfunG2rA8ib+37/AqxoBOBBKRy/LRy+YXnxgS4em5E8visv/qW2Qsp6yZgLY7Z+ol8lSjGnz5ccICVnzTfyL8nlsdv7TqCtRNH5infGILQuVqp++X5g9nATMISKYgs3wU/BnAs+L5xW+QtFyGnaVoI+PiLppSurSOMWUFFNNBLw676ljzFcwbBm9M7mFLhX6/sNf/wyr4fXk6kDqZI3/qS/3Y2SDkuGOQuTkoubX0tX58yOJ3vqP0rweOC77mfCf5+Jp135veWnZoenofObw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064925</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BD68208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BDB0208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_FUNC_CHILD_SAU_Get_Self_200_OK_P1" searchProperties="true" id="406674fc-6523-4a9c-8f70-1f455a30afb6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BE15208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155BEA7208CE0401F0A059926FE:CFD8A6A0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BE03208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BE03208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BE03208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BE15208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BE5D208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BE15208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BE5D208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH52SXrh2hJnKRbu3F0ZQt76cCekCoiWBJi3orz9JsQiIHj0zzDBZXfnWty75khOBZ7HrB0JAIilnRthpmv+41ahq18fEqrhezSrjhmc1oqhiQZmQiJQboxpUTCMUIoWQCYmZbJqu7XiWY6vf0LH9csP3nJLnlR9N4w4SoaCVS8k2jdUsZsLPwzbNNGE+x4IKn+EZCF8SfxBcXvjK08cFJ7N1smaZB0xaUynnPkKkFAGBOCYlwmfoBO34nETCH9AJwzJN4C1mJJrm297lcllaeiWeTJBr2zayG0j5RIJOjszWr2IzRCEb8/W6jRlnlOCYvmJN6hLklEdGEE94QuV09gm0gxxbQ1uwIhZxyuzIRO8BcnbfRNohmQhsiSl2CrAbGEMCjIBxexM2zaPvdXC9d5hgJsY8mYm99c8oAcsg5nOILFFkVrD7PuKBcrVOgPghI3EqaAZXekzmmIAw+gmM6eqCCjV8kTDy9hsrUUwYkJ+05ARt81S00YHKdOgEhPw//dru1RrlDscptKKzfjDsP3oJiKvfi2R6f8VG9GVU66LnZk5h23lNatPqt/X+oG7m6m1TfH/snmfeqs3C+iJ4OP47uXzoSjKO6PI5eHpyjzswegx7kylyL88FR6Tj9odZb3Zzu5yz31kaTokXlMO44rg3v86WVdR46L5ePbaz6ut1rTblx5PT3h8Hjcmwn05qi4vY7VXH9242dY/dKHAfHAHL1FmIRS9tnwbp6PIcFtXb+/rdr0cn7JCl+xyNV6uztL/kLw/N95y2c9g1FnIwSEdPQGSx1KMRdoye6heWX0uLttDIGueu/lzrk5DApNnSu7Ss+KkSHxr5qpnrdbdeddpOpXLadSquXW937bLt9OzArjQabrXXLfRnzWKPYpuzMdWxtMKu5+drgmTmC2ARJFbGUzIFYX6B2MESGyG7UQeDMwFDrhTcs9u1erlcD7xGx7G7nV7ZrlSDRrdecbvuaU+p9xWX1+w6CcYSkl319nbU+wYInVPQEq/nXKhBF1KVZIGzVMZOKcMlBqm6BBKtw75brleQoLN5DJowmvEojaE0n87zAiGx/nctTERupYLMeSJxnJ/CT5Pc/1bUQ/lEVDsIndEpqJ7CgcvILdL5PO3qdtoFfJBGVB82VVyZULJmsvvpfWb0sGwGZpMXEU7BfbPlhxAHANAX/NB+aTbxooxuRS8uWHVnKFVpFe1d4NKilGZZmje0phVT6ZNEDrJraAAkVbL3MuTPwNAGAn3rxtmw3ou8se/yS+WUDSSWMFPjZ+TLbzw3BiD0cyNUx2f13bfMTkhVNwkrecjWjtWrRDP+8uFCfKL9lLmv/pY8id7bdQBrK47KU70xJGUTvdL3y8sns0G4gqVKEHmyDX4I4FDwXeOmyBsuUk3TKJXw+RdDK13TxITwlMmwY+aGbfXNecqXOfjvTh9gcoV/u7JX4tMr++/lxUDp4AybG1/6384WzceFgNolaM6laa7U61MFZ5MttX8jeFjwbe8rwd/NpPXB/NGyVdP989D6Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH52SXrh2hJnKRbu3F0ZQt76cCekCoiWBJi3orz9JsQiIHj0zzDBZXfnWty75khOBZ7HrB0JAIilnRthpmv+41ahq18fEqrhezSrjhmc1oqhiQZmQiJQboxpUTCMUIoWQCYmZbJqu7XiWY6vf0LH9csP3nJLnlR9N4w4SoaCVS8k2jdUsZsLPwzbNNGE+x4IKn+EZCF8SfxBcXvjK08cFJ7N1smaZB0xaUynnPkKkFAGBOCYlwmfoBO34nETCH9AJwzJN4C1mJJrm297lcllaeiWeTJBr2zayG0j5RIJOjszWr2IzRCEb8/W6jRlnlOCYvmJN6hLklEdGEE94QuV09gm0gxxbQ1uwIhZxyuzIRO8BcnbfRNohmQhsiSl2CrAbGEMCjIBxexM2zaPvdXC9d5hgJsY8mYm99c8oAcsg5nOILFFkVrD7PuKBcrVOgPghI3EqaAZXekzmmIAw+gmM6eqCCjV8kTDy9hsrUUwYkJ+05ARt81S00YHKdOgEhPw//dru1RrlDscptKKzfjDsP3oJiKvfi2R6f8VG9GVU66LnZk5h23lNatPqt/X+oG7m6m1TfH/snmfeqs3C+iJ4OP47uXzoSjKO6PI5eHpyjzswegx7kylyL88FR6Tj9odZb3Zzu5yz31kaTokXlMO44rg3v86WVdR46L5ePbaz6ut1rTblx5PT3h8Hjcmwn05qi4vY7VXH9242dY/dKHAfHAHL1FmIRS9tnwbp6PIcFtXb+/rdr0cn7JCl+xyNV6uztL/kLw/N95y2c9g1FnIwSEdPQGSx1KMRdoye6heWX0uLttDIGueu/lzrk5DApNnSu7Ss+KkSHxr5qpnrdbdeddpOpXLadSquXW937bLt9OzArjQabrXXLfRnzWKPYpuzMdWxtMKu5+drgmTmC2ARJFbGUzIFYX6B2MESGyG7UQeDMwFDrhTcs9u1erlcD7xGx7G7nV7ZrlSDRrdecbvuaU+p9xWX1+w6CcYSkl319nbU+wYInVPQEq/nXKhBF1KVZIGzVMZOKcMlBqm6BBKtw75brleQoLN5DJowmvEojaE0n87zAiGx/nctTERupYLMeSJxnJ/CT5Pc/1bUQ/lEVDsIndEpqJ7CgcvILdL5PO3qdtoFfJBGVB82VVyZULJmsvvpfWb0sGwGZpMXEU7BfbPlhxAHANAX/NB+aTbxooxuRS8uWHVnKFVpFe1d4NKilGZZmje0phVT6ZNEDrJraAAkVbL3MuTPwNAGAn3rxtmw3ou8se/yS+WUDSSWMFPjZ+TLbzw3BiD0cyNUx2f13bfMTkhVNwkrecjWjtWrRDP+8uFCfKL9lLmv/pY8id7bdQBrK47KU70xJGUTvdL3y8sns0G4gqVKEHmyDX4I4FDwXeOmyBsuUk3TKJXw+RdDK13TxITwlMmwY+aGbfXNecqXOfjvTh9gcoV/u7JX4tMr++/lxUDp4AybG1/6384WzceFgNolaM6laa7U61MFZ5MttX8jeFjwbe8rwd/NpPXB/NGyVdP989D6Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6RWhHmKmlaL2hwva4fTkT00CzbZPapAX99TspFgHRo2eGGSarK9/61iVfcsRAllqezxgqOKZEiQY99d8OME3XMbuaYXc7muNasQamhqsBu212ran9iOBUVSLGShQRxgHhPdUyTFszDfGbmIbnuJ7ttCzXfVCVO1QwAS1cWoaqLLKUMK8O21PLgngUMMw8AjLEPA69sX954QlPDzSc1P7RkmUdsOgnnOeersNWjCBKU9iCNNOP9A2fo5h5YzwjgJcFeosZs576tnc+n7fmdosWM90yDEM3XF34xAzP9tX+XrMZxRGZ0uU6AIQSDEGKX4EkdYl4QmPFT2e0wDzJPoE2ddOQ0BpaQA2aDtlX9fcANbtvIm2QLBjQWALMBuwWTVGBCETKr9uop+5/r4PLvZMCEDalRca21j+jhEiFUpqjWGNNZg277yPuKFf/CEEvIjAtGa7QlRyTHEDElOsCTfHiAjMxfDFT6vYrC9ZMGII/acmRvs5T0NZ3VGaAZ4jx/9Ov9V4tUe5AWqL+9dPpy8PZ4T8HlWtfBHfUOh7lsVGeDK+eejWFdeclqVWr39bbg7qaq7dNwenrsBOcHpAE+1eP+U0eRk/Dwp60D+Z2/PuKDQf0lDjtg4vscaRPU+fPKLAS+DTqnL+Cp7CdOIvccLLz2/jk/Hxv1EnPkZ9EJ7MH26/04/DqpLSeaTTv/MKAE7M6a18HxskjOLEuk05wUyF3cpu8GtfI0at73PZDzJ7vBi8PE3+xNxy6L9W99Ts+47FzM7R5Pu+957Sew6axkYNx+fgHQd4s5WhEA2Uo+gX419IiLTjWprWrl0t9YhwRrvblLikrXinEB8eeaOZyHXYPzcBst4/D9sAyukFoOIY5NHyj7brW4TBs9GfJYotiQMkUy1hSYZfz8zVBmHkMkRgVWkVLmCCmfoE4ABwoEbkVB4MShiZUKHh4aHY7rj08Hhza3eO2P/DdwAzDsGOZdhD6pqpcUT4io8KfclRsqre9od63COIcIynxcs6ZGHTGRUmeQVXy1GxVoEVQKS6BQuqwZzndts5wlqdIEtYzGpcpauVJXhdIZ8t/SwOQ1VbMYE4LDtL6FH6a5Pa3ph7CJ8bSgcmMjpHoKdpxGVlNOh/SdnZeWg28X8ZYHjZRXF5guGSy+el9ZuSwrAZmlRdkZsN9teWHEDsA9C/46dulWcWLK7wWvblgxZ0hVKXftPcZtJ5bZVWVdUM7UjELAa+butHRxwiWQvZeJvQJEX0FoX/rxlmx3oq8sm/yK3lCxhxwlInxU+rlN54bY8TkcyMSx2fx3bfMRkhRN44WfJctSMWrRDL+8uECPSj9hPla/M1pEb+3awfWWhyRp3hjcExmciXvl5dPZgNSAYuFINJiHXwXwK7gm8ZVkVdcuJimx5Kjz78oUul6KoCQloRHA7U2rKtvzZO/5Mh7d/oAUyv825W9YJ9e2feXF2OhgxlQV774v501XI8LRGIXwzWXnroQr08RnMzW1P6N4G7BN+yvBH8zk/4H80fLWk23z0P/Lw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064930</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BE16208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BE5E208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_FUNC_CLG_Get_CHILD_200_OK_P1" searchProperties="true" id="b60020f8-3a15-47de-a20d-c92699c3e3e6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BEC3208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155BF55208CE0401F0A059926FE:BC6A5638"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BEB1208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BEB1208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BEB1208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BEC3208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BF0B208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BEC3208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BF0B208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6vgOLwmKkgQwsbaQlfateqXK+McwFuwU9sBul9/ndBQYLS3uxIS8snxc57z4sc+V2SZeEFXKZCaCW4N+237nxqFmHq46RCfVJ2a784cnwJ2IG7MKK43ptj3bWuoVAZDrjThum17Lq462DW/W+wGNT+oNioedh9t6wdIZaCNS8W1rc0y4SoowrbtTPJAEMVUwMkSVKBpMOleXQbGMyAlJ7tzvmVZBJSdhdZpgBCtxEAhSWiFiiU6Rwc+57EKJmzOic4kvMSMVdt+2bteryvrakXIOfJc10Wuj4xPrNj8s935VG6GeMhnYrsOCRecUZKw3yQndQV6IWKrm8yFZHqxfAMaI+zm0A5sqENxjX+20WuAgt0HkQ5ISkUctSC4BLuBGUjgFKy7m2Hb/vyxDm733krC1UzIpTpa/x0l4CtIRAqxo8rMSnYfRzxRrs450GDIaZIptoJRPiYpoaCsawkztrlkygxfrKyi/dZGlRMG9G9aco72eRra6ERl+mwOSv+ffu33aovygyQZdL5F5P6KRbV4IZfJ2T3c9G78599Vfe+u2wWFfectqV2rX9bHg7qbq5dNhF0O5snPh8vvX5sMRURMm41ous4ezvrjNb2jCo+6Hsbi9ur7JFy3HsU3OhyN/X5UG4UZEpOL8a9584JFXpfIT2xc7V5cXc+j0R3etKLL63QeNmuT5pdBF6XDwVPW2PzEX+WTWw/5JJ2wtSYPcozORkhOHx57s4uG+32V4oir3/hTGNcf+4O41+NkkX65H083rfZrTvs5HBpLOZhk059AdbnMR2PYtwamX0S/Ly25hcXOrHAN0lyflAau7U6+K5eVIDPiw+LANHO7jloNHOJ6vReFVc9thZFbc/HA7bp13/cag6jUny2LI4qh4DOWx8oVdjs/7xOky0ABj0E6K5HRBSj7HcQ+0cQa8htzMARXcCuMguOwWQ39fqvq+t5g0Bj0+16z1mx5tVat0ei5ddsaCT3mY9mdaZCH6l09UO8boCxlkEt8PufKDLrSpiRPZJXpBFdWpMIhM5eAzHU4MBHqSLFlmkBOGC1FnCVQSRdpUSCktv+eQ6gqrEzRVEhNkuIUvpnk8beyHsYnZrmDyjPqgekpnLiMvDKdt9Nu7KddwnezmOWHzRRXS0a3TA4/vc5MPiy7gdnlZU5YyX235S8hTgCgd/ih49Ls4sUrthe9vGDNnWFUpVO294lUnirZapUVDW3miikNPMLIbaIJ0MzI3vOt+AUc7SDQh26cHeujyDv7Ib9ML/hEEw1LM35WsfzAc2MCKn9uDM3x2Xz0LXMQ0tRNw0afsoWJeZXkjN99uNCA5n7GfG3+1kLGr+06gbUXx+Rp3hia8Xm+yu+X5zdmgwoDy4wgCrkPfgrgVPBD467IOy7aTNM00/D2FytXurZNKBUZ18O+XRj21bfgqZ9TCF6d/oApFP7lyt6oN6/sh6vLidHBJbF3vuy/nR1WjAsFs0uxgkvb3pjXpwnO53tq/0LwtOD38HuCf5hJ5w/zn5a9mh6fh86/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6vgOLwmKkgQwsbaQlfateqXK+McwFuwU9sBul9/ndBQYLS3uxIS8snxc57z4sc+V2SZeEFXKZCaCW4N+237nxqFmHq46RCfVJ2a784cnwJ2IG7MKK43ptj3bWuoVAZDrjThum17Lq462DW/W+wGNT+oNioedh9t6wdIZaCNS8W1rc0y4SoowrbtTPJAEMVUwMkSVKBpMOleXQbGMyAlJ7tzvmVZBJSdhdZpgBCtxEAhSWiFiiU6Rwc+57EKJmzOic4kvMSMVdt+2bteryvrakXIOfJc10Wuj4xPrNj8s935VG6GeMhnYrsOCRecUZKw3yQndQV6IWKrm8yFZHqxfAMaI+zm0A5sqENxjX+20WuAgt0HkQ5ISkUctSC4BLuBGUjgFKy7m2Hb/vyxDm733krC1UzIpTpa/x0l4CtIRAqxo8rMSnYfRzxRrs450GDIaZIptoJRPiYpoaCsawkztrlkygxfrKyi/dZGlRMG9G9aco72eRra6ERl+mwOSv+ffu33aovygyQZdL5F5P6KRbV4IZfJ2T3c9G78599Vfe+u2wWFfectqV2rX9bHg7qbq5dNhF0O5snPh8vvX5sMRURMm41ous4ezvrjNb2jCo+6Hsbi9ur7JFy3HsU3OhyN/X5UG4UZEpOL8a9584JFXpfIT2xc7V5cXc+j0R3etKLL63QeNmuT5pdBF6XDwVPW2PzEX+WTWw/5JJ2wtSYPcozORkhOHx57s4uG+32V4oir3/hTGNcf+4O41+NkkX65H083rfZrTvs5HBpLOZhk059AdbnMR2PYtwamX0S/Ly25hcXOrHAN0lyflAau7U6+K5eVIDPiw+LANHO7jloNHOJ6vReFVc9thZFbc/HA7bp13/cag6jUny2LI4qh4DOWx8oVdjs/7xOky0ABj0E6K5HRBSj7HcQ+0cQa8htzMARXcCuMguOwWQ39fqvq+t5g0Bj0+16z1mx5tVat0ei5ddsaCT3mY9mdaZCH6l09UO8boCxlkEt8PufKDLrSpiRPZJXpBFdWpMIhM5eAzHU4MBHqSLFlmkBOGC1FnCVQSRdpUSCktv+eQ6gqrEzRVEhNkuIUvpnk8beyHsYnZrmDyjPqgekpnLiMvDKdt9Nu7KddwnezmOWHzRRXS0a3TA4/vc5MPiy7gdnlZU5YyX235S8hTgCgd/ih49Ls4sUrthe9vGDNnWFUpVO294lUnirZapUVDW3miikNPMLIbaIJ0MzI3vOt+AUc7SDQh26cHeujyDv7Ib9ML/hEEw1LM35WsfzAc2MCKn9uDM3x2Xz0LXMQ0tRNw0afsoWJeZXkjN99uNCA5n7GfG3+1kLGr+06gbUXx+Rp3hia8Xm+yu+X5zdmgwoDy4wgCrkPfgrgVPBD467IOy7aTNM00/D2FytXurZNKBUZ18O+XRj21bfgqZ9TCF6d/oApFP7lyt6oN6/sh6vLidHBJbF3vuy/nR1WjAsFs0uxgkvb3pjXpwnO53tq/0LwtOD38HuCf5hJ5w/zn5a9mh6fh86/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3S6H53StNzajjDDRY49oih1u/f25UxIFxBt09KkgP76kxSLgOjRM8MMk9WVb33rki854ziObK/DOWSCJkzz+y39H+Qgp+qGjoEIrhm1GmADN0nDmKKJXUN2s44mU13zOc/BZ1xgJlq6jayqYSH5u7OQV3O9qlupIutB1+4h4xJaulSQrq3jiHGvCNvS84x5CeaUewzHwD1BvKBzNfSkp4dLTnr7bMOyCJi150KknmmSSggEoohUSBKbZ+aez1nIvYDOGBZ5Bq8xQ97SX/euVqvKqlpJsplpI4RM5JrSJ+R09kNvn5SbIfTZNNmse5gljBIc0ResSF2BmCeh1olmSUbFPP4A2jItpKANWBODWDX2QzffAhTsvoi0RzLj2OBzbJVgY5hCBoyA9nPst/QfX+vgZu9dhhmfJlnMD9bfowRsCVGSQmjwMrOS3dcRj5SrfQbE8xmJck6XcK3GJMUEuHaTwZSuh5TL4Qu5VrRfW/NywoB8pyVn5i5PSds8Upk+nQEX/6dfu73aoNzjKIc2zh7N61+TjAuYLG7Y7YiF7uXzz3j+4rcKCrvOG1LbVr+uDwd1O1evm/rEbKzvr4a17qLhPGXpzI3gtB/XkVlv3L/8pM9Xt/yicdNZOPhpZt/QC/tPKJAbX9+y7sWoEbjW3TTETj47Jb9PevfiJl1ZjxfNLnYexqMV+tOM/bTXCXrny/G9P34S4cT+Ywf+y3j5OGQPT1dB4Ka/H9FL9MggoIu+Pboc/k0n1l8nT/UX/Ms5fRhedqqMjLrOxG+95bSbw76xlIMgnzwCEeVSjYbf1wayX1h8Li3KQkNjWrh6qdIn2QEm9LbapWTFy6X40NCTzdysz52G1bPq9e4AdW3k9M5RDVkD1EF117Ubg/NSfzYsDij2EjalKpZS2M38fE6QxB4HFkJmLJOczIHrnyD2scCaz8byYCSMw10iFbzRGCC733frqNd1m41urXvesQeDZtUduDUH9XXtOhEjNso6UwHZvnpX99R7DISmFJTEqznnctC5kCVZ4GUuIquyxBUGubwEMqXDnl1z6iancRqBImzGSZhHUEnnaVEgk2/+bQMTXlgpJ2mSCRwVp/DDJA+/lfWQPiFVDlxl1AXZUzhyGdllOu/Srh29tEr4Th5SddhkcUVGyYbJ/qe3mVHDsh2YbV6EWyX37ZZvQhwBMD/hZx6WZhsvXNKd6OUFK+8MqSrtsr0LXFlU8uUyLxraVIqZSXjTMlHTDIDkUvae75InYOYWwvzSjbNlfRB5a9/nl4s5CwQWEMvx04rlF54bAXD13PDl8Vl/9S2zF1LWTcBaHLP1IvkqUYw/fbgQjyg/ab6Rf6skC9/adQRrJ47MU74xBGUztVL3y/MHs0ESCUulICbZLvgxgGPB943bIm+5CDlNk1zAx180pXQtHROS5Ez4SlGkYVd9C57iOQXvzekdTKHwr1f2mn94Zf++GgZSB2Osb33pfzsbtBgXAnIXpwWXlr6Wr08ZnM121P6V4FHBP+9anwn+fibtd+b3lp2aHp6H9r8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064935</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BEC4208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BF0C208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_FUNC_NONCLG_FAU_Get_CHILD_200_OK_P1" searchProperties="true" id="d20dc8c6-7a74-469e-a131-52d7f28e36f7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BF83208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832B82E190E0401F0A059926F9:3BFD47A8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BF71208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BF71208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BF71208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BF83208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BFCB208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C155C005208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BF83208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BFCB208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C155C005208CE0401F0A059926FE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6eQNwIkKkhAYEs3uq7QtduXK2M74DWxwXaA8uuvHRoKlPZ2V0JCPjl+znNe/NgXAuSZF3WFwFwSRo0kbpv/OK106rRCz3Ia/tSq+/W6FWK/YQUQpAg1vKn6M41EiAInVEhAZdv0HNe3XEf9Jq4T1cOo7tZ8x/ttGj8xFwpaudQc09jkGRVRGbZtFpxGDAgiIgpyLCIJo3F39C1SnhGoOJmdix3LMiDvzKVcRLYNawhDnGWwBlluX9hHPhdIRGMyo0AWHD/FRKJtPu1dr9e1tV9jfGZ7juPYTmgrHyTI7KPZ+VBtxiihKdut+4AySiDIyBZoUiMs5wwZ3WzGOJHz/BVo13YdDW3hDbSgW6cfTfs5QMnunUhHJLkAlpgDtwK7wSnmmEJs3N4kbfPj+zq42zvhgIqU8VycrP+OEqYrnLEFRpaoMqvYvR/xTLk6FxhGCYVZIcgKX+kxWQCIhXHNcUo234hQw4eEUbbf2IhqwjD8m5Zc2Ic8FW37TGViMsNC/p9+HfZqh/ITZAXu4CS5vZvHP7x+Iuch743WPLj8c4cuk0G7pHDovCO1b/XT+nRQ93P1tKkXpNNuOvhyXwRD0bxfBFl3Ptn8zkaX8Kv3+4qjgfjVXSy7D+Ft3rymOVz2twnrjdAXzDx/wL4g9+rTY/AQ3/ufP1z/KR4mw182X7o303TNe1uUXd+Fdn8L7oehP2vcrrJlsoFXvYFw/M99uN4iiaaTaxCPUgQfw9aVey9+ZMXUoR+603zrge2nkDhei2fj4rHefs7pMIdjYyUH42L6B0NZLfVoJLExVP0C8m1p0RaCrLR0jRZan4TEVJodvUvLSlQo8SEoUs3crQethtt3g6A3bPme0+oPnLrjDp2uE4Sh1xgOKv3ZsTih2Gc0JTqWVtjd/LxNEOaRwBRhbq1YAedYmG8gxkACI6E36mAwKvCEKQV3vWaz4YWNsOV5ziCO4zAc9AM/HjqtYRD3AtO4YvI7/c67qcT8WL39I/W+wZAsCNYSr+dcqEEXUpVkCVaFzNzaCtQoLtQlwLUOR169FdiC5IsMa8J2zlCR4dpivigLZIvdv2cBKEorEXDBuARZeQpfTfL0W1UP5YOIdhA6ox5WPcVnLiO/Suf1tBuHaVfw3QIRfdhUcSUncMfk+NPzzOhh2Q/MPi8o3Ir7fstfQpwBsN/gZ5+WZh8PrchB9OqCVXeGUpVO1d4lqC1rxWpVlA1tasXkCt52badpjzEslOw9TtgDpvYewn7XjbNnfRJ5bz/mV8g5HUsgca7GzyiX73hujLHQz41EHZ/Ne98yRyFV3STeyHO2fqZeJZrxmw8XGEHtp8zX6m/N+HPi57AO4qg81RtDEjrTK32/PL4yG5ApWKIEkfFD8HMA54IfG/dF3nORapqmhcSvfzG00rVNACErqExiszQcqm/JUz4ucPTs9AKmVPinK3sjXr2y70ffxkoHc2Dufcl/O1ukHBeI1S5BSi5tc6Nenyo4nR2o/RPB84LfdN8S/ONMOi/MLy0HNT09D51/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6eQNwIkKkhAYEs3uq7QtduXK2M74DWxwXaA8uuvHRoKlPZ2V0JCPjl+znNe/NgXAuSZF3WFwFwSRo0kbpv/OK106rRCz3Ia/tSq+/W6FWK/YQUQpAg1vKn6M41EiAInVEhAZdv0HNe3XEf9Jq4T1cOo7tZ8x/ttGj8xFwpaudQc09jkGRVRGbZtFpxGDAgiIgpyLCIJo3F39C1SnhGoOJmdix3LMiDvzKVcRLYNawhDnGWwBlluX9hHPhdIRGMyo0AWHD/FRKJtPu1dr9e1tV9jfGZ7juPYTmgrHyTI7KPZ+VBtxiihKdut+4AySiDIyBZoUiMs5wwZ3WzGOJHz/BVo13YdDW3hDbSgW6cfTfs5QMnunUhHJLkAlpgDtwK7wSnmmEJs3N4kbfPj+zq42zvhgIqU8VycrP+OEqYrnLEFRpaoMqvYvR/xTLk6FxhGCYVZIcgKX+kxWQCIhXHNcUo234hQw4eEUbbf2IhqwjD8m5Zc2Ic8FW37TGViMsNC/p9+HfZqh/ITZAXu4CS5vZvHP7x+Iuch743WPLj8c4cuk0G7pHDovCO1b/XT+nRQ93P1tKkXpNNuOvhyXwRD0bxfBFl3Ptn8zkaX8Kv3+4qjgfjVXSy7D+Ft3rymOVz2twnrjdAXzDx/wL4g9+rTY/AQ3/ufP1z/KR4mw182X7o303TNe1uUXd+Fdn8L7oehP2vcrrJlsoFXvYFw/M99uN4iiaaTaxCPUgQfw9aVey9+ZMXUoR+603zrge2nkDhei2fj4rHefs7pMIdjYyUH42L6B0NZLfVoJLExVP0C8m1p0RaCrLR0jRZan4TEVJodvUvLSlQo8SEoUs3crQethtt3g6A3bPme0+oPnLrjDp2uE4Sh1xgOKv3ZsTih2Gc0JTqWVtjd/LxNEOaRwBRhbq1YAedYmG8gxkACI6E36mAwKvCEKQV3vWaz4YWNsOV5ziCO4zAc9AM/HjqtYRD3AtO4YvI7/c67qcT8WL39I/W+wZAsCNYSr+dcqEEXUpVkCVaFzNzaCtQoLtQlwLUOR169FdiC5IsMa8J2zlCR4dpivigLZIvdv2cBKEorEXDBuARZeQpfTfL0W1UP5YOIdhA6ox5WPcVnLiO/Suf1tBuHaVfw3QIRfdhUcSUncMfk+NPzzOhh2Q/MPi8o3Ir7fstfQpwBsN/gZ5+WZh8PrchB9OqCVXeGUpVO1d4lqC1rxWpVlA1tasXkCt52badpjzEslOw9TtgDpvYewn7XjbNnfRJ5bz/mV8g5HUsgca7GzyiX73hujLHQz41EHZ/Ne98yRyFV3STeyHO2fqZeJZrxmw8XGEHtp8zX6m/N+HPi57AO4qg81RtDEjrTK32/PL4yG5ApWKIEkfFD8HMA54IfG/dF3nORapqmhcSvfzG00rVNACErqExiszQcqm/JUz4ucPTs9AKmVPinK3sjXr2y70ffxkoHc2Dufcl/O1ukHBeI1S5BSi5tc6Nenyo4nR2o/RPB84LfdN8S/ONMOi/MLy0HNT09D51/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0SZxwqchHtUkLhO00JpC51Oz8uRcTbgabCp7QTo148dGgoM7ekcCQl5Z3vttS9e9oXEi8jzm1KCUJQzK+jU7X89UsGTGinmStWKlyuCW8hVS9VqDlzANa8yAWfq2lYgZQwBkwozVbc9R3u5jv6NXccv1vyil69Vav/Y1g8QUkNrl7xjW+tFxKSfhq3bsWA+x5JKn+EFSF8Rf9Qc9H3t6eOMk9242LJMA4rGXKmljxDJh0Agikie8AW6QAc+F6H0R3TGsIoFvMUMZd1+27tarfKrQp6LGfIcx0FODWmfUNLZN7txlm2GMGBTvl23MeOMEhzRV2xIDUDNeWg1oxkXVM0XH0C7yHUMdA7WJEfcIvtmo/cAKbsvIh2QFBLn5By7Gdg9TEEAI2A93Ad1+9vXOrjdOxaYySkXC3m0/jtKwBKI+BLCnMwyy9h9HfFEuRoXQPyAkSiWNIEbMyZLTEBatwKmdN2nUg9fKK20/dZaZhMG5G9acoH2eWra6ERlOnQGUv2ffu33aovyA0cxNJKRi+J7/HhFvl8O2ORlczVsX1eaV1ySekph33lLatfqt/XxoO7m6m3Tz5634OMubYkHNSgkjyXqzgr9B6HK/VJFdSfJzfPrOn7E3+8Yflo+gQh7dxM5rdLuLZp5Mng6rz3gYNVr3/eHZ49X1/x5NujPx1UUju76s+5Pp9h3xpdXJdebnz8PhnjmNs/Xpdqv4t26ExReNu3b3pD2bh3nDl+XlOLVWvIwJI+d8Gw0cskl6hdem/3mXLQ3q4TU33Paz+HQmMnBKJ78AqKypRmNoGP1dL+w+lxajIWGuWnq6i+NPkkFTNkNs8vIih9r8aGhr5u5XXerZbftlkqtXrvlOdV21yk6bs9pOqVazSv3upn+bFkcUWxzNqUmllHY7fx8TpAsfAksBJFLeEzmIO1PEDtYYStg9/pgcCZhzLWCV0rdas/rOYWWV6yV2+1WodrrFMsVV/+65ZbW4RuuhmwomlMF4lC9CwfqfQ+ELikYiTdzLvWgS6VL8oKTWEVuPsF5BrG+BITRYd8rVktI0sUyAkMYLXgYR5BfzpdpgZDc/ns5TGRqpZIsuVA4Sk/hh0kef8vqoX1CahykyagFuqdw4jIqZOl8nHZ5P+0MvhmH1Bw2XVwlKNkyOfz0PjNmWHYDs8uLSDfjvtvylxAnANAn/NBxaXbxwoTuRc8uWH1naFVpZO19wfmXfJwkcdrQilFMoeGRi5wKGgGJtextxvwZGNpBoC/dODvWR5F39kN+sZqzkcIKFnr8rHT5hefGCKR5bgT6+Ky/+pY5CKnrpmCtTtnakX6VGMafPlyIT4yfNt/qvxUX4Xu7TmDtxdF56jeGomxmVuZ+2XwwG4RrWKoFkYt98FMAp4IfGndF3nFRepomsYKPv1hG6eo2JoTHTAUdOzXsq2/KU22W4L87/QGTKvzblb2WH17ZPwf9kdbBBbZ3vvS/nXM0HRcCepekKZe6vdavTx2czfbU/o3gacGvuJ8J/mEmjT/Mf1r2anp8Hhq/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j4yxDDYfnsAMNaRxGiA3pLTJyx1FXoNaWwJLBpJfX8nEBAjJTe8MM4zWq7NnP3SkM4HTpOb3hIBMUs6MsN8x/203HZfUH1oWIo3YcqEeWbhdi61GI47cB9RqtlqxaYRC5BAyITGTHbOGnLrlIPW7dZDvtn3Xq7Zrzr1pTCETClq5VJFpbNKECb8I2zHzjPkcCyp8hlMQviT+pDe88pWnj0tOZvdsy7IImHXnUi582ybVCAgkCakSntpn9oHPWST8CZ0xLPMMnmNGomM+712v19V1vcqzmV1DCNmobSufSNDZZ7P7qdwMUchivl0HmHFGCU7oE9akhiDnPDJ6yYxnVM7TN6Ad20Ea2oINsYjjss+m/RKgYPdBpAOSmcCWmGOnBLuBGDJgBIzvN2HH/PyxDm733maYiZhnqTha/x0lYCtI+AIiS5SZlew+jniiXN0zIH7ISJILuoKRHpMFJiCM6wxiurmiQg1fJIyi/cZGlBMG5G9acmbv81S07ROV6dMZCPl/+rXfqy3KFCc5dC+WXvtrPI9Xdf5bXk4f+PA6Wt19mbr9XqegsO+8JbVr9fP6eFB3c/W8KWyJSrwZxNf4x+W4cv9jHdSDsOc9ZujreHDTuK+El3k0HcwxyjfDSri58lp9mNbHy2+pfRGTfxZ3OJ3RwbC9rvBP9+J35SkafXU3zfbTCI9j1F43mvdw0YLKcn03fXBzV7Zu7m8bwx+Po+b8cuksPRKF34OLUfNuNhLSTdGv5qI9DuBTPBzE/aAnVqEd/YzrlW/C7bzktJ/DobGUg0n+8AuILJd6NMK+ca76heX70qItNLLiwtVfaH0SEpg0u3qXlhU/V+JDI181c7setBpO4HhegJBXQ61ggFzknKMe8trtWuN8UOrPlsURxYCzmOpYWmG38/M+QZL6AlgEmbXiOZmDMN9B7GOJjZDdqIPBmYBbrhR80O/3Gm7guvWgjwYt1PA810Wo5w3OneAcBaYx4nLMxlkvlpAdqnf9QL1vgNAFBS3xes6FGnQhVUmWeJXLxKmucJVBri6BTOuwX3Nbni1oukhAE7ZTHuUJVBfzRVEgW2z/axYmorBSQRY8kzgpTuGbSR5/K+uhfCKqHYTO6AuonsKJy6hepvMqbffkpVXC9/KI6sOmiiszSrZMDj+9zIwelt3A7PIiwim577b8JcQJAPsdfvZxaXbxohXdi15esOrOUKrSLdu7xNVlNV+t8qKhTa2YmYK3HRs17QmQXMne4y3/DczeQdgfunF2rI8i7+yH/HI5ZxOJJaRq/Ixi+YHnxgSEfm6E6vhsPvqWOQip6iZhI0/ZgkS9SjTjdx8uxCfaT5mv1d+aZ9FLu05g7cVReao3hqRsplf6fnl8YzYIV7BUCSLP9sFPAZwKfmjcFXnHRappesglvP3F0ErXMTEhPGcy7JuFYV99C57ycQH+i9MrmELhn6/sjXjzyv45vJooHUyxufOl/+1s0WJcCKhdghZcOuZGvT5VcDbbU/tngqcE/8t503lP8A8z6b4yv7bs1fT4PHT/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064940</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064942</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BF84208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BFCC208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C155C006208CE0401F0A059926FE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_FUNC_ADULT_SAU_Get_CHILD_200_OK_P1" searchProperties="true" id="8026e91e-425a-46cc-bef7-3e765835e988"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832B9EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832C6BE190E0401F0A059926F9:14B40CC8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832B8CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832B8CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832B8CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832B9EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832BE6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832C20E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832B9EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832BE6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832C20E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx46xbHOxPYEZh0tLCwkH0jbtyxlF3oBSWwJLBidfX8nEBCjJSc8MM4y2t9Ze+6IlXQicJm4YCQGZpJwZw17b/LcBjuf4HrHAm/tW3WuAdeffORZy59jBKPbnLd80hkLkMGRCYibbposcz3KQ+t04KKwHYd2vuV7w0zS+QSYUtHKpIdMo0oSJsAzbNvOMhRwLKkKGUxChJOEsGo9C5RniipPZudixLANmnaWUq9C2SS0GAklCaoSn9oV95HMRi3BGFwzLPIOnmLFom097t9ttbevVeLawXYSQjQJb+cSCLt6bnXfVZoiHbM536y5mnFGCE/qINakxyCWPjShZ8IzKZfoCtGM7SENbUBCLOHX23rSfA5Ts3oh0RDIT2BJL7FRgU5hDBoyA8XU6bJvv39bB3d6bDDMx51kqTtZ/RwnYBhK+gtgSVWYVu7cjnilX5wJIOGQkyQXdwJUekxUmIIxJBnNajKhQwxcLo2y/UYhqwoD8TUsu7EOeirZ9pjI9ugAh/0+/Dnu1Q/mGkxw6H5u2nd7eu//8/DbuJTe3Y3nzFU2ve2j2tV1SOHTekdq3+ml9Oqj7uXraJPJtq87Tq/v1w8x7WE1aCb0WA7SMGtAMmP0ZtqwxvfMnjx9+rrdjshKjbHKXfXQffi15I8eNFvKb37/cD5fFOHv3/Ttjn4Dcjn58kR8m60f4LIokjZrbIt/UC8cPloPNkhejRb3lAtj9wfaawrwxePQer/qf8pEzc2fFesu60WTxDrmNH1PWdT5+/kI5jYDck/ZzToc5HBsrOZjld/dAZLXUozHsGQPVLyxflxZtobE1L13DldYnIYFJs6N3aVkJcyU+NA5VM3frvt90uq7vuZdBv+8EqI/qyBmgCDWCwG0Ogkp/dixOKHY5m1MdSyvsbn5eJ0jSUACLIbM2PCdLEOYriD0ssTFkU3UwOBNww5WCB91uMwqibr9XR14fOU6zfzmIAtSKoktHkTeNKy6v2XUWzSVkx+rtHan3FAhdUdASr+dcqEEXUpVkjTe5TJzaBtcY5OoSyLQOh27db9iCpqsENGE75XGeQG21XJUFssXu37UwEaWVCrLimcRJeQpfTPL0W1UP5RNT7SB0RpegegpnLiOvSufltJuHaVfwUR5TfdhUcWVGyY7J8afnmdHDsh+YfV5EOBX3/Za/hDgDYL/Czz4tzT5evKEH0asLVt0ZSlU6VXvXuLau5ZtNXja0pRUzU/C2Y6OWPQOSK9l7uOG/gNl7CPtNN86e9Unkvf2YXy6XbCaxhFSNn1Eu3/DcmIHQz42hOj7FW98yRyFV3SQU8pytm6hXiWb86sOFhET7KfNE/W15Fj+36wzWQRyVp3pjSMoWeqXvl4cXZoNwBUuVIPLsEPwcwLngx8Z9kfdcpJqmu1zCy18MrXRtExPCcyaHPbM0HKpvyVM+rCB8dvoDplT4pyu7EC9e2bfj0UzpYIrNvS/9b2eLluNCQO0StOTSNgv1+lTB2eJA7Z8Inhd8v/ua4B9n0vnD/KfloKan56HzGw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx46xbHOxPYEZh0tLCwkH0jbtyxlF3oBSWwJLBidfX8nEBCjJSc8MM4y2t9Ze+6IlXQicJm4YCQGZpJwZw17b/LcBjuf4HrHAm/tW3WuAdeffORZy59jBKPbnLd80hkLkMGRCYibbposcz3KQ+t04KKwHYd2vuV7w0zS+QSYUtHKpIdMo0oSJsAzbNvOMhRwLKkKGUxChJOEsGo9C5RniipPZudixLANmnaWUq9C2SS0GAklCaoSn9oV95HMRi3BGFwzLPIOnmLFom097t9ttbevVeLawXYSQjQJb+cSCLt6bnXfVZoiHbM536y5mnFGCE/qINakxyCWPjShZ8IzKZfoCtGM7SENbUBCLOHX23rSfA5Ts3oh0RDIT2BJL7FRgU5hDBoyA8XU6bJvv39bB3d6bDDMx51kqTtZ/RwnYBhK+gtgSVWYVu7cjnilX5wJIOGQkyQXdwJUekxUmIIxJBnNajKhQwxcLo2y/UYhqwoD8TUsu7EOeirZ9pjI9ugAh/0+/Dnu1Q/mGkxw6H5u2nd7eu//8/DbuJTe3Y3nzFU2ve2j2tV1SOHTekdq3+ml9Oqj7uXraJPJtq87Tq/v1w8x7WE1aCb0WA7SMGtAMmP0ZtqwxvfMnjx9+rrdjshKjbHKXfXQffi15I8eNFvKb37/cD5fFOHv3/Ttjn4Dcjn58kR8m60f4LIokjZrbIt/UC8cPloPNkhejRb3lAtj9wfaawrwxePQer/qf8pEzc2fFesu60WTxDrmNH1PWdT5+/kI5jYDck/ZzToc5HBsrOZjld/dAZLXUozHsGQPVLyxflxZtobE1L13DldYnIYFJs6N3aVkJcyU+NA5VM3frvt90uq7vuZdBv+8EqI/qyBmgCDWCwG0Ogkp/dixOKHY5m1MdSyvsbn5eJ0jSUACLIbM2PCdLEOYriD0ssTFkU3UwOBNww5WCB91uMwqibr9XR14fOU6zfzmIAtSKoktHkTeNKy6v2XUWzSVkx+rtHan3FAhdUdASr+dcqEEXUpVkjTe5TJzaBtcY5OoSyLQOh27db9iCpqsENGE75XGeQG21XJUFssXu37UwEaWVCrLimcRJeQpfTPL0W1UP5RNT7SB0RpegegpnLiOvSufltJuHaVfwUR5TfdhUcWVGyY7J8afnmdHDsh+YfV5EOBX3/Za/hDgDYL/Czz4tzT5evKEH0asLVt0ZSlU6VXvXuLau5ZtNXja0pRUzU/C2Y6OWPQOSK9l7uOG/gNl7CPtNN86e9Unkvf2YXy6XbCaxhFSNn1Eu3/DcmIHQz42hOj7FW98yRyFV3SQU8pytm6hXiWb86sOFhET7KfNE/W15Fj+36wzWQRyVp3pjSMoWeqXvl4cXZoNwBUuVIPLsEPwcwLngx8Z9kfdcpJqmu1zCy18MrXRtExPCcyaHPbM0HKpvyVM+rCB8dvoDplT4pyu7EC9e2bfj0UzpYIrNvS/9b2eLluNCQO0StOTSNgv1+lTB2eJA7Z8Inhd8v/ua4B9n0vnD/KfloKan56HzGw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4yRzcVgT2CGW06dQi6QpqEvZxRpG5TasmvJXPL1lUxMgJKc9Mwww2h7a+21L1rSucBxVPW7QkAmWcKNYNA2/yV1p+E92rblejVq1e3Wo9Wq0dCyw6rreRRCu0ZMIxAih4ALiblsm1XbqVmOrX53ju3XPb9hVxzX/mEa95AJBa1cKrZprOOIC78I2zbzjPsJFkz4HMcgfEn8aXc88pWnj0tOZud8y7IImHUWUqY+QqRCgUAUkQpJYnSODnzOqfCnbM6xzDN4iUlF23zZu1qtKqtaJcnmqGrbNrI9pHyoYPPPZudTuRlowMNku+5jnnBGcMSesSY1BrlIqNGN5knG5CJ+A9pBjq2hLVgTizh1/tlErwEKdh9EOiCZCWyJBXZKsAmEkAEnYHybBG3z88c6uN17l2EuwiSLxdH67ygBX0KUpEAtUWZWsvs44olydc6B+AEnUS7YEq70mKSYgDBuMgjZesSEGj4qjKL9xlqUEwbkb1pyjvZ5KtroRGUGbA5C/p9+7fdqi3KPoxw6/dnjPF1fzm6/99A/Y3pPXX572UBfFvCzXVDYd96S2rX6ZX08qLu5etk0no9/bHosS0W3WVtOeP9s0qT9q/VT/4oHdyj0hjfJsNd0G+NVFn9fyIn9MPnq8sfuIu9lLndvmVPHM5Ti6P7h09cNX10+jxozGI3Orr6wG+qSAR+vW8G3AfS/zSfDmXhe3kYP9DrJ683Bj/geP59dt57Xs1H1NgjD4Hq4Oqt9oWP89AlPNtPNqHoTBPjpavIUzO677dec9nM4NJZyMM0fn4DIcqlHIxgYF6pfWL4vLdrCqBUWrn6q9UlI4NLs6F1aVvxciQ+jvmrmdj1suU6/2qpVe0N36Hj20K7bzoXdtRueV3UvvFJ/tiyOKPYTHjIdSyvsdn7eJ0hiXwCnkFnLJCcLEOY7iAMssRHwiToYCRdwlygFv7DdRrfRq3rd5qA2bHUbrucMnFa973qDZsNrmsZVIq/5ddYNJWSH6l07UO8JEJYy0BKv51yoQRdSleQXXuYycipLXOGQq0sg0zrsV+utBhIsTiPQhFGc0DyCSrpIiwIhsf2vWpiIwsoESZNM4qg4hW8mefytrIfyoUw7CJ1RD1RP4cRlVC/TeTttdz/tEr6bU6YPmyquzBjZMjn89Dozelh2A7PLiwin5L7b8pcQJwDQO/zQcWl28eiS7UUvL1h1ZyhV6ZTt/YUrvyr5cpkXDW1qxcwUPHKQ3URTILmSvc1d8hM42kGgD904O9ZHkXf2Q365XPCpxBJiNX5GsfzAc2MKQj83AnV81h99yxyEVHWTsJanbP1IvUo043cfLsQn2k+Zb9TfKsnoa7tOYO3FUXmqN4ZkfK5X+n7ZvDEbJFGwTAliku2DnwI4FfzQuCvyjotU0/SYS3j7i6GVrm1iQpKcy2BgFoZ99S14yk0K/qvTHzCFwr9c2Wvx5pX9MB5NlQ7G2Nz5sv92tlgxLgTULsEKLm1zrV6fKjif76n9C8HTgt/qvyf4h5l0/jD/admr6fF56PwG</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+jUj05pU4q1HWGmgKxdQRdBd/XLnZAeINqmJUmR3V9/02IREL3unWGGyenJc57zkic5FziJbT8QArikKdPCblP/B02ciLjYMxr1CTGcBokMPLEmxtR2XYApwXX3VNdCIXIImZCYyaZuW6huIEv9xsjyHc9v1Gs2sh917R64UNDKpWbp2iqJmfDLsE0958xPsaDCZzgB4Uvij4JB31eePq446a3zNcsyIG/Npcx80yS1CAjEMamRNDHPzR2f80j4IzpjWOYcXmNGoqm/7n15eam91Gspn5m2ZVmm5ZnKJxJ0dqy3jqrNEIVsmq7XHcxSRgmO6R9ckBqAnKeRFsSzlFM5Tz6ARiayCmgDVsQgyGHHuvkWoGT3RaQdklxgQ8wxqsBuYQocGAHt7jZs6sdf6+B675hjJqYpT8Te+u8oAVtCnGYQGaLKrGL3dcQD5WqdA/FDRuJc0CVcF2OSYQJC+8FhSld9KtTwRUIr26+tRDVhQP6mJefmNk9F2zxQmS6dgZD/p1/bvVqj3OM4h9bl4MfkSaLh/bI+5JOrFf2zunxKyXB8aTVLCtvOa1KbVr+u9wd1M1evmzrsG4quCZrcvAyW/em108/n4xP2ECzqo2dxt7p8vvXastOBbNr+tciul3WIfuZDAZPh8Ps8YKP7/jKp077V53A0zawehJ2re/7Mx1E+eBo9LNwz9CcL7y7uf1674dXc7bGbhYcS6/nnSbfdGLf77KoxeJTxgwjmK4S60bfBhffY5Uf2iZN9HwbjSXwSE8f6PhjOmm85beewa6zkYJRPnoDIalmMRtjVeqpfWH4uLYWFRsa0dPWzQp+EBCb1VrGrkBU/V+JDI181c72+ODtFHfusbnds6wJ51oXlWKhnBVbD8+zTnlfpz5rFHsVOyqa0iFUo7Hp+PidIEl8Ai4AbyzQncxD6J4hdLLEWslt1MFImYJwqBW/3uu2eW79wvQ5Cba/XaweBY6OG69k91w0cXbtO5Q274cFUAt9V7/qOet8CoRmFQuKLORdq0IVUJVngZS5jVFviGoNcXQK80GHfds4apqBJFkNB2EzSKI+hls2zskCmWP/bBiaitFJBspRLHJen8MMk979V9VA+ES0cRJFRG1RP4cBl5FTpvEvbOXhpVfBBHtHisKniSk7Jmsnup7eZKYZlMzCbvIhAFffNlr+EOABgfsLP3C/NJl60pFvRqwtW3RlKVVpVexe4tqjly2VeNtQtFJMreBOZlmuOgORK9n6P02dg5gbC/NKNs2G9F3lj3+WXyzkbSSwhUeOnlcsvPDdGIIrnRqiOz+qrb5mdkKpuElbykK0Tq1dJwfjThwvxSeGnzD/U30vKo7d2HcDaiqPyVG8MSdmsWBX3y+8PZoOkCpYqQUz5NvghgEPBd42bIm+4SDVNk1zCx1+0QumaOiYkzZkMu3pp2Fbfkqf8nYH/5vQOplT41yt7JT68sn8N+iOlgwnWN770v50NWo4LAbVL0JJLU1+p16cKzmZbav9K8KDgt886nwn+biatd+b3lq2a7p+H1r8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064947</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064949</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832B9FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832BE7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832C21E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_FUNC_ADULT_BAU_Get_CHILD_200_OK_P1" searchProperties="true" id="107bef3e-c94c-4301-be01-6e23bfd6fb8b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832C87E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155C0AC208CE0401F0A059926FE:71816F03"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832C75E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832C75E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832C75E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832C87E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832CCFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C155C061208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832C87E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832CCFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C155C061208CE0401F0A059926FE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZbsI4FH3vV0TpYxWyQhYVJMIyZaZ0IXR9GRnHgKeJk9oOUL5+7NBQoLTTjoSEfHN97rmLj33OQJpYQZsxRDnOiDLoNtW/bejaENpTzfEmUHPiyUTzvYmpuQ3HsuO679uWoyoDxgo0IIwDwpuqZZi2ZhriNzaNwPGDer1mOfVnVblHlAlo4VIzVGWVJoQFZdimWlASZIBhFhCQIhZwGETt4WUgPANQcVJb5xuWZUDamnOeB7oOazGCKElgDWapfq7v+ZzHLIjwjABeUPQeM2ZN9X3vcrmsLe1aRme6ZRiGbvi68IkZnp2qrZNqM4oHZJpt1h1AMoIhSPAaSFJDxOdZrLSTWUYxn6dfQJu6aUhoDa2gBk2HnKr6R4CS3Q+R9khSBjQ2B2YFNkJTRBGBSLkbDZrq6c86uNk7poCwaUZTdrD+HSVEFijJchRrrMqsYvdzxCPlap0jGAwITAqGF+hKjkkOIGLKDUVTvLrETAxfzJSy/cqKVROG4G9acq7v8hS09SOV6eIZYvz/9Gu3VxuUe5AUqAXfFqOUrrpr476nP4bhzB2C/hOd3/Bes6Sw67whtW31+/pwULdz9b7pmax8/Y6ePTysvbPe1P/r9TEuur2Od92dXbiwA5ZPL7qbPo9H6eL6an03eElWEbyut9Ga2HV/GkaT4ZVV2F6WP548TH0wfJvH4ygcv05uOn/Ob3Pn6XV0cTW8H8dR10ONO3/xR79v0dvk8e4M3DaGPWQVz2H0bMGz5by+zmjoDscjdnFyMwjxZGS/hWuQ5E9FhD2n+ZHTbg77xkoOomLyD4K8WsrRGHSVvugX4N9Li7TgWJuWrkEu9YlxRLjakrukrASFEB8cB6KZm3XPa5gdy7Otjuf2TN/oGY5h9o22Ic6S1ej7lf5sWBxQ7GRkimUsqbCb+fmeIEwDhkiMqLbICjhHTP0GsQs4UAZkJA5GRhgaZ0LBQ79uuo7t26HbCcO+HbZdu9PpeJ5r2H2j3lCVq4xfk2vannJE99Xb3lPvEYI4x0hKvJxzJgadcVGSV7AoeGLWFqBGUCEuASp1OLAcr64znOYJkoT1NIuLBNXyeV4WSGebf0sDkJVWzGCeUQ6S8hR+meTht6oewifG0oHJjEIkeoqOXEZOlc7XaTd2067g20WM5WETxeUUww2T/U8fMyOHZTsw27wgMyvu2y2/hDgCoH/DTz8szTZevMA70asLVtwZQlVaVXtfQe21ViwWRdlQVyomFfC6qRuuHiFYCNl7G2cviOhbCP1HN86W9UHkrX2fX8HnJOKAo1SMn1Iuf/DciBCTz42BOD6rn75l9kKKunG04sdsnUS8SiTjbx8uMIDST5hvxN8yo/FHu45g7cQReYo3BsdkJlfyfnn7YjZgJmCxEMSM7oIfAzgWfN+4LfKWCxfTNCk4+vqLIpWuqQIIs4LwQVctDbvqW/LkbzkKPpw+wZQK/35lr9iXV/bj8DISOpgCdeuL/9tZw+W4QCR2MVxyaaor8foUwclsR+3fCR4XfLf+neDvZ9L6ZP5s2anp4Xlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZbsI4FH3vV0TpYxWyQhYVJMIyZaZ0IXR9GRnHgKeJk9oOUL5+7NBQoLTTjoSEfHN97rmLj33OQJpYQZsxRDnOiDLoNtW/bejaENpTzfEmUHPiyUTzvYmpuQ3HsuO679uWoyoDxgo0IIwDwpuqZZi2ZhriNzaNwPGDer1mOfVnVblHlAlo4VIzVGWVJoQFZdimWlASZIBhFhCQIhZwGETt4WUgPANQcVJb5xuWZUDamnOeB7oOazGCKElgDWapfq7v+ZzHLIjwjABeUPQeM2ZN9X3vcrmsLe1aRme6ZRiGbvi68IkZnp2qrZNqM4oHZJpt1h1AMoIhSPAaSFJDxOdZrLSTWUYxn6dfQJu6aUhoDa2gBk2HnKr6R4CS3Q+R9khSBjQ2B2YFNkJTRBGBSLkbDZrq6c86uNk7poCwaUZTdrD+HSVEFijJchRrrMqsYvdzxCPlap0jGAwITAqGF+hKjkkOIGLKDUVTvLrETAxfzJSy/cqKVROG4G9acq7v8hS09SOV6eIZYvz/9Gu3VxuUe5AUqAXfFqOUrrpr476nP4bhzB2C/hOd3/Bes6Sw67whtW31+/pwULdz9b7pmax8/Y6ePTysvbPe1P/r9TEuur2Od92dXbiwA5ZPL7qbPo9H6eL6an03eElWEbyut9Ga2HV/GkaT4ZVV2F6WP548TH0wfJvH4ygcv05uOn/Ob3Pn6XV0cTW8H8dR10ONO3/xR79v0dvk8e4M3DaGPWQVz2H0bMGz5by+zmjoDscjdnFyMwjxZGS/hWuQ5E9FhD2n+ZHTbg77xkoOomLyD4K8WsrRGHSVvugX4N9Li7TgWJuWrkEu9YlxRLjakrukrASFEB8cB6KZm3XPa5gdy7Otjuf2TN/oGY5h9o22Ic6S1ej7lf5sWBxQ7GRkimUsqbCb+fmeIEwDhkiMqLbICjhHTP0GsQs4UAZkJA5GRhgaZ0LBQ79uuo7t26HbCcO+HbZdu9PpeJ5r2H2j3lCVq4xfk2vannJE99Xb3lPvEYI4x0hKvJxzJgadcVGSV7AoeGLWFqBGUCEuASp1OLAcr64znOYJkoT1NIuLBNXyeV4WSGebf0sDkJVWzGCeUQ6S8hR+meTht6oewifG0oHJjEIkeoqOXEZOlc7XaTd2067g20WM5WETxeUUww2T/U8fMyOHZTsw27wgMyvu2y2/hDgCoH/DTz8szTZevMA70asLVtwZQlVaVXtfQe21ViwWRdlQVyomFfC6qRuuHiFYCNl7G2cviOhbCP1HN86W9UHkrX2fX8HnJOKAo1SMn1Iuf/DciBCTz42BOD6rn75l9kKKunG04sdsnUS8SiTjbx8uMIDST5hvxN8yo/FHu45g7cQReYo3BsdkJlfyfnn7YjZgJmCxEMSM7oIfAzgWfN+4LfKWCxfTNCk4+vqLIpWuqQIIs4LwQVctDbvqW/LkbzkKPpw+wZQK/35lr9iXV/bj8DISOpgCdeuL/9tZw+W4QCR2MVxyaaor8foUwclsR+3fCR4XfLf+neDvZ9L6ZP5s2anp4Xlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyjyjkQggQFSSGy5QWWgq0p52XI9fZBA+JTWMn0H792KGhwNCe9khIyDvba6998bLPOIojx29zDokgjGqDblP/1/Kg4TmuZ9Rx1TPcSq1iNFxUN2qP9ce6BY5j16q6NuA8hQHlAlHR1B3Lrhi2JX8z2/Ldhl+tlSu2+0vX7iDhElq6lC1d28QR5X4etqmnCfUZ4oT7FMXAfYH9aXs09KWnjwpOeutsyzIPmLQWQqx808TlADBEES5jFptn5oHPWcD9KQkpEmkCrzED3tRf967X6/K6UmZJaDqWZZlWw5Q+ASfhd731rdgMwYDO2XbdQZRRglFEXpAiNQKxYIHWjkKWELGI34G2TdtS0AZssIFtl37XzbcAObtPIh2QTDgy+ALZBdgE5pAAxaDdTgZN/fvnOrjdO0sQ5XOWxPxo/TVKQDOI2AoCgxeZFew+j3iiXK0zwP6A4ijlJIMrNSYrhIFr4wTmZDMkXA5fwLW8/dqGFxMG+CstOTP3eUra5onKdEkIXPyffu33aotyh6IUWj/vLoOpubjI2o1/smk6KIXZw3nAV9OJ1cwp7DtvSe1a/bo+HtTdXL1uCifjezdMR7PSskRG4cstveD4iZ/HPVZZ3t4PN9fWeN1v98YE7ofTcUUsO8nNzQPcPVcvlpeiu3wQ65ldv/SevM03fLN4GmU/S8Pr51V/+evxgppL8/zXJG4Ifo4u2WWEXtDvYLog9bv7wSgtDTObL28bHK/GG3zljjul8PYyKT3esN63+o/hVen6amYvkjB+mSQZHzXfctrP4dBYyME0ffwNWBRLNRqDrtaX/ULiY2lRFhIY89zVXyl94gKo0Ftql5IVP5XiQwJfNnO77tU9u+PUK06n0+/ZDatnuZbdt9pWtdFwvH6j0J8tiyOKHUbnRMVSCrudn48J4tjnQANIjIyleAFc/wCxiwTSBnQiDwajHGZMKnin0+16jtVud7y21XWdWr/abVe9eu+H6zlVx9G1Kyau6XXSngtIDtW7cqDeE8BkRUBJvJpzLgedC1mSJ5SlIrLLGSpTSOUlkCgd9h23XjU5iVcRKMJmzII0gvJqscoLZPLtv2MgzHMrkbPBEoGi/BS+m+Txt6Ie0icgyoGrjH6A7CmcuIzcIp330/b20y7g22lA1GGTxRUJwVsmh5/eZkYNy25gdnlhbhfcd1u+CHECwPyAn3lcml28ICN70YsLVt4ZUlVaRXufUPmpnGZZmje0phQzkfCmbVo1cwo4lbL3PGNLoOYOwvzUjbNjfRR5Zz/kl4oFnQokIJbjp+XLTzw3psDVc2Mgj8/ms2+Zg5CybgI24pStE8lXiWL84cMF+1j5SfNY/q1ZEry16wTWXhyZp3xjCEJDtVL3y/M7s4GZhCVSEFmyD34K4FTwQ+OuyDsuQk7TYyrg/S+aUrqmjjBmKRWDrp4b9tU35ymeV+C/Of0Fkyv865W94e9e2fej4VTqYIz0nS/5b2eD5OOCQe7iJOfS1Dfy9SmD03BP7V8Jnhb8WvUjwT/MpPWX+W/LXk2Pz0PrDw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyjyjEuXBJVJBooGfSy5QpdHp5OTLOBjxNnBA7QPv14wSSAqU97ZGQkHe211774mWfcByFptvjHFJBY6b4/Y76b3timJNJYGvtRgCa7Zgtrd1EgUbaJm5aAJMJ2Kric56Bz7jATHRUExmWZiD5GxvIbSAXobptOY+q8htSLqGlSx2pyjoKGXeLsB01S5kbY065y3AE3BXEHfWuLl3p6eKSk9o92bAsAqbduRCJq+ukHgCBMCR1Ekf6ib7ncxJwd0RnDIsshW3MgHfU7d7ValVfWfU4nekmQkhHji59Ak5n39Xut3IzBD6bxpu1h1nMKMEhfcE5qSsQ8zhQeuEsTqmYR+9AG7qBcmgN1kQjhs2+q/prgILdJ5H2SKYca3yOjRLsBqaQAiOg3N74HfX75zq42TtOMePTOI34wfprlIAtIYwTCDReZlay+zzikXJ1T4C4PiNhxukSfuZjkmACXBmmMKXrS8rl8AVcKdqvrHk5YUC+0pITfZenpK0fqUyfzoCL/9Ov3V5tUH7jMINueIoheDTSi1kyHNhReAmPd+A0nZcX1Cko7DpvSFWt3q4PB7Waq+2mxcXp0BSstjq7JeeXi/QuQNZqel27rnnLxXAQBVdLc86W1oNhXsTQeqT8fvTUiH9OVvLzr8Wfh+fxg8VG1/3m6eDbyp9etMbBus8tPjDX62HvRwMW8M8P/S5ImvjOvGfmPYEH7DciuDGTX3bth/88u34aWpGoWcMnp1ZrD65ehrfO+Nto2qPTc/0iaU5YOsfIPm93XnPazWHfWMrBKJv8ASLKZT4afl85k/3C4mNpyS000KaFq5vk+sQFMKF28125rLiZFB8auLKZm/Wg3TQ8o9HwUNMwUdsbIBsZZ6iHGo5jNs8Gpf5sWBxQ9GI2pXmsXGE38/MxQRK5HFgAqbaMMzIHrn6A2McCKz67kQcjZhzGsVTwwVm7ZXmm6Xm203c8B3m9vtE2zVbD6Dt201OVn7G4Ztdpbyog3Vdva0+9b4DQhEIu8fmccznoXMiSLPAyE6FRX+I6g0xeAmmuw65ptxs6p1ESQk5Yj+IgC6GezJOiQDrf/JsaJrywUk6SOBU4LE7hu0kefivrIX0CmjvwPKNTkD2Fw8vIdmRG23TepG0fvbRK+F4W0PywyeKKlJINk/1PrzOTD0s1MFVehBsl92rLFyGOAOgf8NMPS1PFC5Z0J3p5wco7Q6pKt2zvAtcX9Wy5zIqGtnLFTCW8buiopY+AZFL2nsfxEzC9gtA/deNUrA8iV/Z9fpmYs5HAAiI5fkqx/MRzYwQ8f2748visP/uW2Qsp6yZgLY7ZvFC+SnLGHz5ciEtyP2keyr9VnAav7TqCtRNH5infGIKyWb7K75fnd2aDxBKWSkGM013wYwDHgu8bqyJXXIScpkkm4P0vSq50HRUTEmdM+H21MOyqb8FTPCfgvjq9gSkUfntlr/m7V/b91eVI6mCE1cqX/rezRotxISB3cVpw6ahr+fqUwdlsR+23BN8Ivtm2TK/VGBgOOhB8pyrgXibdN+a3lp2aHp6H7l8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064954</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064956</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832C88E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832CD0E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C155C062208CE0401F0A059926FE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_FUNC_YOUTH_SAU_Get_CHILD_200_OK_P1" searchProperties="true" id="c2b4c368-fd35-46e1-bec1-228f6dd3f3f7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155C0C9208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832D4AE190E0401F0A059926F9:C0639F4D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155C0B7208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155C0B7208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155C0B7208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155C0C9208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155C111208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832CFFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155C0C9208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155C111208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832CFFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH6uQBBIgUUFKQ7nKFtqKj6u2LytjT8DdYEPsAO2vXyc0FChl25WQkCfjM2c+fOwrgeZJ1Q+EgFRSzrSo09L/th3Lq7uobsSkMTEcx3aMSb1pG01UmzSdpgeW6+paJEQGERMSMdnSq5ZdM2xL/Ua25buWb1UrVs161rU/kAoFrVwqlq5t5gkTfhG2pWcp8zkSVPgMzUH4EvvDoN/zlaePSk56+2rLsgiYtmdSLnzTxBUCGJIEVzCfm1fmgc8VEf6QThmSWQrvMYlo6e971+t1ZV2r8HRqVi3LMi3PVD5E0OmF3v5VbgYSsZhv1yFinFGMEvqGclJ9kDNOtCCZ8pTK2fwLaNu0rRzagA02sO2wC938CFCw+ybSAclUIEPMkF2CDSCGFBgGbTyIWvrF9zq43TtKERMxT+fiaP0zSsBWkPAFEEOUmZXsvo94olztK8B+xHCSCbqCu3xMFgiD0B5SiOmmR4UaPiK0ov3aRpQTBvgnLbky93kq2uaJynToFIT8P/3a79UW5Q9KMmgvxzXsXPb6cTAdy/rz5RAi6/cw8czbqFVQ2Hfektq1+n19PKi7uXrfNIOnNXntv2RPYnz7dhmuXEoG4ThYuwNxN12Q2hJNxiscPJAs6g7J062scUc+1Z9rfwUD3oDJQ7UHb/E6JkH8q5v+lsM3FK6fH9/s6fL2usr7jN4+oEdntVp2aLKU94172xs/C+ZiZPOaacZJV7obYjbIQFijUZqtM2fc27z8Wm4ua3ePqfvS74mRJx5Jfdr6yGk/h0NjKQfDbPICWJbLfDSijtZV/ULyvLTkFkqMuHD1F7k+CQlM6u18Vy4rfqbEhxJfNXO7vmnW7dB23dAKvarVDG8sx7K7VmC5nletd29K/dmyOKIYchbTPFausNv5OU8Qz30BjEBqrHiGZyD0M4gdJJEWsYE6GJwJGHGl4GEQ1J2w3uw0a10vdLzwutrpBIq5F7huw27q2h2X9+w+DWIJ6aF61w7UewCYLijkEp/PuVCDLqQqyRKtMpnYlRWqMMjUJZDmOuxXnaZrCjpfJJATNuecZAlUFrNFUSBTbP+rBsKisFKBFzyVKClO4ZdJHn8r66F8CM0dRJ7RNaiewvFl5Hi+W6bzddr1/bRL+CAjND9sqrgypXjL5PDTx8zkw7IbmF1eWNgl992WH0KcADDP8DOPS7OLR1Z0L3p5wao7Q6lKu2zvElWWlWy1yoqGNnLFTBW8aZtWwxwCzpTsvY74P8DMHYT5rRtnx/oo8s5+yC+TMzaUSMJcjZ9WLL/x3BiCyJ8bkTo+m+++ZQ5CqrpJ2MhTtjBRr5Kc8dmHC/Zx7qfMD+pvzVPy0a4TWHtxVJ7qjSEpm+ar/H55/WI2MFewVAkiT/fBTwGcCn5o3BV5x0WqaZpkEr7+ouVK19IRxjxjMurohWFffQue8nUB/ofTJ5hC4d+v7I348sp+7PeGSgfnSN/50v92NmgxLhjULkELLi19o16fKjib7qn9O8HTgn/dOCf4h5m0P5k/W/Zqenwe2v8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH6uQBBIgUUFKQ7nKFtqKj6u2LytjT8DdYEPsAO2vXyc0FChl25WQkCfjM2c+fOwrgeZJ1Q+EgFRSzrSo09L/th3Lq7uobsSkMTEcx3aMSb1pG01UmzSdpgeW6+paJEQGERMSMdnSq5ZdM2xL/Ua25buWb1UrVs161rU/kAoFrVwqlq5t5gkTfhG2pWcp8zkSVPgMzUH4EvvDoN/zlaePSk56+2rLsgiYtmdSLnzTxBUCGJIEVzCfm1fmgc8VEf6QThmSWQrvMYlo6e971+t1ZV2r8HRqVi3LMi3PVD5E0OmF3v5VbgYSsZhv1yFinFGMEvqGclJ9kDNOtCCZ8pTK2fwLaNu0rRzagA02sO2wC938CFCw+ybSAclUIEPMkF2CDSCGFBgGbTyIWvrF9zq43TtKERMxT+fiaP0zSsBWkPAFEEOUmZXsvo94olztK8B+xHCSCbqCu3xMFgiD0B5SiOmmR4UaPiK0ov3aRpQTBvgnLbky93kq2uaJynToFIT8P/3a79UW5Q9KMmgvxzXsXPb6cTAdy/rz5RAi6/cw8czbqFVQ2Hfektq1+n19PKi7uXrfNIOnNXntv2RPYnz7dhmuXEoG4ThYuwNxN12Q2hJNxiscPJAs6g7J062scUc+1Z9rfwUD3oDJQ7UHb/E6JkH8q5v+lsM3FK6fH9/s6fL2usr7jN4+oEdntVp2aLKU94172xs/C+ZiZPOaacZJV7obYjbIQFijUZqtM2fc27z8Wm4ua3ePqfvS74mRJx5Jfdr6yGk/h0NjKQfDbPICWJbLfDSijtZV/ULyvLTkFkqMuHD1F7k+CQlM6u18Vy4rfqbEhxJfNXO7vmnW7dB23dAKvarVDG8sx7K7VmC5nletd29K/dmyOKIYchbTPFausNv5OU8Qz30BjEBqrHiGZyD0M4gdJJEWsYE6GJwJGHGl4GEQ1J2w3uw0a10vdLzwutrpBIq5F7huw27q2h2X9+w+DWIJ6aF61w7UewCYLijkEp/PuVCDLqQqyRKtMpnYlRWqMMjUJZDmOuxXnaZrCjpfJJATNuecZAlUFrNFUSBTbP+rBsKisFKBFzyVKClO4ZdJHn8r66F8CM0dRJ7RNaiewvFl5Hi+W6bzddr1/bRL+CAjND9sqrgypXjL5PDTx8zkw7IbmF1eWNgl992WH0KcADDP8DOPS7OLR1Z0L3p5wao7Q6lKu2zvElWWlWy1yoqGNnLFTBW8aZtWwxwCzpTsvY74P8DMHYT5rRtnx/oo8s5+yC+TMzaUSMJcjZ9WLL/x3BiCyJ8bkTo+m+++ZQ5CqrpJ2MhTtjBRr5Kc8dmHC/Zx7qfMD+pvzVPy0a4TWHtxVJ7qjSEpm+ar/H55/WI2MFewVAkiT/fBTwGcCn5o3BV5x0WqaZpkEr7+ouVK19IRxjxjMurohWFffQue8nUB/ofTJ5hC4d+v7I348sp+7PeGSgfnSN/50v92NmgxLhjULkELLi19o16fKjib7qn9O8HTgn/dOCf4h5m0P5k/W/Zqenwe2v8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53ShFIKHWEGubjrFsUiuvXlTEhTiLYpNCkXf/1JikVA9OiZYYbJ6sq3vnXJl5xxFEdlt8U5SQVNmOZ1Gvo/0LGcOhjbRtUpV42KVXWMcWjZRlCDZYAxrtXHlq55nGfEY1wgJhp6GUDLgED+7iBwbeACq2Tb9pOu3ZOUS2jpUgK6toojxt08bEPPUuYmiFPuMhQT7grsDlv9K1d6uqjgpDfPNizzgGlzKsTMNU1cCggmUYRLOInNM3PP5yzg7pBOGBJZSt5iBryhv+1dLpelpVVK0olZBgCYoG5Kn4DTyYne/FVsJoHHwmSzbiOWMIpRRF+RItUnYpoEWiuaJCkV0/gTaGhCoKANssIGhhV2opvvAXJ230TaI5lyZPApggWYT0KSEoaJNvK9hn7yvQ5u9t6liPEwSWN+sP4ZJcIWJEpmJDB4kVnB7vuIR8rVPCPY9RiOMk4X5FqNyQxhwrVBSkK6uqJcDl/Atbz92ooXE0bwT1pyZu7ylLTNI5Xp0Anh4v/0a7dXG5R7FGWkCeq9aa+3eHlqR+vl2J4vyCz17cuhOXhs5BR2nTektq1+Wx8O6nau3jY9BTd9P4N3970qmVcm/gPw2uMb5vUrpxcgiC+80dpfX3fGwor9+z4At6/l04vR7eV1QttLwE9hdDf0QvPiNh3Vf82G3qNoPa7K4d/R+OnSOr/IOuvLMPzdG/jT+mhU+bMGNTSov1rz2vJ2fmpCHz4/jAcvvx+g71fS/vnT6+S+jnn8x/n1OhAOfL5aOefACfsjEnZvG+857eawbyzkYJiNnwkWxVKNhtfRerJfSHwtLcpCAyPMXd2Z0icuCBN6U+1SsuJmUnxo4MpmbtbdWhW2oW23IZQnqNbuggqAPdACdr1erva6hf5sWBxQbCcspCqWUtjN/HxNEMcuJywgqbFIMjwlXP8CsYME0jzmy4ORME7uEqng570OqDpdx6r32rVKq1qt9CplWO7CrlUDltXWtetE3LCbtBUKku6rt7Wn3j7BdEaJkng151wOOheyJHO0yEQESwtUYiSTl0CqdNgtV2q2yWk8i4gibMZJkEWkNJvO8gKZfPNfNhDmuZVyPEtSgaL8FH6a5OG3oh7SJ6DKgauMzonsKTm8jCp11y7S+Tzt6m7aBXwrC6g6bLK4IqV4w2T/0/vMqGHZDsw2L8xhwX275YcQRwDML/iZh6XZxgsWdCd6ccHKO0OqSrNo7xyV5qVsscjyhjpKMVMJb0ITOOaQ4EzK3voueSHM3EKY37pxtqwPIm/t+/wyMWVDgQSJ5fhp+fIbz40h4eq54cnjs/ruW2YvpKybICtxzNaO5KtEMf7y4YJdrPykeSD/lkkavLfrCNZOHJmnfGMIyiZqpe6X9SezgRMJS6UgJuku+DGAY8H3jdsib7kIOU3jTJDPv2hK6Ro6wjjJmPA6em7YVd+cp1jPiPvu9AEmV/i3K3vFP72y//avhlIHY6Rvfel/Oxs0HxdM5C5Ocy4NfSVfnzI4m+yo/RvBo4IPzp2vBH8/k+YH80fLTk0Pz0PzXw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTHx3oBSjQEWaQyzlVUI/g9eVMSBcQd5uUJoXqr99JsRUQPXhmHCGLlW9965IvOeMoDGy3wznEgjCqeb2W/i+2Gg6aTusl5PvNUtWqVuS3mVWaNZBTs+W/htPUNY/zBDzKBaKipdumVSlZpvybWKZbM13TKVcc51nX7iHmElq6lE1dS8OAcjcL29KTmLoMccJdikLgrsDuuDMautLTRTknvX22YZkFjNsLISLXMHDZBwxBgMuYhcaZseNz5nN3TOYUiSSG95g+b+nve9frdXldKbN4btimaRpm05A+PifzE739K98MvkdnbLPuIsoowSggb0iRGoFYMF/rBHMWE7EIv4C2DMtU0CVIcQlbVXqiGx8BMnZHIu2QjDkq8QWycrBbmEEMFIN2d+u19JPjOrjZO4kR5TMWh3xv/TNKQFcQsAj8Es8zy9kdj3igXO0zwK5HcZBwsoIrNSYRwsC1mxhmJB0SLofP51rWfi3l+YQB/klLzoxtnpK2caAyPTIHLv5Pv7Z7tUG5R0EC7dFb03n7/RBdPoQ3Pn416uOuT4bLy8plv5VR2HbekCpa/b7eH9Rirt43XfeG0SztzQdkLfAQ11+fxer+rxe7c1pPas+ny5qIl6F9m7DYXFhgX/8zHlYvmvz+eVSte/N6sn5NuTN4JNfJ48Wvp/o0nf09vW9e8MhLRxWajG+Cy6vTDnqL+AP3HqzF5PFuWB1GT4DWjQlJIQlg+PByMxqyyVP8KGZRNFpH9mrh/Ioq9wtWOX+8iwa3jjO6WQ0arY+ctnPYNeZyME6mL4BFvlSj4fW0gewXEt9Li7IQvzTLXN1I6RMXQIXeVruUrLiJFB/iu7KZm3W/4Vhdu1Gxu4NB32qafbNqWgOzY9aaTdsZNHP92bDYo9hldEZULKWwm/n5niAOXQ7Uh7i0YgleANe/QewhgTSP3sqDwSiHCZMK3mn0uk7dbvbO5UGXbPu1XqNj9qu9fq3S6VU6unbFxDW9jjszAfGueld21PsWMIkIKIlXc87loHMhS7JEq0QEVnmFyhQSeQnESoddu9qoGZyEUQCKsBEyX05AOVpEWYEMvvm0SwjzzEo4jlgsUJCdwi+T3P8tr4f08Yly4Cqjc5A9hf3LqNp0a3k6n9KuHry0cvhO4hN12GRxRUzwhsnuTx8zo4alGJgiL8ytnHux5YcQBwCMb/gZ+6Up4vkrshU9v2DlnSFVpZ23d4nKy3KyWiVZQ+tKMWMJb1iGWTfGgBMpe68T9huoUUAYR904Beu9yIV9l18iFnQskIBQjp+WLY94boyBq+eGJ49PeuxbZiekrJuAVByydQP5KlGMv324YBcrP2m+kR9rFvsf7TqAtRVH5infGILQuVqp++X1i9nATMISKYgs3gY/BHAo+K6xKHLBRchpmiYCvv5FU0rX0hHGLKHC6+mZYVt9M57iNQL3w+kTTKbw71d2yr+8sh9Hw7HUwRDphS/5b+cSycYFg9zFScalpafy9SmD0/mW2r8T/CT4Vq3WNc/rttno7gl+vyjgTibtT+bPlq2a7p+H9h8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06501</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06502</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155C0CA208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155C112208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832D00E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_FUNC_YOUTH_BAU_Get_CHILD_200_OK_P1" searchProperties="true" id="fec9c655-6b13-4647-997d-f3e94914ecde"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832D6CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832E3FE190E0401F0A059926F9:5BD2E3E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155C14F208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155C14F208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155C14F208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832D6CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832DB4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832DF4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832D6CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832DB4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832DF4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6F32fXxFlHqtgJyQUooLEpfTQ+wdMB/XlyDgOuCR2ajuUnl//2aFJgdKezpGQkHe211774mWfSZQmXtiVkghFObNGg7b992m9GURNPHdafiN2/AaJHTRveE49mHv+adxCEfJtayRlTkZMKsRU2/agW3dcqH9TF4YBDGGzVg+8R9t6IEJqaO1Sg7a1SRMmwyJs284FCzmSVIYMpUSGCoeT7s11qD1DVHKyO2dblkVA0VkqlYUA4FpEMEkSXMM8BWdgz+cskuGELhhSuSBvMSPZtt/2vry81F7qNS4WwIMQAtgC2ieSdPHT7vwoN5NoxGK+XfcR44xilNB/kCF1Q9SSR1Y3WXBB1TL9BNoFLjTQDtlgB7s++2mD9wAFu28i7ZEUEjlyidwSbExiIgjDxPo1HrXtn9/r4HbvVCAmYy5SebD+M0qErUnCMxI5ssysZPd9xCPl6pwRHI4YTnJJ1+TWjEmGMJHWvSAx3VxTqYcvklbRfmsjywkj+E9acgZ2eWra4EhlBnRBpPov/drt1RblASU56QwH8eXsYtqcX4kXt754vp35kXexgdMctgsKu85bUlWr39aHg1rN1dumPmg0L35fkTRYjcaXywAGPh6n4m41WV+Jp3H6IG//GjRXLM5A0m+cpE/4LluCUezequikuwk4hNe92eqxz/H9j1+rnojkvEXzxu/55lL9xs+rR57Mp+h1cHfvsSk9efrfXbq+yB6eF3R4dTW8nd/f8NmNmEa0l8zSywc+U6tx43z868fp5XwwXjw2H2Yn3nTZQwA22+857eawbyzlYJLPnwhW5dKMxmhgDXW/kPpaWoyFRk5cuIaZ0SepCFN2x+wyshLmWnxoFOpmbtfnzYbb95p1b9Don7steA596A5hFwatltcYtkr92bI4oNjnLKYmllHY7fx8TRCnoSQsIsJZ8xwvibS/QBwghawRG+uDwZkkU64VvA7dQb8xHLTqgVv3+70W9Hqe63Y9v+vX/d6pbd1ydcfuRDdWROyrd31PvccE04wSI/FmzqUedKl0SZ7ROleJW1ujGiO5vgSE0eHQ85sBkDTNEmIIg5RHeUJq2TIrCgTk9t9zEJaFlUqccaFQUpzCT5M8/FbWQ/tE1DhIk1GP6J6Sw8vIb4VBmc7naTd20y7hu3lEzWHTxVWC4i2T/U/vM2OGpRqYKi8s3ZJ7teUPIY4AgC/4gcPSVPGiNd2JXl6w+s7QqtIp2/uMas+1fL3Oi4aeGsUUGh64AJ6CCcG5lr3XKV8RBioI8K0bp2J9ELmy7/PL1ZJNFFIk1eNnFctvPDcmRJrnxkgfn8133zJ7IXXdFNmoY7Z+ol8lhvGXDxccYuOnzff674WL6L1dR7B24ug89RtDUbYwK3O/vH4yG5hrWKoFkYtd8GMAx4LvG6siV1yUnqZ5rsjnXyyjdG0bYcxzpkYDuzDsqm/BU71mJHx3+gBTKPzblb2Rn17Zs5vridbBFNmVL/13Z4cW44KJ3iVpwaVtb/TrUwdnix21fyP4QfDdIOi7/tCDzf6B4J9XBdzLpPPB/NGyU9PD89D5Pw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6F32fXxFlHqtgJyQUooLEpfTQ+wdMB/XlyDgOuCR2ajuUnl//2aFJgdKezpGQkHe211774mWfSZQmXtiVkghFObNGg7b992m9GURNPHdafiN2/AaJHTRveE49mHv+adxCEfJtayRlTkZMKsRU2/agW3dcqH9TF4YBDGGzVg+8R9t6IEJqaO1Sg7a1SRMmwyJs284FCzmSVIYMpUSGCoeT7s11qD1DVHKyO2dblkVA0VkqlYUA4FpEMEkSXMM8BWdgz+cskuGELhhSuSBvMSPZtt/2vry81F7qNS4WwIMQAtgC2ieSdPHT7vwoN5NoxGK+XfcR44xilNB/kCF1Q9SSR1Y3WXBB1TL9BNoFLjTQDtlgB7s++2mD9wAFu28i7ZEUEjlyidwSbExiIgjDxPo1HrXtn9/r4HbvVCAmYy5SebD+M0qErUnCMxI5ssysZPd9xCPl6pwRHI4YTnJJ1+TWjEmGMJHWvSAx3VxTqYcvklbRfmsjywkj+E9acgZ2eWra4EhlBnRBpPov/drt1RblASU56QwH8eXsYtqcX4kXt754vp35kXexgdMctgsKu85bUlWr39aHg1rN1dumPmg0L35fkTRYjcaXywAGPh6n4m41WV+Jp3H6IG//GjRXLM5A0m+cpE/4LluCUezequikuwk4hNe92eqxz/H9j1+rnojkvEXzxu/55lL9xs+rR57Mp+h1cHfvsSk9efrfXbq+yB6eF3R4dTW8nd/f8NmNmEa0l8zSywc+U6tx43z868fp5XwwXjw2H2Yn3nTZQwA22+857eawbyzlYJLPnwhW5dKMxmhgDXW/kPpaWoyFRk5cuIaZ0SepCFN2x+wyshLmWnxoFOpmbtfnzYbb95p1b9Don7steA596A5hFwatltcYtkr92bI4oNjnLKYmllHY7fx8TRCnoSQsIsJZ8xwvibS/QBwghawRG+uDwZkkU64VvA7dQb8xHLTqgVv3+70W9Hqe63Y9v+vX/d6pbd1ydcfuRDdWROyrd31PvccE04wSI/FmzqUedKl0SZ7ROleJW1ujGiO5vgSE0eHQ85sBkDTNEmIIg5RHeUJq2TIrCgTk9t9zEJaFlUqccaFQUpzCT5M8/FbWQ/tE1DhIk1GP6J6Sw8vIb4VBmc7naTd20y7hu3lEzWHTxVWC4i2T/U/vM2OGpRqYKi8s3ZJ7teUPIY4AgC/4gcPSVPGiNd2JXl6w+s7QqtIp2/uMas+1fL3Oi4aeGsUUGh64AJ6CCcG5lr3XKV8RBioI8K0bp2J9ELmy7/PL1ZJNFFIk1eNnFctvPDcmRJrnxkgfn8133zJ7IXXdFNmoY7Z+ol8lhvGXDxccYuOnzff674WL6L1dR7B24ug89RtDUbYwK3O/vH4yG5hrWKoFkYtd8GMAx4LvG6siV1yUnqZ5rsjnXyyjdG0bYcxzpkYDuzDsqm/BU71mJHx3+gBTKPzblb2Rn17Zs5vridbBFNmVL/13Z4cW44KJ3iVpwaVtb/TrUwdnix21fyP4QfDdIOi7/tCDzf6B4J9XBdzLpPPB/NGyU9PD89D5Pw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4jSx1HIhXCLChK3tNmB0oG2jOZlZRxDPE2c1Bcu++vXDiQFSrudlZCQT46/852LP/uGgSR2vC5jiHKcEi0YtPW/6/WaWw0dYFgNq264ThUaLRA2DKcVula1unABBLoWMCZQQBgHhLd1x7Krhm3J36NteTXLs62K3aj+0rVnRJmEli4VS9e2SUyYl4dt64ISLwUMM4+ABDGPQ2/WHY886emBgpPeudmzzAPSTsR55pkmrIQIojiGFZgm5o154nMTMm+GVwRwQdEhZsja+mHvZrOpbKqVlK5Mx7Is02qZ0idkeHWtd66KzSgMyDLdr/uApARDEON/gCI1RjxKQ60br1KKeZR8AG2btqWgDbSFBrRdcq2bbwFydl9EOiFJGTBYBOwCbIqWiCICkfY0Ddr69dc6uN/7SAFhy5Qm7Gz9Z5QQWaM4zVBosCKzgt3XES+Uq3ODoBcQGAuG1+hejUkGIGLaA0VLvB1hJocvZFrefm3LiglD8E9acmMe85S0zQuVGeAVYvz/9Ou4V3uUZxAL1KHZy918vt1M4MNu8LNP0p7bq7Pej7vBsJ1TOHbekypbfVifD2o5V4dNM7M7tpl4mfhj+msmao+/RBDfgsUGjBdTMH/6OfMnvay/9KdziH5Mdy57cJq/szs/imwxNue7W7eRpBHs3UbPV9/FE72fkWZvMh/Vgs3zcjOyqHWHN/c+mLy6NV8IsqmFfEG/A7Sg/pRO3G933xbOX7vYfBpWb2s/5n70HO5qzvQqsEfh6P42uh2u189kDZPmuP2W03EOp8ZCDmZi8RtBXizVaAQDzZf9AvxzaVEWHBrL3NXLlD4xjgjXO2qXkhVPSPHBoSebuV8Pm3W77zSrzqDnDu2WNbRcy/atrlVrtZy63yr0Z8/ijGI/JUusYimF3c/P5wRh4jFEQkSNdSpghJj+CeIAcKAFZCoPRkoYekyVgjfdRsNu1N1mv9tt+t1qdeg3h91Bw6+79W69p2v3KZ+QCe0uOaKn6l09Ue8pgjjDSEm8mnMmB51xWZJXsBY8titrUCFIyEuAKh32HLdZMxlOshgpwmaShiJGlSzK8gKZbP/vGACy3IoZzFLKQZyfwg+TPP9W1EP6hFg5MJVRD8meoguXkVWk83Ha9eO0C/iuCLE6bLK4nGK4Z3L66W1m1LCUA1PmBZldcC+3/CHEBQDzE37meWnKeOEaH0UvLlh5Z0hV6RTtfQWV14pYr0Xe0IZSTCrhTdu0GuYMQSFlb/eYviBilhDml26ckvVZ5NJ+yk/wiMw44CiR46flyy88N2aIqedGII/P9qtvmZOQsm4cbfklWz+WrxLF+NOHC/Sg8pPmB/m3SWn41q4LWEdxZJ7yjcExWamVul92H8wGTCUsloKY0mPwSwCXgp8ayyKXXLicpoXg6OMvmlK6tg4gTAXhwUDPDcfqm/Pkuwx5b07vYHKFP1zZW/bhlf1zPJpJHUyAXvri/3Y2cD4uEMldDOdc2vpWvj5lcLI6UvsDwXeCb9dqfdv1HavZPxP8YVnAk0w678zvLUc1PT8PnX8B</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6MQO4EAUUGiXKZ0ekGB6ZzOy5FxdsBtYtPYobRfP05oUqC0p3MkJOSd7bXXvnjZJ5IkseP3pIRUMcGN8aBj/otcwNRxGhaKImrVKY0s4tCG1cRNl7o4AnA80xhLmcGYS0W46pgOwq6Fkf7NMPIbyMduzXGc36ZxA6nU0Nqlhkxjk8Rc+kXYjpml3BdEMulzkoD0FfWnvcsLX3v6pORkdk+2LIuAaXep1Mq3bVoLgUIc0xoViX1i7/mchNKfsgUnKkvhJWYoO+bL3sfHx9qjWxPpwnYQQjZq29onlGzx1ex+KTdDOOaR2K77hAvOKInZM8lJXYJaitDoxQuRMrVM3oHGNkY5tAUbalFc519N+zVAwe6TSHskU0ksuSS4BAsgghQ4BeNnMO6YXz/Xwe3eWUq4jESayIP131ECvoZYrCC0ZJlZye7ziEfK1T0B6o85jTPJ1nCVj8mKUJDGJIWIbS6Y1MMXSqNov7GR5YQB/ZuWnNi7PDVt+0hlBmwBUv2ffu32aotyQ+IMutHl7CyYBM5E3vHoGw5Gt5NhcD5Z4nvUKSjsOm9JVa1+WR8OajVXL5uCs6Y3C57PE+HZtjdOJ/Ob7y3V8jIO7ug6fNpg3E5Tb+Bet27EueP2mhdi9byezwc/g4SN79D9DF893p89KS/4At9u1ebnEAs2uxlG7d/ZHH7/GHqtH1k2ujq7T9bO/W16+gPHJHhYzwmeETz9hW4vMAiExdXZUlzXf31H6vZucPslWtOJFz4rfcpp86rn/kouO6857eawbyzlYJrN74CqcpmPxnhgjHS/iPpYWnILC62ocPVXuT5JBVyZ3XxXLit+psWHhb5u5nY9bHm477RcZzCqD3EbDVEd4RHqoUa77Xijdqk/WxYHFPuCRyyPlSvsdn4+JkgTXwIPIbXWIqNLkOYHiAOiiDHmgT4YgkuYCa3grVbTxXjQaKJGH502egPUOG0g7LRRz/FOvYFpXAl1za/TXqTrv6/e7p56B0DZikEu8fmcSz3oUumSPJB1pmJcW5Mah0xfAmmuw75TbzVsyZJVDDlhOxFhFkNttVwVBbLl9t+xCJWFlUm6EqkicXEK303y8FtZD+0TstxB5hmdgu4pHLmMUJnOm7TrRy+tEr6XhSw/bLq4KmV0y2T/0+vM5MNSDUyVF5W45F5t+UuIIwD2B/zsw9JU8cI124leXrD6ztCq0i3b+0BqD7Vsvc6KhjZzxUw1vI1t1LSnQDMte08zcQ/criDsT904FeuDyJV9n1+mlnyqiIJEj59RLD/x3JiCzJ8bY318Np99y+yF1HVTsFHHbP1Yv0pyxh8+XKhPcz9tnui/R5GGr+06grUTR+ep3xiK8UW+yu+Xp3dmgwoNy7QginQX/BjAseD7xqrIFRelp2meKXj/i5ErXccklIqMq3GuKNqwq74FT/W0Av/V6Q1MofAvV/ZGvntl/3N5MdU6mBCz8mX/7WyxYlwo6F2SFVw65ka/PnVwvthR+xeCbwQfNxp9XB85qNU/EPxhVcC9TLpvzG8tOzU9PA/dPw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06507</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06509</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832D6DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832DB5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832DF5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_FUNC_CHILD_SAU_Get_CHILD_200_OK_P1" searchProperties="true" id="cf2bf137-2d6d-4378-935b-566dca39d85a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU" id="08adc646-1311-416b-b5ab-b8f23f07cecf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU" id="0c029175-97df-4aa3-bd58-e56abdbe6027"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU" id="bea2c7bc-9454-4c3d-9c8f-ebcb7147b934"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832E5BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832F41E190E0401F0A059926F9:69237EDF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832E49E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832E49E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832E49E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832E5BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832EA3E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832EF6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832E5BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832EA3E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832EF6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxXicCcqSCmXnpyWXqClTF9GrrMBz0nsEDtc+vVjh4YCpZ12JCTkne2117542ecCR2HR9YSARFLODL/TNP92GqQ8QfBi1ao1xyoHjmO9lKoNq/ECRVwtlxyHVE3DFyIFnwmJmWyaReSULAep34OD3ApynXoB1UvPpjGCRCho5VJAprGKQibcLGzTTBPmciyocBmOQLiSuEOvf+0qTxfnnMzW+YZlFjBpzaSMXdsmhQAIhCEpEB7Z5/aez3kg3CGdMizTBN5iBqJpvu1dLpeFZanAk6ldRAjZqGErn0DQ6anZOsk3Q+CzCd+s25hxRgkO6SvWpPogZzwwvHDKEypn0SfQju0gDW3BiljEKbNT034PkLH7JtIeyURgS8ywk4MNYAIJMALG48Bvmqff6+Bm70OCmZjwJBIH659RAraAkMcQWCLPLGf3fcQj5WqdA3F9RsJU0AXc6DGJMQFh3CUwoatrKtTwBcLI2m+sRD5hQH7SknN7l6eibR+pTIdOQcj/06/dXm1QRjhModXoX9ZfAc2ugpfFLfn9GiXB+nl1cTlGy2ZGYdd5Q2rb6rf14aBu5+pt06/BQ4i607Rz/cgfy5P7edgdPS67rD8vDc/m/iAKq6veTWn212zdQNHTtDii5SvpjcPb2us1LP0OvxBL/8HutO/5ySSA5St/un1dd71xtD4Ly8l90IvGdFT1RmfBH/8mvvtzMY97T+O+cy/q3eek332+dgZ2h85GT5e1zs3l5Gp9lo4XdydKJ7zK4FflN4TUO4ti6vPme067OewbczkYpi//AJH5Uo+G3zF6ql9Yfi0t2kIDa5K5urHWJyGBSbOld2lZcVMlPjRwVTM362696rSL9VKxW7noOg3URWXk9JCHKo1Gsdpr5PqzYXFAsc3ZhOpYWmE38/M1QRK5AlgAibXgKZmBML9A7GCJDZ8N1MHgTMADVwperKBK+6KCSu1SpdctV0seape9isqiilQaDdO44fKW3SbeREKyr96lPfUeAKExBS3xes6FGnQhVUnmeJHK0CkscIFBqi6BROuwWyzXK7agURyCJmxHPEhDKMSzOCuQLTb/RQsTkVmpIDFPJA6zU/hpkoff8noon4BqB6EzugDVUzhyGaE8nc/Tru6mncN7aUD1YVPFlQklGyb7n95nRg/LdmC2eRHh5Ny3W34IcQTA/oKffViabbxgQXei5xesujOUqrTy9s5xYV5IF4s0a2hNK2ai4G3HRjV7CCRVsrd+4H+A2VsI+1s3zpb1QeStfZ9fKmdsKLGESI2fkS2/8dwYgtDPDV8dn9V33zJ7IVXdJKzkMVs7VK8SzfjLhwtxifZT5jv1t+RJ8N6uI1g7cVSe6o0hKZvqlb5f1p/MBuEKlipB5Mku+DGAY8H3jdsib7lINU0vqYTPvxha6ZomJoSnTPodMzPsqm/GU65jcN+dPsBkCv92Za/Ep1f2uH89VDoYYXPrS//b2aLZuBBQuwTNuDTNlXp9quBsuqP2bwSPC3658ZXg72fS+mD+aNmp6eF5aP0L</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxXicCcqSCmXnpyWXqClTF9GrrMBz0nsEDtc+vVjh4YCpZ12JCTkne2117542ecCR2HR9YSARFLODL/TNP92GqQ8QfBi1ao1xyoHjmO9lKoNq/ECRVwtlxyHVE3DFyIFnwmJmWyaReSULAep34OD3ApynXoB1UvPpjGCRCho5VJAprGKQibcLGzTTBPmciyocBmOQLiSuEOvf+0qTxfnnMzW+YZlFjBpzaSMXdsmhQAIhCEpEB7Z5/aez3kg3CGdMizTBN5iBqJpvu1dLpeFZanAk6ldRAjZqGErn0DQ6anZOsk3Q+CzCd+s25hxRgkO6SvWpPogZzwwvHDKEypn0SfQju0gDW3BiljEKbNT034PkLH7JtIeyURgS8ywk4MNYAIJMALG48Bvmqff6+Bm70OCmZjwJBIH659RAraAkMcQWCLPLGf3fcQj5WqdA3F9RsJU0AXc6DGJMQFh3CUwoatrKtTwBcLI2m+sRD5hQH7SknN7l6eibR+pTIdOQcj/06/dXm1QRjhModXoX9ZfAc2ugpfFLfn9GiXB+nl1cTlGy2ZGYdd5Q2rb6rf14aBu5+pt06/BQ4i607Rz/cgfy5P7edgdPS67rD8vDc/m/iAKq6veTWn212zdQNHTtDii5SvpjcPb2us1LP0OvxBL/8HutO/5ySSA5St/un1dd71xtD4Ly8l90IvGdFT1RmfBH/8mvvtzMY97T+O+cy/q3eek332+dgZ2h85GT5e1zs3l5Gp9lo4XdydKJ7zK4FflN4TUO4ti6vPme067OewbczkYpi//AJH5Uo+G3zF6ql9Yfi0t2kIDa5K5urHWJyGBSbOld2lZcVMlPjRwVTM362696rSL9VKxW7noOg3URWXk9JCHKo1Gsdpr5PqzYXFAsc3ZhOpYWmE38/M1QRK5AlgAibXgKZmBML9A7GCJDZ8N1MHgTMADVwperKBK+6KCSu1SpdctV0seape9isqiilQaDdO44fKW3SbeREKyr96lPfUeAKExBS3xes6FGnQhVUnmeJHK0CkscIFBqi6BROuwWyzXK7agURyCJmxHPEhDKMSzOCuQLTb/RQsTkVmpIDFPJA6zU/hpkoff8noon4BqB6EzugDVUzhyGaE8nc/Tru6mncN7aUD1YVPFlQklGyb7n95nRg/LdmC2eRHh5Ny3W34IcQTA/oKffViabbxgQXei5xesujOUqrTy9s5xYV5IF4s0a2hNK2ai4G3HRjV7CCRVsrd+4H+A2VsI+1s3zpb1QeStfZ9fKmdsKLGESI2fkS2/8dwYgtDPDV8dn9V33zJ7IVXdJKzkMVs7VK8SzfjLhwtxifZT5jv1t+RJ8N6uI1g7cVSe6o0hKZvqlb5f1p/MBuEKlipB5Mku+DGAY8H3jdsib7lINU0vqYTPvxha6ZomJoSnTPodMzPsqm/GU65jcN+dPsBkCv92Za/Ep1f2uH89VDoYYXPrS//b2aLZuBBQuwTNuDTNlXp9quBsuqP2bwSPC3658ZXg72fS+mD+aNmp6eF5aP0L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eUXrl1hJkKRXGLF0Dc8nImpquQbZtgkyLuX3+SYhEQPXpmmDJZXfnWty79kmOO0sTxA84hE4RRrd9t6f80YgvFMcJGzW00DM9FVaMJtm2gKnqoea7XBK+qa33Oc+hTLhAVLd2xbNewLfkb25ZftXzHrjieNdW1CWRcQkuXiqVrqzSh3C/CtvQ8oz5DnHCfohS4L7A/CgYXvvT0UclJbx+vWRYBs/ZciIVvmrgSAYYkwRXMUvPY3PE5jrg/IjOKRJ7Ba8yIt/TXvc/Pz5Vnt8KymelYlmVaTVP6RJzMjvT2j3IzRH0as/W6gyijBKOE/EWK1ADEnEVakMxYRsQ8/QDaNm1LQRuwwga2PXqkm28BCnZfRNohmXFk8DmyS7AhxJABxaDdDvst/ehrHVzvHWeI8phlKd9bf48S0CUkbAGRwcvMSnZfRzxQrvYxYL9PcZJzsoRLNSYLhIFr1xnEZHVBuBy+iGtF+7UVLycM8Hdacmxu85S0zQOV6ZIZcPF/+rXdqzXKBCU5tE+C+mxQHT55p0lwm+Lz67tpesbxbbXmtQoK285rUptWv673B3UzV6+bXsbNQTi5X02z4V33pR/ULdqMnUfv9CwZ1JrQvavPH4X7i85uf3uzOXWSc2t6v7pBHRrk96SBR+b89O6+d1k9u/nzYzLqPc5W51cPaBnXkPMzvDi9tmdzHD7f3Xamk8nP0/s4F/mQTS7vEExh4Py9yReT6RnrsBW+hrPTnpeO6/X6jUl/JMlVNHYf7sPpZe/22ru8muDWW07bOewaSzkY5Q9/AItyqUaj39V6sl9IfC4tykIiIy5c/YXSJy6ACr2tdilZ8XMpPiTyZTPX67BRsztOw3XCwA3tphVanmX3rMCqNptOrdcs9WfNYo9ih9GYqFhKYdfz8zlBnPocaASZsWQ5ngPXP0HsIoG0Ph3KD4NRDmMmFbzWs8MT98R25aMThp2ufIRuGNS8eqMZ9Hq6dsnEFb3KglhAtqve7o56DwGTBQEl8WrOuRx0LmRJntAyF4ldWaIKhVweApnSYd/xGlWTk3SRgCJspizKE6gs5ouiQCZf/zsGwrywEo4XLBMoKb7CD5Pcf1fWQ/pERDlwldEJyJ7CgcPILtN5l7Z38NAq4YM8Iupjk8UVGcFrJruv3mZGDctmYDZ5YW6X3DdbvglxAMD8hJ+5X5pNvGhJtqKXB6w8M6SqtMv2PqHKUyVfLvOioXWlmJmEN23TqpsjwLmUvZcxewRqbiDML504G9Z7kTf2XX65mNORQAJSOX5asfzCdWMEXF03+vLzWX31LrMTUtZNwEocsnUSeStRjD+9uGAfKz9pvpZ/zyyL3tp1AGsrjsxT3jEEoTO1UufLywezgZmEJVIQWbYNfgjgUPBd46bIGy5CTtNDLuDjN5pSupaOMGY5Ff2uXhi21bfgKV4W4L85vYMpFP71yF7xD4/s34OLkdTBFOkbX/LfzgYpxgWD3MVJwaWlr+TtUwansy21fyV4WPC95meCv5tJ+535vWWrpvvfQ/tf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jx3jC9jGnsCMyyUhC0kLaZb2ZUfIx6DElkCSgfTXr2xiAoRk051hhtHx0Xe+c9EnXQiUpU4YCQFcEka1Qbel/2MnwQwSLzZmjcQ2GoBcYxb4voFjBN4s8Ryr0dS1gRA5DKiQiMqW7lh23bAt9buzrdC1Qqde85v2L127By4UtHKpWbq2zVIqwjJsS885DRkSRIQUZSBCicNJNBqGyjNEFSe9fbFjWQbk7YWUy9A0cS0GDGmKa5hl5oV55HMRi3BC5hTJnMNzzFi09Oe9m82mtqnXGJ+bjmVZphWYyicWZP5Zb3+qNkM8oAnbrTuIMkowSslvVJAagVywWIvSOeNELrI3oG3TtgpoA7bYwHaDftbNlwAluw8iHZHkAhligewKbAwJcKAYtB/jQUv//LEO7vbecURFwngmTtZ/RgnoGlK2hNgQVWYVu48jnilX+wJwOKA4zQVZw00xJkuEQWjfOCRkOyRCDV8stLL92lZUEwb4T1pyYR7yVLTNM5XpkjkI+X/6ddirHco9SnNo8yu3++TLAHnkaj4S9ujHSsrxFXmcblolhUPnHal9q5/Xp4O6n6vnTZedTTBMvzYn97Dw3W83t3x61RXm8OmL0/iVrq/5JuhNYm+a/Uy/PyySrck32Jd555pMtsnv9IG4I3fD0HfbuR59atrzsZfaIwb4r2z10BtHbu9x4X2ZXt6761n9crVy71AjmnQ321vb63t9f7hZPXg/IjaA2d/NL4F140+//7Rdusg+Xa7wsP+4Gq3ip/rvOprOPav1ktNhDsfGSg4m+ewBsKyWxWgMulpf9QvJ96WlsJDYSErXcFnok5BApd4udhWyEuZKfEgcqmbu1r2mZ3ecZt3p9b2eHVg9q2HZfSuy3CBwvH5Q6c+OxQnFDqMJKWIVCrubn/cJ4iwUQGPgxprleAFCfwexiyTSBnSsDgajAu6YUnDF1PItz42inh+4fc/yo36n7jlf+91uPwrqunbD5C295VEigR+rd/1IvceAyZJAIfHFnAs16EKqkqzQOpepXVujGoVcXQK80OHQaTRdU5BsmUJB2MxYnKdQWy6WZYFMsft3DIRFaSUCLxmXKC1P4ZtJnn6r6qF8YlI4iCKjr6B6CmcuI7tK51XajbOXVgUf5TEpDpsqruQE75gcf3qZmWJY9gOzzwsLu+K+3/KHEGcAzHf4mael2ceL1+QgenXBqjtDqUq7au8K1Va1fL3Oy4b6hWJyBW/apuWbE8C5kr2nO/YI1NxDmB+6cfasTyLv7cf8crmgE4kkZGr8tHL5gefGBETx3Bio47P96FvmKKSqm4StPGfrpOpVUjB+9+GCQ1z4KfM39bdhPH5p1xmsgzgqT/XGkITOi1Vxvzy9MRuYKViiBJHxQ/BzAOeCHxv3Rd5zkWqaZrmEt79ohdK1dIQxy6kcdPXScKi+JU/5tITwxekVTKnwz1f2Vrx5ZU9Hw4nSwQzpe1/y384GKccFg9olSMmlpW/V61MFp/MDtX8meF7wG8F7gn+cSfuV+bXloKan56H9Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065017</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065019</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832E5CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832EA4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832EF7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_FUNC_CHILD_BAU_Get_CHILD_200_OK_P1" searchProperties="true" id="2d83eb93-5719-465d-a4e7-8199bd0eff99"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832F5DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2833043E190E0401F0A059926F9:9A0E62F8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832F4BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832F4BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832F4BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832F5DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832FA5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832FF8E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832F5DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832FA5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832FF8E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxkj22DAnsCMg6GhhZAATW/7ckeR16DUlh1L5qO/vpKJCVCSm94ZZhitV2fPfuhIlxwnse35nEMuaMq0YdDR/20SDLhphUboti2jYTmu8eBYLcM17XbkNpsN8tDStSHnBQwZF5iJjm6bVt2wTPmbW6bnmJ7t1JxW/Yeu3UPOJbR0qZm6tklixr0ybEcvcualmFPuMZwA9wTxZv545ElPD1ec9O7ljmUZMO8uhcg8hEgtBAJxTGokTdAlOvK5DLk3owuGRZHDc8yQd/Tnvev1urau19J8gWzTNJHpIukTcrr4qHc/VJshHLIo3a17mKWMEhzTX1iRGoNYpqHmx4s0p2KZvAJtIctU0AZsiEGsBvuoo5cAJbt3Ih2RzDk2+BJbFdgUIsiBEdC+Tocd/eP7OrjbO88x41GaJ/xk/XeUgK0gTjMIDV5lVrF7P+KZcnUvgXhDRuKC0xXcqDHJMAGu3eYQ0c2Icjl8IdfK9msbXk0YkL9pySU65ClpozOVCegCuPg//Trs1Q7lHscFdB+DaEumN2boc3Tx8/Y6yZZFAjj6FfmdksKh847UvtXP69NB3c/V86Zsbl+37z8H48+N9XC2Xk5ugvn3L7dXdDSbEJsFwKwiopN5g326Y3UbNdKvo9bNpy/9xwEEXLjXNDev+3ZjME2/ffgRfqFmNvt1gWbNxLkf9QqnGDujmf9p7OPvve39qGiM3Ond1e2QLbAlvvXX9O4C04j1w4e78RxBnTqbie/8nDx+qPtfxeYOLp62/U2L3+fbwaLzktNhDsfGSg5mxcMjEFEt1WgMA20g+4XF29KiLDQ0otLVy5Q+cQFM6F21S8mKV0jxoaEnm7lb99tNq2e36/bACfqWa/bNhmkNTN90XNduDtxKf3YsTij2UhZRFUsp7G5+3iZIEo8DCyE3VmlBlsD1NxADLLA2ZFN5MFLGYZ5KBffbbr/ftOvBoG36buC2B0G95/ZMt9dutJvNpq7dpGLCJrkfCciP1bt+pN5TIDSjoCRezTmXg86FLMkTXhUitmorXGNQyEsgVzrs2Y22gzhNshgUYZSkYRFDLVtmZYEQ3/3bBia8tFJOsjQXOC5P4atJnn6r6iF9QqocuMroCmRP4cxlZFXpvJ528zDtCt4vQqoOmyyuyCnZMTn+9DIzalj2A7PPi3Cr4r7f8pcQZwDQG/zQaWn28cIVPYheXbDyzpCq0q3a+4RrT7VitSrKhraUYuYSHlnIbKEZkELK3nae/gSG9hDoXTfOnvVJ5L39mF8hlmwmsIBEjp9WLt/x3JgBV8+NoTw+m/e+ZY5CyroJ2Ihztl4sXyWK8ZsPF+IR5SfNt/JvnebhS7vOYB3EkXnKN4agbKFW6n7ZvjIbJJWwVApimh+CnwM4F/zYuC/ynouQ0/RQCHj9i6aUrqNjQtKCiWGgl4ZD9S15im0G3ovTHzClwj9f2Rv+6pX9z3g0kzqYYH3vS//b2aDluBCQuzgtuXT0jXx9yuBscaD2zwTPC37j6i3BP86k+4f5T8tBTU/PQ/c3</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxkj22DAnsCMg6GhhZAATW/7ckeR16DUlh1L5qO/vpKJCVCSm94ZZhitV2fPfuhIlxwnse35nEMuaMq0YdDR/20SDLhphUboti2jYTmu8eBYLcM17XbkNpsN8tDStSHnBQwZF5iJjm6bVt2wTPmbW6bnmJ7t1JxW/Yeu3UPOJbR0qZm6tklixr0ybEcvcualmFPuMZwA9wTxZv545ElPD1ec9O7ljmUZMO8uhcg8hEgtBAJxTGokTdAlOvK5DLk3owuGRZHDc8yQd/Tnvev1urau19J8gWzTNJHpIukTcrr4qHc/VJshHLIo3a17mKWMEhzTX1iRGoNYpqHmx4s0p2KZvAJtIctU0AZsiEGsBvuoo5cAJbt3Ih2RzDk2+BJbFdgUIsiBEdC+Tocd/eP7OrjbO88x41GaJ/xk/XeUgK0gTjMIDV5lVrF7P+KZcnUvgXhDRuKC0xXcqDHJMAGu3eYQ0c2Icjl8IdfK9msbXk0YkL9pySU65ClpozOVCegCuPg//Trs1Q7lHscFdB+DaEumN2boc3Tx8/Y6yZZFAjj6FfmdksKh847UvtXP69NB3c/V86Zsbl+37z8H48+N9XC2Xk5ugvn3L7dXdDSbEJsFwKwiopN5g326Y3UbNdKvo9bNpy/9xwEEXLjXNDev+3ZjME2/ffgRfqFmNvt1gWbNxLkf9QqnGDujmf9p7OPvve39qGiM3Ond1e2QLbAlvvXX9O4C04j1w4e78RxBnTqbie/8nDx+qPtfxeYOLp62/U2L3+fbwaLzktNhDsfGSg5mxcMjEFEt1WgMA20g+4XF29KiLDQ0otLVy5Q+cQFM6F21S8mKV0jxoaEnm7lb99tNq2e36/bACfqWa/bNhmkNTN90XNduDtxKf3YsTij2UhZRFUsp7G5+3iZIEo8DCyE3VmlBlsD1NxADLLA2ZFN5MFLGYZ5KBffbbr/ftOvBoG36buC2B0G95/ZMt9dutJvNpq7dpGLCJrkfCciP1bt+pN5TIDSjoCRezTmXg86FLMkTXhUitmorXGNQyEsgVzrs2Y22gzhNshgUYZSkYRFDLVtmZYEQ3/3bBia8tFJOsjQXOC5P4atJnn6r6iF9QqocuMroCmRP4cxlZFXpvJ528zDtCt4vQqoOmyyuyCnZMTn+9DIzalj2A7PPi3Cr4r7f8pcQZwDQG/zQaWn28cIVPYheXbDyzpCq0q3a+4RrT7VitSrKhraUYuYSHlnIbKEZkELK3nae/gSG9hDoXTfOnvVJ5L39mF8hlmwmsIBEjp9WLt/x3JgBV8+NoTw+m/e+ZY5CyroJ2Ihztl4sXyWK8ZsPF+IR5SfNt/JvnebhS7vOYB3EkXnKN4agbKFW6n7ZvjIbJJWwVApimh+CnwM4F/zYuC/ynouQ0/RQCHj9i6aUrqNjQtKCiWGgl4ZD9S15im0G3ovTHzClwj9f2Rv+6pX9z3g0kzqYYH3vS//b2aDluBCQuzgtuXT0jXx9yuBscaD2zwTPC37j6i3BP86k+4f5T8tBTU/PQ/c3</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0SZx1HIBVIgKkiBlJIZ6AU6vczLkXE24E5ih9gBOl9/7NBQoLSnPRIS8s722mtfvOwzjpLY8XzOIROEUS0MWvo/qDqxT+vVyGi6U2TU3AY2GlEVGY5zWndc14km1ZquhZznEFIuEBUt3bHsqmFb8ndrW55reU6j4jYbv3XtDjIuoaVLxdK1dRJT7hVhW3qeUY8hTrhHUQLcE9gb+8OBJz09VHLS22cblkXArD0XIvVME1ciwBDHuIJZYp6Zez5nEffGZEaRyDN4iRnxlv6yd7VaVVbVCstmpmNZlmk1TekTcTL7prdPys0QhXTKNusuoowSjGLyFylSQxBzFml+PGMZEfPkHWjbtC0FbcAaG9iu0W+6+RqgYPdJpD2SGUcGnyO7BBvBFDKgGLRfo7Clf/tcBzd7bzNE+ZRlCT9Yf40S0CXELIXI4GVmJbvPIx4pV/sMsBdSHOecLOFSjUmKMHDtOoMpWQ8Il8MXca1ov7bm5YQB/kpLzsxdnpK2eaQyAZkBF/+nX7u92qDcoTiHtv18O4CHm1lGO0lSf4SLZJTcPdCHW/+xVVDYdd6Q2rb6ZX04qNu5etnUSTFc8l4QO6va1fnQXbnfWb9/at3AMLxZzBaTfrLE874fkEVW41F3+TRy4l+jO6fv/MH3tvnzWaxQbykG61+Tk/n1U3ppX9x1aoOOPe7z4X1udfN0Pv5u3qN6I36YX19cDPPkYnqT/f7ZfUTNwVWw8vvrXi2P6lYPs7DfubOnEzdiJ0GaBX9/TOH773toIrigNGy95rSbw76xlINxPnkCLMqlGo0w0HqyX0h8LC3KQiJjWrh6qdInLoAKva12KVnxcik+JPJkMzfr88ap3XUaVafnu+d20zq3apbds3zLbTad016z1J8NiwOKXUanRMVSCruZn48J4sTjQCPIjCXL8Ry4/gFigATSQjqSB4NRDrdMKrhb992e79iBFZw33Eat2ujWg9Oq69hu99yvSh2+ZOKKXmX+VEC2r97VPfUeASYpASXxas65HHQuZEkWaJmL2K4sUYVCLi+BTOmw59QarslJksagCJsJi/IYKuk8LQpk8s2/YyDMCyvhOGWZQHFxCt9N8vBbWQ/pExHlwFVGHZA9hSOXkV2m8ybt2tFLq4T384iowyaLKzKCN0z2P73OjBqW7cBs88LcLrlvt3wR4giA+QE/87A023jRkuxELy9YeWdIVWmX7V2gyqKSL5d50dC6UsxMwpu2adXNMeBcyt7zLfsD1NxCmJ+6cbasDyJv7fv8cjGnY4EEJHL8tGL5iefGGLh6boTy+Kw/+5bZCynrJmAtjtm6sXyVKMYfPlywh5WfNF/LvxXLotd2HcHaiSPzlG8MQehMrdT98vzObGAmYYkURJbtgh8DOBZ837gt8paLkNM0yQW8/0VTStfSEcYspyIM9MKwq74FT/Gcgvfq9AamUPiXK3vN372yH4aDsdTBBOlbX/LfzgYpxgWD3MVJwaWlr+XrUwansx21fyF4XPBrnY8Efz+T9hvzW8tOTQ/PQ/tf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQK5dEBYmBMqVDS9XQaacvR8bZAXcSm9oO0H79sUNDgdKezpGQkHe211774mWfCJRnXtQVArgkjBrDftv8p5k2U0gSz0pDP7SCYNqwWn7TtQIvdP3WdJqkU2waQyEKGFIhEZVt03Nc33Id9Zu4TlR3It+phQ3/3jR+ARcKWrnUHNNY5xkVURm2bRacRgwJIiKKchCRxFHcvRhFyjNCFSezc7JhWQbknbmUi8i2cS0BDFmGa5jl9om953OSiCgmM4pkweElZiLa5sve1WpVW/k1xme25ziO7YS28kkEmX01O1+qzZAMaco26x6ijBKMMvKMNKkLkHOWGN1sxjiR8/wdaNd2HQ1twRpb2A3oV9N+DVCy+yTSHkkukCXmyK3AriEFDhSDcXM9bJtfP9fBzd4JR1SkjOfiYP13lIAuIWMLSCxRZVax+zzikXJ1TgBHQ4qzQpAlXOoxWSAMwrjikJL1iAg1fIkwyvYba1FNGOC/acmJvctT0baPVKZPZiDk/+nXbq82KL9QVkBnRL0fYeOBeKubq+yPz1QSv9C9na1+i3ZJYdd5Q2rb6pf14aBu5+plE/69dAs5Hty3ztjzT9Gf1Pv0zlux+OlPfOY14tv1dHKRPp6Np2jWfz5/uuPJOSCSOE9h91re4hQ36Gjk3ftD3vjy8HM8bf4IB+PLbB0Hp7frmcvjQMgfsUvG5J7ctc6ev93xm0k/vFjZ56v17Nv8WdZTb34j09vWQ9Y7dWV+Bws8zL/MeH8yPvdHt5e3Bc7n53YzaL/mtJvDvrGSg7iYPgCW1VKPxrBvDFS/kPxYWrSFJFZaukYLrU9CApVmR+/SshIVSnxIEqlmbtanrYbb81q+Nxi0Tt3QOXUCxx04Xacehl5jEFb6s2FxQLHHaEp0LK2wm/n5mCDOIwE0AW4tWYHnIMwPEPtIImNIr9XBYFTAhCkF7/m9biM47fadMAwGruM1/Hqr6YcNp1lvDvpd07hkckzHvJtK4Pvq7e+p9zVgsiCgJV7PuVCDLqQqySNaFjJza0tUo1CoS4BrHY68oFW3BckXGWjCds6SIoPaYr4oC2SLzb9nISxKKxF4wbhEWXkK303y8FtVD+WTEO0gdEbfQfUUjlxGXpXOm7SDo5dWBd8tEqIPmyqu5ARvmOx/ep0ZPSzbgdnmhYVbcd9u+UuIIwD2B/zsw9Js4yVLshO9umDVnaFUpVO19xHVHmvFclmUDW1qxeQK3nZtp2nHgAsle08T9geovYWwP3XjbFkfRN7a9/kVck5jiSTkavyMcvmJ50YMQj83hur4rD/7ltkLqeomYS2P2XqZepVoxh8+XHCEtZ8yX6m/FePJa7uOYO3EUXmqN4YkdKZX+n55emc2MFOwRAki47vgxwCOBd83bou85SLVNE0LCe9/MbTStU2EMSuoHPbN0rCrviVP+bSA6NXpDUyp8C9X9lq8e2XfXYxipYM5Mre+5L+dLVKOCwa1S5CSS9tcq9enCk5nO2r/QvC44AffPxL8/Uw6b8xvLTs1PTwPnX8B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065024</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065026</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832F5EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832FA6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832FF9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_touP2" searchProperties="true" id="24b623af-1469-41bb-be35-a91a05736f0d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU" id="56e84f74-144a-4609-8df5-0421d96f3cac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C283305FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C283312DE190E0401F0A059926F9:6BFFE2F1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C283304DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C283304DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C283304DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C283305FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C28330A7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28330E2E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C283305FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C28330A7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28330E2E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6NgJ4RbVJAol5nMtLQlbYfOy5FxNsFtYtPYATpff5zQUKC0pz0SEvLO9tprX7zsE0mS2PG6UkKqmOCG32+b/9Rhht2w1rSatRlYLpCG1arVp1YVh25YD6vTFglNw5cyA59LRbhqmw62q5aN9e/axl4Ne1Wn0nLwH9O4hVRqaO1SwaaxTmIuvSJs28xS7gkimfQ4SUB6inpB9/zM054eKTmZnZMNyyJg2pkrtfAQopUQKMQxrVCRoBO053MSSi9gEScqS+E5Zijb5vPe1WpVWVUrIo2QgzFGuIW0TyhZ9NXsfCk3Q+jzmdise4QLziiJ2V+SkzoHNReh0Y0jkTI1T96AtpGNc2gL1tSitsu/muglQMHug0h7JFNJLDkndgk2hhmkwCkYN2O/bX79WAc3e69TwuVMpIk8WH+OEvAlxGIBoSXLzEp2H0c8Uq7OCVDP5zTOJFvCKB+TBaEgjcsUZmx9xqQevlAaRfuNtSwnDOhnWnKCdnlq2uhIZfosAqn+T792e7VBuSVxBh3FG/NvQ+eOYsju+8nVRfIUXQU9p+eKdkFh13lDatvq5/XhoG7n6nnT4A41x3/7Tlq3MUGTUXL7bflzcvOjMfjjpG63P3xYn83J5cPEce9Hcql+/Qm+B1V0uabMH6Lswr5k01H112g0vB9/kYk7vVip0UqdXo4b0/vbU3tU/x7doGiQOo3BQ0bHMhI9tZr0G7/HcniLria/g97Kv1fZTZQ4kyBySP/qO8660y9n64vkzlfZLxEMr4Mf6OruvP2S024O+8ZSDoJseg9Ulct8NPy+MdT9Iup9acktLLRmhau3yPVJKuDK7OS7clnxMi0+LPR0MzfrQbNu95xmtYprw4HdwgPsYnuIu7jWajn1YavUnw2LA4o9wWcsj5Ur7GZ+3idIE08CDyG1liKjc5DmO4h9oojh87E+GIJLuBZawQdVXLcbNYyHTbdb7dWwc1ob9Bo9t17T/FuOaYyEuuAXaXemIN1X7+qeeo+BsgWDXOLzOZd60KXSJXkky0zFdmVJKhwyfQmkuQ57jtusIcmSRQw5YZSIMIuhspgvigIhufl3LEJlYWWSLkSqSFycwjeTPPxW1kP7hCx3kHlGp6B7CkcuI6dM5+2067tpl/DdLGT5YdPFVSmjGyb7n15mJh+W7cBs86LSLrlvt3wS4ggAeocfOizNNl64ZDvRywtW3xlaVTplex9J5bGSLZdZ0dBGrpiphkc2wg0UAM207D1diwfgaAuBPnTjbFkfRN7a9/llas4DRRQkevyMYvmB50YAMn9u+Pr4rD/6ltkLqeumYK2O2XqxfpXkjN99uFCP5n7afKn/ViJ9SfwY1k4cnad+YyjGo3yV3y9Pb8wGFRqWaUEU6S74MYBjwfeN2yJvuSg9TdNMwdtfjFzp2iahVGRc+X2zMOyqb8FTPS3Ae3F6BVMo/POVvZZvXtmT87NA62BCzK0v+29nixXjQkHvkqzg0jbX+vWpg/NoR+2fCR4XfLf/nuDvZ9J5ZX5t2anp4Xno/As=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6NgJ4RbVJAol5nMtLQlbYfOy5FxNsFtYtPYATpff5zQUKC0pz0SEvLO9tprX7zsE0mS2PG6UkKqmOCG32+b/9Rhht2w1rSatRlYLpCG1arVp1YVh25YD6vTFglNw5cyA59LRbhqmw62q5aN9e/axl4Ne1Wn0nLwH9O4hVRqaO1SwaaxTmIuvSJs28xS7gkimfQ4SUB6inpB9/zM054eKTmZnZMNyyJg2pkrtfAQopUQKMQxrVCRoBO053MSSi9gEScqS+E5Zijb5vPe1WpVWVUrIo2QgzFGuIW0TyhZ9NXsfCk3Q+jzmdise4QLziiJ2V+SkzoHNReh0Y0jkTI1T96AtpGNc2gL1tSitsu/muglQMHug0h7JFNJLDkndgk2hhmkwCkYN2O/bX79WAc3e69TwuVMpIk8WH+OEvAlxGIBoSXLzEp2H0c8Uq7OCVDP5zTOJFvCKB+TBaEgjcsUZmx9xqQevlAaRfuNtSwnDOhnWnKCdnlq2uhIZfosAqn+T792e7VBuSVxBh3FG/NvQ+eOYsju+8nVRfIUXQU9p+eKdkFh13lDatvq5/XhoG7n6nnT4A41x3/7Tlq3MUGTUXL7bflzcvOjMfjjpG63P3xYn83J5cPEce9Hcql+/Qm+B1V0uabMH6Lswr5k01H112g0vB9/kYk7vVip0UqdXo4b0/vbU3tU/x7doGiQOo3BQ0bHMhI9tZr0G7/HcniLria/g97Kv1fZTZQ4kyBySP/qO8660y9n64vkzlfZLxEMr4Mf6OruvP2S024O+8ZSDoJseg9Ulct8NPy+MdT9Iup9acktLLRmhau3yPVJKuDK7OS7clnxMi0+LPR0MzfrQbNu95xmtYprw4HdwgPsYnuIu7jWajn1YavUnw2LA4o9wWcsj5Ur7GZ+3idIE08CDyG1liKjc5DmO4h9oojh87E+GIJLuBZawQdVXLcbNYyHTbdb7dWwc1ob9Bo9t17T/FuOaYyEuuAXaXemIN1X7+qeeo+BsgWDXOLzOZd60KXSJXkky0zFdmVJKhwyfQmkuQ57jtusIcmSRQw5YZSIMIuhspgvigIhufl3LEJlYWWSLkSqSFycwjeTPPxW1kP7hCx3kHlGp6B7CkcuI6dM5+2067tpl/DdLGT5YdPFVSmjGyb7n15mJh+W7cBs86LSLrlvt3wS4ggAeocfOizNNl64ZDvRywtW3xlaVTplex9J5bGSLZdZ0dBGrpiphkc2wg0UAM207D1diwfgaAuBPnTjbFkfRN7a9/llas4DRRQkevyMYvmB50YAMn9u+Pr4rD/6ltkLqeumYK2O2XqxfpXkjN99uFCP5n7afKn/ViJ9SfwY1k4cnad+YyjGo3yV3y9Pb8wGFRqWaUEU6S74MYBjwfeN2yJvuSg9TdNMwdtfjFzp2iahVGRc+X2zMOyqb8FTPS3Ae3F6BVMo/POVvZZvXtmT87NA62BCzK0v+29nixXjQkHvkqzg0jbX+vWpg/NoR+2fCR4XfLf/nuDvZ9J5ZX5t2anp4Xno/As=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyjxXEuXCLClKAtkOHTjuQ3ng5cp0NuE3sNHaAztcfOzQUKO3pHAkJeWd77bUvXvaxwEns+IEQkEnKmTHot81/nJaHUWNaq9ieAxVv+uBUHhxUqxC70aw1kdeou5FpDITIYcCExEy2TQfZbsVG6hfayK8h3/WqtYY3MY0byISCVi5VZBqrJGbCL8K2zTxjPseCCp/hBIQviT8OLoa+8vRxycnsHK9ZFgGzzlzK1LcsUo2AQByTKuGJdWzt+BxHwh/TGcMyz+A1ZiTa5uve5XJZXbpVns0sByFkoZalfCJBZ9/NzrdyM0QDNuXrdQ8zzijBMf2DNakLkHMeGUE84xmV8+QDaNuykYauwIqo8nnsu2m9BSjYfRFph2QmcEXMsV2CjWAKGTACxvVo0Da/f62D671hhpmY8iwRe+u/owRsATFPIaqIMrOS3dcRD5SrcwzEHzAS54Iu4JcekxQTEMZVBlO6GlKhhi8SRtF+YyXKCQPyNy05trZ5KtrWgcr06QyE/D/92u7VGuUGxzl0au5Tfh1eBulj1M0oCS9qqHUy4b+efv9uFxS2ndekNq1+Xe8P6mauXjeNvbPnZnoV9xv0aHppz8/vh6tFctuceDe3i/Aaunz5++7M7reco3h8GyU30WAokx/hPf5zmtm30/Pgfg4XtXP74r7+LQ5H9IgtvFN4RIuXFzkOb1rX8ufIC5fhOcprdCjc3p9WePbcn9xFgchG49XT0j0Krmo/u8NkNJyk949c9Po/6ujb42SEL9PJ7Iwe8R8DbMWJ137LaTuHXWMpB+P84RGILJd6NAZ941T1C8vPpUVbaFSZFq5+qvVJSGDS7OhdWlb8XIkPjXzVzPX6pFm3e07TdVHQOLFb6AR5yD5FAaq1Wk79tFXqz5rFHsUeZ1OqY2mFXc/P5wRJ4gtgEWSVBc/JHIT5CWIfS2wM2EgdDM4EhFwpuOrnabfRbaK+6/VQsxl0u/XgBNX7wYnb6zquafzi8pJdZsFUQrar3u6Oeo+A0JSClng950INupCqJM94kcvYri5wlUGuLoFM67DveM2aJWiSxqAJWwmP8hiq6TwtCmSJ9b9TwUQUVipIyjOJ4+IUfpjk/reyHsonotpB6Iy6oHoKBy4jp0zn47Tr22mX8EEeUX3YVHGlOqBrJruf3mZGD8tmYDZ5EWGX3Ddb/hLiAID1CT9rvzSbeNGCbkUvL1h1ZyhV6ZTtfcbV52q+WORFQxtaMTMFb9kWalhjILmSvZeQPwGzNhDWl26cDeu9yBv7Lr9cztlYYgmJGj+jWH7huTEGoZ8bA3V8Vl99y+yEVHWTsJKHbL1YvUo0408fLsQn2k+Zr9TfkmdviR/C2oqj8lRvDEnZTK/0/fLywWwQrmCpEkSebYMfAjgUfNe4KfKGi1TT9JBL+PiLoZWubWJCeM7koG8Whm31LXjKlxT8N6d3MIXCv17ZK/HhlX13MRwrHUywufGl/+1cocW4EFC7BC24tM2Ven2q4Gy2pfavBA8Lvtf/TPB3M+m8M7+3bNV0/zx0/gU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YwgFiBqc74ehdntVux3W6/3EnDUdNCQBJQ99dvwGLV2t7unXHGyeHkOc95yZNccRyFptvhHFJBY6Z4/Zb676NjA240HQ10m2gW0W3NwXOiPZoBtudWA1tzR1U8zjPwGBeYiZZq6kZdM3T5mxm629DderPWNO0HVbmDlEto6VLTVWUThYy7ZdiWmqXMjTGn3GU4Au4K4vqd8XdXerq44qS2r3Ysy4BpeylE4iJEagEQCENSI3GErtCRz1XAXZ8uGBZZCi8xA95SX/au1+vaul6L0wUydV1HuoOkT8Dp4qva/lJthsBj83i37mEWM0pwSH/jgtQYxDIOlE64iFMqltE70AYy9AJagw3RiGGxryp6DVCy+yTSEcmUY40vsVGBTWEOKTACyu3Ua6lfP9fB3d5Zihmfx2nET9Z/RwlYDmGcQKDxKrOK3ecRz5SrfQXE9RgJM05zmBRjkmACXPmRwpxuvlMuhy/gStl+ZcOrCQPyNy25Qoc8JW10pjJ9ugAu/k+/Dnu1Q7nDYQbtdTTtjMe3NNzS29Xg6SZpjLudcY79379aJYVD5x2pfatf1qeDup+rl035zfXgIk/qW56M9J6f5AsSz/zu/U2zsVqZzQcam6PRLEvFFD9e3vh2By3rKwRdz7knF5MfaOR8e1rODI9PyOTLho7R7Shs1J1BjOpJ5Ne35BIYf/Ks++lkO3wyR7f/kJ9s9XzxgH79Xpv0zlpeP+dNo3evQ9i0kO88fhNP5rbjfPGH6zvvYeZb24vnn9ZNZzThrdecDnM4NlZy4GePT0BEtSxGw+srQ9kvLD6WlsJCA21eurpJoU9cABNqu9hVyIqbSfGhgSubuVsP7EujZ9r1uj4wB4ajD3RLN4Z6R284jnk5dCr92bE4odiL2ZwWsQqF3c3PxwRJ5HJgAaRaHmdkCVz9ALGPBVY8NpUHI2YcZrFUcKur151h99K47Nv9oW1bPb3nNDsDs9s0u3ajoSqTWFyz67QzF5Aeq3f9SL2nQGhCoZD4Ys65HHQuZElWOM9EaNRyXGOQyUsgLXTYNS27gTiNkhAKwiiKgyyEWrJMygIhvvs3NUx4aaWcJHEqcFiewneTPP1W1UP6BLRw4EVGXZA9hTOXkVml8yZt6+ylVcF3soAWh00WV6SU7Jgcf3qdmWJY9gOzz4two+K+3/KXEGcA0Af80Glp9vGCnB5Ery5YeWdIVWlX7V3h2qqW5XlWNrRZKGYq4ZGB9CbygWRS9raz+BkY2kOgT904e9Ynkff2Y36ZWDJfYAGRHD+lXH7iueEDL54bnjw+m8++ZY5CyroJ2Ihztl4oXyUF4w8fLsQlhZ80/5B/6zgNXtt1BusgjsxTvjEEZYtiVdwv23dmg8QSlkpBjNND8HMA54IfG/dF3nMRcpoeMwHvf1EKpWupmJA4Y8Lrq6XhUH1LnmKbgPvq9AamVPiXK3vD372y78fffamDEVb3vvS/nTVajgsBuYvTkktL3cjXpwzOFgdq/0LwvOBb/Y8E/ziT9hvzW8tBTU/PQ/sP</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065031</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065033</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833060E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C28330A8E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28330E3E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="8ff93ce4-849f-4683-8624-c2e63038ba11"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833149E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C2833217E190E0401F0A059926F9:F83E4310"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833137E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833137E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833137E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833149E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2833191E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28331CCE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833149E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2833191E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28331CCE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlchVy6JClIKdDZT2k65qduXlescwDOJHWKHS3/92KGhQGm3sxIS8snxd75z8WdfcJQmThByDrkgjGpRr63/27Qc7DRb2Jg1wDI81wID+R4YTa/hYsf2XcfxdS3ivICIcoGoaOuOZbuGbcnf2LaCuhW4fq3l2o+6NoWcS2jpUrN0bZMmlAdl2LZe5DRgiBMeUJQCDwQORuHNIJCeAao46Z2LHcsyYN5ZCJEFpolrMWBIElzDLDUvzCOfi5gHIzKnSBQ5vMSMeVt/2bter2trt8byuelYlmVavil9Yk7mX/XOl2ozxBGdsd26iyijBKOEPCNF6gbEgsVamMxZTsQifQfaNm1LQRuwwQa2PfpVN18DlOw+iXREMufI4AtkV2BDmEEOFIM2GUZt/evnOrjbO84R5TOWp/xk/WeUgK4gYRnEBq8yq9h9HvFMuToXgIOI4qTgZAW3akwyhIFrP3KYkc2AcDl8MdfK9msbXk0Y4D9pyYV5yFPSNs9UpkfmwMX/6ddhr3YoU5QU0Pm7fsu669C720bDSf6tlwyKdNadTNffrHZJ4dB5R2rf6pf16aDu5+pl01Nc3Ey26K5XLMl4Mf5xfTMVIpybT+MUZffPP6HY1qch6y/+sdwl6Y7XrhfO7pONw24nDac5tn895z43+zeX8/hL0/ue3UaZmEQhbiydu8ZDlGXFwM0Gjmcm234shhPkPH1H9pM5YGv/V7HsxdvkepBvryY//fuHsTt+bN2jzV/Wty98uqpPH+FxuL0mj9ebeMpY+zWnwxyOjZUcjIqnn4BFtVSjEfW0K9kvJD6WFmUhsTErXYNM6RMXQIXeUbuUrASFFB8SB7KZu3W/1bC7Tst1bc/v277VtzzLvrJCq+77TuPKr/Rnx+KEYpfRGVGxlMLu5udjgjgNONAYcmPFCrwArn+A2EMCaREdyoPBKIcxkwruXVm+d+leWq16N7Sv/GbTb9Z9t9H3Q9dphY6u3TJxR+/ycCYgP1Zv90i9h4BJRkBJvJpzLgedC1mSJVoVIrFrK1SjUMhLIFc6HDheq25ykmYJKMJmyuIigVq2yMoCmXz37xgI89JKOM5YLlBSnsJ3kzz9VtVD+sREOXCV0SXInsKZy8ip0nk/7cZh2hV8WMREHTZZXJETvGNy/Ol1ZtSw7AdmnxfmdsV9v+UPIc4AmB/wM09Ls48Xr8hB9OqClXeGVJVO1d4lqi1rxWpVlA1tKsXMJbxpm1bTHAEupOxtx+wXUHMPYX7qxtmzPom8tx/zK8SCjgQSkMrx08rlJ54bI+DquRHJ47P57FvmKKSsm4CNOGfrJvJVohh/+HDBAVZ+0vxD/q1ZHr+26wzWQRyZp3xjCELnaqXul+07s4GZhCVSEFl+CH4O4FzwY+O+yHsuQk7TUyHg/S+aUrq2jjBmBRVRTy8Nh+pb8hTbDIJXpzcwpcK/XNkb/u6V/XAzGEkdTJG+9yX/7WyQclwwyF2clFza+ka+PmVwOj9Q+xeC5wXfbX4k+MeZdN6Y31oOanp6Hjq/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlchVy6JClIKdDZT2k65qduXlescwDOJHWKHS3/92KGhQGm3sxIS8snxd75z8WdfcJQmThByDrkgjGpRr63/27Qc7DRb2Jg1wDI81wID+R4YTa/hYsf2XcfxdS3ivICIcoGoaOuOZbuGbcnf2LaCuhW4fq3l2o+6NoWcS2jpUrN0bZMmlAdl2LZe5DRgiBMeUJQCDwQORuHNIJCeAao46Z2LHcsyYN5ZCJEFpolrMWBIElzDLDUvzCOfi5gHIzKnSBQ5vMSMeVt/2bter2trt8byuelYlmVavil9Yk7mX/XOl2ozxBGdsd26iyijBKOEPCNF6gbEgsVamMxZTsQifQfaNm1LQRuwwQa2PfpVN18DlOw+iXREMufI4AtkV2BDmEEOFIM2GUZt/evnOrjbO84R5TOWp/xk/WeUgK4gYRnEBq8yq9h9HvFMuToXgIOI4qTgZAW3akwyhIFrP3KYkc2AcDl8MdfK9msbXk0Y4D9pyYV5yFPSNs9UpkfmwMX/6ddhr3YoU5QU0Pm7fsu669C720bDSf6tlwyKdNadTNffrHZJ4dB5R2rf6pf16aDu5+pl01Nc3Ey26K5XLMl4Mf5xfTMVIpybT+MUZffPP6HY1qch6y/+sdwl6Y7XrhfO7pONw24nDac5tn895z43+zeX8/hL0/ue3UaZmEQhbiydu8ZDlGXFwM0Gjmcm234shhPkPH1H9pM5YGv/V7HsxdvkepBvryY//fuHsTt+bN2jzV/Wty98uqpPH+FxuL0mj9ebeMpY+zWnwxyOjZUcjIqnn4BFtVSjEfW0K9kvJD6WFmUhsTErXYNM6RMXQIXeUbuUrASFFB8SB7KZu3W/1bC7Tst1bc/v277VtzzLvrJCq+77TuPKr/Rnx+KEYpfRGVGxlMLu5udjgjgNONAYcmPFCrwArn+A2EMCaREdyoPBKIcxkwruXVm+d+leWq16N7Sv/GbTb9Z9t9H3Q9dphY6u3TJxR+/ycCYgP1Zv90i9h4BJRkBJvJpzLgedC1mSJVoVIrFrK1SjUMhLIFc6HDheq25ykmYJKMJmyuIigVq2yMoCmXz37xgI89JKOM5YLlBSnsJ3kzz9VtVD+sREOXCV0SXInsKZy8ip0nk/7cZh2hV8WMREHTZZXJETvGNy/Ol1ZtSw7AdmnxfmdsV9v+UPIc4AmB/wM09Ls48Xr8hB9OqClXeGVJVO1d4lqi1rxWpVlA1tKsXMJbxpm1bTHAEupOxtx+wXUHMPYX7qxtmzPom8tx/zK8SCjgQSkMrx08rlJ54bI+DquRHJ47P57FvmKKSsm4CNOGfrJvJVohh/+HDBAVZ+0vxD/q1ZHr+26wzWQRyZp3xjCELnaqXul+07s4GZhCVSEFl+CH4O4FzwY+O+yHsuQk7TUyHg/S+aUrq2jjBmBRVRTy8Nh+pb8hTbDIJXpzcwpcK/XNkb/u6V/XAzGEkdTJG+9yX/7WyQclwwyF2clFza+ka+PmVwOj9Q+xeC5wXfbX4k+MeZdN6Y31oOanp6Hjq/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH++UppRK6QgzfI6oKAh61Jc7Id1APG0KSQrorz9JsQiIXr0zzDDZ3Vl77Y+s5EzgOCoGdSGAS5owo9uqmv+6YYj88rhiOWPkWCXfrVg+8j3LLZZCB/vgeiXHNLpCpNBlQmImq2YROa7lIPUbOSjwUFByCmUPPZnGPXChoJVLAZnGOo6YCLKwVTPlLEiwoCJgOAYRSBIM672rQHkGOOdk1s42LLOAvDaTch7YNimEQCCKSIEksX1m7/mchSIY0inDMuXwFjMUVfNt72q1KqzcQsKndhEhZKOKrXxCQacnZu1XvhnCLpskm3UTs4RRgiP6ijWpHshZEhr1aJpwKmfxJ9CO7SANbcGaWMQpsRPTfg+Qsfsm0h5JLrAlZtjJwW5hAhwYAePutls1T77Xwc3eEcdMTBIei4P1zygBW0KUzCG0RJ5Zzu77iEfKVTsDEnQZiVJBl3Ctx2SOCQijz2FC11dUqOELhZG131iLfMKA/KQlZ/YuT0XbPlKZFp2CkP+nX7u92qDc4yiFGh50MLqOe6vTPr2cxB7v8vDlot6aDR+rGYVd5w2pbavf1oeDup2rt03UuY6TJW3cD9IS7XVE8/L14rw/ejolrQt4HLmLwbjXuWs937srcnXxci95vzG2W97gcThI71qlRgQvrDkfFPvI/dXCkX/VqDeuvdeU/uZckOU5F0+Nmwe58H4Lv5G6D+d/XkvOIJ60R5fjOEYzcotnbOFfXD5cP6MVtG+hMu716PjXVWONZv8sOr2+nXr3Tof3/Op7Trs57BtzORim42cgMl/q0ei2jI7qF5ZfS4u20NCaZK7BXOuTkMCkWdO7tKwEqRIfGgaqmZt12z91mkXfdZ2K03YqqI1KyOmgOvIqleJpp5Lrz4bFAcVmwiZUx9IKu5mfrwmSOBDAQuDWMknJDIT5BWILS2x02a06GAkTMEqUgnvNultHp75XaZdLFdQqN4udtu82Omow6+VG3TSuE3nDbnh9IoHvq7e7p963QOicgpZ4PedCDbqQqiQLvExl5BSWuMAgVZcA1zocFEu+ZwsazyPQhO04CdMICvPZPCuQLTb/RQsTkVmpIPOESxxlp/DTJA+/5fVQPiHVDkJn1ADVUzhyGbl5Op+nfbqbdg5fT0OqD5sqruSUbJjsf3qfGT0s24HZ5kWEk3PfbvkhxBEA+wt+9mFptvHCJd2Jnl+w6s5QqlLL27vAhUUhXS7TrKFlrZhcwduOjcr2EEiqZO9llPwBZm8h7G/dOFvWB5G39n1+qZyxocQSYjV+Rrb8xnNjCEI/N7rq+Ky/+5bZC6nqJmEtj9makXqVaMZfPlxIQLSfMvfV3yrh4Xu7jmDtxFF5qjeGpGyqV/p+eflkNkiiYKkSxITvgh8DOBZ837gt8paLVNM0TiV8/sXQSlc1MSFJymS3ZWaGXfXNeMqXOQTvTh9gMoV/u7LX4tMr+6F3NVQ6GGNz60v/29mi2bgQULsEzbhUzbV6fargbLqj9m8Ejwu+W/5K8PczqX0wf7Ts1PTwPNT+Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1HIlUuigpSBMs1Mr0A7PX05Ms4G3AY7jR0I/fqxQ0OB0p72SEjIO9trr33xso85midOEHIOmSCMalGvrf9b9+MWjN2GYSM0MTw79o2W7zsGbjmo4eIxajRjXYs4zyGiXCAq2rpj2a5hW/I3sq2gbgWeV2s0nXtdu4WMS2jpUrN0rZgnlAdl2LaeZzRgiBMeUDQHHggcDMPzs0B6BqjipHeO1yzLgFlnJkQamCauxYAhSXANs7l5bO74HMc8GJIpRSLP4CVmzNv6y97lcllbujWWTU3HsizT8k3pE3MyPdI736rNEEd0wtbrLqKMEowS8owUqXMQMxZrYTJlGRGz+TvQtmlbCtqAAhvY9uiRbr4GKNl9EmmHZMaRwWfIrsAGMIEMKAbtZhC19aPPdXC9d5Qhyicsm/O99dcoAV1AwlKIDV5lVrH7POKBcnWOAQcRxUnOyQIu1JikCAPXrjKYkOKMcDl8MdfK9msFryYM8Fdacmxu85S0zQOV6ZEpcPF/+rXdqzXKLUpy6BTFnftd2A4+v7zx7/sXLXfh1P3RyF09tksK285rUptWv6z3B3UzVy+bLqPT5+6910vJP04C7vMERbOz+uOC2Lj+01mhXuGyoc0Gv/ILL8b9G+rT7+Z98fPavm2Ev+94PkhD//7WPr3rh99Oh6fjCz+/Wj6OB+GfyfnFrzg+h2XTG7lwhop8fHcN92MzG7DBc6/7fFNfNf0/DyYe1sPJjWj5s4dVdjp4aLHr+OlbYrkjTvon0e/ru9bSS/2h137NaTuHXWMlB8N8/ABYVEs1GlFP68t+IfGxtCgLiY1J6RqkSp+4ACr0jtqlZCXIpfiQOJDNXK9PWg2767Rc1+52T2zfOrE8y+5boVWXx6rR9yv9WbPYo9hldEJULKWw6/n5mCCeBxxoDJmxYDmeAdc/QOwhgbSIDuTBYJTDiEkF73Xd0DrpWV7D9+sN13f7rdAJe71G1//hn4RShy+YuKSXWTgRkO2qt7uj3gPAJCWgJF7NOZeDzoUsyRNa5CKxawtUo5DLSyBTOhw4XqtucjJPE1CEzTmL8wRq6SwtC2Ty9b9jIMxLK+E4ZZlASXkK301y/1tVD+kTE+XAVUY/QPYUDlxGbpXOm7S9g5dWBR/mMVGHTRZXZASvmex+ep0ZNSybgdnkhbldcd9s+SLEAQDzA37mfmk28eIF2YpeXbDyzpCq0qna+4RqT7V8scjLhjaVYmYS3rRNq2kOAedS9lYj9gjU3ECYn7pxNqz3Im/su/xyMaNDgQTM5fhp5fITz40hcPXciOTxKT77ltkJKesmoBCHbN1EvkoU4w8fLjjAyk+ar+TfkmWviR/C2ooj85RvDEHoVK3U/bJ6ZzYwk7BECiLLtsEPARwKvmvcFHnDRchpGucC3v+iKaVr6whjllMR9fTSsK2+JU+xSiF4dXoDUyr8y5Vd8Hev7Lvzs6HUwTnSN77kv50NUo4LBrmLk5JLWy/k61MGp9MttX8heFjw3eZHgr+bSeeN+a1lq6b756HzFw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065038</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065040</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C283314AE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2833192E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28331CDE190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="df0d136e-2042-4ea7-b4cd-3e273e25429e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU" id="e128cdb7-2033-4571-9481-b741edbfbc35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU" id="364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833233E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C2833319E190E0401F0A059926F9:395A6637"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833221E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833221E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833221E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833233E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C283327BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28332CEE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833233E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C283327BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28332CEE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlcQOwm3qCBx3UkL7QzQy/RlZRwDniZ2sB2g/fVrh4YCQ7udlZCQT46/852LP/tCoiR2g7aURCjKmRX2mvY/rlubz3HVLRHgzko+hLA0IxVUgqBe9cmcNKJKzbZCKTMSMqkQU03bBdDTDvo3hSCogMCvlmsV8Ghbd0RIDa1dysC2tknMZJCHbdqZYAFHksqAoYTIQOFg0h4NA+0ZoIKT3brYscwDitZSqTRwHFyOCCZxjMuYJ86Fc+RzEclgQhcMqUyQ15iRbNqvezebTXnjlblYOC4AwAENR/tEki6+2q0vxWYShWzOd+suYpxRjGL6ggypEVFLHlnteMEFVcvkHWjoQGCgS2SLSxj67KvtvAXI2X0S6YikkKgklwgWYGPdFEEYJtbtOGzaXz/Xwd3eqUBMzrlI5Mn6zygRtiYxT0lUkkVmBbvPI54pV+uC4CBkOM4kXZNrMyYpwkRa3wWZ0+2QSj18kbTy9ltbWUwYwX/SkgvnkKem7ZypTI8uiFT/p1+Hvdqh3KE4I63tt58/nmv3t6N7v/O0XN09Mf+xnuLk8Rk0cwqHzjtS+1a/rk8HdT9Xr5vGL7eLcXQ5i5fJ4OEJzDHsxtPqw7gaX4sRH/wCLzNnAmbg9km2N48/wxsh53Ul/HuJr9LV3Sj5hhWXV2mtz+CXZ9wZ9h28gg+zUZsl04afzXp/bTZXU/j3dScbJs5s3QU/SOfa7Q7XVz+jzcNSMNBzF5eL+8uX4SIjqN2u3U/v6+mXDgz5InQ72w1M7p6UcK9um285HeZwbCzkYJLNfhGsiqUZjbBnDXS/kPpYWoyFRqV57hqkRp+kIkzZLbPLyEqQafGhUaCbuVv361XYdeue53peHzZAH/gADkAbVBoNtzpoFPqzY3FCscvZnJpYRmF38/MxQZwEkrCIiNKaZ3hJpP0BYg8pZIVsrA8GZ5JMuVbwitfoA2/Q83p+teN7g2q/Cxo1WIMN3/caNde2rrm6YTeiPVdEHKu3d6TeY4JpSomReDPnUg+6VLokK7TOVAzLa1RmJNOXgDA6HLh+veJImqQxMYSdhEdZTMrpMs0L5Mjdv1tCWOZWKnHKhUJxfgrfTfL0W1EP7RNR4yBNRh2ie0rOXEZekc77aVcP0y7g21lEzWHTxVWC4h2T409vM2OGZT8w+7ywhAX3/ZY/hDgD4HzAzzktzT5etKYH0YsLVt8ZWlVaRXtXqLwqZ+t1lje0ZhRTaHgHOqDmTAjOtOw9T/kTYc4ewvnUjbNnfRJ5bz/ml6klmyikSKLHz8qXn3huTIg0z41QH5/tZ98yRyF13RTZqnO2bqxfJYbxhw8XHGDjp83f9d+Gi+itXWewDuLoPPUbQ1G2MCtzvzy/MxuYa1iqBZGLQ/BzAOeCHxv3Rd5zUXqaZpki73+xjNI1bYQxz5gKe3ZuOFTfnKd6Tknw5vQbTK7wr1f2Vr57ZT+MhhOtgwmy9770v51LNB8XTPQuSXMuTXurX586OFscqP0rwfOC78KPBP84k9Zv5t8tBzU9PQ+tfwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlcQOwm3qCBx3UkL7QzQy/RlZRwDniZ2sB2g/fVrh4YCQ7udlZCQT46/852LP/tCoiR2g7aURCjKmRX2mvY/rlubz3HVLRHgzko+hLA0IxVUgqBe9cmcNKJKzbZCKTMSMqkQU03bBdDTDvo3hSCogMCvlmsV8Ghbd0RIDa1dysC2tknMZJCHbdqZYAFHksqAoYTIQOFg0h4NA+0ZoIKT3brYscwDitZSqTRwHFyOCCZxjMuYJ86Fc+RzEclgQhcMqUyQ15iRbNqvezebTXnjlblYOC4AwAENR/tEki6+2q0vxWYShWzOd+suYpxRjGL6ggypEVFLHlnteMEFVcvkHWjoQGCgS2SLSxj67KvtvAXI2X0S6YikkKgklwgWYGPdFEEYJtbtOGzaXz/Xwd3eqUBMzrlI5Mn6zygRtiYxT0lUkkVmBbvPI54pV+uC4CBkOM4kXZNrMyYpwkRa3wWZ0+2QSj18kbTy9ltbWUwYwX/SkgvnkKem7ZypTI8uiFT/p1+Hvdqh3KE4I63tt58/nmv3t6N7v/O0XN09Mf+xnuLk8Rk0cwqHzjtS+1a/rk8HdT9Xr5vGL7eLcXQ5i5fJ4OEJzDHsxtPqw7gaX4sRH/wCLzNnAmbg9km2N48/wxsh53Ul/HuJr9LV3Sj5hhWXV2mtz+CXZ9wZ9h28gg+zUZsl04afzXp/bTZXU/j3dScbJs5s3QU/SOfa7Q7XVz+jzcNSMNBzF5eL+8uX4SIjqN2u3U/v6+mXDgz5InQ72w1M7p6UcK9um285HeZwbCzkYJLNfhGsiqUZjbBnDXS/kPpYWoyFRqV57hqkRp+kIkzZLbPLyEqQafGhUaCbuVv361XYdeue53peHzZAH/gADkAbVBoNtzpoFPqzY3FCscvZnJpYRmF38/MxQZwEkrCIiNKaZ3hJpP0BYg8pZIVsrA8GZ5JMuVbwitfoA2/Q83p+teN7g2q/Cxo1WIMN3/caNde2rrm6YTeiPVdEHKu3d6TeY4JpSomReDPnUg+6VLokK7TOVAzLa1RmJNOXgDA6HLh+veJImqQxMYSdhEdZTMrpMs0L5Mjdv1tCWOZWKnHKhUJxfgrfTfL0W1EP7RNR4yBNRh2ie0rOXEZekc77aVcP0y7g21lEzWHTxVWC4h2T409vM2OGZT8w+7ywhAX3/ZY/hDgD4HzAzzktzT5etKYH0YsLVt8ZWlVaRXtXqLwqZ+t1lje0ZhRTaHgHOqDmTAjOtOw9T/kTYc4ewvnUjbNnfRJ5bz/ml6klmyikSKLHz8qXn3huTIg0z41QH5/tZ98yRyF13RTZqnO2bqxfJYbxhw8XHGDjp83f9d+Gi+itXWewDuLoPPUbQ1G2MCtzvzy/MxuYa1iqBZGLQ/BzAOeCHxv3Rd5zUXqaZpki73+xjNI1bYQxz5gKe3ZuOFTfnKd6Tknw5vQbTK7wr1f2Vr57ZT+MhhOtgwmy9770v51LNB8XTPQuSXMuTXurX586OFscqP0rwfOC78KPBP84k9Zv5t8tBzU9PQ+tfwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6MQJwQCUUGiAaZsW8oW+vmyMs4FTIMTYifA/Pq1Q0OB0m5nJSTkm+tzz/3wsc85XoS21+IcEkEjpvXaDf2feh0qeFItG7UyAsMZj+vG2K1gw3YRnpQtVAFwda3HeQo9xgVmoqHbyCobFpK/kYW8CvKceskt2y+69gAJl9DSpYR0bb0IGffysA09TZgXYU65x/ACuCeIN2zdXHvS08MFJ715vmWZB0yaMyFizzRJKQACYUhKJFqY5+aBz3nAvSGdMizSBN5iBryhv+1drValVbkUJVPTRgiZqG5Kn4DT6Zne/FFshqDHJtF27WMWMUpwSH9jReoGxCwKtFY4jRIqZotPoC3TQgragDUxiOWwM918D5Cz+ybSAcmEY4PPsFWA3cEEEmAEtPu7XkM/+14Ht3tHCWZ8EiULfrT+M0rAMgijGAKDF5kV7L6PeKJczXMgXo+RMOU0g74akxgT4NoggQldX1Muhy/gWt5+bc2LCQPyJy05N/d5Strmicq06RS4+D/92u/VFuUBhyk075eP48vNL/9xXXsuv1Sn2cNm9Wv+yFzLaeQU9p23pHatflsfD+purt42bfjlpPXqOuOHO/I3urzqP69Gczu6XDudn2bFYm4nZfc/nXFnk1XW7tRMNiZcXWfL0V+P+CUILrnYBK9RvDF/R4Mfj7+eX1bjaT97HLXnlHfSK4x+itu+bz11n+ZdZ0BF/fXeHy7H7hyN0/6MY+x3bJczP15Xl/VyeDvox/PqwCe9Hy2r9XJvPY/vnp/STDwklctW4z2n/RwOjYUcDNPxHIgolmo0em2tK/uFxdfSoiw0MCa5qxcrfeICmNCbapeSFS+V4kMDTzZzu+7UqpZv18pl273oWHXUQQ6yuqiFKvW6Xe3WC/3Zsjii6EdsQlUspbDb+fmaIFl4HFgAiZFFKZkB179AbGOBtR67kwcjYhxGkVRwq92pV1DH7aI2sp2u76DOhX9hV9q1FkJ+rapr/UjcstukNRGQHKp3+UC974DQmIKSeDXnXA46F7IkS5ylIrRKGS4xSOUlkCgd9mynVjE5XcQhKMLmIgrSEErxLM4LZPLtv21gwnMr5SSOEoHD/BR+muTxt6Ie0iegyoGrjC5A9hROXEblIp0PaTsnL60CvpUGVB02WVyRULJlcvjpfWbUsOwGZpcX4VbBfbflDyFOAJhf8DOPS7OLF2R0L3pxwco7Q6pKs2jvEpeWpTTL0ryhrlLMRMKblolccwgklbK3GUWvwMwdhPmtG2fH+ijyzn7ILxUzNhRYwEKOn5Yvv/HcGAJXz42ePD7r775lDkLKuglYi1M2P5SvEsX4y4cL8Yjyk+aB/FtFSfDerhNYe3FknvKNISibqpW6XzafzAaJJCyVghgl++CnAE4FPzTuirzjIuQ0jVMBn3/RlNI1dExIlDLRa+u5YV99c55iE4P37vQBJlf4tyt7zT+9sp9urodSBxdY3/nS/3Y2aD4uBOQuTnMuDX0tX58yOJvuqf0bwdOCb1tfCf5hJs0P5o+WvZoen4fmvw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1dgJ+EzKkgUUm1ooS20aHdfrowzgLeJncYOpfvrrx0aCpT2dq+EhDwZnznz4WOfSZLErt+TEjLFBLfCQcf+B9eiGuCWU2k1vFaltvCiyryOcYU6FIjbqLtRc2FboZQ5hFwqwlXHdrHjVRysf3cO9uv651ZxE/+yrRlkUkNrlyq2rU0Sc+kXYTt2nnFfEMmkz0kC0lfUn/ZGV7729EnJye6ebVkWAbPuSqnUR4hWI6AQx7RKRYLO0IHPWST9KVtyovIMXmJGsmO/7H16eqo+eVWRLZGLMUa4jbRPJNnyq939Um6GKOQLsV33CRecURKzP8SQGoFaicjqxUuRMbVK3oF2kIMNdAU2VJevxr/a6DVAwe6TSAckM0kqckWcEmwCC8iAU7DuJ2HH/vq5Dm733mWEy4XIEnm0/jtKwNcQixSiiiwzK9l9HvFEubpnQP2Q0ziXbA1jMyYpoSCtmwwWbHPFpB6+SFpF+62NLCcM6N+05Azt89S00YnKDNgSpPo//drv1RZlRuIcuvXm5Cbqjb375gp+PtYeHoM5a2eTbDq87RQU9p23pHatflkfD+purl42PT/gEb+MomVDLMfjWT2vy40zdC6/h7et1jCZqfuIXvMmResfvdkQHMXub/Gw8WO2wrL+zbkEcf1H1cJfU/Q8/rJpAHVFj6dpGLRnzmrsBle1BibIy+e11uz610Pi8PPL0ZV65E9DVB9Owuj2Zo7633+Ofp/PE5RG33DSmI/+nCdf0iSYL2/o84I8pINFSwxd0XnNaT+HQ2MpB9N8/huoKpdmNMKBdaH7RdTH0mIsLKosClc/NfokFXBld80uIyt+rsWHRb5u5nYdtBpO3215ntsPAqeNA1zDzgXu4Xq77TYu2qX+bFkcUewLvmAmllHY7fx8TJAmvgQeQVZZi5yuQNofIA6IIlbIJ/pgCC7hTmgFbwbnDYyDVttzvXZzgJ164HlB32n020HzojWwrbFQ1/w66y0UZIfq7R2o9wQoSxkYiTdzLvWgS6VL8kjWuYqd6ppUOeT6EsiMDvturVVHkiVpDIYwSkSUx1BNV2lRICS3/26FUFlYmaSpyBSJi1P4bpLH38p6aJ+IGQdpMjoH3VM4cRnVynTepF07eWmV8L08Yuaw6eKqjNEtk8NPrzNjhmU3MLu8qHRK7rstfwlxAgB9wA8dl2YXL1qzvejlBavvDK0q3bK9j6T6WM3X67xoaNMoZqbhkYNwE02B5lr2nu/EA3C0g0CfunF2rI8i7+yH/HK14lNFFCR6/Kxi+YnnxhSkeW6E+vhsPvuWOQip66Zgo07Z+rF+lRjGHz5cqE+Nnzbf6L8nkUWv7TqBtRdH56nfGIrxpVmZ++X5ndmgQsMyLYgi2wc/BXAq+KFxV+QdF6WnaZ4reP+LZZSuYxNKRc5VaBRFG/bVt+CpnlPwX53ewBQK/3Jlb+S7V/aP0dVU62BC7J0v+2/nCivGhYLeJVnBpWNv9OtTB+fLPbV/IXha8F3nI8E/zKT7xvzWslfT4/PQ/Rc=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065045</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065047</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833234E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C283327CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28332CFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="289f5783-a9c3-4d44-a5c1-6dac58d0e07e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833335E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C283341BE190E0401F0A059926F9:4406E5BF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833323E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833323E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833323E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833335E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C283337DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28333D0E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833335E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C283337DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28333D0E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx0jfxFsT2CGAGlJQ5obKGnyckfICyixJUeSiZNfX9nEBCjJTS/jGUbr1dmzHz7SscRp4kZdKUEoypkx7LfNf2Nw5sSOXYu4M8/yPdKyAj9oWa04hJaNSYg92zSGUuYwZFJhptqmazue5dj6mTh21NSP33DC8NY0piCkhtYuDb2rSBMmoyps28wFiziWVEYMpyAjRaJxd3Qeac8I15zMzvGaZRVQdJZKZRFCpBEDgSQhDcJTdIx2fI5jGY3pgmGVC3iJGcu2+bL38fGx8eg1uFgg17ZtZIdI+8SSLj6bnU/1ZoiHbM7X6x5mnFGCE/qMS1IjUEseG91kwQVVy/QNaAc5dgltQUEs4vjss4leA1TsPoi0Q1JIbMkldmqwK5iDAEbA+Hk1bJufP9bB9d6JwEzOuUjl3vrvKAFbQcIziC1ZZ1az+zjigXJ1joFEQ0aSXNIVXJRjkmEC0rgUMKfFOZV6+GJpVO03CllPGJC/ackx2uapaaMDlenTBUj1f/q13as1yhQnOXQKO3GKAs1Ok3v3uvd03c+eL06+5eL06z/tisK285rUptUv6/1B3czVyybJfp08LPt+8/ELn89H0+84G43Q5ObmefrzpjmQ6cK9Tm7516fu5Xh2d1Nk8/H5jTjTqVPvGWDZP7r1Wv4i+dKH50/FLBTfmlO/ucwGU8ECL5SD+7Mf3084v7tX7khl/s904alB92HqTdEkGPGv81/sZHrmJD6yb29uv4W4mFxdoAA+OeLCvryXd18KMSuuWbEMSfs1p+0cdo21HIzz2R0QVS/L0Rj2jVPdL6zel5bSQmNrXrlGWalPUgFTZqfcVcpKlGvxoXGkm7leD4Ijp+cGnv41B05oD2zfdk7trt0MQ/foNKz1Z81ij2KPszktY5UKu56f9wmSNJLAYhDWiudkCdJ8B7GPFTaG7Ep/GJxJmHCt4M0g8G3b9bu9oBcOnKZzEvj+wHUHQS8Imk7PNC64+sF+iO5cgdhVb29Hva+A0IxCKfHlnEs96FLpkjzgVa4Sp7HCDQa5PgREqcOR6wdNJGmaJVASRimP8wQa2TKrCoTk+t+1MJGVlUqScaFwUn2Fbya5/66uh/aJaekgy4xOQPcUDhxGfp3O22kfbaddw3fzmJYfmy6uEpSsmey+ep2Zclg2A7PJi0in5r7Z8pcQBwDQO/zQfmk28eIV3YpeH7D6zNCq0qnb+4AbD418tcqrhrZKxRQaHjnIbqExkFzL3tOE3wNDGwj0oRNnw3ov8sa+yy9XSzZWWEGqx8+olh+4boxBlteNof58io/eZXZC6ropKNQhWy/Rt5KS8bsXFxKR0k+bL/XfIxfxa7sOYG3F0XnqO4aibFGuyvPl6Y3ZIFzDUi2IXGyDHwI4FHzXuCnyhovS0zTLFbz9xiiVrm1iQnjO1LBvVoZt9a14qqcMolenP2AqhX85sgv55pH9a3Q+1jqYYnPjS//b2aLVuBDQuyStuLTNQt8+dXC22FL7F4KHBd/13hP83Uw6f5j/tGzVdP976PwG</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx0jfxFsT2CGAGlJQ5obKGnyckfICyixJUeSiZNfX9nEBCjJTS/jGUbr1dmzHz7SscRp4kZdKUEoypkx7LfNf2Nw5sSOXYu4M8/yPdKyAj9oWa04hJaNSYg92zSGUuYwZFJhptqmazue5dj6mTh21NSP33DC8NY0piCkhtYuDb2rSBMmoyps28wFiziWVEYMpyAjRaJxd3Qeac8I15zMzvGaZRVQdJZKZRFCpBEDgSQhDcJTdIx2fI5jGY3pgmGVC3iJGcu2+bL38fGx8eg1uFgg17ZtZIdI+8SSLj6bnU/1ZoiHbM7X6x5mnFGCE/qMS1IjUEseG91kwQVVy/QNaAc5dgltQUEs4vjss4leA1TsPoi0Q1JIbMkldmqwK5iDAEbA+Hk1bJufP9bB9d6JwEzOuUjl3vrvKAFbQcIziC1ZZ1az+zjigXJ1joFEQ0aSXNIVXJRjkmEC0rgUMKfFOZV6+GJpVO03CllPGJC/ackx2uapaaMDlenTBUj1f/q13as1yhQnOXQKO3GKAs1Ok3v3uvd03c+eL06+5eL06z/tisK285rUptUv6/1B3czVyybJfp08LPt+8/ELn89H0+84G43Q5ObmefrzpjmQ6cK9Tm7516fu5Xh2d1Nk8/H5jTjTqVPvGWDZP7r1Wv4i+dKH50/FLBTfmlO/ucwGU8ECL5SD+7Mf3084v7tX7khl/s904alB92HqTdEkGPGv81/sZHrmJD6yb29uv4W4mFxdoAA+OeLCvryXd18KMSuuWbEMSfs1p+0cdo21HIzz2R0QVS/L0Rj2jVPdL6zel5bSQmNrXrlGWalPUgFTZqfcVcpKlGvxoXGkm7leD4Ijp+cGnv41B05oD2zfdk7trt0MQ/foNKz1Z81ij2KPszktY5UKu56f9wmSNJLAYhDWiudkCdJ8B7GPFTaG7Ep/GJxJmHCt4M0g8G3b9bu9oBcOnKZzEvj+wHUHQS8Imk7PNC64+sF+iO5cgdhVb29Hva+A0IxCKfHlnEs96FLpkjzgVa4Sp7HCDQa5PgREqcOR6wdNJGmaJVASRimP8wQa2TKrCoTk+t+1MJGVlUqScaFwUn2Fbya5/66uh/aJaekgy4xOQPcUDhxGfp3O22kfbaddw3fzmJYfmy6uEpSsmey+ep2Zclg2A7PJi0in5r7Z8pcQBwDQO/zQfmk28eIV3YpeH7D6zNCq0qnb+4AbD418tcqrhrZKxRQaHjnIbqExkFzL3tOE3wNDGwj0oRNnw3ov8sa+yy9XSzZWWEGqx8+olh+4boxBlteNof58io/eZXZC6ropKNQhWy/Rt5KS8bsXFxKR0k+bL/XfIxfxa7sOYG3F0XnqO4aibFGuyvPl6Y3ZIFzDUi2IXGyDHwI4FHzXuCnyhovS0zTLFbz9xiiVrm1iQnjO1LBvVoZt9a14qqcMolenP2AqhX85sgv55pH9a3Q+1jqYYnPjS//b2aLVuBDQuyStuLTNQt8+dXC22FL7F4KHBd/13hP83Uw6f5j/tGzVdP976PwG</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb/I4EH3/fkWUPq5CLoSGRIDEtc1CCy29v6yMM4DbxIHYAdpfv3YgFCjt0pWQkCfjM2cuPnaFoSi0vDpjkHASU8VvVdV/itgunpdHjobHYGq2bYy0UQnZWql4bsEYw9g2z1XFZywFnzKOKK+qlmEWNdMQvzvT8Eri5xRMt/yiKg+QMAEtXAqGqqyikDIvC1tV04R6MWKEeRRFwDyOvWH9qucJTw/lnNRaZc0yC5jUppzPPF3HhQAwhCEu4DjSK/qeTyVg3pBMKOJpApuYAauqm73L5bKwLBbiZKJbhmHohqsLn4CRyZla+5NvhsCn43i9biIaU4JRSD6QJHUFfBoHSj2cxAnh0+gbaFM3DQmtwQpr2LTpmap/BsjYnYi0RzJhSGNTZOZgtzCGBCgG5f7Wr6pnp3VwvfcuQZSN4yRiB+vfUQK6gDCeQaCxPLOc3emIR8pVqwD2fIrDlJEFXMsxmSEMTBkkMCarHmFi+AKmZO1XViyfMMC/aUlF3+UpaOtHKtMiE2D8//Rrt1drlAcUplDTHbuD3QFMH67G5X6xEV3iVTRwux/3k2pGYdd5TWrb6s36cFC3c7XZRKwGiY3mY+t6uGrdR5bZt9LA74xs/PLcG1x2nzvTdkjdzvS1XU8Tv3k5mM4jyiOTldk0mE0ulwFq11EPO42HP8/+a3fC/Rvz9XlQvLmoN14iq/n0Np/0l3E9Xb6h1yfnyv3wHy8eX+iy/vjQKdFSLzJuEjDo/XhyvfqLXAzDaP73yPjz/oTSR2PY7XYt02zhPqBl9TOn3Rz2jbkcDNPRK2CeL+Vo+C2lI/qF+M/SIi0k0MaZqzeT+sQ4UK7W5C4pK14qxIcEnmjmet0un5tNq1wsFp1W23SNtmEbZseoGyXXtc47bq4/axYHFJsxHRMZSyrsen5+JogjjwENINEWcYqnwNQfEFuII8Wnt+JgxJTBXSwVvGy7RqnTcNpNt9Vxm03bcMqWOPydVqPsOE1VuY55n/aT+phDsq/exT31vgVMZgSkxMs5Z2LQGRclmaNFykOzsEAFCqm4BBKpw55ll0s6I9EsBElYj+IgDaEwm86yAuls/W9pCLPMShiexQlHYXYKv03y8FteD+ETEOnAZEYNED2FI5eRnafzJW376KWVw9fTgMjDJorLE4LXTPY/fc6MHJbtwGzzwszMuW+3/BLiCID+Az/9sDTbeMGC7ETPL1hxZwhVqeXtnaPCvJAuFmnWUEcqZiLgdVM3HH0IOBWy934XvwHVtxD6STfOlvVB5K19n1/Kp3TIEYdIjJ+SLU94bgyByeeGL47P6tS3zF5IUTcOK37M1gzFq0Qy/vHhgj0s/YR5IP6WcRJ8tusI1k4ckad4Y3BCJ3Il75f3b2YDxwKWCEGMk13wYwDHgu8bt0XecuFimkYph++/KFLpqirCOE4p91tqZthV34wnf5+B9+n0BSZT+M2VvWLfXtlPV72h0MEIqVtf8t/OGsnGBYPYxUjGpaquxOtTBKeTHbXfEDwu+FbxJ8Hfz6T2xfzVslPTw/NQ+xc=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkchTggNRAUJCJ3JtHRo0+llXlaucwCziRNih8v++rUDoUBpt10JCfnk+DvfufizzzlOYtvrcg65oCnTAr+t/9V4ts6IGyGDOGAZTr1uG88tlxjucwvZCMjZ2LF0LeC8gIBxgZlo6zay6oaF5O/OQl7D8hCq2XX7j67dQ84ltHSpIV1bJTHjXhm2rRc581LMKfcYToB7gnhhd3jlSU8PV5z0zvmGZRkw70yFyDzTJLUICMQxqZE0Mc/NA5/ziHshnTAsihy2MSPe1rd7l8tlbVmvpfnEtBFCJmqZ0ifidPJV73ypNkMUsHG6WfcxSxklOKb/YEVqCGKaRlo3nqQ5FdPkDWjLtJCCNmBFDGI57KtuvgQo2X0Q6YBkzrHBp9iqwG5hDDkwAtrv26Ctf/1YBzd773LM+DjNE360/hwlYAuI0wwig1eZVew+jniiXJ1zIF7ASFxwuoBrNSYZJsC1UQ5jurqiXA5fxLWy/dqKVxMG5DMtOTf3eUra5onK+HQCXPyffu33aoNyj+MCOiP8M7LXrSWpB8PvEYPRzXTmfxv4Q2fQLinsO29I7Vq9XR8P6m6utpuuZ/Pu5ShcjeZMNCZh9FQkqEezcPY7/PmA72karsS3bHHtxnUyHNwu++6K4vWtM7+KnRTj75c/548Ps6uUXIY3X0gwohfTu4dx2POb9jQ9ozh24yd8R6fWCm5+sMfeLFgX167bm89bT/3u75ve92Zv2IvWfO1wP+OJiK9/uOLyYfblaQj+6L7x68+fyyf7201hE6f9ktN+DofGSg7C4nkGRFRLNRqBr13IfmHxvrQoC42McenqZUqfuAAm9I7apWTFK6T40MiTzdysB80zq2836/W6jwZWCw2Qg6wL1EWNVss+u2hV+rNhcUSxn7IxVbGUwm7m532CJPE4sAhyY5EWZApcfwfRxwJrAbuVByNlHO5SqeDNrtPoWz3U7TYueqhpNf2m6w/O+i3XQr0G8nXtOhW/2K+8OxaQH6p3/UC9b4HQjIKSeDXnXA46F7Ikc7woRGzVFrjGoJCXQK502LOdZsPkNMliUITNJI2KGGrZNCsLZPLNv21gwksr5SRLc4Hj8hS+meTxt6oe0ieiyoGrjHogewqvLiP126bzKm3n5KVVwXeLiKrDJosrcko2TA4/vcyMGpbdwOzyItyquO+2fBLiBID5Dj/zuDS7eNGC7kWvLlh5Z0hV6VTtnePavFYsFkXZUFcpZi7hTctErhkCKaTsre/Sv4GZOwjzQzfOjvVR5J39kF8hpiwUWEAix08rlx94boTA1XMjkMdn9dG3zEFIWTcBK3HK1o/lq0QxfvfhQjyi/KR5JP+WaR69tOsE1l4cmad8YwjKJmql7pf1G7NBUglLpSCm+T74KYBTwQ+NuyLvuAg5Tc+FgLe/aErp2jomJC2YCJSiSMO++pY8xToD78XpFUyp8Nsre8XfvLIfh1eh1MEE6ztf+t/OBi3HhYDcxWnJpa2v5OtTBmeTPbXfEjwt+Hb9PcE/zKTzyvzaslfT4/PQ+Rc=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065053</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065055</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833336E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C283337EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28333D1E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_FUNC_CLG_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="4de142fa-7e94-48a1-9f53-08163d3558cd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833437E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C28334DDE190E0401F0A059926F9:669A79A0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833425E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833425E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833425E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833437E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C283347FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833437E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C283347FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eU3iiUDjDDTa0XdAN61JczMV1AsE1rk3Lx1++kWAREjp4ZZkpWV771rUu/pM5QFFpeizFIOYmp4ncb6r8AFlQqqKqZNnK0cmBY2rNbdjTXFn8N/Fx9dl1V8RnLwKeMI8obqmWYtmYa4jcyDc8xPcMqmXblSVXuIWUCWriUDFVZRiFlXh62oWYp9WLECPMoioB5HHvD1vWVJzw9VHBSm/U1yzxg2pxynni6jksBYAhDXMJxpNf1HZ96wLwhmVDEsxTeYwasob7vXSwWpYVditOJbhmGoRs1XfgEjExO1OavYjMEPh3H63UH0ZgSjELyhiSpa+DTOFBa4SROCZ9GX0CbumlIaA2WWMNmmZ6o+keAnN03kXZIpgxpbIrMAmwAY0iBYlDuBn5DPfleB9d7RymibBynEdtb/4wS0DmEcQKBxorMCnbfRzxQrmYdsOdTHGaMzKEvxyRBGJhym8KYLK8IE8MXMCVvv7JkxYQB/klL6vo2T0FbP1CZLpkA4/+nX9u9WqPcozCD5hweH8+SNzM6XYXMvW7/qc7u7pPRZNF/aeQUtp3XpDatfl/vD+pmrt43vTyVI7OGXgOz25mNLl9XTrszd1/sPntbWdTHdnoxG4N96UQvyfx83L8LWwPC/Jl79o/VHk0uelfpg9njySoejH6RuTv+PbLx7eDPqbO8w63L6/7iWg8unm/imn42aZObh+Utd58ez6/eBlH/sb88b3F72L5sV3tXt37NKePzyuri3IqGv8hCnw0mTujc/16as8qgcjlpfOS0ncOusZCDYfY8A8yLpRwNv6ucin4hflxapIUE2jh39RKpT4wD5WpT7pKy4mVCfEjgiWau1z23YnYs17bLdrVn1oyeUTbMU6NlOLWaVTmtFfqzZrFHsRPTMZGxpMKu5+c4QRx5DGgAqTaPMzwFph5B7CKOFJ8OxIcRUwajWCh4u1rr1eyK656Wqy3TqVW6dqdndzotxyg7dleodz/mN/QmbY05pLvqbe+o9wAwSQhIiZdzzsSgMy5K8ormGQ/N0hyVKGTiEEilDntW2XV0RqIkBElYj+IgC6GUTJO8QDpbPy0NYZZbCcNJnHIU5l/hl0nuvyvqIXwCIh2YzKgNoqfw6TASvyKdr9OubKddwLeygMiPTRSXpwSvmey++pgZOSybgdnkhZlZcN9s+SHEAQD9CD99vzSbeMGcbEUvDlhxZghVaRbtfUWl11I2n2d5Q6tSMVMBr5u6UdWHgDMhe6tR/AJU30Do3zpxNqz3Im/su/wyPqVDjjhEYvyUfPmN68YQmLxu+OLzWX73LrMTUtSNw5IfsnVCcSuRjI9eXLCHpZ8w34rHIk6Dj3YdwNqKI/IUdwxO6ESu5Pmy+mI2cCxgiRDEON0GPwRwKPiucVPkDRcupuk54/D1G0UqXUNFGMcZ5X5XzQ3b6pvz5KsEvA+nTzC5wr8f2Uv25ZH9cH01FDoYIXXjS/7bWSP5uGAQuxjJuTTUpbh9iuB0sqX27wQPC77lHBP83Uyan8yfLVs13f8emn8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eU3iiUDjDDTa0XdAN61JczMV1AsE1rk3Lx1++kWAREjp4ZZkpWV771rUu/pM5QFFpeizFIOYmp4ncb6r8AFlQqqKqZNnK0cmBY2rNbdjTXFn8N/Fx9dl1V8RnLwKeMI8obqmWYtmYa4jcyDc8xPcMqmXblSVXuIWUCWriUDFVZRiFlXh62oWYp9WLECPMoioB5HHvD1vWVJzw9VHBSm/U1yzxg2pxynni6jksBYAhDXMJxpNf1HZ96wLwhmVDEsxTeYwasob7vXSwWpYVditOJbhmGoRs1XfgEjExO1OavYjMEPh3H63UH0ZgSjELyhiSpa+DTOFBa4SROCZ9GX0CbumlIaA2WWMNmmZ6o+keAnN03kXZIpgxpbIrMAmwAY0iBYlDuBn5DPfleB9d7RymibBynEdtb/4wS0DmEcQKBxorMCnbfRzxQrmYdsOdTHGaMzKEvxyRBGJhym8KYLK8IE8MXMCVvv7JkxYQB/klL6vo2T0FbP1CZLpkA4/+nX9u9WqPcozCD5hweH8+SNzM6XYXMvW7/qc7u7pPRZNF/aeQUtp3XpDatfl/vD+pmrt43vTyVI7OGXgOz25mNLl9XTrszd1/sPntbWdTHdnoxG4N96UQvyfx83L8LWwPC/Jl79o/VHk0uelfpg9njySoejH6RuTv+PbLx7eDPqbO8w63L6/7iWg8unm/imn42aZObh+Utd58ez6/eBlH/sb88b3F72L5sV3tXt37NKePzyuri3IqGv8hCnw0mTujc/16as8qgcjlpfOS0ncOusZCDYfY8A8yLpRwNv6ucin4hflxapIUE2jh39RKpT4wD5WpT7pKy4mVCfEjgiWau1z23YnYs17bLdrVn1oyeUTbMU6NlOLWaVTmtFfqzZrFHsRPTMZGxpMKu5+c4QRx5DGgAqTaPMzwFph5B7CKOFJ8OxIcRUwajWCh4u1rr1eyK656Wqy3TqVW6dqdndzotxyg7dleodz/mN/QmbY05pLvqbe+o9wAwSQhIiZdzzsSgMy5K8ormGQ/N0hyVKGTiEEilDntW2XV0RqIkBElYj+IgC6GUTJO8QDpbPy0NYZZbCcNJnHIU5l/hl0nuvyvqIXwCIh2YzKgNoqfw6TASvyKdr9OubKddwLeygMiPTRSXpwSvmey++pgZOSybgdnkhZlZcN9s+SHEAQD9CD99vzSbeMGcbEUvDlhxZghVaRbtfUWl11I2n2d5Q6tSMVMBr5u6UdWHgDMhe6tR/AJU30Do3zpxNqz3Im/su/wyPqVDjjhEYvyUfPmN68YQmLxu+OLzWX73LrMTUtSNw5IfsnVCcSuRjI9eXLCHpZ8w34rHIk6Dj3YdwNqKI/IUdwxO6ESu5Pmy+mI2cCxgiRDEON0GPwRwKPiucVPkDRcupuk54/D1G0UqXUNFGMcZ5X5XzQ3b6pvz5KsEvA+nTzC5wr8f2Uv25ZH9cH01FDoYIXXjS/7bWSP5uGAQuxjJuTTUpbh9iuB0sqX27wQPC77lHBP83Uyan8yfLVs13f8emn8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuI6EH2fr3B5no1XFrsCVSxmxglkg0wmebkl5AaUMTKRZHDm669kMAFCcpNbRRWlduv06UVHOuNokThBm3NggqRUi3pN/R/bhgZ2Hc/w62AZnl13DTR1YsO3wfXienUyQbauRZxnEFEuEBVN3bFs17At+RvbVlC1A6tasf3ao679AsYltHSpWLqWLxLKgyJsU88YDVLECQ8oWgAPBA5G7eEgkJ4BKjnprbMNyyIga82FWAamiSsxYEgSXMHpwjwzD3zOYh6MyIwikTHYxox5U9/uXa/XlbVbSdnMdCzLMi3flD4xJ7PveutbuRniiE7TzbqLaEoJRgn5ixSpIYh5GmvtZJYyIuaLd6Bt07YUtAE5NrDt0e+6+RqgYPdJpAOSjCODz2UTtmC3MAUGFIN2dxs19e+f6+Bm75ghyqcpW/Cj9dcoAV1Bki4hNniZWcnu84gnytU6AxxEFCcZJyu4VGOyRBi4ds1gSvIB4XL4Yq4V7ddyXk4Y4K+05Mzc5ylpmycq0yMz4OL/9Gu/VxuUXyjJoDUcNa6qP37lL+zuaZLd/EzuYDCoPfL5KGoWFPadN6R2rd6ujwd1N1fbTeH9nPnr2VMSJ731xaDz6I39+z8/zZva3W07j1hyP0oxmZjZmNKb67w3tX6v42j6cD0cPLuNl/bNX+7NHiZPM56Pv7k/urVrb/AYdu/j9Op8ePmTPCf2HWrfTIbrH9VO1ug5onq+frwaz8L7Tj0+rwKvXi3z9XX1ofEUThrIH/b/nF9eEPZt2Xth88vh0O08A1zEA9qzmq857edwaCzlYJRNngCLcqlGI+ppfdkvJD6WFmUhsTEtXIOl0icugAq9pXYpWQkyKT4kDmQzN+uwUbO7TsN1vXo/tH0rtDzL7lttq+r7Tq3vl/qzYXFEsZvSKVGxlMJu5udjgngRcKAxMGOVZngOXP8AsYcE0iJ6Kw9GSjmMU6XgvlOvdayw3QnDbr8Repbn9p1uaNfqVuhbrq5dpuKKXrH2VAA7VG/3QL1vAZMlASXxas65HHQuZEme0SoTiV1ZoQqFTF4CTOlw4HiNqsnJYpmAImwu0jhLoLKcL4sCmXzz7xgI88JKOF6mTKCkOIXvJnn8rayH9ImJcuAqow7InsKby0j+ynTepO2dvLRK+HYWE3XYZHEFI3jD5PDT68yoYdkNzC4vzO2S+27LFyFOAJgf8DOPS7OLF6/IXvTygpV3hlSVVtneZ1R5rmSrVVY0tK4Uk0l40zatujkCnEnZexmnf4CaOwjzUzfOjvVR5J39kF8m5nQkkICFHD+tWH7iuTECrp4bkTw++WffMgchZd0E5OKUrZvIV4li/OHDBQdY+Unztfxbpyx+bdcJrL04Mk/5xhCEztRK3S8v78wGTiUskYKYsn3wUwCngh8ad0XecRFymiaZgPe/aErpmjrCOM2oiHp6YdhX34KneFlC8Or0BqZQ+O2VnfN3r+zfw8FI6uAC6Ttf8t/OBinGBYPcxUnBpann8vUpg9PZntpvCZ4WfKf6keAfZtJ6Y35r2avp8Xlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06511</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833438E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2833480E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="0fdacc19-deeb-4672-8ba0-6f04fa9cd827"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="c8d70d7c-e4e3-4372-8a03-222427f07689"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C28334F9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C28335C6E190E0401F0A059926F9:B280CA4E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C28334E7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C28334E7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C28334E7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C28334F9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2833541E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C283357BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C28334F9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2833541E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C283357BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx6uQOAECUUGiQG6z229adNuXlXEGME1siB1K++vXDg0FSrvtSkjIk/GZMx8+9onAaeIGHSEgk5QzI+q1zH/qfrPmIXdsIYKRVW02RtYI1euW0xjVUH08dkeATCMSIoeICYmZbJmugzwLOep3h5yghgLHr6B689E0hpAJBa1cKo5prNKEiaAI2zLzjAUcCyoChlMQgSTBoHNxHijPAJeczPbJmmURMGtPpZwHtk0qMRBIElIhPLVP7B2fk1gEAzphWOYZvMWMRct82/v8/Fx59io8m9iu4zi207SVTyzo5NhsH5WbIY7YmK/XXcw4owQn9BVrUhcgpzw2OsmEZ1RO00+gkY0cDW3BilgEVdmxab8HKNh9E2mHZCawJaYYlWC3MIYMGAHj/jZqmcff6+B6712GmRjzLBV7659RAraEhM8htkSZWcnu+4gHytU+ARJEjCS5oEu41GMyxwSEcZ3BmK7OqVDDFwujaL+xEuWEAflJS07sbZ6Ktn2gMj06ASH/T7+2e7VGGeIkhzYnnhgu+/lvjgddB+pisKJiltDz5kWroLDtvCa1afXben9QN3P1tmk+C/0XGOAQX09ZAy0mp8MXZ/Q0H8+maTJ14SZ1WO9a1HNUfXqKZn56T+nli+z5fq86E33vMZxFE7s/Gnvh7dGiURv69OKP8+sa15rpEmrk5owm5Amd8clgmd+EvYfOw4BUY/d+5c26v+LrKxJFXvjI89WrN3yIGGLRU0oWfy+Ppvbpa5wMJ9nZ77/6MPPJ0Gm957Sdw66xlINBPpoBkeVSj0bUM0LVLyy/lhZtobE1LlyDudYnIYFJs613aVkJciU+NA5UM9frfqOOum7D86phs4+aTt+pOih0Ok6t2XTrYbPUnzWLPYpdzsZUx9IKu56frwmSNBDAYsisJc/JFIT5BWIPS2xE7FYdDM4E3HGl4CHqnIZ+6Hdr3X6nX3P6tb5b67pu6FVd5KGmaVxyecWuss5YQrar3t6Oet8CoXMKWuL1nAs16EKqkizwMpcJqixxhUGuLoFM63DgVhs1W9B0noAmbKc8zhOozKfzokC2WP+7FiaisFJB5jyTOClO4adJ7n8r66F8YqodhM7oFFRP4cNlpH5lOp+nXd9Ou4Tv5DHVh00VV2aUrJnsfnqfGT0sm4HZ5EUEKrlvtvwQ4gCA/QU/e780m3jxkm5FLy9YdWcoVWmX7V3gyqKSL5d50VBfK2am4G1kO749AJIr2Xu540/A7A2E/a0bZ8N6L/LGvssvl1M2kFhCqsbPKJbfeG4MQOjnRqSOz+q7b5mdkKpuElbykK2bqFeJZvzlw4UERPsp87X6e+ZZ/N6uA1hbcVSe6o0hKZvolb5fXj6ZDcIVLFWCyLNt8EMAh4LvGjdF3nCRappGuYTPvxha6VomJoTnTEY9szBsq2/BU77MIXh3+gBTKPzblb0Sn17Zfy7OB0oHU2xufOl/O1u0GBcCapegBZeWuVKvTxWcTbbU/o3gYcHv+18J/m4m7Q/mj5atmu6fh/a/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx6uQOAECUUGiQG6z229adNuXlXEGME1siB1K++vXDg0FSrvtSkjIk/GZMx8+9onAaeIGHSEgk5QzI+q1zH/qfrPmIXdsIYKRVW02RtYI1euW0xjVUH08dkeATCMSIoeICYmZbJmugzwLOep3h5yghgLHr6B689E0hpAJBa1cKo5prNKEiaAI2zLzjAUcCyoChlMQgSTBoHNxHijPAJeczPbJmmURMGtPpZwHtk0qMRBIElIhPLVP7B2fk1gEAzphWOYZvMWMRct82/v8/Fx59io8m9iu4zi207SVTyzo5NhsH5WbIY7YmK/XXcw4owQn9BVrUhcgpzw2OsmEZ1RO00+gkY0cDW3BilgEVdmxab8HKNh9E2mHZCawJaYYlWC3MIYMGAHj/jZqmcff6+B6712GmRjzLBV7659RAraEhM8htkSZWcnu+4gHytU+ARJEjCS5oEu41GMyxwSEcZ3BmK7OqVDDFwujaL+xEuWEAflJS07sbZ6Ktn2gMj06ASH/T7+2e7VGGeIkhzYnnhgu+/lvjgddB+pisKJiltDz5kWroLDtvCa1afXben9QN3P1tmk+C/0XGOAQX09ZAy0mp8MXZ/Q0H8+maTJ14SZ1WO9a1HNUfXqKZn56T+nli+z5fq86E33vMZxFE7s/Gnvh7dGiURv69OKP8+sa15rpEmrk5owm5Amd8clgmd+EvYfOw4BUY/d+5c26v+LrKxJFXvjI89WrN3yIGGLRU0oWfy+Ppvbpa5wMJ9nZ77/6MPPJ0Gm957Sdw66xlINBPpoBkeVSj0bUM0LVLyy/lhZtobE1LlyDudYnIYFJs613aVkJciU+NA5UM9frfqOOum7D86phs4+aTt+pOih0Ok6t2XTrYbPUnzWLPYpdzsZUx9IKu56frwmSNBDAYsisJc/JFIT5BWIPS2xE7FYdDM4E3HGl4CHqnIZ+6Hdr3X6nX3P6tb5b67pu6FVd5KGmaVxyecWuss5YQrar3t6Oet8CoXMKWuL1nAs16EKqkizwMpcJqixxhUGuLoFM63DgVhs1W9B0noAmbKc8zhOozKfzokC2WP+7FiaisFJB5jyTOClO4adJ7n8r66F8YqodhM7oFFRP4cNlpH5lOp+nXd9Ou4Tv5DHVh00VV2aUrJnsfnqfGT0sm4HZ5EUEKrlvtvwQ4gCA/QU/e780m3jxkm5FLy9YdWcoVWmX7V3gyqKSL5d50VBfK2am4G1kO749AJIr2Xu540/A7A2E/a0bZ8N6L/LGvssvl1M2kFhCqsbPKJbfeG4MQOjnRqSOz+q7b5mdkKpuElbykK2bqFeJZvzlw4UERPsp87X6e+ZZ/N6uA1hbcVSe6o0hKZvolb5fXj6ZDcIVLFWCyLNt8EMAh4LvGjdF3nCRappGuYTPvxha6VomJoTnTEY9szBsq2/BU77MIXh3+gBTKPzblb0Sn17Zfy7OB0oHU2xufOl/O1u0GBcCapegBZeWuVKvTxWcTbbU/o3gYcHv+18J/m4m7Q/mj5atmu6fh/a/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0Tp41HIDQJEBYlyOZOe0gv0dGhfRq69IW4TO8QOhfP14wRCgdJOOxIS8s722mtfvOwzgeLI8TtCQCopZ1rQa+n/PIFNHK9KjGoVPKM69eoGIp5n2FMbO9MqNAERXQuEyCBgQiImW7pj2a5hW+p3Z1t+zfatZsVq2o+6dg+pUNDKpWLp2jKOmPCLsC09S5nPkaDCZygG4UvsjzvDS195+qjkpLfP1iyLgGk7lDLxTRNXCGCIIlzBPDbPzD2fMyL8MZ0xJLMUNjGJaOmbva+vr5VXt8LTmelYlmVaTVP5EEFnp3r7pNwMJGBTvl53EeOMYhTRPygnNQQZcqJ1ohlPqQzjD6Bt07ZyaAOW2MB2lZ3q5luAgt0XkfZIpgIZIkR2CTaCKaTAMGi/R0FLP/1aB9d771LExJSnsThYf48SsAVEPAFiiDKzkt3XEY+Uq30G2A8YjjJBF3CVj0mCMAjtJoUpXV5SoYaPCK1ov7YU5YQB/k5Lzsxdnoq2eaQyPToDIf9Pv3Z7tUa5R1EG7dnlLc4ueDiy+POEOo41fwhXPy9c8RO3Cgq7zmtS21Zv1oeDup2rzabze4S6V8l90o/nz71kYD9eLR6sVcP5serf3k4WAfCH+M9Kzs1JncyDO9cj5Jd8QV1q42bM1KTNbrMXMmWPJD1ZoQdPDN3+i3fdl8PxzdCshWHUuL8n2VI8/x1MfsUvlmg28ENwHl7ADzy8uYyfwov5cBo89q4lmgtXTh5Xd9ejv05qk5s4zhov/OfqeXF9u2z+5q23nHZz2DeWcjDOnp4By3KZj0bQ0waqX0h+Li25hRJjWrj6Sa5PQgKTejvflcuKnynxocRXzVyv+w3P7joN161V7b7dtPpW1bIHVseqNZuON2iW+rNmcUCxy9mU5rFyhV3Pz+cEcewLYARSY8EzHILQP0HsIYm0gI3UweBMwB1XCt5v9Dr1waDX6bp1r9N3B+d2t+42rXrX7TpebaBrV1xes+u0M5WQ7qu3u6feI8A0oZBLfD7nQg26kKokc7TIZGRXFqjCIFOXQJrrsO9UGzVT0DiJICdsxpxkEVSSMCkKZIr1v2MgLAorFTjhqURRcQo/TPLwW1kP5UNo7iDyjM5B9RTeXUbqV6bzcdrebtolfCcjND9sqrgypXjNZP/T28zkw7IdmG1eWNgl9+2Wb0IcATA/4WcelmYbjyzoTvTyglV3hlKVdtneOarMK9likRUNreeKmSp40zatujkGnCnZW93xF2DmFsL80o2zZX0QeWvf55fJkI0lkhCr8dOK5ReeG2MQ+XMjUMdn+dW3zF5IVTcJS3nM1o3UqyRn/OnDBfs491PmG/X3ytO3xI9h7cRReao3hqRslq/y+2X1wWxgrmCpEkSe7oIfAzgWfN+4LfKWi1TT9JRJ+PiLlitdS0cY84zJoKcXhl31LXjKVQL+m9M7mELhN1f2Unx4ZU+Gl2OlgzHSt770v50NWowLBrVL0IJLS1+q16cKzmY7ar8heFTwq/36Z4K/n0n7nfm9Zaemh+eh/S8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6LT/eiUpBfoZYQZtoBWQd2g6PHlTEhTiJa0Nimgv34nxSIgetxnhhkmqyvf+tYlX3LM0TyxgjbnJBc0ZVrYaer/TvzI8RzYMCIEHcPxzciYELthuB5y4tizsY1dXQs5L0jIuEBMNHULmrZhQvm7MWFQNwPTqkEbPujamORcQkuXGtS11TxhPCjDNvUiZ0GKOOUBQ3PCA4GDUXvQD6RngCpOeut4zbIMmLdmQmQBALgWEUySBNdwOgfHYMfnOOLBiE4ZEkVO3mJGvKm/7V0ul7WlXUvzKbAghAD6QPpEnE5/6q0f1WYShSxO1+sTxFJGMUroK1KkBkTM0khrJ9M0p2I2/wTaBCZU0AZZYQObDvupg/cAJbtvIu2QzDky+AyZFdiQxCQnDBPtdhg29Z/f6+B6702OGI/TfM731n9HibAFSdKMRAavMqvYfR/xQLlaxwQHIcNJwemCXKoxyRAmXLvOSUxXfcrl8EVcK9uvrXg1YQT/TUuOwTZPSRscqEyHTgkX/6df271ao4xRUpDW6R1wVoPB6vWMi949Hbazs7h+EZH0ftosKWw7r0ltWv223h/UzVy9bbo5fzgfrvL83HRp9x//Vw+iJ+q9Pve9q8FL1u4+iYfJxJqdJY+PKLwm5ulFPhq7nju2RP/h+dVZ3vEuPxL2+GV0/sM6rz/O2jPOR9md597OQxD27m5NszP4fXTU4M/x6/Dy6ALhy8ZFnz/FwoyeoslFv3B7oxffHv9e2ncXRxMBfAA7P2xnmQ/r2QONT3+PIefLk6fme07bOewaKzkYFZNHgkW1VKMRdrSe7BcSX0uLstDIiEvXIFP6xAVhQm+pXUpWgkKKD40C2cz1uus1zBPLs+26+6tr+rALHWj2YBvWfd9q9PxKf9Ys9iiepCymKpZS2PX8fE0QzwNOWERyY5EWeEa4/gViBwmkhWwoD0bKOLlJpYKfuLbZ9T0P1i2z59fbdehBt+43ek7DMu2erWuXqbhiV3k7FiTfVW97R72HBNOMEiXxas65HHQuZEme0aIQiVlboBojhbwEcqXDgeV4dcDpPEuIIgzmaVQkpJbNsrJAgK//LQNhXlopx1maC5SUp/DTJPe/VfWQPhFVDlxl9IvInpIDlxGs0vmQtnPw0qrg20VE1WGTxRU5xWsmu5/eZ0YNy2ZgNnlhblbcN1v+EuIAAPiCH9gvzSZetKBb0asLVt4ZUlVaVXufUe25ViwWRdlQVylmLuGBCaALRgQXUvZebtInwsAGAnzrxtmw3ou8se/yK8SMjQQSZC7HTyuX33hujAhXz41QHp/Vd98yOyFl3QRZiUO2k0S+ShTjLx8uOMDKT5qv5d8yzaP3dh3A2ooj85RvDEHZVK3U/fLyyWzgVMJSKYhpvg1+COBQ8F3jpsgbLkJO06QQ5PMvmlK6po4wTgsmwo5eGrbVt+QpXjISvDt9gCkV/u3KXvFPr+z7QX8kdXCO9I0v/W9ng5bjgoncxWnJpamv5OtTBmfTLbV/I3hQ8J2u+5Xg72bS+mD+aNmq6f55aP0B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06516</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06518</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C28334FAE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2833542E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C283357CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="ebabe9aa-2364-4e2c-b889-3f99da946eff"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB544BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB551BA1FAE0401F0A059945B1:85D86B26"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7C732908341E0401F0A059945A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7C732908341E0401F0A059945A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7C732908341E0401F0A059945A1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB544BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5495A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB54D0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB544BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5495A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB54D0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb/I4FH3vr4jSxypkZYsAKSXlm7R0A9ppeRm5jgG3wQbbYemvHzs0YSnttCMhId9cn3vu4mM3OJgmjh9wjpjAlGhR2NT/GSEQwzq0DKcMbMN7eUEGcJ2RUY096JUt4Hkvrq5FnKcoIlwAIpq6Y9muYVvyN7Atv2z7dqXklZ2hrj0ixiW0dClZuraaJoT7WdimnjLiU8Ax9wmYIu4L6PeD664vPX2Qc9JbjQ3LLCBrTYSY+aYJSzGCKElgCdKp2TD3fBox9/t4TIBIGfqIGfOm/rF3uVyWlm6JsrHpWJZlWnVT+sQcj0/11km+GcURGdHNug0IJRiCBL8DReoaiQmNtSAZU4bFZPoFtG3aloI20Aoa0PbIqW5uA2Tsfoi0R5JxYPAJsHOwHhohhghE2kMvauqnP+vgZu+AAcJHlE35wfp3lBBZoITOUGzwPLOc3c8Rj5Sr1UDQjwhMUo4X6EaNyQxAxLU7hkZ41cVcDl/Mtaz92ornE4bgb1rSMHd5StrmkcqEeIy4+D/92u3VBuURJClq1e+DmsfW6z/s7+vFFXgazi33+SFlN+P7ZkZh13lDqmj1x/pwUIu5+tg0r3gPdtzjHXsdz5ynaFKpPF/dX8Q3j6vbTj+KBKktV93XHr99P5ubiRc6ZxEbMnIZpUP+1imvhudP15bdYX+84Qnj/apI/5qPKL8J2+KS3vYrZ+tJp2d2ifXgTukg6FdW1eXzfbdTe7DPupzbg85IzkY8f7vqvV0NwM3j5Vs0fx/enTyS9PE5Hb46AsyinnXFn5+b25x2c9g35nLQT19eERT5Uo1GFGod2S8gvpcWZcGxMcpc/ZnSJy4QEXpL7VKy4qdSfHDsy2Zu1he1it2uts/Lnnce2J3gwvJkUazAKtfrXvnczvVnw+KAYpuSEVaxlMJu5ud7gnDqc0RixIwFTeEEcf0bxBAIoEWkJw8GJRwNqFTwduC4QVi3KxXrwq2FVidsB25YL7uhU7fDekXXbqi4JbcsGAnE9tXb3VPvHoJ4hpGSeDXnXA46F7Ikc7BIRWKXFqBEUCovAaZ02He8WtnkeDpLkCJsTmmcJqg0m8yyApl88+8YAPLMijmcUSZAkp3CL5M8/JbXQ/rEWDlwldE5kj1FRy4jK0/n67Qru2nn8EEaY3XYZHEFw3DDZP/TdmbUsBQDU+QFeTEcxZZfQhwBML/hZx6WpogXL/BO9PyClXeGVJVW3t45KM1L6WKRZg2tKsVkEt60Tatq9hFMpeytB/QNEbOAMH904xSsDyIX9n1+qZiQvgACTeX4adnyB8+NPuLquRHJ47P66VtmL6Ssm0ArcczWTuSrRDH+9uECfaj8pPlO/i0pi7ftOoK1E0fmKd8YApOxWqn7Zf3FbEAqYbEURMp2wY8BHAu+byyKXHARcppeUoG+/qIppWvqAEKaEhGFembYVd+Mp1jPkL91+gSTKfzHlb3iX17ZT9fdvtTBKdALX/zfzgbOxgUiuYvjjEtTX8nXpwxOxjtq/0HwiOBXXadu1VzP3hf8YHsk9zJpfTJ/tuzU9PA8tP4F</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I4FH3vr4jSxypkZYsAKSXlm7R0A9ppeRm5jgG3wQbbYemvHzs0YSnttCMhId9cn3vu4mM3OJgmjh9wjpjAlGhR2NT/GSEQwzq0DKcMbMN7eUEGcJ2RUY096JUt4Hkvrq5FnKcoIlwAIpq6Y9muYVvyN7Atv2z7dqXklZ2hrj0ixiW0dClZuraaJoT7WdimnjLiU8Ax9wmYIu4L6PeD664vPX2Qc9JbjQ3LLCBrTYSY+aYJSzGCKElgCdKp2TD3fBox9/t4TIBIGfqIGfOm/rF3uVyWlm6JsrHpWJZlWnVT+sQcj0/11km+GcURGdHNug0IJRiCBL8DReoaiQmNtSAZU4bFZPoFtG3aloI20Aoa0PbIqW5uA2Tsfoi0R5JxYPAJsHOwHhohhghE2kMvauqnP+vgZu+AAcJHlE35wfp3lBBZoITOUGzwPLOc3c8Rj5Sr1UDQjwhMUo4X6EaNyQxAxLU7hkZ41cVcDl/Mtaz92ornE4bgb1rSMHd5StrmkcqEeIy4+D/92u3VBuURJClq1e+DmsfW6z/s7+vFFXgazi33+SFlN+P7ZkZh13lDqmj1x/pwUIu5+tg0r3gPdtzjHXsdz5ynaFKpPF/dX8Q3j6vbTj+KBKktV93XHr99P5ubiRc6ZxEbMnIZpUP+1imvhudP15bdYX+84Qnj/apI/5qPKL8J2+KS3vYrZ+tJp2d2ifXgTukg6FdW1eXzfbdTe7DPupzbg85IzkY8f7vqvV0NwM3j5Vs0fx/enTyS9PE5Hb46AsyinnXFn5+b25x2c9g35nLQT19eERT5Uo1GFGod2S8gvpcWZcGxMcpc/ZnSJy4QEXpL7VKy4qdSfHDsy2Zu1he1it2uts/Lnnce2J3gwvJkUazAKtfrXvnczvVnw+KAYpuSEVaxlMJu5ud7gnDqc0RixIwFTeEEcf0bxBAIoEWkJw8GJRwNqFTwduC4QVi3KxXrwq2FVidsB25YL7uhU7fDekXXbqi4JbcsGAnE9tXb3VPvHoJ4hpGSeDXnXA46F7Ikc7BIRWKXFqBEUCovAaZ02He8WtnkeDpLkCJsTmmcJqg0m8yyApl88+8YAPLMijmcUSZAkp3CL5M8/JbXQ/rEWDlwldE5kj1FRy4jK0/n67Qru2nn8EEaY3XYZHEFw3DDZP/TdmbUsBQDU+QFeTEcxZZfQhwBML/hZx6WpogXL/BO9PyClXeGVJVW3t45KM1L6WKRZg2tKsVkEt60Tatq9hFMpeytB/QNEbOAMH904xSsDyIX9n1+qZiQvgACTeX4adnyB8+NPuLquRHJ47P66VtmL6Ssm0ArcczWTuSrRDH+9uECfaj8pPlO/i0pi7ftOoK1E0fmKd8YApOxWqn7Zf3FbEAqYbEURMp2wY8BHAu+byyKXHARcppeUoG+/qIppWvqAEKaEhGFembYVd+Mp1jPkL91+gSTKfzHlb3iX17ZT9fdvtTBKdALX/zfzgbOxgUiuYvjjEtTX8nXpwxOxjtq/0HwiOBXXadu1VzP3hf8YHsk9zJpfTJ/tuzU9PA8tP4F</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6fgJBASooLEeGnTlhYI29365co4DngNdogdCv31s0OTAqO93ZWQkE+On/OcFz/2BYerxPa7nONMEEa1oN/W/206bjyfN+dGNEeR0ajbTcObu5HRdBoOwnDutlqergWc5zigXEAq2rptWnXDMuVvZpm+Y/mWV3Pr7oOufccZl9DSpWbq2naVUO4XYdt6nlGfQU64T+EKc18gP+yObn3p6cOSk9652LMsAmadpRCpDwCqRRjhJEE1xFbgAhz5XETcD8mCQpFn+CVmxNv6y96np6faU73GsgWwTdMEZgtIn4iTxWe986ncjKOAxmy/7kHKKEEwIc9QkRphsWSR1k0WLCNiuXoD2gKWqaANvEUGshr0sw5eAxTsPoh0RDLj0OBLaJVgUxzjDFOEtW/ToK1//lgH93tnGaQ8ZtmKn6z/jhKmG5ywFEcGLzMr2X0c8Uy5OhcY+QFFSc7JBt+pMUkhwlwbZzgm21vC5fBFXCvar215OWEY/U1LLsAhT0kbnKlMnywwF/+nX4e92qN8h0mOO8+m1wgXI9OeTATLe1fDeP59MO7D5fWgXVA4dN6Tqlr9sj4d1GquXjbBsRtfuuGk/6UORo1JAG/uJlDA0YjFbHSz/FWPe1fO1B1duTejTfL4sO7xMCdxuswBWv+aPcQoneFmPLh3KPvkPGbhDnnT6+ufoc2/rHZzMLm5+eEli58u+HE3g6PtjoJ8+s/VNh4BOoku17vxs+3doWC8fJheXY4nbrCl9/ntLv1Ew1aS3Iy/JU/B+HowpvXZz/ZrToc5HBtLOQjz+S+MRLlUoxH0taHsFxTvS4uykMiIC1c/VfrEBaZC76hdSlb8XIoPiXzZzP164DWtntv76jRaTtcadgdmw7SGZtd0Wq2G89Uq9WfP4oRij9GYqFhKYffz8z5BtPI5phHOjA3L0RJz/R3EvmynFtCpPBiMcjxjUsFd2+sNhvLYd62+43lu12y6w37Lbgzr7qBrD3Ttjol7ep91Y4GzY/WuH6n3FCOSEqwkXs05l4POhSzJGm5ykVi1DaxRnMtLIFM67NsNzwGcrNIEK8JgxaI8wbV0mRYFAnz/bxsQ8cJKOEpZJmBSnMI3kzz9VtZD+kREOXCV0Vcse4rPXEZmmc7baTcP0y7hu3lE1GGTxRUZQXsmx59eZ0YNSzUwVV6IV8NRbflLiDMA4B1+4LQ0VbxoQw6ilxesvDOkqnTK9q5hbV3LN5u8aKirFDOT8MACpgtCjHIpe7sZe8QUVBDgQzdOxfokcmU/5peLJQ0FFHglx08rlh94boSYq+dGII/P9qNvmaOQsm4Cb8U5Wy+RrxLF+N2HC/KR8pPmsfx7Yln02q4zWAdxZJ7yjSEIXaiVul92b8wGYhKWSEFk2SH4OYBzwY+NVZErLkJO0zwX+O0vmlK6tg4RYjkVQV8vDIfqW/AUuxT7r05/wBQK/3Jlb/mbV/aP0W0odXAF9cqX/LezQYpxQVju4qTg0ta38vUpg9PFgdq/EDwj+G7dbplevWEdC3739UgeZdL5w/yn5aCmp+eh8xs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP+4gifgCTHUGxXbpttZW7e72y50YgmYLQUmw2l9/EyxUre3t3hlnnBxOnvOclzzJGUdJXHc9zkkmaMq0wO/o/7RmlgUsGBltZNWNRrsBDQdFTQO0MLCdWctGs5auBZznJGBcICY6eh1Ay4BA/iYQuE3o1mGt3XIedO2eZFxCS5ca0LVNEjPuFmE7ep4xN0WccpehhHBXYHfsXV+50tNFJSe9e7ZjWQTMugshlq5p4lpIMIljXMNpYp6ZBz5nIXfHdM6QyDPyEjPkHf1l79PTU+3JqqXZ3KwDAEzgmNIn5HT+Ve9+KTeTMGBRulv3EUsZxSimz0iRuiZikYaaF8/TjIpF8g40NCFQ0AbZYAPDBvuqm68BCnafRDogmXFk8AWCJdgdiUhGGCba9C7o6F8/18Hd3kmGGI/SLOFH67+jRNiaxOmShAYvMyvZfR7xRLm6ZwS7AcNxzumaDNWYLBEmXBtlJKKbK8rl8IVcK9qvbXg5YQT/TUvOzH2ekrZ5ojI+nRMu/k+/9nu1Q7lHcU66+QCxHho5IRxk40sTWJf+uv0dPFyurjsFhX3nHamq1S/r40Gt5uplU9/2r7a/H1f9B8Lub27hr/56C6PpaCHYrfVnlWzrqwcrWT5eJLObm22jN3x0Hi+cfDQcTQQZrtaDAHsPs83tMptOv/xYXOZilIOmb11a00XYi0jeXg8jy/9Ogji94fb1deRf2BdXMPk5ycLtt/l97+dg+hz8nlpja2zDWxturu5/iNs/X8jGfPbGd9h3wJxOvg2Hqd15zWk/h0NjKQfjfPaHYFEu1WgEvnYu+4XEx9KiLDQ0osLVXSp94oIwoXfVLiUrbi7Fh4aubOZuPbBbsN/u95oNH3jw3BuABoDnwANNx2k0e7DUnx2LI4r9lEVUxVIKu5ufjwnixOWEhSQz1mmOF4TrHyD6SCAtYHfyYKSMk0kqFdzr99t1b+C02n7dtoDjWO3+eQsC3+45QAqDrg1TccNuMi8SJDtUb+tAve8IpktKlMSrOedy0LmQJVmhdS5iWFujGiO5vAQypcNuvWE3TU6TZUwUYTNJwzwmteViWRTI5Lv/uoEwL6yU42WaCRQXp/DdJI+/lfWQPiFVDlxl1COyp+TEZQTLdN6k3Th5aZXwXh5SddhkcUVG8Y7J4afXmVHDUg1MlRfm1XBUW/4S4gSA+QE/87g0VbxwTfeilxesvDOkqnTL9q5QbVXL1+u8aGhbKWYm4U1ogrY5JjiXsredpI+EmRWE+akbp2J9FLmyH/LLxYKNBRIkkeOnFctPPDfGhKvnRiCPz+azb5mDkLJugmzEKVs/lq8SxfjDhwt2sfKT5pH8e0qz8LVdJ7D24sg85RtDUDZXK3W/bN+ZDZxKWCoFMc32wU8BnAp+aKyKXHERcppmuSDvf9GU0nV0hHGaMxH4emHYV9+Cp9guifvq9AamUPiXK3vD372yf11fjaUOJkivfOl/Oxu0GBdM5C5OCy4dfSNfnzI4m++p/QvBE4LftuoOsK0GPBR87/VIHmTSfWN+a9mr6fF56P4L</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065113</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065117</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB544CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5496A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB54D1A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="a352c4ce-3bc5-46ea-80be-feb57e0f58f5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5544A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C893788D529BE0401F0A07996E28:4743272"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5532A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5532A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5532A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5544A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB558CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937842529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5544A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB558CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937842529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6PgBAKUqCAFKNNQPrpNpzudl5VxbsDTxEljB+j8+rVDkwKl3c5KSMg31+ee++FjX3AcR3XH5RwyQROmecOu/k+jHdiAmwujDmbbsOv1hbEI8cJoNc4xNJo27rSIrnmc5+AxLjATXb1uWg3DMuXvzjKdpuXUG7XzjvVT1+4h4xJautRMXdvGEeNOEbar5xlzEswpdxiOgTuCOL47nTjS08ElJ713sWNZBMx6KyFSByFSC4BAFJEaSWJ0gQ58LgLu+HTJsMgzeIkZ8K7+snez2dQ2jVqSLVHdNE1kdpD0CThdnum9L+VmCDwWJrv1ALOEUYIj+hsrUlMQqyTQ3GiZZFSs4negLWSZCtqALTGIZbMzHb0GKNh9EumAZMaxwVfYKsFuIYQMGAHt+63X1c8+18Hd3rsMMx4mWcyP1n9GCdgaoiSFwOBlZiW7zyOeKFfvAojjMRLlnK5hpsYkxQS4dpNBSLcTyuXwBVwr2q9teTlhQP6kJRdon6ekjU5UZkiXwMX/6dd+r3Yo9zjKoXc9RtbNVdSh9IffOd/SoFVPo7/H6dzn3YLCvvOOVNXql/XxoFZz9bJpTkRqh7OvD3Nv5k9m39bXg7zpT5rezWCVoHCLyHQbj3E7vOHDr+3+4HaOZtePz8vfm++x93SFl88DMZ6NYitesy/LcZtaGxPld8Foms74491EXK9cMrhvD+6X9KHFfsV0Ht+v5tPHx+3Ct3/e95PJ1bhx/YTrYdT5Nm08bIAPWtgPvvyc/dUn4dXDnPxaTr7Nb/1s2n3NaT+HQ2MpB36++AVElEs1Gt5QG8l+YfGxtCgLDYywcHVSpU9cABN6T+1SsuLkUnxo4Mhm7taX5y1r0B70m03bdq2Re2napjUyXbPZ6djNvlXqz47FEcVBwkKqYimF3c3PxwRJ7HBgAWTGOsnJCrj+AeIQC6x57FYejIRxuEukgrujkX152Wn1O2bz8nw0dBujS9cddix7KE9/p6lrs0TM2TxzQwHZoXo3DtT7FghNKSiJV3PO5aBzIUvyhNe5iKzaGtcY5PISyJQOO3X7vIk4jdMIFGEUJ0EeQS1dpUWBEN/91w1MeGGlnKRJJnBUnMJ3kzz+VtZD+gRUOXCVUR9kT+HEZWSV6byfdms/7RLezQOqDpssrsgo2TE5/PQ6M2pYqoGp8iK8Go5qyx9CnABAH/BDx6Wp4gVruhe9vGDlnSFVpVe29wnXnmr5ep0XDW0rxcwkPLKQ2UY+kFzK3vNd8ggMVRDoUzdOxfoocmU/5JeLFfMFFhDL8dOK5SeeGz5w9dzw5PHZfvYtcxBS1k3AVpyyDSL5KlGMP3y4EIcoP2m+kX+bJAte23UCay+OzFO+MQRlS7VS98vzO7NBEglLpSAm2T74KYBTwQ+NVZErLkJO0yIX8P4XTSldV8eEJDkT3lAvDPvqW/AUzyk4r05vYAqFf7myt/zdK/vHdOJLHYyxXvnS/3Y2aDEuBOQuTgsuXX0rX58yOFvuqf0LwdOC36h/JPiHmfTemN9a9mp6fB56/wI=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6PgBAKUqCAFKNNQPrpNpzudl5VxbsDTxEljB+j8+rVDkwKl3c5KSMg31+ee++FjX3AcR3XH5RwyQROmecOu/k+jHdiAmwujDmbbsOv1hbEI8cJoNc4xNJo27rSIrnmc5+AxLjATXb1uWg3DMuXvzjKdpuXUG7XzjvVT1+4h4xJautRMXdvGEeNOEbar5xlzEswpdxiOgTuCOL47nTjS08ElJ713sWNZBMx6KyFSByFSC4BAFJEaSWJ0gQ58LgLu+HTJsMgzeIkZ8K7+snez2dQ2jVqSLVHdNE1kdpD0CThdnum9L+VmCDwWJrv1ALOEUYIj+hsrUlMQqyTQ3GiZZFSs4negLWSZCtqALTGIZbMzHb0GKNh9EumAZMaxwVfYKsFuIYQMGAHt+63X1c8+18Hd3rsMMx4mWcyP1n9GCdgaoiSFwOBlZiW7zyOeKFfvAojjMRLlnK5hpsYkxQS4dpNBSLcTyuXwBVwr2q9teTlhQP6kJRdon6ekjU5UZkiXwMX/6dd+r3Yo9zjKoXc9RtbNVdSh9IffOd/SoFVPo7/H6dzn3YLCvvOOVNXql/XxoFZz9bJpTkRqh7OvD3Nv5k9m39bXg7zpT5rezWCVoHCLyHQbj3E7vOHDr+3+4HaOZtePz8vfm++x93SFl88DMZ6NYitesy/LcZtaGxPld8Foms74491EXK9cMrhvD+6X9KHFfsV0Ht+v5tPHx+3Ct3/e95PJ1bhx/YTrYdT5Nm08bIAPWtgPvvyc/dUn4dXDnPxaTr7Nb/1s2n3NaT+HQ2MpB36++AVElEs1Gt5QG8l+YfGxtCgLDYywcHVSpU9cABN6T+1SsuLkUnxo4Mhm7taX5y1r0B70m03bdq2Re2napjUyXbPZ6djNvlXqz47FEcVBwkKqYimF3c3PxwRJ7HBgAWTGOsnJCrj+AeIQC6x57FYejIRxuEukgrujkX152Wn1O2bz8nw0dBujS9cddix7KE9/p6lrs0TM2TxzQwHZoXo3DtT7FghNKSiJV3PO5aBzIUvyhNe5iKzaGtcY5PISyJQOO3X7vIk4jdMIFGEUJ0EeQS1dpUWBEN/91w1MeGGlnKRJJnBUnMJ3kzz+VtZD+gRUOXCVUR9kT+HEZWSV6byfdms/7RLezQOqDpssrsgo2TE5/PQ6M2pYqoGp8iK8Go5qyx9CnABAH/BDx6Wp4gVruhe9vGDlnSFVpVe29wnXnmr5ep0XDW0rxcwkPLKQ2UY+kFzK3vNd8ggMVRDoUzdOxfoocmU/5JeLFfMFFhDL8dOK5SeeGz5w9dzw5PHZfvYtcxBS1k3AVpyyDSL5KlGMP3y4EIcoP2m+kX+bJAte23UCay+OzFO+MQRlS7VS98vzO7NBEglLpSAm2T74KYBTwQ+NVZErLkJO0yIX8P4XTSldV8eEJDkT3lAvDPvqW/AUzyk4r05vYAqFf7myt/zdK/vHdOJLHYyxXvnS/3Y2aDEuBOQuTgsuXX0rX58yOFvuqf0LwdOC36h/JPiHmfTemN9a9mp6fB56/wI=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1FwEgiQqCBxndLC0ELLdHg5ch0DbhM7jR2gfP2xQ5MChR56JCTkne2117542ZcchoHtNTjHsSCMar12Tf/HgVVUdJ+w4Zcs1yhVKo7h+mVouE8ViJ3KDNuzoq71OE9wj3IBqajptmkVDcuUv3vL9BzLs51CtexMdW2CYy6hpUvB1LV1GFDupWFrehJTj0FOuEdhiLknkDduDPqe9PRgxkmvX25ZpgHj+kKIyAMAFXyMcBCgAmIhuAR7Ppc+98ZkTqFIYvwe0+c1/X3varUqrIoFFs+BbZomMF0gfXxO5hd6/Ue2Gfs9OmPbdQtSRgmCAdlARWqAxYL5WiOYs5iIRXgC2gKWqaANvEYGskr0QgcfAVJ2ZyLtkYw5NPgCWhnYCM9wjCnC2sOoV9Mvzuvgdu99DCmfsTjkB+vvUcJ0iQMWYd/gWWYZu/MRj5SrfomR16MoSDhZ4t9qTCKIMNduYzwj6z7hcvh8rqXt19Y8mzCMvtOSS7DLU9IGRyrTJnPMxf/p126vtigTGCS4XmFR4pcnk66c45sueBwPfzXm1J1YyaCWUth13pLKW/2+PhzUfK7eN41uWLJe/L39OQV+/Ow+gKv+ZthZvKxumXVVvrkq3U9Li1c0BIndvx6PJ9U/JLCXD/N53wxmzV/Xa/p8/dLp85llXv+Yjvjd4EUMB6tk2ib8PuzeTTe3lWkkXu4eh9NOibZHz/G0nYA1cN82DpmQcPSzVxxPJjc2KL3x0brSbW4aRffP3x/zaNDtm5vyI3yIW05z8jir1j5y2s1h35jJwTh5esZIZEs1Gr221pX9guJraVEW4huz1NWLlD5xganQ62qXkhUvkeJDfE82c7vuVMtWq9JqOk611bC6jY5ZMq2u2TAd1y05TSvTny2LA4otRmdExVIKu52frwmi0OOY+jg2lixBC8z1LxDbUECtR0fyYDDK8T2TCl6smh2r6bQ7brdbrtpOy+2UmpZbLTedZtl2Srr2m4khHcaNmcDxvnoX99R7hBGJCFYSr+acy0HnQpbkFS4TEViFJSxQnMhLIFY67NmlqgM4CaMAK8IgZH4S4EK0iNICAb79tw2IeGolHEUsFjBIT+HJJA+/ZfWQPj5RDlxl1MSyp/jIZWRl6ZxOu7ybdgbfSHyiDpssrogJ2jLZ//QxM2pY8oHJ80I8H458yzchjgCAL/iBw9Lk8fwl2YmeXbDyzpCqUs/a+woLr4VkuUzShlaUYsYSHljArIAxRomUvbd79oIpyCHAWTdOzvogcm7f55eIBR0LKHAox09Ll2c8N8aYq+dGTx6f9blvmb2Qsm4Cr8UxWyuQrxLF+MuHC/KQ8pPmW/m3YrH/0a4jWDtxZJ7yjSEInauVul/eTswGYhKWSEFk8S74MYBjwfeNeZFzLkJO01Mi8OkvmlK6mg4RYgkVvbaeGnbVN+Up3iLsfTh9gkkV/v3KXvOTV/bjoD+WOhhCPfcl/+1skHRcEJa7OEm51PS1fH3K4HS+o/bvBI8LftH+SvD3M6l/Mn+27NT08DzU/wU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6OQOAnkooLEpZ1hBG25bLfty8o4DniaOMF2IO2vXyc0KVDaZVZCQj45/s53Lv7sSw7jyPS7nGMmSEKV4aCt/tOykGeHAGleEBiaHYaOtggcoNmW61qGGQZO0FKVIecZHlIuIBVt1TSApQFD/ubA8JvAN72GYYEnVbnHjEto6dIwVCWPI8r9MmxbzRj1E8gJ9ymMMfcF8mfd8ciXnj6sOKmdyx3LMiDrrIRIfV1HjQAjHEWogZJYv9QPfC4D7s/IkkKRMfwWM+Bt9W3vdrttbK1Gwpa6aRiGbni69Ak4WV6onW/VZhwMaZjs1n1IE0oQjMgrLEiNsVglgdKNlgkjYhV/Ag10YBTQGs6RhoBNL1T9PUDJ7kykA5KMQ42vIKjApjjEDFOElb+mw7Z6cV4Hd3vnDFIeJizmR+s/o4TpBkdJigONV5lV7M5HPFGuziVG/pCiKONkg2+KMUkhwly5Yzgk+YhwOXwBV8r2KzmvJgyjP2nJpb7PU9LWT1RmQJaYi//Tr/1e7VDuYZThDhhl8/7mKedj5D08p98n0w1ervLwx3TSLinsO+9I1a1+Wx8Paj1Xb5sWqOfp3fGqN3++Hv1Ye/BuYcPuI8qi+PbX9HfAnvrNl9/23yhl1uv31a27Rfoi768333PureNHRJY/c+spfRk7v75NfxoQzh5j1ne325g9mPddc9Rc/0xnbjQhQ91L9S20J+txP7x7mE/CfLHu3aHr++XmZZuvJ/cOvpm+9q6z2yUbfgvHPWFxt/WaP0DnMU5Gz5P2e077ORwaKzmYZYvfGIlqWYzGcKBcy35B8bW0FBYSaGHp6qeFPnGBqVA7xa5CVvxMig8JfNnM3frKbYG+61mOa5tN0+tdGbYBro2u4Xhe68p0K/3ZsTii2E9oSIpYhcLu5udrgij2OaYBZtomydAKc/ULxAEUUBnSqTwYCeV4nkgFNwDwHKNlNQdg0Ltq2eAKeC3nCrh2q+m1gKsqN4m4pbesGwrMDtXbOlDvKUYkJbiQ+GLOuRx0LmRJ1nCTiQg0NrBBcSYvAVbosG/ablPnJE4jXBDW4yTIItxIV2lZIJ3v/k0NIl5aCUdpwgSMylP4aZLH36p6SJ+AFA68yKiHZU/xicsIVOl8SNs+eWlV8N0sIMVhk8UVjKAdk8NP7zNTDEs9MHVeiIOKe73lDyFOAOhf8NOPS1PHCzZkL3p1wco7Q6pKp2rvGjbWjWyzycqGOoViMgmvA91w9BlGmZS9l3nyjKleQ+hn3Tg166PItf2QXyZWdCagwLEcP6VcnvHcmGFePDeG8vjk575lDkLKugmci1O2fiRfJQXjLx8uyEeFnzTfyb9twoL3dp3A2osj85RvDEHoslgV98vLJ7OBEglLpCAmbB/8FMCp4IfGusg1FyGnaZEJ/PkXpVC6tgoRSjIqhgO1NOyrb8lTvKTYf3f6AFMq/NuVnfNPr+yH8WgmdTCGau1L/ttZI+W4ICx3cVJyaau5fH3K4HS5p/ZvBD8IvtPvNZuW2QXX3Vrwm55nN3vvR/Igk84H80fLXk2Pz0PnXw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065122</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065124</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5545A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB558DA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937843529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="666287ea-8b89-416d-8755-d5159a90ec71"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89378AE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C893797C529BE0401F0A07996E28:2FCB1B49"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C893789C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C893789C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C893789C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89378AE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C89378F6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937931529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89378AE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C89378F6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937931529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrkQrgkKkhAqIYZSi/QTtuXI9fZCS6Jk9oOpf36Y4eGAkN72iMhIe9sr732xcs+4ShNHL/HOTBBMqqNgo7+jx1F2G7aYDRDq2G4XlQ3HiKrbrSaTtN22i6A7ejaiPMCRpQLREVHdyy7btiW/M1sy2/Yft2qea53r2s3wLiEli41S9dWaUK5X4bt6AWjfoY44T5FKXBfYH/aOxv70tNHFSe9e7JmWQZk3bkQuW+auBYChiTBNZyl5om543MScn9KYopEweAtZsg7+tve5+fn2nO9lrHYdCzLMi3PlD4hJ/GR3v1RbYZwRKNsvR4gmlGCUUJekSJ1BmKehVoviTNGxDz9ANo2bUtBG7DCBrZdeqSb7wFKdl9E2iHJODL4HNkV2BVEwIBi0K6vRh396GsdXO+dMUR5lLGU762/RwnoEpIsh9DgVWYVu68jHihX9wSwP6I4KThZwkSNSY4wcO2CQURWY8Ll8IVcK9uvrXg1YYC/05ITc5unpG0eqExAYuDi//Rru1drlBuUFNClLE9b8zAPr++sGN0tm/FVNKs/zM8eh52SwrbzmtSm1W/r/UHdzNXbpgDugkajcF/bzP31sHoSg8m0wOl80pv9upk0/lw3fl6P7Vt7uHAvLxPIw3tnmonj7Lj9ElHeb/XNwDwF6oXT4eLHYtiy5rNHcdG/Z2xyXrdWi1Pzstm8s73k5vQ2DxfDu4vjPzeNZLwwj9uP3uXgOO39eoz/ePFPcnyN8CJ6iovfk1Ef/ehfxOPZ7/ptvHq9tRsvk4u7s857Tts57BorOZgWD4+ARbVUozEKtFPZLyQ+lxZlIaERla5+rvSJC6BC76pdSlb8QooPCX3ZzPV62G7ag7ZXb7V7w4bj9YeWa9mnVs9qeV5z6LQr/Vmz2KM4yGhEVCylsOv5+ZwgTn0ONARmLLMCz4HrnyAGSCBtRK/kwcgoh1mmFDzotQKvZzedoN603NZp3w2snhe4Tt2Ww+nq2iQT5/Sc9SIBbFe96zvqfQWY5ASUxKs553LQuZAleULLQiR2bYlqFAp5CTClw77jthsmJ2megCJspllYJFDL53lZIJOv/x0DYV5aCcd5xgRKylP4YZL736p6SJ+QKAeuMuqD7CkcuIycKp2P025up13B94qQqMMmiysYwWsmu5/eZ0YNy2ZgNnlhblfcN1u+CXEAwPyEn7lfmk28cEm2olcXrLwzpKp0q/Y+odpTrVgui7KhLaWYTMKbtmm1zCngQsreyyxbADU3EOaXbpwN673IG/suv0LM6VQgAakcP61cfuG5MQWunhsjeXxWX33L7ISUdROwEodsg0S+ShTjTx8u2MfKT5ov5N9zxsL3dh3A2ooj85RvDEForFbqfnn5YDZwJmGJFMSMbYMfAjgUfNe4KfKGi5DT9FAI+PiLppSuoyOMs4KKUaCXhm31LXmKlxz8d6e/YEqFf7uyV/zDK/v2bDyVOpgifeNL/tvZIOW4YJC7OCm5dPSVfH3K4DTeUvs3gocF3xt8Jvi7mXT/Mv9t2arp/nno/gs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrkQrgkKkhAqIYZSi/QTtuXI9fZCS6Jk9oOpf36Y4eGAkN72iMhIe9sr732xcs+4ShNHL/HOTBBMqqNgo7+jx1F2G7aYDRDq2G4XlQ3HiKrbrSaTtN22i6A7ejaiPMCRpQLREVHdyy7btiW/M1sy2/Yft2qea53r2s3wLiEli41S9dWaUK5X4bt6AWjfoY44T5FKXBfYH/aOxv70tNHFSe9e7JmWQZk3bkQuW+auBYChiTBNZyl5om543MScn9KYopEweAtZsg7+tve5+fn2nO9lrHYdCzLMi3PlD4hJ/GR3v1RbYZwRKNsvR4gmlGCUUJekSJ1BmKehVoviTNGxDz9ANo2bUtBG7DCBrZdeqSb7wFKdl9E2iHJODL4HNkV2BVEwIBi0K6vRh396GsdXO+dMUR5lLGU762/RwnoEpIsh9DgVWYVu68jHihX9wSwP6I4KThZwkSNSY4wcO2CQURWY8Ll8IVcK9uvrXg1YYC/05ITc5unpG0eqExAYuDi//Rru1drlBuUFNClLE9b8zAPr++sGN0tm/FVNKs/zM8eh52SwrbzmtSm1W/r/UHdzNXbpgDugkajcF/bzP31sHoSg8m0wOl80pv9upk0/lw3fl6P7Vt7uHAvLxPIw3tnmonj7Lj9ElHeb/XNwDwF6oXT4eLHYtiy5rNHcdG/Z2xyXrdWi1Pzstm8s73k5vQ2DxfDu4vjPzeNZLwwj9uP3uXgOO39eoz/ePFPcnyN8CJ6iovfk1Ef/ehfxOPZ7/ptvHq9tRsvk4u7s857Tts57BorOZgWD4+ARbVUozEKtFPZLyQ+lxZlIaERla5+rvSJC6BC76pdSlb8QooPCX3ZzPV62G7ag7ZXb7V7w4bj9YeWa9mnVs9qeV5z6LQr/Vmz2KM4yGhEVCylsOv5+ZwgTn0ONARmLLMCz4HrnyAGSCBtRK/kwcgoh1mmFDzotQKvZzedoN603NZp3w2snhe4Tt2Ww+nq2iQT5/Sc9SIBbFe96zvqfQWY5ASUxKs553LQuZAleULLQiR2bYlqFAp5CTClw77jthsmJ2megCJspllYJFDL53lZIJOv/x0DYV5aCcd5xgRKylP4YZL736p6SJ+QKAeuMuqD7CkcuIycKp2P025up13B94qQqMMmiysYwWsmu5/eZ0YNy2ZgNnlhblfcN1u+CXEAwPyEn7lfmk28cEm2olcXrLwzpKp0q/Y+odpTrVgui7KhLaWYTMKbtmm1zCngQsreyyxbADU3EOaXbpwN673IG/suv0LM6VQgAakcP61cfuG5MQWunhsjeXxWX33L7ISUdROwEodsg0S+ShTjTx8u2MfKT5ov5N9zxsL3dh3A2ooj85RvDEForFbqfnn5YDZwJmGJFMSMbYMfAjgUfNe4KfKGi5DT9FAI+PiLppSuoyOMs4KKUaCXhm31LXmKlxz8d6e/YEqFf7uyV/zDK/v2bDyVOpgifeNL/tvZIOW4YJC7OCm5dPSVfH3K4DTeUvs3gocF3xt8Jvi7mXT/Mv9t2arp/nno/gs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrEIRAgKkgplykUaAsMw+nLkeuY4DZxgu1QOl8/dmgoUOC0R0JC3tlee+2Ll33FYRQWXY9zzASJqdZt1fV/bafiQ8eBBnAqJaPkY2BUa1XbmM8BRsipOXP/Sde6nKe4S7mAVNT1IrBswwLyN7GAW7Zcu1go25VHXZtixiW0dCkAXVtHIeVuFraup4y6MeSEuxRGmLsCuWNv0HelpwtzTnrjasMyC8gaCyES1zRRwccIhyEqoDgyr8w9nyufu2MSUChSht9j+ryuv+99fX0tvNqFmAVmEQBggpopfXxOggu98SPfjP0uncebdRPSmBIEQ/IHKlIDLBaxr3lhEDMiFtEJaMu0gII28BoZyCrRC938CJCx+yLSHknGocEX0MrBRniOGaYIa79G3bp+8bUObvZOGKR8HrOIH6y/RwnTFQ7jBPsGzzPL2X0d8Ui5GlcYuV2KwpSTFR6qMUkgwly7Z3hO1n3C5fD5XMvar615PmEYfaclV+YuT0nbPFKZFgkwF/+nX7u92qBMYZjixnT60xo4PbudrOiDcyPW1eGwbS5+d8pePaOw67whtW31+/pwULdz9b7Jm/mPzaj9AvrjzrVnLpOfTz3+UK6R5+6jXSr2HoE9ZtyrBqDXhGPbq14WZ+xXeTKzJ2F5NblZXw78f9pkAFoj5wcAQdS86c3uUZCwBE5BEAd9MS/+eRkOg0vhPddE1Os77SebrWaDy/HLPHr47Q1H0V0PLKfLtt2KuoNbrz99a4sfJVa77UW3NnoaPfTLqZOMXuofOe3msG/M5WCcPj1jJPKlGo1uS+vIfkFxXlqUhfjGPHN1E6VPXGAq9IbapWTFTaX4EN+Vzdys21XHalZrdqXaccrF2nUblIDVAR6o1GpOu1jN9WfD4oBiM6ZzomIphd3Mz3mCKHI5pj5mxipO0QJz/QxiCwqodelIHoyYcjyJpYI7Zbvd7thWq9wBoNm5vm515KGvlSuOY1cqFUvXhrG4o3fMmwvM9tXb3lPvEUYkIVhJvJpzLgedC1mSJVylIrQKK1igOJWXAFM67BZL1bLJSZSEWBE2o9hPQ1xIFklWIJNv/osGRDyzEo6SmAkYZqfwZJKH3/J6SB+fKAeuMrrGsqf4yGVUzNM5nbazm3YO76U+UYdNFlcwgjZM9j99zIwalu3AbPNC3Mq5b7d8E+IIgHmGn3lYmm08f0V2oucXrLwzpKo08vYuYWFZSFerNGtoRSkmk/CmZYKKOcYolbL3NolfMDW3EOaXbpwt64PIW/s+v1Qs6FhAgSM5flq2/MJzY4y5em505fFZf/UtsxdS1k3gtThma4byVaIYn324IBcpP2m+l3+vMfM/2nUEayeOzFO+MQShgVqp++XtxGygWMISKYgx2wU/BnAs+L5xW+QtFyGn6SkV+PQXTSldXYcIxSkV3ZaeGXbVN+Mp3hLsfjh9gskU/v3KXvOTV/Zs0B9LHYygvvUl/+1skGxcEJa7OMm41PW1fH3K4DTYUft3gscFv9Y8J/j7mTQ+mT9bdmp6eB4afwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx1VwAoGQCJD4KF36eRcoRbysjDMQl8SB2KH0/vprB0KB0m67EhLyZHzmjGd8xjWOo7DoNTmHRNCYab1OXf+XOFUXqnhmVKAEhl10TcOduRXDn5mm7ZAyKU+JrvU4T6HHuMBM1PWiaZUMy5S/oWV6ZcsrlQtWqTLRtREkXEJLl4Kpa5soZNzLwtb1NGFejDnlHsMRcE8Qb9C8v/Okp4dzTnqjtmWZBUwagRBLDyFS8IFAGJICiSNUQ0c+NZ97AzpnWKQJ7GL6vK7v9r6+vhZeS4U4maOiaZrIdJH08TmdX+qNi3wz+D02i7frNmYxowSH9DdWpO5BBLGvNcN5nFARRJ9AW8gyFbQBG2IQy2aXOnoPkLH7JtIRyYRjgwfYysH6MIMEGAHtqd+r65ffq+B27zDBjM/iJOIn659RAraGMF6Cb/A8s5zd9xHPHFejBsTrMRKmnK7hQbXJEhPg2q8EZnRzR7lsPp9rWfm1Dc87DMhPSlJDhzwlbXTmZDp0Dlz8n3od1mqLMsJhCo1oEIzSoTN2n9ar1s1b6rsdpx+ONtPpop5ROHTektqXerc+bdR9X+02rVbR9K/K0L59RtZt2SSt4P5u0QYUh+2qmL4tyTgo/fPcRRPnKbpfhE+0Mp2IymLSX6Y3PXCf0nVphZ31rLNaTC5exosBt6tdNyW9RNx1X+aPb86wT8dsunq+NslkZK1GZeduQK7HN8Pba2b/fqk8xC+tzt/twJlH8wkazW98JsR0fnH9mCbR6v75Ga8W12MYToJq/T2nwxyOjbkcDNLpCxCRL1Vr9DpaV9YLi6+lRVmob8wyV2+p9IkLYEJvqF1KVrxUig/1PVnM7fqqWrHaVbfkuCWrXHRbV6ZtWl2zaTquW7kqVnP92bI4odiO2YyqWEpht/3zNUESeRyYD4mxjlMSANe/QOxggbUe68uLETMOw1gquOuYrU6zaNlmt2q3r6q22262Ol2nedVxOrZr69pDLB7ZY9KcCUiO1bt0pN59IHRJQUm86nMuG50LeSQrvE5FaBXWuMAglUMgUTrsFe1qGXEaLUNQhFEU+2kIhWWwzA4I8e1/0cCEZ1bKyTJOBA6zW/hpkqff8vOQPj5VDlxl1AJZUzgzjIp5Oh/Sts8OrRy+mfpUXTZ5uCKhZMvk+NN7z6hm2TfMPi/CrZz7fssPIc4AoC/4odOj2cfz1/Qgej5g5cyQqtLIy7vChVUhXa/TrKCOUsxEwiMLmQ4aAEml7L0N4wUwtIdA35o4e9Ynkff2Y36pCNhAYAGRbD8tW37juTEArp4bPXl9Nt99yxyFlOcmYCPO2dqhfJUoxl8+XIhHlJ80/5J/r3Hiv5frDNZBHJmnfGMIyuZqpebL2ye9QWIJS6Ugxskh+DmAc8GPjftD3nMRspumqYDPv2hK6eo6JiROmeh19MxwqL4ZT/G2BO/d6QNMpvC7kb3hn47s8b2cKQFEWN/70v92NmjWLgTkLk4zLnV9I1+fMjibH6j9juBZwa+67a8E/ziTxgfzR8vBmZ7eh8Yf</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065130</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065131</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89378AF529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C89378F7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937932529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="d4b0cdd3-2698-446a-8815-831f65fc9860"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937998529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937A66529BE0401F0A07996E28:997D44F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937986529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937986529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937986529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937998529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C89379E0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937A1B529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937998529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C89379E0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937A1B529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQCyQkUUGi0E7pjQ7QqtOXI+NsgtvEprYDtF9/7NBQYGhP50hIyDvba6998bKPBMozL+4IAVwSRo1+r2X+4zs+noRN35p4zdBqTOpNK0RT30L1KHL9JoSRA6bRF6KAPhUSUdkyPcetW66jfmPXiX03rge1yA8eTOMOuFDQyqXmmMYqz6iIy7Ats+A0ZkgQEVOUg4gljkedq8tYecao4mS2j9Ysy4C8PZNyHts2riWAIctwDbPcPrJ3fI4SEY9ISpEsOLzFTETLfNu7XC5ry3qN8dT2HMexnchWPokg6Xez/a3aDEmfTtl63UWUUYJRRl6RJnUFcsYSo5OljBM5yz+Adm3X0dAWrLCF3Qb9btrvAUp2X0TaIckFssQMuRXYEKbAgWIwbof9lvn9ax1c7x1zRMWU8Vzsrf+OEtAFZGwOiSWqzCp2X0c8UK72EeC4T3FWCLKAaz0mc4RBGDccpmR1SYQavkQYZfuNlagmDPDftOTI3uapaNsHKtMjKQj5f/q13as1yh3KCmi/dH7/KBr33m0I02feie5Du94bnD0Qr98qKWw7r0ltWv223h/UzVy9bTofDKYTf8AxO3FumpcL/Ov0sUC9Fz4Z9H5OaArucuzcYQgm0bgTDvrRxbT5SJdn9eNg8XT2eJ7+ukkX6WDYeH6Kvl00Omyc3jtX16eBvOD89WkyG15fzjNbTOzxGC/H56uXx5/52dU9IISDh9fTy+H9/HfzYTm88FZX7PpugW+nKcI3F9/y8W8nm50cp4571j3/KW5/LFvvOW3nsGus5GBUTB4By2qpR6PfM05Vv5D8XFq0hSTWtHSN51qfhAQqzbbepWUlLpT4kCRWzVyvT8LA7YZRvRlFoe9FxydOw3FPnY6jDMGJF1b6s2axR7HL6JToWFph1/PzOUGcxwJoAtxasALPQJifIPaQREafDtXBYFTAmCkF7zb8ZtTrBcdON3SiRuS7zZOuH9S7/nHDc/zANK6ZHNAB70wl8F31ru+o9xAwmRPQEq/nXKhBF1KV5BktCpm5tQWqUSjUJcC1DsdeI/RtQfJ5BpqwnbOkyKA2n83LAtli/e9ZCIvSSgSeMy5RVp7CD5Pc/1bVQ/kkRDsIndExqJ7CgcvIq9L5OO1gO+0KvlMkRB82VVzJCV4z2f30PjN6WDYDs8kLC7fivtnylxAHAOxP+Nn7pdnESxZkK3p1wao7Q6lKu2rvM6o914rFoigb2tSKyRW87dpO0x4BLpTsvYzZE1B7A2F/6cbZsN6LvLHv8ivkjI4kkpCr8TPK5ReeGyMQ+rnRV8dn9dW3zE5IVTcJK3nI1s3Uq0Qz/vThgmOs/ZT5Rv0tGU/e23UAayuOylO9MSShqV7p++Xlg9nATMESJYiMb4MfAjgUfNe4KfKGi1TTNCkkfPzF0ErXMhHGrKCy3zNLw7b6ljzlyxzid6c/YEqFf7uyV+LDK/v+6nKkdDBH5saX/LezRcpxweqxqvxLLi1zpV6fKjhNt9T+jeBhwQ+DzwR/N5P2H+Y/LVs13T8P7X8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQCyQkUUGi0E7pjQ7QqtOXI+NsgtvEprYDtF9/7NBQYGhP50hIyDvba6998bKPBMozL+4IAVwSRo1+r2X+4zs+noRN35p4zdBqTOpNK0RT30L1KHL9JoSRA6bRF6KAPhUSUdkyPcetW66jfmPXiX03rge1yA8eTOMOuFDQyqXmmMYqz6iIy7Ats+A0ZkgQEVOUg4gljkedq8tYecao4mS2j9Ysy4C8PZNyHts2riWAIctwDbPcPrJ3fI4SEY9ISpEsOLzFTETLfNu7XC5ry3qN8dT2HMexnchWPokg6Xez/a3aDEmfTtl63UWUUYJRRl6RJnUFcsYSo5OljBM5yz+Adm3X0dAWrLCF3Qb9btrvAUp2X0TaIckFssQMuRXYEKbAgWIwbof9lvn9ax1c7x1zRMWU8Vzsrf+OEtAFZGwOiSWqzCp2X0c8UK72EeC4T3FWCLKAaz0mc4RBGDccpmR1SYQavkQYZfuNlagmDPDftOTI3uapaNsHKtMjKQj5f/q13as1yh3KCmi/dH7/KBr33m0I02feie5Du94bnD0Qr98qKWw7r0ltWv223h/UzVy9bTofDKYTf8AxO3FumpcL/Ov0sUC9Fz4Z9H5OaArucuzcYQgm0bgTDvrRxbT5SJdn9eNg8XT2eJ7+ukkX6WDYeH6Kvl00Omyc3jtX16eBvOD89WkyG15fzjNbTOzxGC/H56uXx5/52dU9IISDh9fTy+H9/HfzYTm88FZX7PpugW+nKcI3F9/y8W8nm50cp4571j3/KW5/LFvvOW3nsGus5GBUTB4By2qpR6PfM05Vv5D8XFq0hSTWtHSN51qfhAQqzbbepWUlLpT4kCRWzVyvT8LA7YZRvRlFoe9FxydOw3FPnY6jDMGJF1b6s2axR7HL6JToWFph1/PzOUGcxwJoAtxasALPQJifIPaQREafDtXBYFTAmCkF7zb8ZtTrBcdON3SiRuS7zZOuH9S7/nHDc/zANK6ZHNAB70wl8F31ru+o9xAwmRPQEq/nXKhBF1KV5BktCpm5tQWqUSjUJcC1DsdeI/RtQfJ5BpqwnbOkyKA2n83LAtli/e9ZCIvSSgSeMy5RVp7CD5Pc/1bVQ/kkRDsIndExqJ7CgcvIq9L5OO1gO+0KvlMkRB82VVzJCV4z2f30PjN6WDYDs8kLC7fivtnylxAHAOxP+Nn7pdnESxZkK3p1wao7Q6lKu2rvM6o914rFoigb2tSKyRW87dpO0x4BLpTsvYzZE1B7A2F/6cbZsN6LvLHv8ivkjI4kkpCr8TPK5ReeGyMQ+rnRV8dn9dW3zE5IVTcJK3nI1s3Uq0Qz/vThgmOs/ZT5Rv0tGU/e23UAayuOylO9MSShqV7p++Xlg9nATMESJYiMb4MfAjgUfNe4KfKGi1TTNCkkfPzF0ErXMhHGrKCy3zNLw7b6ljzlyxzid6c/YEqFf7uyV+LDK/v+6nKkdDBH5saX/LezRcpxweqxqvxLLi1zpV6fKjhNt9T+jeBhwQ+DzwR/N5P2H+Y/LVs13T8P7X8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuI4FH3vr3C5H1PGCwYvFaiiWabphGxkm36ZEvK1rbQtGUs2pL9+ZBMTICSTniqqKF1fnXvuoiOdcpQmlj/gHHJBGFWmo576TzfA2HZMS8O2hTXbQa7mujjU2h0rMO1O2HW6lqpMOS9gSrlAVPRUyzDbmmnI361p+B3Tb7stxzR+qso95FxCS5eWoSrrNKHcr8P21CKnPkOccJ+iFLgvsD8fzM596emjhpPaP92wrAPm/ViIzNd13AoAQ5LgFmapfqrv+ZwG3J+TiCJR5PASM+A99WXvarVqrdotlke6ZRiGbni69Ak4ib6q/S/NZgimNGSb9RBRRglGCfmNKlIzEDELlEESsZyIOH0H2tRNo4LWYI01bNr0q6q/BqjZfRJpj2TOkcZjZDZgNxBCDhSDcncz7alfP9fBzd7bHFEesjzlB+s/owS0hIRlEGi8yaxh93nEI+XqnwL2pxQnBSclXFRjkiEMXLnKISTrc8Ll8AVcqduvrHkzYYD/pCWn+i5PSVs/UpkRiYCL/9Ov3V5tUO5RUkA/OhsNWHlyIp4fl4uUe3eXdxGsmB4Y172awq7zhtS21S/rw0HdztXLpskZfRjaq+v7QRtH9sPTeTiZiMl19vCzvJ7EZe5yPL6+G8dPZ7H9GCxuvHTN9IdgPZnoPx7jhXn10x17kWkDlE9f2stZ9h2Hv9Yzr4xD9/4SL4vujZXfs98XKy/5u1w/F6OggOfv3xdshnTsXf1I4mE3SsP5OFvi8mR154hUnAUEvgj73HY4/oGWi/Ff3sWsa0W915x2c9g3NnIwLxZPgEWzrEZjOlImsl9IfCwtlYUEWli7+lmlT1wAFWq/2lXJil9I8SGBL5u5WY/drjl0vbbjjY2O5X0bG7ZhToyB4Xhed2y5jf5sWBxQHDIakipWpbCb+fmYIE59DjSAXCtZgWPg6geIIySQMqU38mAwyuGWSQU33bEx7Awcp932BrblGMbIsEbucOINjOE3q6MqF0xc0st8EArI99W7vafeN4BJRqCS+GrOuRx0LmRJlqgsRGK2StSiUMhLIK902Ldst6NzkmYJVIT1lAVFAq0szuoC6Xzzb2kI89pKOM5YLlBSn8J3kzz81tRD+gSkcuBVRt9A9hSOXEZWk877aXd3027gB4WcVHnYZHFFTvCGyf6n15mphmU7MNu8MDcb7tstfwhxBED/gJ9+WJptvKAkO9GbC1beGVJV+k17l6i1bBVlWdQNdSrFzCW8buqGo88BF1L2nm/ZL6D6FkL/1I2zZX0QeWvf51eImM4FEpDK8VPq5SeeG3Pg1XNjKo/P+rNvmb2Qsm4C1uKYbZjIV0nF+MOHC/Zx5SfNV/JvxfLgtV1HsHbiyDzlG0MQGlWr6n55fmc2MJOwRAoiy3fBjwEcC75v3BZ5y0XIaVoUAt7/olRK11MRxqygYjpSa8Ou+tY8xXMG/qvTG5ha4V+u7DV/98p+nJ3PpQ6mSN36kv921kg9LhjkLk5qLj11LV+fMjiNdtT+heBxwXe7Hwn+fib9N+a3lp2aHp6H/r8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBCQRKooKUculktreFlg59WbnOAdwmTrAdLv31a4eGAqXdzkpIyCfH3/nOxZ99KnASV/1ACOCSpswIuy3zH2/ScO0IYwtww7bcR69mNSMnsrzItm2nTpr1RtU0QiFyCJmQmMmWWbWdmuXY6nfr2H7d8V2nUncbD6YxAi4UtHKp2KaxSmIm/CJsy8w581MsqPAZTkD4kvjD4PLCV54+LjmZ7dMNyyIgb8+kzHyESCUCAnFMKiRN0Cna8zmNhD+kU4ZlzuE1ZiRa5uve5XJZWdYqKZ+iqkoJ2R5SPpGg0+9m+1u5GaKQTdLNuoNZyijBMX3BmtQlyFkaGUE8TTmVs+QDaAc5toa2YEUs4rjsu4neAhTsvoi0R5ILbIkZdkqwAUyAAyNg3A3Clvn9ax3c7L3lmIlJyhNxsP4zSsAWEKcZRJYoMyvZfR3xSLnap0D8kJE4F3QBV3pMMkxAGDccJnR1QYUavkgYRfuNlSgnDMiftOQU7fJUtNGRynTpFIT8P/3a7dUGZYTjHNpw/zgPHTtbcvmUpOczvq4G/Zer8X2v1yoo7DpvSG1b/bo+HNTtXL1u6qyG+c+XLJ48xnfjUTVZueOH0Xk4fxj8QDcj2qstrsOzEZeDsHs9vct/yfuHCVuHV8NoSZN4nP81noUnUeMCxbPlt9Hz0+X8MWiMFpfdl5rdHPOfy4fxCzyfT56Hq8HT6MYZodr67wcWoOwlSWZoad+sEymFE8x+Lofh/W1wMx/QVfP6+duP5Gl8dv67B1QGnbs4Ox+PW2857eawbyzlYJg/PgGR5VKPRtg1+qpfWH4uLdpCI2tSuPqZ1ichgUmzrXdpWfFzJT408lUzN+tes+F0ml7tJHDO6lXvrGe7ttO3A/vE8xq9arPUnw2LA4qdlE2ojqUVdjM/nxMkiS+ARcCtRZqTGQjzE8QultgI2UAdjJQJuE2Vgp+4HbfvNrpevecGvVpQ7Te8fr/jeJ1av+/VPNO4SuU1u+bBRALfV+/annoPgNCMgpZ4PedCDbqQqiRzvMhl7FQWuMIgV5cA1zrsV91mHQmaZDFowihJozyGSjbLigIhsfmvWpiIwkoFyVIucVycwg+TPPxW1kP5RFQ7CJ3RGaiewpHLqFam8y5t9+ilVcIHeUT1YVPFlZySDZP9T28zo4dlOzDbvIhwSu7bLX8IcQQAfcIPHZZmGy9a0J3o5QWr7gylKu2yvXNcmVfyxSIvGnqiFZMreOQg+wQNgeRK9ta36TMwtIVAX7pxtqwPIm/t+/xyOWNDiSUkavyMYvmF58YQhH5uhOr4rL76ltkLqeomYSWP2TqxepVoxp8+XIhPtJ8y36i/Zcqjt3YdwdqJo/JUbwxJ2VSv9P2y/mA2SKpgqRLElO+CHwM4FnzfuC3ylotU0/SYS/j4i6GVrmViQtKcybBrFoZd9S14ynUG/pvTO5hC4V+v7JX48Mr+fXkxVDqYYHPrS//b2aLFuBBQuwQtuLTMlXp9quBsuqP2rwSPCr7XbHwm+PuZtN+Z31t2anp4Htr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065136</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065138</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937999529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C89379E1529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937A1C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="4e068d44-cb12-4d9d-8339-f16e46424b1d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937A82529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C8937B68529BE0401F0A07996E28:E6451DAF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937A70529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937A70529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937A70529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937A82529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937ACA529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937B1D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937A82529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937ACA529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937B1D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oVDoADMV5GwU0S3g7eVMTBeQbZtCkhb01++kWAREj54ZZpisrnzrW5d8SYOjOHL8gHNggiRU63Wa+r+VumM5nls2cPWpargTr27UEbIMXAMc1u2Ka4VPutbjPIUe5QJR0dQdyy4btiV/I9vyK7bvlkuuVX/UtVtgXEJLl5Kla6s4otzPwzb1lFE/QZxwn6IYuC+wPwwu+7709FHBSW811izzgKw1E2LumyYuhYAhinAJJ7HZMHd8GiH3h2RKkUgZvMUMeVN/27tcLkvLcilhU9OxLMu06qb0CTmZHuuto2IzhD06SdbrNqIJJRhF5BUpUpcgZkmoBdE0YUTM4k+gbdO2FLQBK2xg26XHuvkeIGf3TaQdkowjg8+QXYDdwAQYUAza+KbX1I+/18H13hFDlE8SFvO99c8oAc0gSuYQGrzIrGD3fcQD5Wo1APs9iqOUkwwGakzmCAPXrhlMyKpPuBy+kGt5+7UVLyYM8E9a0jC3eUra5oHKdMgUuPg//dru1RrlFkUptE7S16tsMSKrZ3a+iB+cqwEJni/s3sVJ0swpbDuvSW1a/bbeH9TNXL1tGuLf3XjhTM/PF1kAXnr2EM6WletK+yR6ai8fpll8VTtdXniDpH1+/xhjdl1FL9H49y19uPSGJ/GdzQcV83b0iBzniFW9C1KePaLXfqdL/yyJR0/7/dchy54s0s8cwpbjwX16PXaXnPTH80xUBpd09OsBodNfL8/1u8HwbPh431/eR+Wj5+5l+x9r/BzcMFZmcPdasZrvOW3nsGss5GCYPv0BLIqlGo1eR+vKfiHxtbQoCwmNSe7qz5U+cQFU6C21S8mKn0rxIaEvm7len9WqdrtWL3tBzak49dMzy7XsrhVYXr1ePXNqhf6sWexRbCd0QlQspbDr+fmaII59DjQEZmRJimfA9S8QO0ggrUdv5MFIKIdRIhXcc9u25VTKtXZQ8QLX7XbsjuuWna7TdYPgrKprg0Rc0SsWTASwXfUu76j3DWAyJ6AkXs05l4POhSzJAmWpiOxShkoUUnkJMKXDvuPWKiYn8TwCRdiMkzCNoDSfzfMCmXz97xgI89xKOJ4nTKAoP4WfJrn/raiH9AmJcuAqo1OQPYUDl1G5SOfztKvbaRfwQRoSddhkcQUjeM1k99P7zKhh2QzMJi/M7YL7ZssPIQ4AmF/wM/dLs4kXZmQrenHByjtDqkqraO8ClRalNMvSvKGeUkwm4U3btDxzCDiVsvcySp6BmhsI81s3zob1XuSNfZdfKmZ0KJCAWI6fli+/8dwYAlfPjZ48PqvvvmV2Qsq6CViJQ7Z2JF8livGXDxfsY+Unzdfyb5mw8L1dB7C24sg85RtDEDpVK3W/vHwyGziRsEQKYsK2wQ8BHAq+a9wUecNFyGl6SgV8/kVTStfUEcZJSkWvo+eGbfXNeYqXOfjvTh9gcoV/u7JX/NMr+/6yP5Q6GCN940v+29kg+bhgkLs4ybk09ZV8fcrgdLql9m8EDwu+Z30l+LuZtD6YP1q2arp/Hlp/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oVDoADMV5GwU0S3g7eVMTBeQbZtCkhb01++kWAREj54ZZpisrnzrW5d8SYOjOHL8gHNggiRU63Wa+r+VumM5nls2cPWpargTr27UEbIMXAMc1u2Ka4VPutbjPIUe5QJR0dQdyy4btiV/I9vyK7bvlkuuVX/UtVtgXEJLl5Kla6s4otzPwzb1lFE/QZxwn6IYuC+wPwwu+7709FHBSW811izzgKw1E2LumyYuhYAhinAJJ7HZMHd8GiH3h2RKkUgZvMUMeVN/27tcLkvLcilhU9OxLMu06qb0CTmZHuuto2IzhD06SdbrNqIJJRhF5BUpUpcgZkmoBdE0YUTM4k+gbdO2FLQBK2xg26XHuvkeIGf3TaQdkowjg8+QXYDdwAQYUAza+KbX1I+/18H13hFDlE8SFvO99c8oAc0gSuYQGrzIrGD3fcQD5Wo1APs9iqOUkwwGakzmCAPXrhlMyKpPuBy+kGt5+7UVLyYM8E9a0jC3eUra5oHKdMgUuPg//dru1RrlFkUptE7S16tsMSKrZ3a+iB+cqwEJni/s3sVJ0swpbDuvSW1a/bbeH9TNXL1tGuLf3XjhTM/PF1kAXnr2EM6WletK+yR6ai8fpll8VTtdXniDpH1+/xhjdl1FL9H49y19uPSGJ/GdzQcV83b0iBzniFW9C1KePaLXfqdL/yyJR0/7/dchy54s0s8cwpbjwX16PXaXnPTH80xUBpd09OsBodNfL8/1u8HwbPh431/eR+Wj5+5l+x9r/BzcMFZmcPdasZrvOW3nsGss5GCYPv0BLIqlGo1eR+vKfiHxtbQoCwmNSe7qz5U+cQFU6C21S8mKn0rxIaEvm7len9WqdrtWL3tBzak49dMzy7XsrhVYXr1ePXNqhf6sWexRbCd0QlQspbDr+fmaII59DjQEZmRJimfA9S8QO0ggrUdv5MFIKIdRIhXcc9u25VTKtXZQ8QLX7XbsjuuWna7TdYPgrKprg0Rc0SsWTASwXfUu76j3DWAyJ6AkXs05l4POhSzJAmWpiOxShkoUUnkJMKXDvuPWKiYn8TwCRdiMkzCNoDSfzfMCmXz97xgI89xKOJ4nTKAoP4WfJrn/raiH9AmJcuAqo1OQPYUDl1G5SOfztKvbaRfwQRoSddhkcQUjeM1k99P7zKhh2QzMJi/M7YL7ZssPIQ4AmF/wM/dLs4kXZmQrenHByjtDqkqraO8ClRalNMvSvKGeUkwm4U3btDxzCDiVsvcySp6BmhsI81s3zob1XuSNfZdfKmZ0KJCAWI6fli+/8dwYAlfPjZ48PqvvvmV2Qsq6CViJQ7Z2JF8livGXDxfsY+Unzdfyb5mw8L1dB7C24sg85RtDEDpVK3W/vHwyGziRsEQKYsK2wQ8BHAq+a9wUecNFyGl6SgV8/kVTStfUEcZJSkWvo+eGbfXNeYqXOfjvTh9gcoV/u7JX/NMr+/6yP5Q6GCN940v+29kg+bhgkLs4ybk09ZV8fcrgdLql9m8EDwu+Z30l+LuZtD6YP1q2arp/Hlp/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyjyjNrdeIVgq9DKEDZQjlMi9HxtltDYmdiZ02zNcfOyWlLYUDR6pUeWd77bUvXvYxR0nseD7nkAnCqBYMuvo/ruNAq2lFRrMFbaPu1mdGO8JNA5Blo0Zj5uJ2W9cCznMIKBeIiq7uWLZr2Jb8XduW17C9erNmt63funYDGZfQ0qVm6VqRxJR7ZdiunmfUY4gT7lGUAPcE9kL//KcnPT1UcdJ7x2uWZcCstxAi9UwT1yLAEMe4hlliHps7PscR90Iyp0jkGbzEjHhXf9m7Wq1qK7fGsrnpWJZlWh1T+kSczL/rvW/VZogCOmPrdR9RRglGMfmLFKlzEAsWaX48ZxkRi+QdaNu0LQVtQIENbNfpd918DVCy+yTSDsmMI4MvkF2BXcEMMqAYtOlV0NW/f66D673XGaJ8xrKE762/RgnoEmKWQmTwKrOK3ecRD5SrdwzYCyiOc06WcKHGJEUYuHaZwYwUPwmXwxdxrWy/VvBqwgB/pSXH5jZPSds8UJkBmQMX/6df271ao9ygOIcevfjRvh3FAM7psHMamvbf4ia9jS8fxvfdksK285rUptUv6/1B3czVyyZy9+zSx2IQxe3Lm4uz30OSdU6zhc/zFG7Ny2w2MScn/anDohTHyfjGDu5wiBt3j0/9e3YdPoyDo+BxMjkaW4OLb+m9ezS5ntqrx3hVnJ+Nz1e/jyA8EZ18NF3Goyc7xol9OrZu0/CRnk6XE7/usB9/+2Ewqx/5xa/bZ6cxLdq/puPl+Nt5OO/UHf9peObWH5p3/RPmd19z2s5h11jJQZg/PAIW1VKNRjDQRrJfSHwsLcpCImNWunqp0icugAq9p3YpWfFyKT4k8mQz1+thu2n32x235ff9htM5GVp1yx5ZvtXqdJpDp13pz5rFHsU+ozOiYimFXc/PxwRx4nGgEWTGkuV4AVz/AHGABNICeiUPBqMcrplS8M6g47on7qgxbDaGo2a/1bQbjm2NRi3brftSvS+YmNBJ5s8EZLvq7e6o9xVgkhJQEq/mnMtB50KW5A9a5iK2a0tUo5DLSyBTOuw59XbD5CRJY1CEzYRFeQy1dJGWBTL5+t8xEOallXCcskyguDyF7ya5/62qh/SJiHLgKqMTkD2FA5eRW6XzJu36wUurgvfziKjDJosrMoLXTHY/vc6MGpbNwGzywtyuuG+2fBHiAID5AT9zvzSbeNGSbEWvLlh5Z0hV6VXt/YNqf2r5cpmXDW0pxcwkvGmbVssMAedS9p6v2RNQcwNhfurG2bDei7yx7/LLxYKGAglI5Php5fITz40QuHpuBPL4FJ99y+yElHUTUIhDtn4sXyWK8YcPF+xh5SfNl/JvxbLotV0HsLbiyDzlG0MQOlcrdb88vzMbmElYIgWRZdvghwAOBd81boq84SLkND3kAt7/oiml6+oIY5ZTEQz00rCtviVP8ZyC9+r0BqZU+Jcru+DvXtl35z9DqYMJ0je+5L+dDVKOCwa5i5OSS1cv5OtTBqfzLbV/IXhY8FvWR4K/m0nvjfmtZaum++eh9y8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqowNpaWmhI8xw3aLcBN37eF7OxDSFaEkwSaHy609SLAKiR88MM0xWV771rUu+5FLARVwKGkJgLgmjRq9dM/+JHCdCZTcqIPfRK7i+4xeqlcgqIDuEyCrByAs90+gJkeAeFRJSWTNLlu0UbEv97mwrKNuBWyk6rve3afzGXCho5VK0TCNdxFQEWdiamXAaMCiICChcYBFIFEwbg36gPAOYczLrl1uWWUBen0u5DABAxRAjHMeoiNgCXIIDn8tQBFMyo1AmHL/FDEXNfNu7Xq+La6fI+AyULMsCVhUon1CQ2blZP8s347BHI7ZdtyBllCAYkw3UpAZYzlloNOIZ40TOF59A28C2NHQBp0iVz6XnJngPkLH7JtIBSS5gQcyhnYNNcIQ5pggb95NezTz/Xge3e+84pCJifCGO1j+jhOkKx2yJw4LIM8vZfR/xRLnqlxgFPYriRJAVHuoxWUKEhTHmOCJpnwg1fKEwsvYbqcgnDKOftOQS7PNUtMGJyrTJDAv5f/q136stym8YJ7j+sBw6nesxBs7qvn/x3N1Mn9LUjx6bLauWUdh33pLatfptfTyou7l620TTwXV3PSCpfXd1FceNF3cQ3jjX5atVwlUhgTe5Aavnhv3Q/3WRDtreMPQ3UfxUcq3F7c2GhxvW7sxuxvardY3OmolnT0e3FyK5YI1pOpajyYvvlCZ/2J/mdPzsW48P4vZ1fOsg2SJzd3MXjbz+Vfo0sx9uPOuq0/eGHK15ue8L++zXg4QPaGRfE7uyenwaeuC+9p7Tfg6HxlwOpsnjE0YyX+rR6LWNruoXlF9Li7aQsBBlrsFS65OQmEqzrndpWQkSJT4kDFQzt+tOxbNblarjN+12uVRtdizXsrtWw/KrVa9TquT6s2VxRLHFaER0LK2w2/n5miBaBALTEPPCiiVojoX5BWIbSmj06EQdDEYFvmNKwZ2SV/VafrPbcctuudlQjFuu1fYdz+/6nW7FNIZMjuiINyKJ+aF6OwfqPcGILAnWEq/nXKhBF1KV5AWuEhnbxRUsUpyoS4BrHQ5KbqUMBFksY6wJgwULkxgXl/NlViAgtv+lAkQisxKBloxLGGen8NMkj7/l9VA+IdEOQmfUxKqn+MRl5OTpfEjbPXlp5fCNJCT6sKniSk7Qlsnhp/eZ0cOyG5hdXkjYOffdlh9CnAAAX/ADx6XZxQtXZC96fsGqO0OpSj1v7wssvhST1SrJGuprxeQKHtjA8sEUo0TJ3usde8YU7CDAt26cHeujyDv7Ib9EzulUQokXavyMbPmN58YUC/3c6Knjk373LXMQUtVN4lSesrVi9SrRjL98uKAAaT9lHqu/NePhe7tOYO3FUXmqN4YkdKZX+n55/WQ2EFOwRAki4/vgpwBOBT807oq84yLVND0mEn/+xdBKVzMhQiyhstc2M8O++mY85esSB+9OH2AyhX+7slPx6ZX916A/VTq4gObOl/y3c4Fk44Kw2iVIxqVmpur1qYLT2Z7avxE8KfgN3/pK8A8zqX8wf7Ts1fT4PNT/BQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065142</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065144</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937A83529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937ACB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937B1E529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="9a25b3f6-6b0c-49b0-8ad9-5cd56bcb4d6a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937B84529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C8937C6A529BE0401F0A07996E28:1F48A14F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937B72529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937B72529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937B72529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937B84529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937BCC529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937C1F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937B84529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937BCC529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937C1F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU/I6FH3/fkWnPjKlLVRaOsIMFNSOePkERX05E9INBNu0NCkXf/1JikVA9OiZYYbJ7s7aa1+ykjOGorDithiDlJOYKn6nof4DCMCqnQbaqIYqmmXBWBs5tq05CI0rwbiKajVTVXzGMvAp44jyhloxzKpmGuI3MA331HRPjbJZtV9U5RFSJqCFS9lQlVUUUubmYRtqllI3Rowwl6IImMux229d91zh6aKCk9o827DMA6bNKeeJq+u4HACGMMRlHEf6mb7ncxYwt08mFPEshfeYAWuo73uXy2V5WS3H6USvGIahG3Vd+ASMTE7U5p9iMwQ+HcebtYdoTAlGIXlDktQ18GkcKK1wEqeET6MvoE3dNCS0BiusYdOiJ6r+ESBn90OkPZIpQxqbIrMAu4cxpEAxKA/3fkM9+VkHN3sHKaJsHKcRO1j/jhLQBYRxAoHGiswKdj9HPFKu5hlg16c4zBhZwI0ckwRhYMpdCmOy6hEmhi9gSt5+ZcWKCQP8m5ac6bs8BW39SGU6ZAKM/59+7fZqg/KIwgya87X32nts+wNvmPwlw9nTrN31R15yU3pt5BR2nTektq1+Xx8O6nau3jfB28MIxx7XjXaCZ3e0ZHrtwaN5FcTXCen9jbzZBdKH1SHvzeuJ2e9c0nB4cX3R9UtVfGmYzsPIntO32iMu3fb+lAY9XGOvVw9PLcPpTFZ+dLWc0eH0Ppte3l2/dV9mN/fG+sVOEAzOX24mFr6sVEvPs/5VaZYOzSHN6o5Tv7waR8nyz+p5tu50u+R5HTqjlrlEDm585LSbw76xkIN+NpoB5sVSjobfUc5FvxD/XlqkhQTaOHd1E6lPjAPlalPukrLiZkJ8SOCKZm7WXadmek69arcd67RSb3cNyzDPjZZh1+u1bsUp9GfD4oCiF9MxkbGkwm7m53uCOHIZ0ABSbRFneApM/QaxgzhSfHovDkZMGQxioeCG3TYsyzNNy26fV+qe1araNc82qm2vKuh6qnIT81t6m7bGHNJ99a7uqfc9YJIQkBIv55yJQWdclGSOFhkPzfIClSlk4hJIpQ67Fcs51RmJkhAkYT2KgyyEcjJN8gLpbPNf0RBmuZUwnMQpR2F+Cr9M8vBbUQ/hExDpwGRGbRA9hSOXkVWk83Xatd20C/hWFhB52ERxeUrwhsn+p4+ZkcOyHZhtXpiZBfftll9CHAHQv+GnH5ZmGy9YkJ3oxQUr7gyhKs2ivXNUnpezxSLLG2pLxUwFvG7qhq33AWdC9taD+BWovoXQf3TjbFkfRN7a9/llfEr7HHGIxPgp+fIHz40+MPnc8MXxWf30LbMXUtSNw4ofs3mheJVIxt8+XLCLpZ8w34m/ZZwGH+06grUTR+Qp3hic0Ilcyftl/cVs4FjAEiGIcboLfgzgWPB947bIWy5cTNMo4/D1F0UqXUNFGMcZ5X5HzQ276pvz5OsE3A+nTzC5wr9f2Sv25ZX9dN3rCx2MkLr1Jf/trJF8XDCIXYzkXBrqSrw+RXA62VH7d4LHBd+ufCf4+5k0P5k/W3Zqengemv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FH3/fkWnPjKlLVRaOsIMFNSOePkERX05E9INBNu0NCkXf/1JikVA9OiZYYbJ7s7aa1+ykjOGorDithiDlJOYKn6nof4DCMCqnQbaqIYqmmXBWBs5tq05CI0rwbiKajVTVXzGMvAp44jyhloxzKpmGuI3MA331HRPjbJZtV9U5RFSJqCFS9lQlVUUUubmYRtqllI3Rowwl6IImMux229d91zh6aKCk9o827DMA6bNKeeJq+u4HACGMMRlHEf6mb7ncxYwt08mFPEshfeYAWuo73uXy2V5WS3H6USvGIahG3Vd+ASMTE7U5p9iMwQ+HcebtYdoTAlGIXlDktQ18GkcKK1wEqeET6MvoE3dNCS0BiusYdOiJ6r+ESBn90OkPZIpQxqbIrMAu4cxpEAxKA/3fkM9+VkHN3sHKaJsHKcRO1j/jhLQBYRxAoHGiswKdj9HPFKu5hlg16c4zBhZwI0ckwRhYMpdCmOy6hEmhi9gSt5+ZcWKCQP8m5ac6bs8BW39SGU6ZAKM/59+7fZqg/KIwgya87X32nts+wNvmPwlw9nTrN31R15yU3pt5BR2nTektq1+Xx8O6nau3jfB28MIxx7XjXaCZ3e0ZHrtwaN5FcTXCen9jbzZBdKH1SHvzeuJ2e9c0nB4cX3R9UtVfGmYzsPIntO32iMu3fb+lAY9XGOvVw9PLcPpTFZ+dLWc0eH0Ppte3l2/dV9mN/fG+sVOEAzOX24mFr6sVEvPs/5VaZYOzSHN6o5Tv7waR8nyz+p5tu50u+R5HTqjlrlEDm585LSbw76xkIN+NpoB5sVSjobfUc5FvxD/XlqkhQTaOHd1E6lPjAPlalPukrLiZkJ8SOCKZm7WXadmek69arcd67RSb3cNyzDPjZZh1+u1bsUp9GfD4oCiF9MxkbGkwm7m53uCOHIZ0ABSbRFneApM/QaxgzhSfHovDkZMGQxioeCG3TYsyzNNy26fV+qe1araNc82qm2vKuh6qnIT81t6m7bGHNJ99a7uqfc9YJIQkBIv55yJQWdclGSOFhkPzfIClSlk4hJIpQ67Fcs51RmJkhAkYT2KgyyEcjJN8gLpbPNf0RBmuZUwnMQpR2F+Cr9M8vBbUQ/hExDpwGRGbRA9hSOXkVWk83Xatd20C/hWFhB52ERxeUrwhsn+p4+ZkcOyHZhtXpiZBfftll9CHAHQv+GnH5ZmGy9YkJ3oxQUr7gyhKs2ivXNUnpezxSLLG2pLxUwFvG7qhq33AWdC9taD+BWovoXQf3TjbFkfRN7a9/llfEr7HHGIxPgp+fIHz40+MPnc8MXxWf30LbMXUtSNw4ofs3mheJVIxt8+XLCLpZ8w34m/ZZwGH+06grUTR+Qp3hic0Ilcyftl/cVs4FjAEiGIcboLfgzgWPB947bIWy5cTNMo4/D1F0UqXUNFGMcZ5X5HzQ276pvz5OsE3A+nTzC5wr9f2Sv25ZX9dN3rCx2MkLr1Jf/trJF8XDCIXYzkXBrqSrw+RXA62VH7d4LHBd+ufCf4+5k0P5k/W3Zqengemv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGljyPIhUsuKkhcZ5hpoQudTrcvK49zALeJHWwn0P76tUNDgdJuuxIS8snxd75z8WefC5TEbtgRArgkjBqjfsv8px54jXoT1SsehqhSx3O3gpo+VMCdezVke/WaE5jGSIgMRlRIRGXLdG2nVnFs9bt27LDhhA23GtRqd6ZxA1woaOVStU1jk8RUhEXYlplxGjIkiAgpSkCEEoezzuVFqDxDVHIy2+dblkVA3l5KmYaWhasRYIhjXMUssc6tA5/zSIQzsqBIZhyeY0aiZT7vXa/X1XWtyvjCcm3btuzAUj6RIIszs/2l3AzRiM7Zdt1DlFGCUUyekCZ1CXLJIqMTLxgncpm8Ae1Yjq2hK7DBFezU6ZlpvQQo2H0Q6YAkF6gilsgpwaYwBw4Ug/FrOmqZZx/r4HbvNUdUzBlPxNH6c5SA5hCzVEUTZWYlu48jnihX+xxwOKI4zgTJYazHJEUYhHHFYU42F0So4YuEUbTf2IhywgB/piXn1j5PRds6UZk+WYCQ/6df+73aotygOIN23uPcfXTZ7dX3nJF0tUST8ZPzrdlzWKugsO+8JbVr9fP6eFB3c/W86eHxhiQN/HCR4aeu7/ZHQe/35UW9mQ/8xsrL+gtr5t8+pUu2mfbzZnSLKfDFfEVrnWgC48u/rm6/2f61H+U/XO/L8E4w6oxtNK39nTfvk437a73YZFl69zuNYel+733t3DaGNxZ3komcXnmjDQsGP+nT7OHb/Vd+vUA/nwZNROswHn8RN82HibV2lg5aReR+0pXr1ktO+zkcGks5mGV/7gHLcqlHY9Q3hqpfSL4vLdpCosq8cA1TrU9CApVmW+/SshJmSnxIFKpmbtcDv+n0/KDmdXu9hht0B3bddoZ2x/aCoDlw/VJ/tiyOKPYYnRMdSyvsdn7eJ4iTUACNgFdyluElCPMdxD6SyBjRqToYjAq4ZkrBXb8R+K7nd/r+wPW6TqM3dNxG4AXd5tB1hkq9x0xO6IR35hL4oXrXDtR7CpikBLTE6zkXatCFVCVZoTyTsVPNUZVCpi4BrnU4dOt+wxIkUeOgCVsJi7IYqukyLQpkie2/kiMsCisROGVcorg4hW8mefytrIfyiYh2EDqjLqiewonLqF6m8yrt+slLq4TvZBHRh00VV3KCt0wOP73MjB6W3cDs8sLCKbnvtnwS4gSA9Q4/67g0u3hRTvailxesujOUqrTL9q5QdVXN8jwrGuppxeQK3nIs27NmgDMle4/X7AGotYOwPnTj7FgfRd7ZD/llcklnEklI1PgZxfIDz40ZCP3cGKnjs/noW+YgpKqbhI08ZevF6lWiGb/7cMEh1n7KfKX+1oxHL+06gbUXR+Wp3hiS0IVe6fvl8Y3ZwEzBEiWIjO+DnwI4FfzQuCvyjotU0/Qnk/D2F0MrXctEGLOMylHfLAz76lvwlI8phC9Or2AKhX++sjfizSv79vJipnQwQebOl/y3c4UU44JB7RKk4NIyN+r1qYLTxZ7aPxM8Lfie+57gH2bSfmV+bdmr6fF5aP8L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tq45nSC0WgI8xggbPxgiKibl/OhHQVsm0TTFIu/vqTFIuA6NEzwwyT1ZVvfeuSLzkVKE28oCUEcEkYNXrthvkPPnFiD3BkVcZx1fLx2LFQ1a9bzjg6QRi7sYdqptETIoMeFRJR2TA9xy1brqN+d64TVNygUik5jvtkGvfAhYJWLiXHNJZpQkWQh22YGacBQ4KIgKIURCBxMGxdXQbKM0AFJ7N5umaZB+TNqZSzwLZxKQIMSYJLmKX2qb3jcxqJYEgmFMmMw1vMSDTMt72LxaK0KJcYn9ie4zi2U7eVTyTI5NhsHhWbIerRmK3XIaKMEowS8oo0qSuQUxYZrWTCOJHT9BNo13YdDW3BElvY9emxab8HyNl9E2mHJBfIElPkFmC3EAMHisEY3fYa5vH3Orjee8cRFTHjqdhb/4wS0DkkbAaRJYrMCnbfRzxQruYp4KBHcZIJMoe+HpMZwiCMGw4xWV4SoYYvEkbefmMpigkD/JOWnNrbPBVt+0Bl2mQCQv6ffm33ao1yj5IMmiGurVzqUDl6mN2mtfroPFx1RufxY9pp5BS2ndekNq1+W+8P6mau3jbNvPPayWvv1fGiy3vPP+dMPPX704E7WNxm/uu93/IH4+yhH17Ez6PxffdmWl9601/LQbsSy/YJfv0tLhFbsFF9To7Kf3dG5cEFHvS98zK/m2fJhfuLpzfX2fBhvKqh8tWNCG1ydxWdhY/9wcMz6faWf/2ZdNBrNF84dFWrRwL8FZn/JkeLPq8uxRM8dsaPj+PWZa2PG+85beewayzkYJiN/wCWxVKPRq9tdFW/kPxaWrSFRFacuwYzrU9CApVmU+/SshJkSnxIFKhmrted2okb1urlauh2K179rOP4jtt1Wk61Xj/peLVCf9Ys9iiGjMZEx9IKu56frwniNBBAI+DWnGV4CsL8ArGNJDJ69FYdDEYF3DGl4H6nU3NDv9I9a7e6Yd1xztrtiudWwroXepWW0uE+k9f0mrdiCXxXvcs76n0LmMwIaInXcy7UoAupSvKC5plM3NIclShk6hLgWocDz69VbEHSWQKasJ2yKEugNJvO8gLZYv3vWQiL3EoEnjEuUZKfwk+T3P9W1EP5REQ7CJ3RGaiewoHLyC/S+ZC2f/DSKuBbWUT0YVPFlZzgNZPdT+8zo4dlMzCbvLBwC+6bLT+EOABgf8HP3i/NJl40J1vRiwtW3RlKVZpFe19Q6aWUzedZ3tCqVkyu4G3Xdqr2EHCmZG91x56B2hsI+1s3zob1XuSNfZdfJqd0KJGEVI2fkS+/8dwYgtDPjZ46PsvvvmV2Qqq6SVjKQ7YwUa8SzfjLhwsOsPZT5hv1t2A8em/XAaytOCpP9caQhE70St8vq09mAzMFS5QgMr4NfgjgUPBd46bIGy5STdM4k/D5F0MrXcNUJWQZlb22mRu21TfnKVczCN6dPsDkCv92ZS/Fp1f249XlUOlgisyNL/lvZ4vk44JB7RIk59Iwl+r1qYLTyZbavxE8KPhnVe8rwd/NpPnB/NGyVdP989D8Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065149</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065151</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937B85529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937BCD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937C20529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_FUNC_CLG_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="2c94c539-a988-48c8-a4cc-c306cf372755"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937C86529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C8937D18529BE0401F0A07996E28:2E6E1E39"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937C74529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937C74529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937C74529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937C86529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937CCE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937C86529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937CCE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3icx47xjYvxBGaMuZSWhDYQkvbljCJvQKmRHEkmJF9/JBMToCQnPTPMMNreWnvti5Z0LtAq9cJICOCSMGoMuy3zH6fuO8GdF1g4SHyr6jdcC3lwZ4EPtWYjSDBgxzSGQuQwpEIiKlum57i+5TrqN3WdsOaGtUbF9fxfpjEDLhS0cqmoXZtVSkVYhG2ZOachQ4KIkKIViFDicBJdjELlGaKSk9k+37IsAvL2UsostG1cSQBDmuIKZiv73D7wOU9EOCELimTO4SVmIlrmy97Hx8fKo19hfGF7juPYTtNWPokgizOz/ancDMmQztl2HSPKKMEoJc9Ik7oAuWSJEaULxolcrt6Adm3X0dAWbLCF3So9M+3XAAW7DyIdkOQCWWKJ3BLsCubAgWIwrq+GLfPsYx3c7p1yRMWc8ZU4Wv8dJaBrSFkGiSXKzEp2H0c8Ua72OeBwSHGaC7KGSz0mGcIgjO8c5mQzIkINXyKMov3GRpQTBvhvWnJu7/NUtO0TlemSBQj5f/q136stygylObSj+KY7HtVdh9PgKWdTL4bxzeQbj79ErYLCvvOW1K7VL+vjQd3N1cumcXL9MHJ+Pcc1P248DgZV8bnHR6Or6u3N5TCyg/vN4HL8m2Wr5Nnp/HToF5ong/VXX9Z/JOzef+iMhZhcOPTeu5l8It2YD6v3Xzux7V96N9ObztMsmrvdzyO7dy1+ZmK+gcn62r29v5g12ey2Xp/FWdCnozSRtw+zPvsWPzcv5l347MpPAyL60x/XIu8MFo2nyQD1f7Zec9rP4dBYysEkv7sHLMulHo1h1+irfiH5vrRoC0mseeEaZlqfhAQqzbbepWUlzJX4kCRUzdyue0HdjYOm34iDes1rdnpO1XH7TuQ0ms16zwtK/dmyOKIYMzonOpZW2O38vE8Qr0IBNAFurVmOlyDMdxC7SCJjSK/UwWBUwJQpBa9We71q0I97NSdyu17UbKpTH0XNfs31u7VGZBqXTI7pmEdzCfxQvf0D9b4CTDICWuL1nAs16EKqkjygdS5Tt7JGFQq5ugS41uHQqwY1W5BVloImbK9YkqdQyZZZUSBbbP89C2FRWInAGeMSpcUpfDPJ429lPZRPQrSD0Bl1QPUUTlxG1TKdt9Ou76ddwkd5QvRhU8WVnOAtk8NPrzOjh2U3MLu8sHBL7rstfwlxAsB+h599XJpdvGRN9qKXF6y6M5SqtMv2PqDKQyVfr/OioQ2tmFzB267tNOwJ4FzJ3tOU/QZq7yDsD904O9ZHkXf2Q365XNKJRBJWavyMYvmB58YEhH5uDNXx2Xz0LXMQUtVNwkaessWpepVoxu8+XHCItZ8yf1d/j4wnr+06gbUXR+Wp3hiS0IVe6fvl6Y3ZwEzBEiWIjO+DnwI4FfzQuCvyjotU03SXS3j7i6GVrmUijFlO5bBrFoZ99S14yqcMwlenP2AKhX+5sjfizSv79mI0UTq4QubOl/y3s0WKccGgdglScGmZG/X6VMHpYk/tXwieFvxG9T3BP8yk/Yf5T8teTY/PQ/tf</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3icx47xjYvxBGaMuZSWhDYQkvbljCJvQKmRHEkmJF9/JBMToCQnPTPMMNreWnvti5Z0LtAq9cJICOCSMGoMuy3zH6fuO8GdF1g4SHyr6jdcC3lwZ4EPtWYjSDBgxzSGQuQwpEIiKlum57i+5TrqN3WdsOaGtUbF9fxfpjEDLhS0cqmoXZtVSkVYhG2ZOachQ4KIkKIViFDicBJdjELlGaKSk9k+37IsAvL2UsostG1cSQBDmuIKZiv73D7wOU9EOCELimTO4SVmIlrmy97Hx8fKo19hfGF7juPYTtNWPokgizOz/ancDMmQztl2HSPKKMEoJc9Ik7oAuWSJEaULxolcrt6Adm3X0dAWbLCF3So9M+3XAAW7DyIdkOQCWWKJ3BLsCubAgWIwrq+GLfPsYx3c7p1yRMWc8ZU4Wv8dJaBrSFkGiSXKzEp2H0c8Ua72OeBwSHGaC7KGSz0mGcIgjO8c5mQzIkINXyKMov3GRpQTBvhvWnJu7/NUtO0TlemSBQj5f/q136stygylObSj+KY7HtVdh9PgKWdTL4bxzeQbj79ErYLCvvOW1K7VL+vjQd3N1cumcXL9MHJ+Pcc1P248DgZV8bnHR6Or6u3N5TCyg/vN4HL8m2Wr5Nnp/HToF5ong/VXX9Z/JOzef+iMhZhcOPTeu5l8It2YD6v3Xzux7V96N9ObztMsmrvdzyO7dy1+ZmK+gcn62r29v5g12ey2Xp/FWdCnozSRtw+zPvsWPzcv5l347MpPAyL60x/XIu8MFo2nyQD1f7Zec9rP4dBYysEkv7sHLMulHo1h1+irfiH5vrRoC0mseeEaZlqfhAQqzbbepWUlzJX4kCRUzdyue0HdjYOm34iDes1rdnpO1XH7TuQ0ms16zwtK/dmyOKIYMzonOpZW2O38vE8Qr0IBNAFurVmOlyDMdxC7SCJjSK/UwWBUwJQpBa9We71q0I97NSdyu17UbKpTH0XNfs31u7VGZBqXTI7pmEdzCfxQvf0D9b4CTDICWuL1nAs16EKqkjygdS5Tt7JGFQq5ugS41uHQqwY1W5BVloImbK9YkqdQyZZZUSBbbP89C2FRWInAGeMSpcUpfDPJ429lPZRPQrSD0Bl1QPUUTlxG1TKdt9Ou76ddwkd5QvRhU8WVnOAtk8NPrzOjh2U3MLu8sHBL7rstfwlxAsB+h599XJpdvGRN9qKXF6y6M5SqtMv2PqDKQyVfr/OioQ2tmFzB267tNOwJ4FzJ3tOU/QZq7yDsD904O9ZHkXf2Q365XNKJRBJWavyMYvmB58YEhH5uDNXx2Xz0LXMQUtVNwkaessWpepVoxu8+XHCItZ8yf1d/j4wnr+06gbUXR+Wp3hiS0IVe6fvl6Y3ZwEzBEiWIjO+DnwI4FfzQuCvyjotU03SXS3j7i6GVrmUijFlO5bBrFoZ99S14yqcMwlenP2AKhX+5sjfizSv79mI0UTq4QubOl/y3s0WKccGgdglScGmZG/X6VMHpYk/tXwieFvxG9T3BP8yk/Yf5T8teTY/PQ/tf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxVy5xIVJEphTnovUM6Z8zJynR3waWLT2CHQrx87NBQo7bQjISHvbK+99sXLPuUoTZygyzlkgjCqhedt/R9Aju0hNzKcyMWGV3eR0axbsdGwoRFLexw5tq6FnOcQUi4QFW3dsWzXsC35G9tW4NuB36q1rMZvXZtAxiW0dKlZurZME8qDMmxbzzMaMMQJDyhKgQcCB6Pu9VUgPQNUcdI7p2uWZcCsMxNiHpgmrkWAIUlwDbPUPDV3fE4jHozIlCKRZ/AaM+Jt/XVvURS1wq2xbGo6lmWZVsuUPhEn02O9c1RthiikMVuve4gySjBKyAtSpK5BzFikdZMpy4iYpR9A26ZtKWgDltjAtkePdfMtQMnui0g7JDOODD5DdgU2hBgyoBi0h2HY1o+/1sH13nGGKI9ZlvK99fcoAV1AwuYQGbzKrGL3dcQD5eqcAg5CipOckwXcqDGZIwxcu8sgJssrwuXwRVwr268teTVhgL/TklNzm6ekbR6ozDmZAhf/p1/bvVqjTFCSQ4eNix56KZwT/uPyz93J07L++NBF3bhwmu2SwrbzmtSm1a/r/UHdzNXrpkGR1QlCzLqdm1PeEP7ZT/M29630MZyd3IXn3VgI1n/5Wb8vFm78YPOb+smvVWs4KAa/byYXN/0+c1/6N/GltxofFZ4j3Cv/ZGDdh3U36q1SGe2vIX0y7aGdNYuQ3+PF5Kl5n1yi1Wj8Y3Hme7wbWbl9ged3MSSNq4nfvBhP/MniKBmgaZ+6q6veSf15PBj447/bbzlt57BrrORglD/+ASyqpRqN8FwbyH4h8bm0KAuJjLh0DeZKn7gAKvSO2qVkJcil+JAokM1cr/vNut1rttxGr9f3ndZZ3/Ise2B1rUarVe87zUp/1iz2KPYYjYmKpRR2PT+fE8RpwIFGkBkLluMZcP0TxHMkkBbSoTwYjHIYM6ngZ5bV95pus97v9ru+41tOr+5I7lbrzGnZrqdrN0zc0ttMth+yXfV2d9R7CJjMCSiJV3PO5aBzIUvyjBa5SOzaAtUo5PISyJQOB47X9E1O0nkCirCZsihPoDafzcsCmXz97xgI89JKOJ6zTKCkPIUfJrn/raqH9ImIcuAqozOQPYUDl5FXpfMube/gpVXBd/OIqMMmiysygtdMdj+9zYwals3AbPLC3K64b7Z8E+IAgPkJP3O/NJt40YJsRa8uWHlnSFXpVO19RrXnWr5Y5GVDG0oxMwlv2qbVMEeAcyl7qzF7AmpuIMwv3Tgb1nuRN/ZdfrmY0ZFAAlI5flq5/MJzYwRcPTdCeXyWX33L7ISUdROwFIdsvUS+ShTjTx8uOMDKT5rv5F/BsuitXQewtuLIPOUbQxA6VSt1v6w+mA3MJCyRgsiybfBDAIeC7xo3Rd5wEXKaHnMBH3/RlNK1dYQxy6kIz/XSsK2+JU+xmkPw5vQOplT41yt7yT+8sn9dX42kDqZI3/iS/3Y2SDkuGOQuTkoubX0pX58yOJ1uqf0rwcOC3/A+E/zdTDrvzO8tWzXdPw+dfwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065156</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937C87529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937CCF529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="dc9356f8-07bb-465d-99eb-ce6a41c3f1e6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937D34529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937E13529BE0401F0A07996E28:5FC0F229"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937D22529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937D22529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937D22529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937D34529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937D7C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937DC8529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937D34529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937D7C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937DC8529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgOOEaFaRw62QK7Uwpozl9OTKOA6bBDrHDpV8/diAUKO1pjxSEvLO99tqXLPtKoEXseL4QJJWUMyPoNs1/nbCC61VnYtXK1cgq4wm0JqgWWo0onNTKGNaqZGIagRAZCZiQiMmm6djQtaCtngdoexXHs2GpAsuPpvGbpEJBK5eSbRqbRcyEl4dtmlnKPI4EFR5DCyI8ib2RPxx4ytNDBSezdbVjmQdMWzMpEw8AXAoJJnGMS5gvwBU48bkKhTeiU4ZklpJ9zFA0zf3e9XpdWrslnk6BY9s2sBtA+YSCTr+arS/FZhIGLOK7dQcxzihGMX1GmtSQyBkPDT+e8pTK2eINaAigraEtssEWhmX21QQvAXJ2H0Q6IZkKZIkZggXYPYlIShgmxvg+aJpfP9bB3d6HFDER8XQhztafo0TYisQ8IaEliswKdh9HvFCu1hXBXsBwnAm6Ird6TBKEiTB+piSimwEVavhCYeTtNzaimDCCP9OSK3DMU9EGFyrTpVMi5P/p13Gvdii/UZyRlj9JJwCyUYN/+z39g8aP4Xacdarxt5thM6dw7LwjdWj1fn0+qIe52m/6Ob+RA3fV6P/Kbr7Pw23t2ln2gjH88Q93nSEH6fp5hJd/8JM9ROVwc3t/PZl3rh8ATp/9p2EUzMfXvvr9KtcGzheYjO9Fb7ysg9vZeM02g+VkKSLm99pDZndkdDMDt2I2dPrfn6bxU+Iuf4zrcF7Z3D262baMkoYddWtwFbMHH38hd/F0iufb9U09lMGWC4ybLzkd53BqLORglE3mBMtiqUcj6Bp91S8k35cWbaGhFeWuXqL1SUjCpNnSu7SseJkSHxp6qpm7da9ehZ16w6113XLFabR7dtmGfdu3a41GtefUC/3ZsTij2OEsojqWVtjd/LxPEC88QVhIUmvFMzwjwnwHsYskMgJ2rz4MzgR54ErB277b8O1Kpe+67Ypdr/Vhu+10emUIXduuNvqmccvlHbtL/UiS9FS93RP1vieYJpRoiddzLtSgC6lKskSrTMawtEIlRjJ1CKRahz2nXK8AQRdJTDRhsOBhFpNSMkvyAgGx+3cshEVupQInPJUozr/CN5M8f1fUQ/mEVDsInVGbqJ6SV4cRVM8+nbfTrh6nXcD7WUj1x6aKK1OKd0xOX73MjB6Ww8Ac8sICFtwPWz4JcQEAvMMPnJfmEC9c0aPoxQGrzgylKq2ivUtUWpay1SrLG1rTipkqeACBXQMjgjMle9sH/kQYOECAD504B9ZnkQ/2U36ZnLGRRJIs1PgZ+fID140REfq6EajPZ/PRu8xJSFU3STbykq0Tq1uJZvzuxQV7WPsp80/1t+Zp+NKuC1hHcVSe6o4hKZvqlT5ftm/MBuYKlipB5Okx+CWAS8FPjYciH7hINU2TTJK33xha6ZomwphnTAZdMzccq2/OU24T4r04vYLJFX5/ZG/Em0f2n+FgpHRwgcyDL/1vZ4vm44KJ2iVozqVpbtTtUwVn0yO13xO8LPiO857gn2bSemV+bTmq6fn30PoL</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgOOEaFaRw62QK7Uwpozl9OTKOA6bBDrHDpV8/diAUKO1pjxSEvLO99tqXLPtKoEXseL4QJJWUMyPoNs1/nbCC61VnYtXK1cgq4wm0JqgWWo0onNTKGNaqZGIagRAZCZiQiMmm6djQtaCtngdoexXHs2GpAsuPpvGbpEJBK5eSbRqbRcyEl4dtmlnKPI4EFR5DCyI8ib2RPxx4ytNDBSezdbVjmQdMWzMpEw8AXAoJJnGMS5gvwBU48bkKhTeiU4ZklpJ9zFA0zf3e9XpdWrslnk6BY9s2sBtA+YSCTr+arS/FZhIGLOK7dQcxzihGMX1GmtSQyBkPDT+e8pTK2eINaAigraEtssEWhmX21QQvAXJ2H0Q6IZkKZIkZggXYPYlIShgmxvg+aJpfP9bB3d6HFDER8XQhztafo0TYisQ8IaEliswKdh9HvFCu1hXBXsBwnAm6Ird6TBKEiTB+piSimwEVavhCYeTtNzaimDCCP9OSK3DMU9EGFyrTpVMi5P/p13Gvdii/UZyRlj9JJwCyUYN/+z39g8aP4Xacdarxt5thM6dw7LwjdWj1fn0+qIe52m/6Ob+RA3fV6P/Kbr7Pw23t2ln2gjH88Q93nSEH6fp5hJd/8JM9ROVwc3t/PZl3rh8ATp/9p2EUzMfXvvr9KtcGzheYjO9Fb7ysg9vZeM02g+VkKSLm99pDZndkdDMDt2I2dPrfn6bxU+Iuf4zrcF7Z3D262baMkoYddWtwFbMHH38hd/F0iufb9U09lMGWC4ybLzkd53BqLORglE3mBMtiqUcj6Bp91S8k35cWbaGhFeWuXqL1SUjCpNnSu7SseJkSHxp6qpm7da9ehZ16w6113XLFabR7dtmGfdu3a41GtefUC/3ZsTij2OEsojqWVtjd/LxPEC88QVhIUmvFMzwjwnwHsYskMgJ2rz4MzgR54ErB277b8O1Kpe+67Ypdr/Vhu+10emUIXduuNvqmccvlHbtL/UiS9FS93RP1vieYJpRoiddzLtSgC6lKskSrTMawtEIlRjJ1CKRahz2nXK8AQRdJTDRhsOBhFpNSMkvyAgGx+3cshEVupQInPJUozr/CN5M8f1fUQ/mEVDsInVGbqJ6SV4cRVM8+nbfTrh6nXcD7WUj1x6aKK1OKd0xOX73MjB6Ww8Ac8sICFtwPWz4JcQEAvMMPnJfmEC9c0aPoxQGrzgylKq2ivUtUWpay1SrLG1rTipkqeACBXQMjgjMle9sH/kQYOECAD504B9ZnkQ/2U36ZnLGRRJIs1PgZ+fID140REfq6EajPZ/PRu8xJSFU3STbykq0Tq1uJZvzuxQV7WPsp80/1t+Zp+NKuC1hHcVSe6o4hKZvqlT5ftm/MBuYKlipB5Okx+CWAS8FPjYciH7hINU2TTJK33xha6ZomwphnTAZdMzccq2/OU24T4r04vYLJFX5/ZG/Em0f2n+FgpHRwgcyDL/1vZ4vm44KJ2iVozqVpbtTtUwVn0yO13xO8LPiO857gn2bSemV+bTmq6fn30PoL</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0Tp4yjEuUAgKkgZKD3pUHqhlxlejlzHgNvEBtvhMl8/diAUKO3pHAkJeWd77bUvXvaZgFnqhpEQmEvCqBF3mua/XrVRS579wELI9SzfQ4FVB6huYfTs4lENwUZSN41YiBzHVEhIZdN0geNZDlC/eweEVTcEbiUAtaFpPGIuFLRyqQDTWGYpFWERtmnmnIYMCiJCCjMsQonCQXTVC5VnCEtOZutszbIIyFsTKaehbaNKghFOU1RBLLPP7D2fs0SEAzKmUOYcb2Imomlu9i4Wi8rCqzA+tl0AgA0atvJJBBmfmq2TcjNOYjpi63UbUkYJgin5DTWpKywnLDGidMw4kZPsA2jHdoCGtvASWcjx6alpvwUo2H0RaY8kF9ASE+iUYHd4hDmmCBsPd3HTPP1aB9d77zmkYsR4Jg7Wf0cJ0zlO2RQnligzK9l9HfFIuVpnGIUxRWkuyBz39ZhMIcLCuOF4RJY9ItTwJcIo2m8sRTlhGP1NS87sXZ6Ktn2kMh0yxkL+n37t9mqN8gjTHLfmzP85+ech8K6r5HZBn6op6D093T+RS79ZUNh1XpPatnqzPhzU7VxtNv26vbgYrpKRl6S/lvVbGv+o8fl5dehFERj4M/598vz6moPZb+gT56Zay/q+17urp9ElvLjpiShuX9N49kzTvgtPEnQ1Wo0XNy93gT8O+gERV/hxdpnU4ZC95NlwBt0YjKfX89uHEeoOVwHoZ/Hjzxn4xpPF4+W3TkAuO6uLCzH9wU5eu7aYXwfRrNbndPht0pNx8y2n3Rz2jaUcDPLnF4xkudSjEXeMruoXlJ9Li7aQxBoVruFU65OQmEqzpXdpWQlzJT4kCVUz1+vzes1p1xte0AnaVbfx/Rz4wOmCCASNRu3crZf6s2ZxQLHN6IjoWFph1/PzOUGUhQLTBHNrznI0wcL8BLEDJTRieqcOBqMC3zOl4K7XrZ+3a9Wo3Q1qiuh55FRB1wWeX40CPwpMo8/kNb3m0Uhivq/e3p5632FEpgRriddzLtSgC6lKMoPzXKZOZQ4rFOfqEuBah0PXr1dtQbJpijVhO2NJnuLKdDItCmSL9b9rQSQKKxFoyriEaXEKP0zy8FtZD+WTEO0gdEbfseopfncZOSqjTTofp13bTbuEj/KE6MOmiis5QWsm+5/eZkYPy3Zgtnkh4ZTct1v+EuIIgP0JP/uwNNt4yZzsRC8vWHVnKFVple2dwcqsks/nedHQQCsmV/C2Y4PAHmCUK9lb3bNXTO0thP2lG2fL+iDy1r7PL5cTOpBQ4kyNn1Esv/DcGGChnxuxOj7Lr75l9kKqukm8lMds7VS9SjTjTx8uKETaT5lv1N+C8eStXUewduKoPNUbQxI61it9v6w+mA3EFCxRgsj4LvgxgGPB943bIm+5SDVNz7nEH38xtNI1TYgQy6mMO2Zh2FXfgqdcTXH45vQOplD4zZW9FB9e2T+vegOlgxk0t77kv50tUowLwmqXIAWXprlUr08VnI531H5D8Ljgu+5ngr+fSeud+b1lp6aH56H1Bw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBSbgmKkhcQoeZ0gvQy+7Lyjgn4JnETm0HaH/9OqGhQGm3sxIS8snxd75z8WefSZzErt+VEoSinBmjQdv8x/GqNRKFkQVeNLdqXiO0vAYmVtMmrahR81pOY24aIykzGDGpMFNt07WdquXY+jdzbL/u+na94jabf5vGHQipobVLxTaNTRIz6Rdh22YmmM+xpNJnOAHpK+JPu+MLX3v6uORkds62LIuAorNUKvURIpUQCMQxqRCeoDN04HMWSn9KFwyrTMBLzFC2zZe96/W6sq5WuFgg17ZtZHtI+4SSLr6anS/lZghHLOLbdR8zzijBMX3GOakxqCUPjW684IKqZfIOtIMcO4e2YEMs4tTYVxO9BijYfRLpgKSQ2JJL7JRgE4hAACNg3E5GbfPr5zq43TsTmMmIi0Qerf+MErAVxDyF0JJlZiW7zyOeKFfnDIg/YiTOJF3BZT4mKSYgjWsBEd1cUKmHL5RG0X5jI8sJA/InLTlD+zw1bXSiMgO6AKn+T7/2e7VFucNxBp3Fw/K2EfGotpiR279k+tRfBT+/fb/h2bpdUNh33pLatfplfTyou7l62aS69Zukq54bi8WTQ+T1Y7KM0sZ4cnlOxA2+rMc4fby7vw+c837Ymt9cTJ3zm598sgrmrW8MrtDD/LtcETSvDW/Fl+l1EG2e0e/ej2o4jIZwtx4/iCCdPQ+m3d+Ti4DPJIsnM3tM7uvuzbfW6ir8tRbLBzV20vtfwundIRg/E4eli7svGa1PVd/7fh6Oo58N6dRvefs1p/0cDo2lHEyz+S8gqlzmozEaGEPdL6w+lpbcQkMrKlz9NNcnqYAps5PvymXFz7T40NDXzdyug1bD6be8anPQb9VdrxfYNdsZ2l276XmNwG2V+rNlcUSxz1lE81i5wm7n52OCJPElsBCEteIZWYI0P0AcYIWNEZvog8GZhBnXCt4fBN0gsJtO3R02Br2q3ey5g57XDIatVtexPdO45OqKXYlupEAcqnf1QL0nQGhKIZf4fM6lHnSpdEke8SpTsVNZ4QqDTF8CItdh36216kjSJI0hJ4wSHmYxVNJlWhQIye2/a2EiCyuVJOVC4bg4he8mefytrIf2CWnuIPOMeqB7Cm8uI8evl+m8Sbt28tIq4btZSPPDpourBCVbJoefXmcmH5bdwOzyItIpue+2/CHECQD0AT90XJpdvHBF96KXF6y+M7SqdMr2PuLKYyVbrbKioc1cMYWGRw6ym2gKJNOy9zTjv4GhHQT61I2zY30UeWc/5JepJZsqrCDR42cUy088N6Yg8+fGSB+fzWffMgchdd0UbNQpWz/Wr5Kc8YcPF+KT3E+br/XfmovwtV0nsPbi6Dz1G0NRtshX+f3y9M5sEK5hqRZELvbBTwGcCn5o3BV5x0XpaZpnCt7/YuRK1zYxITxjajQwC8O++hY81VMK/qvTG5hC4V+u7I1898p+GF9MtQ4m2Nz50v92tmgxLgT0LkkLLm1zo1+fOjhb7Kn9C8HTgu+6Hwn+YSadN+a3lr2aHp+Hzr8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06520</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06522</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937D35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937D7D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937DC9529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="916df3e0-4be0-4386-b9a1-c5aa9f249e95"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937E4C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937F19529BE0401F0A07996E28:1645B6A8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937E3A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937E3A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937E3A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937E4C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937E94529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937ECE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937E4C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937E94529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937ECE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx1jC4yxPYEZh4/GLQlJIG3alzuKvIBSWyKWTCC//komJkBIbnpnmGG0Xp09+6EjnQicpfUwEgJySTkz4l7b/GfqNpue7yYWaniB5fo+svxpI7CcOiDiJB4KvKZpxEIUEDMhMZNts+6ghoUc9ZsgJ2zWQ6dVcwL02zR+QC4UtHKpOaaxylImwjJs2yxyFnIsqAgZzkCEkoTj6HwYKs8QV5zMzsmGZRkw78ylXIS2TWoJEEhTUiM8s0/sPZ+TRIRjOmNYFjk8x0xE23ze+/j4WHts1Hg+s+uO49hOYCufRNDZZ7PzqdoMScymfLPuYsYZJTilT1iTOgc554kRpTOeUznP3oBGNnI0tAUrYhHkss+m/RKgZPdBpD2SucCWmGNUgV3DFHJgBIyb67htfv5YBzd7JzlmYsrzTBys/44SsCWkfAGJJarMKnYfRzxSrs4JkDBmJC0EXcKFHpMFJiCMyxymdDWkQg1fIoyy/cZKVBMG5G9acmLv8lS07SOV6dEZCPl/+rXbqw3KD5wW0JHcvcvrp49D99cgekJs9DSYDc8eomxI2iWFXecNqW2rn9eHg7qdq+dNPc4H6/GDmK2/k69x/9tZcSuezrrnN9n0/DdfN/KYgN/s0dHV+qbfzajjZS2SOaOzydl3fH73m4/vgmT+lF6t/0Sffg5u7ldf0M9WdNEdyVnzJxldpGeyP5J/ZpPGxL+5jAct9/T2/paftu6/rdlVkN5ergt28XV0AcWKtaiPv9iDG69PP9WHAzTJCjRPbPEL0ScbO+2XnHZz2DdWcjAu7u6ByGqpRyPuGQPVLyzflxZtoYk1LV3DhdYnIYFJs6N3aVkJCyU+NAlVMzfrvu+hrh80Wn2326wHp33HddDAiZxWEHj9ul/pz4bFAcUuZ1OqY2mF3czP+wRJFgpgCeTWkhdkDsJ8B7GHJTZidq0OBmcCJlwpuOt7QavZOm14HnKRG3l1J+pF3qDrOz2/0Q9M44LLERvl0VRCvq/ejT31vgZCFxS0xOs5F2rQhVQlecDLQqaotsQ1BoW6BHKtw2Hd9Zu2oNkiBU3YznhSpFBbzBdlgWyx+a9bmIjSSgVZ8FzitDyFbyZ5+K2qh/JJqHYQOqNTUD2FV5cRCptVOm+n7e2mXcFHRUL1YVPFlTklGyb7n15mRg/LdmC2eRGBKu7bLX8JcQTAfoeffViabbxkSXeiVxesujOUqnSq9j7g2kOtWC6LsqEtrZi5greR7bTsMZBCyd56wv8As7cQ9odunC3rg8hb+z6/Qs7ZWGIJmRo/o1x+4LkxBqGfG7E6PquPvmX2Qqq6SVjJY7Zuql4lmvG7DxcSEu2nzJfq75HnyUu7jmDtxFF5qjeGpGymV/p+Wb8xG4QrWKoEkee74McAjgXfN26LvOUi1TTdFRLe/mJopWubmBBeMBn3zNKwq74lT7leQPji9AqmVPjnK3sl3ryyb8+HY6WDGTa3vvS/nS1ajgsBtUvQkkvbXKnXpwrOZjtq/0zwuOA3ovcEfz+Tzivza8tOTQ/PQ+df</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx1jC4yxPYEZh4/GLQlJIG3alzuKvIBSWyKWTCC//komJkBIbnpnmGG0Xp09+6EjnQicpfUwEgJySTkz4l7b/GfqNpue7yYWaniB5fo+svxpI7CcOiDiJB4KvKZpxEIUEDMhMZNts+6ghoUc9ZsgJ2zWQ6dVcwL02zR+QC4UtHKpOaaxylImwjJs2yxyFnIsqAgZzkCEkoTj6HwYKs8QV5zMzsmGZRkw78ylXIS2TWoJEEhTUiM8s0/sPZ+TRIRjOmNYFjk8x0xE23ze+/j4WHts1Hg+s+uO49hOYCufRNDZZ7PzqdoMScymfLPuYsYZJTilT1iTOgc554kRpTOeUznP3oBGNnI0tAUrYhHkss+m/RKgZPdBpD2SucCWmGNUgV3DFHJgBIyb67htfv5YBzd7JzlmYsrzTBys/44SsCWkfAGJJarMKnYfRzxSrs4JkDBmJC0EXcKFHpMFJiCMyxymdDWkQg1fIoyy/cZKVBMG5G9acmLv8lS07SOV6dEZCPl/+rXbqw3KD5wW0JHcvcvrp49D99cgekJs9DSYDc8eomxI2iWFXecNqW2rn9eHg7qdq+dNPc4H6/GDmK2/k69x/9tZcSuezrrnN9n0/DdfN/KYgN/s0dHV+qbfzajjZS2SOaOzydl3fH73m4/vgmT+lF6t/0Sffg5u7ldf0M9WdNEdyVnzJxldpGeyP5J/ZpPGxL+5jAct9/T2/paftu6/rdlVkN5ergt28XV0AcWKtaiPv9iDG69PP9WHAzTJCjRPbPEL0ScbO+2XnHZz2DdWcjAu7u6ByGqpRyPuGQPVLyzflxZtoYk1LV3DhdYnIYFJs6N3aVkJCyU+NAlVMzfrvu+hrh80Wn2326wHp33HddDAiZxWEHj9ul/pz4bFAcUuZ1OqY2mF3czP+wRJFgpgCeTWkhdkDsJ8B7GHJTZidq0OBmcCJlwpuOt7QavZOm14HnKRG3l1J+pF3qDrOz2/0Q9M44LLERvl0VRCvq/ejT31vgZCFxS0xOs5F2rQhVQlecDLQqaotsQ1BoW6BHKtw2Hd9Zu2oNkiBU3YznhSpFBbzBdlgWyx+a9bmIjSSgVZ8FzitDyFbyZ5+K2qh/JJqHYQOqNTUD2FV5cRCptVOm+n7e2mXcFHRUL1YVPFlTklGyb7n15mRg/LdmC2eRGBKu7bLX8JcQTAfoeffViabbxkSXeiVxesujOUqnSq9j7g2kOtWC6LsqEtrZi5greR7bTsMZBCyd56wv8As7cQ9odunC3rg8hb+z6/Qs7ZWGIJmRo/o1x+4LkxBqGfG7E6PquPvmX2Qqq6SVjJY7Zuql4lmvG7DxcSEu2nzJfq75HnyUu7jmDtxFF5qjeGpGymV/p+Wb8xG4QrWKoEkee74McAjgXfN26LvOUi1TTdFRLe/mJopWubmBBeMBn3zNKwq74lT7leQPji9AqmVPjnK3sl3ryyb8+HY6WDGTa3vvS/nS1ajgsBtUvQkkvbXKnXpwrOZjtq/0zwuOA3ovcEfz+Tzivza8tOTQ/PQ+df</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxVygUCIClK4dMo5tLRQqh5eRq6zAbeJTWOHy3z92KGhQIGhIyEh72yvvfbFy77mKI4cP+AcEkEY1Tqtmv63ZRVfcRXAqGDsGKViZWygqoWNkud54NgwdstVXetwnkKHcoGoqOmOZRcN25K/J9vyXce3vELFdUa69gwJl9DSpWDp2jKOKPezsDU9TajPECfcpygG7gvsD4K7ri89fZRz0uvXa5ZZwKQ+FWLmmyYuhIAhinABs9i8Nnd8rkPuD8iEIpEm8Bkz5DX9c+9isSgsigWWTEzHsizTqprSJ+RkcqnXL/LNEHbomK3XTUQZJRhF5B+kSN2BmLJQC6IJS4iYxkegbdO2FLQBS2xgu0QvdfMrQMbuTKQdkglHBp8iOwfrwxgSoBi0Yb9T0y/P6+B671OCKB+zJOZ7659RAjqHiM0gNHieWc7ufMQD5apfA/Y7FEcpJ3O4V2MyQxi49pDAmCy7hMvhC7mWtV9b8nzCAP+kJdfmNk9J2zxQmRaZABf/p1/bvVqjPKMohXoYvyzmQaMHv98iWFFs9h69wV9R9+YN1zIK285rUptWf673B3UzV5+bGu92cP+WpL33aXXYGC376RuNV2QYFr2VF428x1EjcM1R1BtPeJPdvPDB1Uh0ofnYbUwnU9Lr9VsWPMRXYvE6vMCT+M+vJfSHqbiFmXvlvP65em6x9LZZbo4fSsNS8b389Pir/G7DyJ3Q29XozhV4zsdRXO7elssPvcYwDduuBDYv+N3LALynKzb6XXJb7fsrimtfOW3nsGvM5WCQvr4BFvlSjUanpd3IfiFxWlqUhYTGOHP1Z0qfuAAq9LrapWTFT6X4kNCXzVyv217ZbnrVYqVdLblOtdG2SpZ9YwVWpVottx0v1581iz2KTUbHRMVSCruen9MEcexzoCEkxpyleApcP4HYQgJpHdqXB4NRDk9MKrhbKTmB3QjsG6/ledVmteVULMm74tntIHBbunbPRI/2kmAsINlV7+KOevcBkxkBJfFqzrkcdC5kST7QPBWRXZijAoVUXgKJ0mHfKXmuyUk8i0ARNmMWphEUZtNZViCTr/8dA2GeWQnHM5YIFGWn8GiS+9/yekifkCgHrjJqgOwpfLuMbN/N0zmednk77Rw+SEOiDpssrkgIXjPZ/fQ1M2pYNgOzyQtzO+e+2fJDiAMA5gl+5n5pNvHCOdmKnl+w8s6QqlLP2/uBCh+FdD5Ps4ZWlGImEt60TatiDgCnUvZWT+wdqLmBMM+6cTas9yJv7Lv8UjGlA4EExHL8tGx5xnNjAFw9Nzry+CzPfcvshJR1E7AUh2zNSL5KFOOTDxfsY+UnzQ/yb8GS8KtdB7C24sg85RtDEDpRK3W/rI7MBmYSlkhBZMk2+CGAQ8F3jZsib7gIOU2vqYDjXzSldDUdYcxSKjpKUaRhW30znmI1A//L6RtMpvCfV/aSH72yX+66A6mDMdI3vuS/nQ2SjQsGuYuTjEtNX8rXpwxOJ1tq/0nwsOAXg1OCv5tJ/Zv5u2Wrpvvnof4v</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0Q5jyjkRghEBSlcepqe3ii0c05fRsbZgJlgp7EDtF8/dmgoUNppR0JC3tlee+2Ll33K0SJxgpBzyARhVIt6Lf1vC2G34YFnuMj2jZqPakajAbbh+JYH9bo3dvyxrkWc5xBRLhAVLd2xbNewLfkb2VbgOYFtVz3PfdS1B8i4hJYuVUvX1ouE8qAI29LzjAYMccIDihbAA4GDYXh1GUjPAJWc9PbphmURMGvPhEgD08TVGDAkCa5itjBPzT2f05gHQzKlSOQZvMaMeUt/3btaraort8qyqelYlmVaTVP6xJxMf+jtk3IzxBGdsM26iyijBKOEvCBF6grEjMVamExZRsRs8QG0bdqWgjZgjQ1s1+gP3XwLULD7ItIeyYwjg8+QXYLdwQQyoBi0+7uopf/4Wgc3e0cZonzCsgU/WH+PEtAlJCyF2OBlZiW7ryMeKVf7FHAQUZzknCzhWo1JijBw7TaDCVlfEi6HL+Za0X5tzcsJA/ydlpyauzwlbfNIZXpkClz8n37t9mqD8oCSHNrnlxWRj3o1v2/5PXa1JrdX6XmHNyv3q1ZBYdd5Q2rb6tf14aBu5+p10/CONf1mHd1eV0x2AcxK5w9gMzoceOl1PP/d715Hy0F9MK9P8ygZeY+DXuXivveHvfxM7poXvx5s1/09fqzVu7e9E1jn9SeW5zdeFPLajS+iFzPGt/cvq2kczkfNuVvpPZ6FF8sOGjTGNq+N53/1yWT5iOLziz9WZzpk1vDxZX5eZ6sTGHjX+Ay8Ssd5qlUG05/etPWW024O+8ZSDob5eA5YlEs1GlFPO5P9QuJzaVEWEhuTwjVIlT5xAVTobbVLyUqQS/EhcSCbuVn3G3W722i6fr/b95xmp2/VLPvMCi2/2az3nUapPxsWBxS7jE6IiqUUdjM/nxPEi4ADjSEzlizHM+D6J4g9JJAW0Tt5MBjlMGJSwftup19r1r2O5bih3/MaZw3bd8Nu56zvOqHd17VrJm7oTRZOBGT76u3uqfcdYJISUBKv5pzLQedCluQJLXOR2NUlqlLI5SWQKR0OnFrDMzlZpAkowuaCxXkC1XSWFgUy+ebfMRDmhZVwnLJMoKQ4hR8mefitrIf0iYly4CqjDsiewpHLyCrTeZd27eilVcKHeUzUYZPFFRnBGyb7n95mRg3LdmC2eWFul9y3W74JcQTA/ISfeViabbx4SXailxesvDOkqrTL9j6h6lM1Xy7zoqG+UsxMwpu2afnmEHAuZe95xP4Bam4hzC/dOFvWB5G39n1+uZjRoUACFnL8tGL5hefGELh6bkTy+Ky/+pbZCynrJmAtjtm6iXyVKMafPlxwgJWfNN/KvxXL4rd2HcHaiSPzlG8MQehUrdT98vzBbGAmYYkURJbtgh8DOBZ837gt8paLkNM0zgV8/EVTStfSEcYspyLq6YVhV30LnuI5heDN6R1MofCvV/aaf3hl/766HEodXCB960v+29kgxbhgkLs4Kbi09LV8fcrgdLqj9q8Ejwu+G34m+PuZtN+Z31t2anp4Htr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06526</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06528</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937E4D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937E95529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937ECF529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="66dbb909-a2fd-4e5f-964c-e03eec4d0d47"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937F35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB562FA1FAE0401F0A059945B1:987B3EB4"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937F23529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937F23529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937F23529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937F35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937F7D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB55E3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937F35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937F7D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB55E3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSx0+QhbAkAiQIoJu2dAFKl5cr40zAbeLQ2AHaX//ZoaFAoZdeCQl5Mj5zZvGx6wxFoem0GIOEk5gqXqeh/htU/Inhl3GhNqkFBUuHWsGemLiAMJi+b02wDb6qeIyl4FHGEeUN1dSNUsHQxW9k6E7ZdIxS0aoYz6oyhoQJaOFS1FVlFYWUOVnYhpom1IkRI8yhKALmcOwMW/0rR3g6KOekNutrllnApDnjfO5oGi76gCEMcRHHkVbXdnzqPnOGZEoRTxP4jOmzhvq5d7lcFpelYpxMNVPXdU23NeHjMzI9V5tn+WbwPRrE67WLaEwJRiH5QJJUH/gs9pVWOI0TwmfREWhDM3QJXYAVLmDDoueq9hUgY3ci0g7JhKECmyEjBxtAAAlQDMr9wGuo56d1cL13lCDKgjiJ2N76d5SALiCM5+AXWJ5Zzu50xAPlatYBOx7FYcrIAq7lmMxFFky5TSAgqyvCxPD5TMnar6xYPmGAf9OSurbNU9DWDlSmQ6bA+P/p13av1ihjFKbQ7L+COzHaV27ZfixdTlvtsOz3Ly6CR7PbyChsO69JbVr9ud4f1M1cfW4K78fdPwYrmR8pvbC82cPSbvf7Kzx6+XhA9uKf4N0bed7rR3T71L949pZp+2ViBa2nytUimMYP82ScGpbHB6uZa5/dTzW78kT129ogutEuKQq8OWrDo23HrVXVrUa2Ya/KE9K9+zMgk6uL+zTh7dJdeF2jz0Ip7seLsd2Lkv7j5TQ4m1Wr/eFFaem5HzcPtcFt5+mu8ZXTdg67xlwOhunkBTDPl3I0vI7SE/1C/GdpkRbiF4LM1ZlLfWIcKFebcpeUFScV4kN8RzRzve7WKoZbs0vVXqlcNu12V7d0o6e39KptV7pmLdefNYs9im5MAyJjSYVdz8/PBHHkMKA+JIVFnOIZMPUHxA7iSPHoQByMmDIYxULB26VKtWPb7ZrbNjqu0etZlZ5luWa1bJXdntlSleuY39CbpBVwSHbVu7Sj3gPAZE5ASryccyYGnXFRkje0SHloFBeoSCEVl0AiddgxrVpZYySahyAJa1HspyEU57N5ViCNrf9NoUQssxKG53HCUZidwqNJ7n/L6yF8fCIdmMyoDaKncOAy0vN0jqdd2U47h2+lPpGHTRSXJwSvmex++poZOSybgdnkhZmRc99s+SXEAQDtB37afmk28fwF2YqeX7DizhCq0szb+4aKb8V0sUizhlalYiYCXjM0vaoNAadC9t5H8StQbQOhnXTjbFjvRd7Yd/mlfEaHHHGIxPgp2fKE58YQmHxueOL4rE59y+yEFHXjsOKHbG4oXiWS8Y8PF+xg6SfMt+JvGSdfiR/C2ooj8hRvDE7oVK7k/fJ+ZDZwLGCJEMQ42QY/BHAo+K5xU+QNFy6maZJyOP5FkUrXUBHGcUq511Ezw7b6Zjz5+xycL6dvMJnCf17ZK3b0yn7sXw2FDkZI3fiS/3YukGxcMIhdjGRcGupKvD5FcDrdUvtPgocF3yz9JPi7mTS/mb9btmq6fx6afwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSx0+QhbAkAiQIoJu2dAFKl5cr40zAbeLQ2AHaX//ZoaFAoZdeCQl5Mj5zZvGx6wxFoem0GIOEk5gqXqeh/htU/Inhl3GhNqkFBUuHWsGemLiAMJi+b02wDb6qeIyl4FHGEeUN1dSNUsHQxW9k6E7ZdIxS0aoYz6oyhoQJaOFS1FVlFYWUOVnYhpom1IkRI8yhKALmcOwMW/0rR3g6KOekNutrllnApDnjfO5oGi76gCEMcRHHkVbXdnzqPnOGZEoRTxP4jOmzhvq5d7lcFpelYpxMNVPXdU23NeHjMzI9V5tn+WbwPRrE67WLaEwJRiH5QJJUH/gs9pVWOI0TwmfREWhDM3QJXYAVLmDDoueq9hUgY3ci0g7JhKECmyEjBxtAAAlQDMr9wGuo56d1cL13lCDKgjiJ2N76d5SALiCM5+AXWJ5Zzu50xAPlatYBOx7FYcrIAq7lmMxFFky5TSAgqyvCxPD5TMnar6xYPmGAf9OSurbNU9DWDlSmQ6bA+P/p13av1ihjFKbQ7L+COzHaV27ZfixdTlvtsOz3Ly6CR7PbyChsO69JbVr9ud4f1M1cfW4K78fdPwYrmR8pvbC82cPSbvf7Kzx6+XhA9uKf4N0bed7rR3T71L949pZp+2ViBa2nytUimMYP82ScGpbHB6uZa5/dTzW78kT129ogutEuKQq8OWrDo23HrVXVrUa2Ya/KE9K9+zMgk6uL+zTh7dJdeF2jz0Ip7seLsd2Lkv7j5TQ4m1Wr/eFFaem5HzcPtcFt5+mu8ZXTdg67xlwOhunkBTDPl3I0vI7SE/1C/GdpkRbiF4LM1ZlLfWIcKFebcpeUFScV4kN8RzRzve7WKoZbs0vVXqlcNu12V7d0o6e39KptV7pmLdefNYs9im5MAyJjSYVdz8/PBHHkMKA+JIVFnOIZMPUHxA7iSPHoQByMmDIYxULB26VKtWPb7ZrbNjqu0etZlZ5luWa1bJXdntlSleuY39CbpBVwSHbVu7Sj3gPAZE5ASryccyYGnXFRkje0SHloFBeoSCEVl0AiddgxrVpZYySahyAJa1HspyEU57N5ViCNrf9NoUQssxKG53HCUZidwqNJ7n/L6yF8fCIdmMyoDaKncOAy0vN0jqdd2U47h2+lPpGHTRSXJwSvmex++poZOSybgdnkhZmRc99s+SXEAQDtB37afmk28fwF2YqeX7DizhCq0szb+4aKb8V0sUizhlalYiYCXjM0vaoNAadC9t5H8StQbQOhnXTjbFjvRd7Yd/mlfEaHHHGIxPgp2fKE58YQmHxueOL4rE59y+yEFHXjsOKHbG4oXiWS8Y8PF+xg6SfMt+JvGSdfiR/C2ooj8hRvDE7oVK7k/fJ+ZDZwLGCJEMQ42QY/BHAo+K5xU+QNFy6maZJyOP5FkUrXUBHGcUq511Ezw7b6Zjz5+xycL6dvMJnCf17ZK3b0yn7sXw2FDkZI3fiS/3YukGxcMIhdjGRcGupKvD5FcDrdUvtPgocF3yz9JPi7mTS/mb9btmq6fx6afwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZbuo6FH0/XxHlPFbBGShDVJBShio90FbA6fRyZRwH3CZ2ajsM/fprh4YCpb3tlZCQd7bXXnvwss8ETBPXD4TAXBJGjbDbMv+pO6huO1XHasYN16pWvZo19ao1K0ZVBOF0Gjt2ZBqhEDkOqZCQypbp2o5nObb6TRzbP3V9p1Fx6t6jadxiLhS0cqnYprFKEyr8ImzLzDn1GRRE+BSmWPgS+eNgOPCVpw9LTmb7bMOyCMjbcykzHwBUiTDCSYIqiKXgDOz5nEXCH5MZhTLn+C1mJFrm297lcllZehXGZ8C1bRvYTaB8IkFmv832r3IzjkIas826AymjBMGEvEJNaojlnEVGkMwYJ3KefgLtAMfW0BZeIQs5VfrbBO8BCnbfRNojyQW0xBw6JdgIx5hjirDxdxS2zN/f6+Bm74RDKmLGU3Gw/hklTBc4YRmOLFFmVrL7PuKRcrXPMPJDipJckAW+0mOSQYSFccNxTFYDItTwRcIo2m+sRDlhGP2kJWdgl6eiDY5UpktmWMj/06/dXm1QbmGS43Z3OppkYooG8TR+TPKn3nB8Mb33wHrIWgWFXecNqW2r39aHg7qdq7dNw8vBcDJKk1pn/PTXeWCU31XlCPTXL+EkjHO55MvbVfQgLy+v78fP+TW4bKAGPwlGwROKav0TL8rnA3gTBg/s+dfLn1d84l0Mb4Dn/u301hfZ63l32H19xudkcIUmjy+yOekNAziwG+7rwru7cmACVwP5ZwTyXiMSTzCcd7hcR6/ur9XFyWKSerd3s9rEDcaNrDtsvee0m8O+sZSDcT59wkiWSz0aYdfoq35B+bW0aAuJrLhw9TOtT0JiKs223qVlxc+V+JDIV83crHuNmtNpNL16v949dZvnPbtqO307sOvNZq3nNkr92bA4oNhhNCY6llbYzfx8TRClvsA0wtxasBzNsTC/QOxCCY2QjtTBYFTgCVMK7vT7/U7dbtZrfafhdvs199Q+7duu3fPswPEC07hi8ppe8yCWmO+rt7en3iOMSEawlng950INupCqJC9wkcvEqSxgheJcXQJc67DvVhunQJA0S7AmDFIW5QmuZPOsKBAQm3/XgkgUViJQxriESXEKP03y8FtZD+UTEe0gdEbnWPUUH7mM7DKdz9Ou7aZdwgd5RPRhU8WVnKANk/1P7zOjh2U7MNu8kHBK7tstP4Q4AgC+4AcOS7ONFy3ITvTyglV3hlKVdtneF1h5qeSLRV40tK4Vkyt44AC7DsYY5Ur21hP2jCnYQoBv3Thb1geRt/Z9frmc07GEEqdq/Ixi+Y3nxhgL/dwI1fFZffctsxdS1U3ilTxm6yTqVaIZf/lwQT7Sfsp8o/6WjL8nfgxrJ47KU70xJKEzvdL3y/qT2UBMwRIliIzvgh8DOBZ837gt8paLVNM0zSX+/Iuhla5lQoRYTmXYNQvDrvoWPOU6w/670weYQuHfruyV+PTKvh8OxkoHU2hufcl/O1ukGBeE1S5BCi4tc6Venyo4ne2o/RvB44Lvel8J/n4m7Q/mj5admh6eh/a/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6JTPzKl7xQ6wgyviovrrvi2++VOTA8QbZPSpIj++psUWwHR694ZRyanJ895zkue5JijJHbCLueQCcKoNh609X8iN2q6jfvAsHDLNTw/aBj3boQMgFngOU6raXuero05z2FMuUBUtHXHsl3DtuTflW2FvhM6dj2wgj+6dgMZl9DSpW7p2jqJKQ+LsG09z2jIECc8pCgBHgocTrvnk1B6hqjkpHeONyyLgFlnIUQamiauR4AhjnEds8Q8Nnd8jiMeTsmcIpFn8Boz4m39de/T01P9ya2zbG46lmWZVsuUPhEn8yO9863cDNGYzthm3UeUUYJRTF6QInUOYsEirRvPWUbEIvkA2jZtS0EbsMYGtj16pJtvAQp2X0TaIZlxZPAFskuwS5hBBhSDdn05butHX+vgZu9VhiifsSzhe+u/owR0BTFLITJ4mVnJ7uuIB8rVOQYcjimOc05W8EONSYowcO1nBjOynhAuhy/iWtF+bc3LCQP8Ny05Nrd5StrmgcoMyBy4+D/92u7VBuUGxTl0Ts4en90pnNUG7jr1F2xlPbJ1zh8mv3+1CwrbzhtSVatf1/uDWs3V6yaM7k6zK98neHlxMj95uVky2vWu51Y/PyUovrefetdW83Yxrs1zuzF6oC9eYnaTQevi5PqBPc4WC7j18O1JI3nsffuBovkfuPt5Mzm18H0ae6P1Eg9neXCOb2vEdrpi8DCunU2iU+jdDpu/8u9Lcfl8gszV98mo9vu0/3ta41ZNvED/8tvZxXd+bon5+pb8onhkX6XN9ltO2znsGks5mOb3D4BFuVSjMR5oI9kvJD6XFmUhkTErXMNU6RMXQIXeUbuUrIS5FB8ShbKZm/Ww2bD7Qb/n+0O3a4+6Q8uz7JHVtfxWy/N7dqk/GxZ7FPuMzoiKpRR2Mz+fE8RJyIFGkBkrluMFcP0TxAESSBvTS3kwGOVwxaSCN4bdfn/kNZpDuzFwgpHbHMp/vt0Mej1vMPR17QcTF/Qi684EZLvq7e6o9yVgkhJQEq/mnMtB50KWZIlWuYjt+grVKeTyEsiUDoeO1/RNTpI0BkXYTFiUx1BPF2lRIJNvfh0DYV5YCccpywSKi1P4YZL738p6SJ+IKAeuMuqB7CkcuIzsMp13aXsHL60SvptHRB02WVyREbxhsvvpbWbUsFQDU+WFeTUc1Za/hDgAYH7Cz9wvTRUvWpGt6OUFK+8MqSqdsr1LVF/W89UqLxoaKMXMJLxpm1ZgTgHnUvaer9gjULOCML9041Ss9yJX9l1+uVjQqUACEjl+WrH8wnNjClw9N8by+Ky/+pbZCSnrJmAtDtn6sXyVKMafPlxwiJWfNP+UP08si97adQBrK47MU74xBKFztVL3y/MHs4GZhCVSEFm2DX4I4FDwXWNV5IqLkNN0nwv4+IumlK6tI4xZTsV4oBeGbfUteIrnFMI3p3cwhcK/Xtlr/uGVfXc+mUodTJBe+ZL/djZIMS4Y5C5OCi5tfS1fnzI4nW+p/SvBd4LfbLnByHF9p9WrBD9otRpDp1kVcCeTzjvze8tWTffPQ+df</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065212</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065217</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937F36529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937F7E529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB55E4A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_FUNC_CHILD_Get_Self_Blocked:clg_403_FORBIDDEN_P2" searchProperties="true" id="b7ba9f6d-4119-436a-9b26-daa9b166adc1"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="027aba9f-4602-45c5-b486-7ebd54fae0f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","USER_INACTIVE");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861FDD556CD1178E0401F0A07996787</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861FDD556BA1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861FDD556BA1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861FDD556BA1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861FDD556CD1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861FDD557151178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861FDD556CD1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861FDD557151178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SlksLHWEGKGzr1u0F3KIvZ2K6Ctm2SWlSQH/9SYpFQPTomWGGyerKt751yZeccJTEVa/LOWSCMKoFflv/J2qAU6s9OoYVNmyj3rSrRqvlREYrqtuuBbiFwlDXAs5zCCgXiIq2XrXsmmFb8je2bc9yvKpVaTnug679gYxLaOlSsXRtlcSUe0XYtp5n1GOIE+5RlAD3BPZG3YtzT3p6qOSkd07WLIuAWWcmROqZJq6EgCGOcQWzxDwxd3xOQu6NyJQikWfwGjPkbf1173K5rCxrFZZNzaplWabVMqVPyMn0SO/8KDdDGNCIrdd9RBklGMXkBSlSFyBmLNS68ZRlRMySD6Bt07YUtAErbGC7To908y1Awe6LSDskM44MPkN2CXYDEWRAMWi3N0FbP/paB9d7xxmiPGJZwvfW36MEdAExSyE0eJlZye7riAfK1TkB7AUUxzknC/itxiRFGLh2lUFEVueEy+ELuVa0X1vxcsIAf6clJ+Y2T0nbPFAZn0yBi//Tr+1erVH+oDiHzmk6i58Gd5MJYov0HF/d/52cnTYb19fLZrugsO28JrVp9et6f1A3c/W6yT8XowmdXlz3rXiOont+fze4rS+X4nhQq1aJe/YsCB1erpoPTyuoxVe965rrnt4MZw8hv+2P78J48hPOpmAua8MfSRAMjk+j2l1ovvgRG+N515/+8peN0R1e0vrt+dmyMX85nbIxJMd/c/Nywqi9Qr3r51Tk80GQ0lPhOquL6KX39CO+5OIsndwOfw4HPboIjs9u2285beewayzlYJQ//gUsyqUajcDXhrJfSHwuLcpCQiMqXL1U6RMXQIXeUbuUrHi5FB8SerKZ6/Wg6dhD3280nL5v225zYNUte2h1LVeeK7fplvqzZrFHsc9oRFQspbDr+fmcIE48DjSEzFiwHM+A658g+kggLaA38mAwymHMpII7vVqt2vMH/e7Qcdy+4/e7frcliTv1quVXW7r2m4lLepl1IwHZrnrXd9T7BjBJCSiJV3PO5aBzIUsyR4tcxHZlgSoUcnkJZEqHvWq92TA5SdIYFGEzYWEeQyWdpUWBTL7+rxoI88JKOE5ZJlBcnMIPk9z/VtZD+oREOXCVUQ9kT+HAZWSX6XyctruddgnfzUOiDpssrsgIXjPZ/fQ2M2pYNgOzyQtzu+S+2fJNiAMA5if8zP3SbOKFC7IVvbxg5Z0hVaVTtneOKvNKvljkRUNdpZiZhDdt03LNEeBcyt7zmD0BNTcQ5pdunA3rvcgb+y6/XMzoSCABiRw/rVh+4bkxAq6eG4E8PquvvmV2Qsq6CViJQ7Z+LF8livGnDxfsYeUnzVfyb8myt8QPYW3FkXnKN4YU5Klaqfvl+YPZwEzCEimILNsGPwRwKPiucVPkDRchp+kxF/DxF00pXVtHGLOcisDXC8O2+hY8xXMK3pvTO5hC4V+v7BX/8MqeXJyPpA4mSN/4kv92NkgxLhjkLk4KLm19JV+fMjidbqn9K8HDgt/rfib4u5l03pnfW7Zqun8eOv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SlksLHWEGKGzr1u0F3KIvZ2K6Ctm2SWlSQH/9SYpFQPTomWGGyerKt751yZeccJTEVa/LOWSCMKoFflv/J2qAU6s9OoYVNmyj3rSrRqvlREYrqtuuBbiFwlDXAs5zCCgXiIq2XrXsmmFb8je2bc9yvKpVaTnug679gYxLaOlSsXRtlcSUe0XYtp5n1GOIE+5RlAD3BPZG3YtzT3p6qOSkd07WLIuAWWcmROqZJq6EgCGOcQWzxDwxd3xOQu6NyJQikWfwGjPkbf1173K5rCxrFZZNzaplWabVMqVPyMn0SO/8KDdDGNCIrdd9RBklGMXkBSlSFyBmLNS68ZRlRMySD6Bt07YUtAErbGC7To908y1Awe6LSDskM44MPkN2CXYDEWRAMWi3N0FbP/paB9d7xxmiPGJZwvfW36MEdAExSyE0eJlZye7riAfK1TkB7AUUxzknC/itxiRFGLh2lUFEVueEy+ELuVa0X1vxcsIAf6clJ+Y2T0nbPFAZn0yBi//Tr+1erVH+oDiHzmk6i58Gd5MJYov0HF/d/52cnTYb19fLZrugsO28JrVp9et6f1A3c/W6yT8XowmdXlz3rXiOont+fze4rS+X4nhQq1aJe/YsCB1erpoPTyuoxVe965rrnt4MZw8hv+2P78J48hPOpmAua8MfSRAMjk+j2l1ovvgRG+N515/+8peN0R1e0vrt+dmyMX85nbIxJMd/c/Nywqi9Qr3r51Tk80GQ0lPhOquL6KX39CO+5OIsndwOfw4HPboIjs9u2285beewayzlYJQ//gUsyqUajcDXhrJfSHwuLcpCQiMqXL1U6RMXQIXeUbuUrHi5FB8SerKZ6/Wg6dhD3280nL5v225zYNUte2h1LVeeK7fplvqzZrFHsc9oRFQspbDr+fmcIE48DjSEzFiwHM+A658g+kggLaA38mAwymHMpII7vVqt2vMH/e7Qcdy+4/e7frcliTv1quVXW7r2m4lLepl1IwHZrnrXd9T7BjBJCSiJV3PO5aBzIUsyR4tcxHZlgSoUcnkJZEqHvWq92TA5SdIYFGEzYWEeQyWdpUWBTL7+rxoI88JKOE5ZJlBcnMIPk9z/VtZD+oREOXCVUQ9kT+HAZWSX6XyctruddgnfzUOiDpssrsgIXjPZ/fQ2M2pYNgOzyQtzu+S+2fJNiAMA5if8zP3SbOKFC7IVvbxg5Z0hVaVTtneOKvNKvljkRUNdpZiZhDdt03LNEeBcyt7zmD0BNTcQ5pdunA3rvcgb+y6/XMzoSCABiRw/rVh+4bkxAq6eG4E8PquvvmV2Qsq6CViJQ7Z+LF8livGnDxfsYeUnzVfyb8myt8QPYW3FkXnKN4YU5Klaqfvl+YPZwEzCEimILNsGPwRwKPiucVPkDRchp+kxF/DxF00pXVtHGLOcisDXC8O2+hY8xXMK3pvTO5hC4V+v7BX/8MqeXJyPpA4mSN/4kv92NkgxLhjkLk4KLm19JV+fMjidbqn9K8HDgt/rfib4u5l03pnfW7Zqun8eOv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH52StEBLO8IMCHjwoCig5+jLnZAGyLFNSpMC+utvUiwColfvDDNMdnfWXvsjKzkTKI6coCkESSXlzOi16+Y//qQ6qVZrE2vqhKFVgbWyVfOhZ5XRpOa4fjmEZGIaPSEy0mNCIibrpgPtsmVD9RvbdgDdwKmUoF9+NI17kgoFrVxK0DTWccREkIetm1nKAo4EFQFDMRGBxMGoedUPlGeACk5m42zDMg+YNuZSJgEAuBQSTKIIlzCPwRnY8zkLRTCiM4ZklpLXmKGom697V6tVaVUu8XQGHAghgD5QPqGgsxOz8aPYTMIem/LN+hwxzihGEX1BmtQVkXMeGs1oxlMq5/EH0DawoYa2yBpb2K6wExO8BcjZfRFpj2QqkCXmyC7AhmRKUsIwMe6Gvbp58rUObvaOU8TElKexOFh/jxJhSxLxhISWKDIr2H0d8Ui5GmcEBz2Go0zQJbnWY5IgTIRxk5IpXfepUMMXCiNvv7EWxYQR/J2WnIFdnoo2OFKZNp0RIf9Pv3Z7tUG5R1FGGrbntQb9Zeh7Dm11Fy4at5euf+PGvdt6TmHXeUNq2+rX9eGgbufqdVMiyKIc3z31K2g4uuxfrlPUZOfwcvIzScBP3pHpBevw6HL+cDm/GlzdykE8AMPq49y/fbh7sbvNi4f2MuTl360++vHXjt3yCDh8MbAfcXz/a1iugiq8ERd//IvVmjH20sEwin/Zj1mn6rci9HzXH3u/zyuznjt28HVyWz2Fyenp6fPTD7iQz/wlSqb4FqeefLqVT/W3nHZz2DcWcjDKJn8JlsVSj0avbXRVv5D8XFq0hYbWNHcNEq1PQhImzYbepWUlyJT40DBQzdysOzXX7rbb1apnV23bq3VgBdpd2ISe77tezSv0Z8PigOI5Z1OqY2mF3czP5wRxHAjCQpJaS57hORHmJ4htJJHRY0N1MDgTZMyVglfsll8770BHUa64FceulTtd39GGlgvdrmlcczlgg7Q5lSTdV+/KnnoPCaYJJVri9ZwLNehCqpIs0DKTkV1aohIjmboEUq3Dal+tCgSNk4howiDmYRaRUjJP8gIBsfl3LIRFbqUCJzyVKMpP4YdJHn4r6qF8QqodhM6oRVRPyZHLyC7SeZd25eilVcA3s5Dqw6aKK1OKN0z2P73NjB6W7cBs88LCLrhvt3wT4ggA+IQfOCzNNl64pDvRiwtW3RlKVRpFexeotChly2WWN9TTipkqeGAD6IERwZmSvecxfyIMbCHAl26cLeuDyFv7Pr9MztlIIkliNX5GvvzCc2NEhH5u9NTxWX/1LbMXUtVNkrU8ZjuP1KtEM/704YIDrP2U+Ub9rXgavrXrCNZOHJWnemNIymZ6pe+X5w9mA3MFS5Ug8nQX/BjAseD7xm2Rt1ykmqZJJsnHXwytdHUTYcwzJnttMzfsqm/OUz4nJHhzegeTK/zrlb0WH17Zf676I6WDMTK3vvS/nS2ajwsmapegOZe6uVavTxWczXbU/pXgUcF3W83PBH8/k8Y783vLTk0Pz0PjXw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_070620</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861FDD556CE1178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861FDD557161178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_FUNC_CHILD_Get_Self_Blocked:tou_403_FORBIDDEN_P2" searchProperties="true" id="fd6b96a6-9e54-455b-9436-53d6118f7bec"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","USER_INACTIVE");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E8620BEC0D54A157E0401F0A079977E6</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E8620BEC0DE6A157E0401F0A079977E6:75BE341"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E8620BEC0D41A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E8620BEC0D41A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E8620BEC0D41A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E8620BEC0D54A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E8620BEC0D9CA157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E8620BEC0D54A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E8620BEC0D9CA157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jztgydgYPIEZwE5KS5oshG6Slx1Fvgaltmws2ZD8+somJkBJNt2ZTBhdX5177oeOdCZIHJnuQAjIJEu4NvZ6+r8mpraNAtow2+qf1QLc6NoIN1CIcDdEYZtAR9fGQuQw5kISLnu6iXCrgZH6u8HYxcjFTtM2u/e69gMyoaCVSxPp2iaOuHCrsD09z7ibEMGEy0kMwpXUnQ0uJ67ydEnNSe+fbVlWAbP+UsrUNQzaDIBCFNEmTWLjzDjwOQuEO2MLTmSewUvMQPT0l73r9bq5bjWTbGGYCCEDdQ3lEwi2+Kz3P9WbIRjzMNmuR4QnnFESsWdSkroEuUwCbRAtkozJZfwGNDYwKqEbsKENii3+WTdeA1TsPoh0QDITpCGWBNdgUwghA05Bm0/HPf3zxzq43XuTES7CJIvF0frPKAEvIEpSCBqizqxm93HEE+XqnwF1x5xGuWAFfC/HJCUUhHadQcg2EybU8AVCq9qvbUQ9YUD/pCVnxj5PRds4URmPLUDI/9Ov/V5tUX6QKIe+v0rsW+tOGhCG0/GjdfMwmY5Czx+a815FYd95S2rX6pf18aDu5uplExne+w/XAMtz9pjNv3x5nGPnHM3/7naeR/am4N/aQ/8b3JPp7Efstfz53cPQmJprJ7tBpmWjdvwcXAydq+v1I8efipZjYtvspP9k1qXBL41b7/4iT69WK+o8r8fOKG1ddFd3VjFpTy6KuZhNgif6wFZjH2+Cr3+1vw5IpzPYWN2fPzuf7sJ7uy1m7DsqHjvY8G4nl73XnPZzODTWcjDLHx6BynpZjsbY085Vv4h8X1pKCwsaYeXqpqU+CQlc6v1yVykrbq7EhwWuauZ27XfaJhr6I+TZ1gDbjo8shM/RADndruP47Vp/tiyOKI4SHrIyVqmw2/l5nyCNXQE8gKxRJDldgtDfQfSIJNqYT9XBSLiAm0QpeBtZHdP3LdTxTXvQtT27NRr43ghbluN0vKGufU/kFb/KBqGE7FC9rQP1ngJlKYNS4ss5F2rQhVQlWZEilxFuFqTJIVeXQFbqsGtaHdsQLE4jKAkbcRLkETTTZVoVyBDbX7NBqKisTNA0ySSJqlP4ZpLH3+p6KJ+AlQ6izGgIqqdw4jJCdTpvp+3sp13DD/KAlYdNFVdmjG6ZHH56nZlyWHYDs8uLClxz3235Q4gTAMY7/Izj0uziBQXbi15fsOrOUKrSr9u7Is1VMy+KvGqoUypmpuANbCDHmAHNlew93SQ/gRs7CONDN86O9VHknf2QXy6XfCaJhFiNn1YtP/DcmIEonxtjdXw2H33LHIRUdZOwkadso0i9SkrG7z5cqEtLP2W+Vj/rJAte23UCay+OylO9MSTji3JV3i9Pb8wGTRQsU4KYZPvgpwBOBT807oq84yLVND3kEt7+opVK19MJpUnO5djTK8O++lY85VMK7qvTbzCVwr9c2Rvx5pV9ezmZKR2Mib7zZf/t3GDVuFBQuwSruPT0jXp9quB8saf2LwRPC76F3xP8w0z6v5l/t+zV9Pg89H8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jztgydgYPIEZwE5KS5oshG6Slx1Fvgaltmws2ZD8+somJkBJNt2ZTBhdX5177oeOdCZIHJnuQAjIJEu4NvZ6+r8mpraNAtow2+qf1QLc6NoIN1CIcDdEYZtAR9fGQuQw5kISLnu6iXCrgZH6u8HYxcjFTtM2u/e69gMyoaCVSxPp2iaOuHCrsD09z7ibEMGEy0kMwpXUnQ0uJ67ydEnNSe+fbVlWAbP+UsrUNQzaDIBCFNEmTWLjzDjwOQuEO2MLTmSewUvMQPT0l73r9bq5bjWTbGGYCCEDdQ3lEwi2+Kz3P9WbIRjzMNmuR4QnnFESsWdSkroEuUwCbRAtkozJZfwGNDYwKqEbsKENii3+WTdeA1TsPoh0QDITpCGWBNdgUwghA05Bm0/HPf3zxzq43XuTES7CJIvF0frPKAEvIEpSCBqizqxm93HEE+XqnwF1x5xGuWAFfC/HJCUUhHadQcg2EybU8AVCq9qvbUQ9YUD/pCVnxj5PRds4URmPLUDI/9Ov/V5tUX6QKIe+v0rsW+tOGhCG0/GjdfMwmY5Czx+a815FYd95S2rX6pf18aDu5uplExne+w/XAMtz9pjNv3x5nGPnHM3/7naeR/am4N/aQ/8b3JPp7Efstfz53cPQmJprJ7tBpmWjdvwcXAydq+v1I8efipZjYtvspP9k1qXBL41b7/4iT69WK+o8r8fOKG1ddFd3VjFpTy6KuZhNgif6wFZjH2+Cr3+1vw5IpzPYWN2fPzuf7sJ7uy1m7DsqHjvY8G4nl73XnPZzODTWcjDLHx6BynpZjsbY085Vv4h8X1pKCwsaYeXqpqU+CQlc6v1yVykrbq7EhwWuauZ27XfaJhr6I+TZ1gDbjo8shM/RADndruP47Vp/tiyOKI4SHrIyVqmw2/l5nyCNXQE8gKxRJDldgtDfQfSIJNqYT9XBSLiAm0QpeBtZHdP3LdTxTXvQtT27NRr43ghbluN0vKGufU/kFb/KBqGE7FC9rQP1ngJlKYNS4ss5F2rQhVQlWZEilxFuFqTJIVeXQFbqsGtaHdsQLE4jKAkbcRLkETTTZVoVyBDbX7NBqKisTNA0ySSJqlP4ZpLH3+p6KJ+AlQ6izGgIqqdw4jJCdTpvp+3sp13DD/KAlYdNFVdmjG6ZHH56nZlyWHYDs8uLClxz3235Q4gTAMY7/Izj0uziBQXbi15fsOrOUKrSr9u7Is1VMy+KvGqoUypmpuANbCDHmAHNlew93SQ/gRs7CONDN86O9VHknf2QXy6XfCaJhFiNn1YtP/DcmIEonxtjdXw2H33LHIRUdZOwkadso0i9SkrG7z5cqEtLP2W+Vj/rJAte23UCay+OylO9MSTji3JV3i9Pb8wGTRQsU4KYZPvgpwBOBT807oq84yLVND3kEt7+opVK19MJpUnO5djTK8O++lY85VMK7qvTbzCVwr9c2Rvx5pV9ezmZKR2Mib7zZf/t3GDVuFBQuwSruPT0jXp9quB8saf2LwRPC76F3xP8w0z6v5l/t+zV9Pg89H8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6OQS8MtKkiB0CXb20yhdKYvK8c5AXcSm8YOl/76tUNDgdJuuxIS8snxd75z8WefcZSljudzDrkgjGph0NH/aVv2aYzh1HBxMzLceuwaLacRGXWEIozAcaLGqa6FnBcQUi4QFR3dkXsM25K/sW17tuXZ7Vq7bT/o2gRyLqGlS83StVWWUu6VYTt6kVOPIU64R1EG3BPYG/lXl5709FDFSe+ebViWAfPuTIi5Z5q4FgOGNMU1zDLzzNzzOYu5NyJTikSRw0vMmHf0l73L5bK2PK2xfGo6lmWZVtuUPjEn0xO9+63aDHFIE7ZZ9xFllGCUkmekSF2BmLFY89Mpy4mYZe9A26ZtKWgDVtjAtktPdPM1QMnuk0h7JHOODD5DdgV2CwnkQDFod7dhRz/5XAc3e8c5ojxhecYP1l+jBHQBKZtDbPAqs4rd5xGPlKt7BtgLKU4LThZwrcZkjjBw7UcOCVldEi6HL+Za2X5txasJA/yVlpyZuzwlbfNIZQIyBS7+T792e7VBmaC0gO5vjv0/N8nMaab+jfOwyBd10br7fZ9lfqeksOu8IbVt9cv6cFC3c/WyacKTH+vHIWtE44tbfz69GjYvrtvf19l0MvTd6OJXEEXLx/u7/LF1/jAp8HAYpk9+yv4+vyRuQp+iNVok5AE77cvv35bhuXk5TZ4f0n4+vmDLv4Y/V73rGV/+TCYsupjU+8/xeeOPTX/+nrGi8eg83z1k4yerdzMtTKfnN55vmsGw5+BVBN9g5YbLkLnre7xg1xN8S1qd15x2c9g3VnIwKqJHwKJaqtEIA+1c9guJj6VFWUhsJKWrN1f6xAVQoXfVLiUrXiHFh8SebOZmPWg1HKs36FtBu+/b9ebAci373PKtZrvdbA4alf5sWBxQ7DOaEBVLKexmfj4miDOPA40hNxaswDPg+geIARJIC+mtPBiMchgzqeCW03OtVsN1W25gDaxeYPfqdSsYDIJ2EAz6jq5dM3FDb3I/EZDvq7e7p963gMmcgJJ4NedcDjoXsiRPaFGI1K4tUI1CIS+BXOmw57ituslJNk9BETYzFhcp1OazeVkgk2/+HQNhXloJx3OWC5SWp/DdJA+/VfWQPjFRDlxl1APZUzhyGVlVOm/Sdo9eWhW8X8REHTZZXJETvGGy/+l1ZtSwbAdmmxfmdsV9u+WLEEcAzA/4mYel2caLF2QnenXByjtDqkq3au8Tqj3VisWiKBvaVIqZS3jTNq2mOQJcSNlbj9kfoOYWwvzUjbNlfRB5a9/nV4gZHQkkIJPjp5XLTzw3RsDVcyOUx2f12bfMXkhZNwErcczWT+WrRDH+8OGCPaz8pPmH/FuyPH5t1xGsnTgyT/nGEIRO1UrdL+t3ZgMzCUukILJ8F/wYwLHg+8ZtkbdchJymqBDw/hdNKV1HRxizgoow0EvDrvqWPMV6Dt6r0xuYUuFfruwVf/fK/nV1OZI6mCF960v+29kg5bhgkLs4Kbl09JV8fcrgdLqj9i8Ejwu+a38k+PuZdN+Y31p2anp4Hrr/Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_071016</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E8620BEC0D55A157E0401F0A079977E6</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E8620BEC0D9DA157E0401F0A079977E6</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_403_FORBIDDEN_P2" searchProperties="true" id="c27e6ce4-309d-4538-86cf-fb4c8762d5bd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","USER_INACTIVE");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861FDD558D71178E0401F0A07996787</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861FDD558C51178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861FDD558C51178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861FDD558C51178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861FDD558D71178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861FDD5591F1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861FDD558D71178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861FDD5591F1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6MQJ0BzESClXFpmS2mh7c7My8p1DuBp4qSxw6W/fu1AKFDotishIZ8cf+c7F392g+M4sv2Ac8gETZjW7zT1f7DtWo4zqRph3XWNWq1GjCcIkVF1iDfB5w7yQkfX+pzn0GdcYCaauo2sqmEh+bu3LB85fr1acRz3t649QsYltHSpIF1bxhHjfhG2qecZ8xPMKfcZjoH7gvjjYHDtS08fl5z0VmPNsgiYtWZCpL5pkkoIBKKIVEgSmw1zz6cRcn9MpwyLPINNzJA39c3exWJRWVQrSTY1bYSQiTxT+oScTs/01rdyM4R9NknW6zZmCaMER/QVK1IDELMk1IJommRUzOIT0JZpIQVtwJIYxKqxM918C1Cw+yTSHsmMY4PPsFWCjWACGTAC2sOo39TPPtfB9d77DDM+SbKYH6y/RgnYHKIkhdDgZWYlu88jHilXqwHE7zMS5ZzO4UaNSYoJcO02gwldXlMuhy/kWtF+bcnLCQPylZY0zF2ekrZ5pDIdOgUu/k+/dnu1RnnEUQ4t/Gfq3Yrw79fXxQrdtdv3rxBd4XTq3QyaBYVd5zWpbas368NB3c7VZlP00LsLbER/13/NOAq81cPs0XyOuo5XZ8/d4OEm71x7QwK9Wcfu3Xnoakz7+CkLn2PykqBc8Ie8GnTDrn359P3bz1t64U1dbzi+SusjHv1l4kBYtEoSx4ue0I/zyfXlzZXXg/mg/xIN8WWO4tS++P7c/lW7jOPbx2t0dbmIogd35XxbvvC756r3eBGQwWA4mjo3i+ZbTrs57BtLORjnT3+AiHKpRqPf0XqyX1h8LC3KQkNjUrj6qdInLoAJvaV2KVnxcyk+NPRlM9frrntu9Tqdet3tOJbluF1UQ1YPBcjxvHPHdUr9WbM4oNhO2ISqWEph1/PzMUES+xxYCJkxT3IyA65/gNjBAmt9NpIHI2Ec7hOp4OdB1eucI8+1rYuOFdS6Vcex6z27XfdqXde1de0mEUM2zIKJgGxfvWt76j0CQlMKSuLVnHM56FzIkrzgeS4iqzLHFQa5vAQypcO+XXPrJqdxGoEibMZJmEdQSWdpUSCTr/9tAxNeWCknaZIJHBWn8GSSh9/KekifkCoHrjK6ANlTOHIZ1cp0Tqft7KZdwgd5SNVhk8UVGSVrJvuf3mZGDct2YLZ5EW6V3LdbvghxBMD8gJ95WJptvHBOd6KXF6y8M6SqtMr2vuDKSyWfz/OioY5SzEzCm5aJHHMMJJeyt7pPnoGZWwjzUzfOlvVB5K19n18uZmwssIBYjp9WLD/x3BgDV8+Nvjw+y8++ZfZCyroJWIpjtnYkXyWK8YcPF+IT5SfNt/JvkWThW7uOYO3EkXnKN4agbKpW6n5ZnZgNkkhYKgUxyXbBjwEcC75v3BZ5y0XIaXrKBZz+oimla+qYkCRnot/RC8Ou+hY8xSoF/83pHUyh8Jsre8lPXtk/B9djqYMx1re+9L+dDVqMCwG5i9OCS1NfytenDM6mO2q/IXhc8Nv1jwR/P5PWO/N7y05ND89D618=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6MQJ0BzESClXFpmS2mh7c7My8p1DuBp4qSxw6W/fu1AKFDotishIZ8cf+c7F392g+M4sv2Ac8gETZjW7zT1f7DtWo4zqRph3XWNWq1GjCcIkVF1iDfB5w7yQkfX+pzn0GdcYCaauo2sqmEh+bu3LB85fr1acRz3t649QsYltHSpIF1bxhHjfhG2qecZ8xPMKfcZjoH7gvjjYHDtS08fl5z0VmPNsgiYtWZCpL5pkkoIBKKIVEgSmw1zz6cRcn9MpwyLPINNzJA39c3exWJRWVQrSTY1bYSQiTxT+oScTs/01rdyM4R9NknW6zZmCaMER/QVK1IDELMk1IJommRUzOIT0JZpIQVtwJIYxKqxM918C1Cw+yTSHsmMY4PPsFWCjWACGTAC2sOo39TPPtfB9d77DDM+SbKYH6y/RgnYHKIkhdDgZWYlu88jHilXqwHE7zMS5ZzO4UaNSYoJcO02gwldXlMuhy/kWtF+bcnLCQPylZY0zF2ekrZ5pDIdOgUu/k+/dnu1RnnEUQ4t/Gfq3Yrw79fXxQrdtdv3rxBd4XTq3QyaBYVd5zWpbas368NB3c7VZlP00LsLbER/13/NOAq81cPs0XyOuo5XZ8/d4OEm71x7QwK9Wcfu3Xnoakz7+CkLn2PykqBc8Ie8GnTDrn359P3bz1t64U1dbzi+SusjHv1l4kBYtEoSx4ue0I/zyfXlzZXXg/mg/xIN8WWO4tS++P7c/lW7jOPbx2t0dbmIogd35XxbvvC756r3eBGQwWA4mjo3i+ZbTrs57BtLORjnT3+AiHKpRqPf0XqyX1h8LC3KQkNjUrj6qdInLoAJvaV2KVnxcyk+NPRlM9frrntu9Tqdet3tOJbluF1UQ1YPBcjxvHPHdUr9WbM4oNhO2ISqWEph1/PzMUES+xxYCJkxT3IyA65/gNjBAmt9NpIHI2Ec7hOp4OdB1eucI8+1rYuOFdS6Vcex6z27XfdqXde1de0mEUM2zIKJgGxfvWt76j0CQlMKSuLVnHM56FzIkrzgeS4iqzLHFQa5vAQypcO+XXPrJqdxGoEibMZJmEdQSWdpUSCTr/9tAxNeWCknaZIJHBWn8GSSh9/KekifkCoHrjK6ANlTOHIZ1cp0Tqft7KZdwgd5SNVhk8UVGSVrJvuf3mZGDct2YLZ5EW6V3LdbvghxBMD8gJ95WJptvHBOd6KXF6y8M6SqtMr2vuDKSyWfz/OioY5SzEzCm5aJHHMMJJeyt7pPnoGZWwjzUzfOlvVB5K19n18uZmwssIBYjp9WLD/x3BgDV8+Nvjw+y8++ZfZCyroJWIpjtnYkXyWK8YcPF+IT5SfNt/JvkWThW7uOYO3EkXnKN4agbKpW6n5ZnZgNkkhYKgUxyXbBjwEcC75v3BZ5y0XIaXrKBZz+oimla+qYkCRnot/RC8Ou+hY8xSoF/83pHUyh8Jsre8lPXtk/B9djqYMx1re+9L+dDVqMCwG5i9OCS1NfytenDM6mO2q/IXhc8Nv1jwR/P5PWO/N7y05ND89D618=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oxQ6wgyIbPGGCrp1v5yJ6QLCadOSpID8+p0UioDo0TPDDJPVlW9965IvOeUojpygyTkwQRKqddt1/Z/QqlmO44DhISc0yp5dNV5DFwzXBcu2K47vga9rXc4z6FIuEBV13bFs17At+RvYdmD5gVcp1Xznj649AeMSWrqULF1bxBHlQR62rmeMBgnihAcUxcADgYN+8+Y6kJ4BKjjpjdMVyzwga4yFSAPTxKUQMEQRLuEkNk/NHZ/TkAd9MqJIZAzWMUNe19d75/N5ae6WEjYyHcuyTKtmSp+Qk9Gx3jgqNkPYpcNktT5DNKEEo4gskSJ1A2KchFozGiWMiHH8CbRt2paCNmCBDWyX6bFuvgfI2X0TaYck48jgY2QXYA8wBAYUg/b40K3rx9/r4GrvgCHKhwmL+d76Z5SAziBKUggNXmRWsPs+4oFyNU4BB12Ko4yTGdyqMUkRBq7dMRiSxTXhcvhCruXt1xa8mDDAP2nJqbnNU9I2D1SmTUbAxf/p13avVihPKMqgcXcS34fNq9fJoMXAvkifLq5Z9Qkuf4fzek5h23lFatPq9Xp/UDdztd40ue7w5Z9kZPUG5LV34aZvy0nv5iStvM4GV5MZmjzxdC4e7wb9+47jTTu/7qPfltutpjP36TpLbsrTqx6q3PSmD204irznc180b+0X26s05/Nyz2TmqLbsDuKaoDG1BF1ePFbsqHM/X1wOX2r3l28nZtn9FT1POr9eqlPRQ2LZ69HmZXx0azl3bOCdX/UvO1l7/uiWX+rvOW3nsGss5KCfvU4Ai2KpRqPb1jqyX0h8LS3KQkJjmLsGqdInLoAKvaF2KVkJMik+JAxkM1fr82rF7rTbnlezO7btV8+tsmV3rKbl12oVv+oX+rNisUfxLKFDomIphV3Nz9cEcRxwoCEwY5ZkeAxc/wKxjQTSuvRBHoyEchgkUsFb5x3fsj2n5VXalue22i3PcWte02q7Z+dlv6Vrt4no0R5rDgWwXfUu76j3A2CSElASr+acy0HnQpZkimaZiOzSDJUoZPISYEqHA6dc9UxO4jQCRdiMkzCLoJSO07xAJl/9OwbCPLcSjtOECRTlp/DTJPe/FfWQPiFRDlxl1ALZUzhwGZWLdD6kXT54aRXwzSwk6rDJ4gpG8IrJ7qf3mVHDshmYTV6Y2wX3zZYfQhwAML/gZ+6XZhMvnJGt6MUFK+8MqSqNor1TVJqWstksyxvqK8VkEt60Tcs3+4AzKXtvg+RfoOYGwvzWjbNhvRd5Y9/ll4kx7QskIJbjp+XLbzw3+sDVc6Mrj8/iu2+ZnZCybgIW4pDtLJKvEsX4y4cLDrDyk+Y7+TdPWPjergNYW3FknvKNIQgdqZW6X94+mQ2cSFgiBTFh2+CHAA4F3zVuirzhIuQ0vWYCPv+iKaWr6wjjJKOi29Zzw7b65jzFWwrBu9MHmFzh11f2gn96ZT/fXPelDsZI3/iS/3Y2SD4uGOQuTnIudX0hX58yOB1tqf2a4EHBr555Xwn+biaND+aPlq2a7p+Hxl8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_070752</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861FDD558D81178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861FDD559201178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_FUNC_YOUTH_BAU_Get_Self_200_OK_P1" searchProperties="true" id="8e5d5c59-162e-4432-92c5-81d8b2567f02"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937FC1529BE0401F0A07996E28:916853E8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5639A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5639A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5639A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB564BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5693A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB564BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5693A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH5nSLwq0I8wgiKcqiIB69OVOThog2ia1SaHy629SbAVEL94ZZpjs7qy99kdWcspAFFpehzGUcEyJ4vda6j9u3Q5AA5ha3XYtrWa7DQ3UG3UN2q5jOsBEwAaq4jOWIp8wDghvqZZh2pppiN/UNDzH8iy72mw2nlTlHiVMQAuXqqEqWRQS5uVhW2qaEI8ChplHQISYx6E36QyuPeHpgYKT2j7dsMwDJu0F57Gn67AaIIjCEFYhjfRTfcfnNGDeBM8J4GmC3mMGrKW+712tVtWVXaXJXLcMw9ANVxc+AcPzE7X9q9iMAp/M6GbdBYQSDEGI10CSGiC+oIHSCec0wXwRfQFt6qYhoTWUQQ2aNXKi6h8BcnZHIu2QTBjQ2AKYBdgYzVCCCETK3dhvqSfHdXCzd5oAwmY0idje+meUEFmikMYo0FiRWcHueMQD5WqfIuj5BIYpw0s0lGMSA4iYMkrQDGfXmInhC5iSt1/JWDFhCP6kJaf6Nk9BWz9QmR6eI8b/T7+2e7VBuQdhitrN4RX2r27hOhjdDCI2/HPN3d9T+zZO/VZOYdt5Q6ps9ft6f1DLuXrflAWX5sPtbfg8MP3ekPzusUE2uBy/IfMZv2aR03vK7irrJ/8xJfQ2cZ/wePxsku5k+fBQc67CdHg+uzL0+7tu15j+Gpmrs8q0Ewej+3h50a0YweBmaNyN7h6D5vO68eLqI9yE+uVbcFHhwHLXkzt85Q/6kzMKnGBizRrzhj2rrNzK8/RX+FJz1l2jv8IXWXP8yEKLtj5y2s5h11jIwST9+4wgL5ZyNPye0hf9Avx7aZEWHGiz3NWLpT4xjghX23KXlBUvFeKDA080c7M+b9bNbqN75tRrZx2z3zk3aobZNzqG47o158ws9GfDYo9il5IZlrGkwm7m53uCMPIYIgFKtCVN4QIx9RvEHuBA8clYHAxKGJpSoeBd1+o3HKffdJtOzbI7zaZrWeeNjmmZ54bjnKvKkPIbcpN0Zhwlu+pt76j3GEEcYyQlXs45E4POuCjJK1imPDSrS1AlKBWXQCJ12LNqTUdnOIpDJAnrEQ3SEFXjRZwXSGebf0sDkOVWzGBMEw7C/BR+meT+t6IewifA0oHJjM6Q6Ck6cBmZRTpfp13fTruA76QBlodNFJcnGG6Y7H76mBk5LOXAlHlBVg5HueWHEAcA9G/46fulKeMFS7wVvbhgxZ0hVKVdtPcVVF+r6XKZ5g1tSMVMBLxu6kZDnyCYCtl7m9IXRPQSQj/qxilZ70Uu7bv8Ur4gEw44isT4KfnyiOfGBDH53PDF8cmOfcvshBR14yjjh2zdULxKJONvHy7Qg9JPmEfib0WT4KNdB7C24og8xRuDYzKXK3m/vH0xG5AKWCwEkSbb4IcADgXfNZZFLrlwMU1/U46+/qJIpWupAEKaEu731Nywrb45T/4WI+/D6RNMrvDvV3bGvryy/wyuJ0IHI6CWvvi/nTWcjwtEYhfDOZeWmonXpwhO5ltq/07wsODb7neCv5tJ+5P5s2Wrpvvnof0v</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH5nSLwq0I8wgiKcqiIB69OVOThog2ia1SaHy629SbAVEL94ZZpjs7qy99kdWcspAFFpehzGUcEyJ4vda6j9u3Q5AA5ha3XYtrWa7DQ3UG3UN2q5jOsBEwAaq4jOWIp8wDghvqZZh2pppiN/UNDzH8iy72mw2nlTlHiVMQAuXqqEqWRQS5uVhW2qaEI8ChplHQISYx6E36QyuPeHpgYKT2j7dsMwDJu0F57Gn67AaIIjCEFYhjfRTfcfnNGDeBM8J4GmC3mMGrKW+712tVtWVXaXJXLcMw9ANVxc+AcPzE7X9q9iMAp/M6GbdBYQSDEGI10CSGiC+oIHSCec0wXwRfQFt6qYhoTWUQQ2aNXKi6h8BcnZHIu2QTBjQ2AKYBdgYzVCCCETK3dhvqSfHdXCzd5oAwmY0idje+meUEFmikMYo0FiRWcHueMQD5WqfIuj5BIYpw0s0lGMSA4iYMkrQDGfXmInhC5iSt1/JWDFhCP6kJaf6Nk9BWz9QmR6eI8b/T7+2e7VBuQdhitrN4RX2r27hOhjdDCI2/HPN3d9T+zZO/VZOYdt5Q6ps9ft6f1DLuXrflAWX5sPtbfg8MP3ekPzusUE2uBy/IfMZv2aR03vK7irrJ/8xJfQ2cZ/wePxsku5k+fBQc67CdHg+uzL0+7tu15j+Gpmrs8q0Ewej+3h50a0YweBmaNyN7h6D5vO68eLqI9yE+uVbcFHhwHLXkzt85Q/6kzMKnGBizRrzhj2rrNzK8/RX+FJz1l2jv8IXWXP8yEKLtj5y2s5h11jIwST9+4wgL5ZyNPye0hf9Avx7aZEWHGiz3NWLpT4xjghX23KXlBUvFeKDA080c7M+b9bNbqN75tRrZx2z3zk3aobZNzqG47o158ws9GfDYo9il5IZlrGkwm7m53uCMPIYIgFKtCVN4QIx9RvEHuBA8clYHAxKGJpSoeBd1+o3HKffdJtOzbI7zaZrWeeNjmmZ54bjnKvKkPIbcpN0Zhwlu+pt76j3GEEcYyQlXs45E4POuCjJK1imPDSrS1AlKBWXQCJ12LNqTUdnOIpDJAnrEQ3SEFXjRZwXSGebf0sDkOVWzGBMEw7C/BR+meT+t6IewifA0oHJjM6Q6Ck6cBmZRTpfp13fTruA76QBlodNFJcnGG6Y7H76mBk5LOXAlHlBVg5HueWHEAcA9G/46fulKeMFS7wVvbhgxZ0hVKVdtPcVVF+r6XKZ5g1tSMVMBLxu6kZDnyCYCtl7m9IXRPQSQj/qxilZ70Uu7bv8Ur4gEw44isT4KfnyiOfGBDH53PDF8cmOfcvshBR14yjjh2zdULxKJONvHy7Qg9JPmEfib0WT4KNdB7C24og8xRuDYzKXK3m/vH0xG5AKWCwEkSbb4IcADgXfNZZFLrlwMU1/U46+/qJIpWupAEKaEu731Nywrb45T/4WI+/D6RNMrvDvV3bGvryy/wyuJ0IHI6CWvvi/nTWcjwtEYhfDOZeWmonXpwhO5ltq/07wsODb7neCv5tJ+5P5s2Wrpvvnof0v</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQhBQCUUECUrZs26ULdG/blyvjDMTdxKa2E0J//TqhSYGlve2VkJAn4zNnPnzsM4HiqO71hAAuCaPayO/o/7abCwRBq24EKHCNU6fhGvP6HBunGDUhqM8XloV0bSREAiMqJKKyo9ct2zFsS/1mtuU16l69UXOb7oOu/QIuFLRyqVm6lsURFV4RtqMnnHoMCSI8imIQnsTetHd95SlPD5Wc9O7ZlmURkHdDKVeeaeJaABiiCNcwi80zc8/nLBDelCwpkgmHl5iB6Ogve9frdW3t1BhfmnXLskyrbSqfQJDlV737pdwMwYgu2HY9QJRRglFEnlFO6hpkyAKtFy0ZJzKM34C2TdvKoQ3IsIHtU/pVN18DFOw+iLRHkgtkiBDZJdgEFsCBYtBuJ6OO/vVjHdzunXFExYLxWBysP0cJaAoRW0FgiDKzkt3HEY+Uq3sG2BtRHCWCpPAjH5MVwiC0Gw4Lkl0RoYYvEFrRfi0T5YQB/kxLzsxdnoq2eaQyPlmCkP+nX7u92qL8QlEC3RZpb8Q/mT8Uy+/Z5M7hg3v/J/b5N7A6BYVd5y2pqtUv68NBrebqZVN6aZ4slg+XYZy2RvVn53LduH/4zb/fhWTDGnI9Tk/qq6sbdCF6y9HDI1um/OL24u5mFrj3Jy0a4Fs7DB/C9T3fXH25H2/C22Qc8m831nC+uhCX2c+hAP9ucsHW96g55RdsuBxe+elzmg2sE/LIx9IOmufBNeezb1LSxJ1c3932olv55fxmnGbOHGbtGXrm8bPzJDqvOe3msG8s5WCazB8By3KZj8bI14aqX0i+Ly25hQTGonD1Vrk+CQlU6t18Vy4rXqLEhwSeauZ2fd5q2gN30G80207PHvbOrVPLHlo9q9Funzb6dqk/WxYHFAeMLkgeK1fY7fy8TxDHngAaADdSluAQhP4Ooo8k0kZ0og4GowJmTCm447vN4aDfttq+5Qwsx2/Zfdd2h+d9u2/33IGu/WByTMe8t5DA99Xb2VPvCWCyIpBLfD7nQg26kKokTyhNZGTXUlSjkKhLgOc67NVPWw1TkHgVQU7YjFmQRFBbhauiQKbY/tcNhEVhJQKvGJcoKk7hm0kefivroXwCkjuIPKM+qJ7CkcvILtN5O+3mbtolfC8JSH7YVHElJ3jLZP/T68zkw1INTJUXFtVwVFs+CXEEwHyHn3lYmipekJKd6OUFq+4MpSrdsr1PqPZUS9I0KRrq5orJFbxpm5ZrTgEnSvY2M/YbqFlBmB+6cSrWB5Er+z6/RIZ0KpGEWI2fViw/8NyYgsifGyN1fLKPvmX2Qqq6ScjkMdsgUq+SnPG7Dxfs4dxPmW/U35rx4LVdR7B24qg81RtDErrMV/n9snljNjBTsEQJIuO74McAjgXfN1ZFrrhINU3zRMLbX7Rc6To6wpglVI58vTDsqm/BU25W4L06/QVTKPzLlZ2JN6/su+urqdLBGOmVL/lvZ4MU44JB7RKk4NLRM/X6VMHpckftXwgeF3yn/Z7g72fS/cv8t2WnpofnofsH</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065222</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB564CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5694A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_FUNC_YOUTH_SAU_Get_Self_200_OK_P1" searchProperties="true" id="58ce5055-0bfe-4906-a247-c84a5244e475"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB570FA1FAE0401F0A059945B1:FBFB4D89"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937FC7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937FC7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937FC7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937FD9529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB56D9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937FD9529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB56D9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4jSx1HIBQJJVJC4N52WzhKYYedl5ToHcEkcGjs0zK9fOzQUKO22KyEhnxx/5zsXf/YVQ3FkeW3GIOUkoYrfa6r/2M6DgZ2HhmZbgLSa3cAaqoagIde2q6HVsG3bUBWfsQx8yjiivKlahlnVTEP8Jqbh2ZZnORWz5vxWlZ+QMgEtXCpiVx5HlHlF2KaapdRLECPMoygG5nHsBe27W094eqjkpLaudiyLgGlryfna03VcCQFDFOEKTmL9Sj/yuQqZF5AFRTxL4SVmyJrqy97n5+fKc7WSpAvdMgxDN1xd+ISMLC7V1kW5GUKfzpPduotoQglGEfmDJKk74MskVNrRIkkJX8bvQJu6aUhoDXKsYbNGL1X9NUDB7pNIRyRThjS2RGYJNoY5pEAxKNOx31QvP9fB3d5JiiibJ2nMTtZfowR0A1GyhlBjZWYlu88jnilX6wqw51McZYxsYCTHZI0wMOVHCnOS3xImhi9kStF+JWflhAH+Skuu9EOegrZ+pjI9sgDG/0+/Dnu1Q/mJogxaUHccf9jpoLsHt079m1ntnrtoOmo84WZB4dB5R2rf6pf16aDu5+pl02DwFNxsxv2VtY4nwWw6ad99o+4WGv4qtcfcGrk9PzVmP+L+ZDnLe9++PQ7vh4/TbRZfUyuYfycWIdaNT6/Nv+oX7iBYstmv2t/54r4ztLouRqto7LcXq+Gf6zx/XG+Dzp+AjqxfxmqwnY6muDZ08t+/8Pf5Ch43OGMrI3OuB9Fws70Y8eqDacW1Kpltpp15+DxizdecDnM4NpZyEGQPj4B5uZSj4feUgegX4h9Li7SQUJsXrt5a6hPjQLnakrukrHiZEB8SeqKZu3XfqZtdx602Bj3XttxO36gZ5sBoGw3Xrfctp9SfHYsTit2EzomMJRV2Nz8fE8Sxx4CGkGqbJMNLYOoHiD3EkeLTsTgYCWUwSYSCt/v1vmMYVt+yO/2BaZr1eq3WbfTadbttdwemqowSfk/v0/acQ3qs3tUj9R4DJmsCUuLlnDMx6IyLkjyhTcYjs7JBFQqZuARSqcOeVXNsnZF4HYEkrMdJmEVQWS/XRYF0tvu3NIRZYSUMr5OUo6g4he8mefqtrIfwCYl0YDKjDoiewpnLyCzTeT/t+mHaJXw7C4k8bKK4PCV4x+T40+vMyGHZD8w+L8zMkvt+yxchzgDoH/DTT0uzjxduyEH08oIVd4ZQlVbZ3idUeapkm01WNLQhFTMV8LqpGw09AJwJ2dtOkhVQfQ+hf+rG2bM+iby3H/PL+JIGHHGIxfgpxfITz40AmHxu+OL45J99yxyFFHXjkPNztm4kXiWS8YcPF+xh6SfMP8Tfc5KGr+06g3UQR+Qp3hic0IVcyftl+85s4ETAEiGISXoIfg7gXPBj477Iey5cTNNDxuH9L4pUuqaKME4yyv2eWhgO1bfgybdr8F6d3sAUCv9yZefs3St7dncbCB2Mkbr3Jf/trJFiXDCIXYwUXJpqLl6fIjhdHKj9C8Hzgt9tfCT4x5m03pjfWg5qenoeWv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4jSx1HIBQJJVJC4N52WzhKYYedl5ToHcEkcGjs0zK9fOzQUKO22KyEhnxx/5zsXf/YVQ3FkeW3GIOUkoYrfa6r/2M6DgZ2HhmZbgLSa3cAaqoagIde2q6HVsG3bUBWfsQx8yjiivKlahlnVTEP8Jqbh2ZZnORWz5vxWlZ+QMgEtXCpiVx5HlHlF2KaapdRLECPMoygG5nHsBe27W094eqjkpLaudiyLgGlryfna03VcCQFDFOEKTmL9Sj/yuQqZF5AFRTxL4SVmyJrqy97n5+fKc7WSpAvdMgxDN1xd+ISMLC7V1kW5GUKfzpPduotoQglGEfmDJKk74MskVNrRIkkJX8bvQJu6aUhoDXKsYbNGL1X9NUDB7pNIRyRThjS2RGYJNoY5pEAxKNOx31QvP9fB3d5JiiibJ2nMTtZfowR0A1GyhlBjZWYlu88jnilX6wqw51McZYxsYCTHZI0wMOVHCnOS3xImhi9kStF+JWflhAH+Skuu9EOegrZ+pjI9sgDG/0+/Dnu1Q/mJogxaUHccf9jpoLsHt079m1ntnrtoOmo84WZB4dB5R2rf6pf16aDu5+pl02DwFNxsxv2VtY4nwWw6ad99o+4WGv4qtcfcGrk9PzVmP+L+ZDnLe9++PQ7vh4/TbRZfUyuYfycWIdaNT6/Nv+oX7iBYstmv2t/54r4ztLouRqto7LcXq+Gf6zx/XG+Dzp+AjqxfxmqwnY6muDZ08t+/8Pf5Ch43OGMrI3OuB9Fws70Y8eqDacW1Kpltpp15+DxizdecDnM4NpZyEGQPj4B5uZSj4feUgegX4h9Li7SQUJsXrt5a6hPjQLnakrukrHiZEB8SeqKZu3XfqZtdx602Bj3XttxO36gZ5sBoGw3Xrfctp9SfHYsTit2EzomMJRV2Nz8fE8Sxx4CGkGqbJMNLYOoHiD3EkeLTsTgYCWUwSYSCt/v1vmMYVt+yO/2BaZr1eq3WbfTadbttdwemqowSfk/v0/acQ3qs3tUj9R4DJmsCUuLlnDMx6IyLkjyhTcYjs7JBFQqZuARSqcOeVXNsnZF4HYEkrMdJmEVQWS/XRYF0tvu3NIRZYSUMr5OUo6g4he8mefqtrIfwCYl0YDKjDoiewpnLyCzTeT/t+mHaJXw7C4k8bKK4PCV4x+T40+vMyGHZD8w+L8zMkvt+yxchzgDoH/DTT0uzjxduyEH08oIVd4ZQlVbZ3idUeapkm01WNLQhFTMV8LqpGw09AJwJ2dtOkhVQfQ+hf+rG2bM+iby3H/PL+JIGHHGIxfgpxfITz40AmHxu+OL45J99yxyFFHXjkPNztm4kXiWS8YcPF+xh6SfMP8Tfc5KGr+06g3UQR+Qp3hic0IVcyftl+85s4ETAEiGISXoIfg7gXPBj477Iey5cTNNDxuH9L4pUuqaKME4yyv2eWhgO1bfgybdr8F6d3sAUCv9yZefs3St7dncbCB2Mkbr3Jf/trJFiXDCIXYwUXJpqLl6fIjhdHKj9C8Hzgt9tfCT4x5m03pjfWg5qenoeWv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/A4jx1j2eAAnsAM5tKyDeQCTbt92VHkY1BjS8SSDOTXr2xiBwjJpjuTDKPjo+9856JPuhA4iV2/JwSkknJmjAcd8x839Oq4Hjasluc2rEZ0H1oYotDywHWh6bZwC5BpjIVQMGZCYiY7poucuuUg/Td3kO+5fh3VHFT/ZRp3kAoNrV1qetcmiZnwi7AdU6XM51hQ4TOcgPAl8We9yaWvPX1ccjK7FzuWRcC0u5Ry5ds2qYVAII5JjfDEvrAPfC5C4c/ogmGpUniOGYqO+bx3vV7X1vUaTxe2ixCyUdvWPqGgizOz+6ncDOGYRXy37mPGGSU4pk84JzUBueSh0YsXPKVymbwB7dgOyqEt2BCLOA12ZtovAQp2H0Q6IJkKbIkldkqwW4ggBUbA+H477phnH+vgbu88xUxEPE3E0frPKAHLIOYrCC1RZlay+zjiiXJ1L4D4Y0ZiJWgG03xMVpiAMK5TiOjmkgo9fKEwivYbG1FOGJA/acmFvc9T07ZPVGZAFyDk/+nXfq92KHc4VtDNmg+2cvkPe3Q9vTyf/+Kb4UN9S8O/pqhTUNh33pGqWv28Ph7Uaq6eN0UKzSfnHpfboYqGlyppzL9Nf2dT1Uju4i/rvmJOKnv3Cabb4fxqvPl65arvTzdP9dHwwWnN5psr+8s0nqCMjm4+8cBLbgNn8O1zg6PJdjn9+3t/lD091PuNaLH4HLvRbxFF7MtDOIHk7hLY4ob9uN7eJdfxzY2D1nzpzYIfrSBYDRefxE8VL74+oswe97Zp8BP1Reclp/0cDo2lHMzU/W8gslzmozEeGCPdLyzfl5bcQkMrKlz9Va5PQgKTZjfflcuKr7T40NDXzdyth61zp9/sB975oN1zRr0haiBnhHrIa7cbXuCU+rNjcUSxz1lE81i5wu7m532CJPEFsBBSK+OKLEGY7yAOsMTGmN3qg8GZgDnXCu64aOggt+22XC9AbcdrtvQ/GraCdjsYNYemMeXyil2lvUhCeqje9QP1vgVCVxRyic/nXOhBF1KX5BFnSsZOLcM1BkpfAmmuw77baHm2oMkqhpywnfBQxVBbLVdFgWyx+3UtTERhpYKseCpxXJzCN5M8/lbWQ/uENHcQeUYB6J7CicvILdN5O+3z/bRL+J4KaX7YdHFlSsmOyeGnl5nJh6UamCovIqrhqLb8IcQJAPsdfvZxaap4YUb3opcXrL4ztKp0y/Y+4tpjTWWZKhrazBUz1fC2Y6OmPQOitOxt5/wBmF1B2B+6cSrWR5Er+yE/JZdsJrGERI+fUSw/8NyYgcifG2N9fDYffcschNR1k7CRp2z9WL9KcsbvPlyIT3I/bb7WP2uehi/tOoG1F0fnqd8YkrJFvsrvl+0bs0G4hqVaEHm6D34K4FTwQ2NV5IqL1NN0ryS8/cXIla5jYkK4YnI8MAvDvvoWPOV2Bf6L0yuYQuGfr+yNePPK/jm5nGkdTLBZ+dL/drZoMS4E9C5BCy4dc6Nfnzo4W+yp/TPBV4Lfatebo37Tc9tBJfjNdvt86LaqAh5k0n1lfm3Zq+nxeej+Cw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065227</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937FDA529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB56DAA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_FUNC_NONCLG_FAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="064d970f-4f5f-4dd8-9757-393c7b147dc8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB57AAA1FAE0401F0A059945B1:90F25B8D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5715A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5715A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5715A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5727A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5774A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5727A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5774A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIBUJKVJDCpTPp0Cu0Q3k5cp0NuJM4IbaBztcfOzQpMLSncyQk5J3ttde+eNlnDCWx4weMQc5JSrWw39b/Aeep4SFsGeDartFooSfjqRHNjDp26h54jg0zW9dCxgSElHFEeVt3LLtu2Jb8jW3Ldx2/7tSadXuqaw+QMwktXWqWrm2SmDK/CNvWRU79FDHCfIoSYD7H/ii4HPrS00clJ71ztmVZBMw7C84z3zRxLQIMcYxrOE3MM3PP5yxi/ojMKeIih9eYEWvrr3vX63VtXa+l+dx0LMsyrZYpfSJG5l/1zpdyM0QhnaXbdQ/RlBKMYvIbKVKXwBdppAXxPM0JXyTvQNumbSloAzbYwHaDftXNtwAFu08i7ZHMGTLYAtkl2B3MIAeKQbu/C9v61891cLt3nCPKZmmesIP131ECuoI4zSAyWJlZye7ziEfK1TkD7IcUx4KRFVypMckQBqbd5DAjmyFhcvgiphXt1zasnDDAf9OSM3OXp6RtHqlMn8yB8f/Tr91ebVEeUCygM12g2cVzP2hQC4Xp93R4Fd08k2fPfblsFxR2nbekqla/rg8HtZqr103d6WNjvez/cCewGQ2Xvcn0ZDo6EcHJbdS8fnBWpDcWo0m6XocXzKRP0/uhOHGbQfe7Pb/duI/jFr25rrfwywtfDr+MHlGv/rtlS6QevY9ultS8AIfFXJzbdXedPCzW8fnAnf8anD/+xL+zoPttEk1mvZVwvW/9wc2PKb/3kruYrTa3X57Fz7vmfVeMQjPMssXl7XjdfstpN4d9YykHI/H0DJiXSzUaYV87l/1C/GNpURYSGbPC1c+UPjEOlOsdtUvJii+k+JDIl83crgenTbvn9bqu53iBfR4MrIZln1uB5bZaDbdrl/qzZXFAsZfSGVGxlMJu5+djgjjxGdAIcmOVCrwApn+A2EccaSG9kwcjpQzGqVTwgeJqdVvN+mmr0fe6ruM4DcvxeoFrdwddqcNXKb+m13kw45Dvq3d9T73vAJOMgJJ4NedMDjrjsiRLtBI8tmsrVKMg5CWQKx32ncapazKSZDEowmaSRiKGWrbIigKZbPvvGAizwkoYztKco7g4he8mefitrIf0iYhyYCqjLsiewpHLyCnTeT/t5m7aJXwgIqIOmywuzwneMtn/9DYzaliqganywqwajmrLX0IcATA/4GcelqaKF63ITvTygpV3hlSVTtneJaota2K1EkVDPaWYuYQ3bdPyzBFgIWXvZZz+AmpWEOanbpyK9UHkyr7PT/AFHXHEIZHjpxXLTzw3RsDUcyOUx2fz2bfMXkhZNw4bfszWi+WrRDH+8OGCfaz8pPlG/q3TPHpr1xGsnTgyT/nG4ITO1UrdLy/vzAZOJSyRgpjmu+DHAI4F3zdWRa64cDlNT4LD+180pXRtHWGcCsrDvl4YdtW34MlfMvDfnP6AKRT+9cresHev7MnlcCR1MEF65Uv+29kgxbhgkLsYKbi09Y18fcrgdL6j9q8Ejwu+7X4k+PuZdP4w/2nZqenheej8Cw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIBUJKVJDCpTPp0Cu0Q3k5cp0NuJM4IbaBztcfOzQpMLSncyQk5J3ttde+eNlnDCWx4weMQc5JSrWw39b/Aeep4SFsGeDartFooSfjqRHNjDp26h54jg0zW9dCxgSElHFEeVt3LLtu2Jb8jW3Ldx2/7tSadXuqaw+QMwktXWqWrm2SmDK/CNvWRU79FDHCfIoSYD7H/ii4HPrS00clJ71ztmVZBMw7C84z3zRxLQIMcYxrOE3MM3PP5yxi/ojMKeIih9eYEWvrr3vX63VtXa+l+dx0LMsyrZYpfSJG5l/1zpdyM0QhnaXbdQ/RlBKMYvIbKVKXwBdppAXxPM0JXyTvQNumbSloAzbYwHaDftXNtwAFu08i7ZHMGTLYAtkl2B3MIAeKQbu/C9v61891cLt3nCPKZmmesIP131ECuoI4zSAyWJlZye7ziEfK1TkD7IcUx4KRFVypMckQBqbd5DAjmyFhcvgiphXt1zasnDDAf9OSM3OXp6RtHqlMn8yB8f/Tr91ebVEeUCygM12g2cVzP2hQC4Xp93R4Fd08k2fPfblsFxR2nbekqla/rg8HtZqr103d6WNjvez/cCewGQ2Xvcn0ZDo6EcHJbdS8fnBWpDcWo0m6XocXzKRP0/uhOHGbQfe7Pb/duI/jFr25rrfwywtfDr+MHlGv/rtlS6QevY9ultS8AIfFXJzbdXedPCzW8fnAnf8anD/+xL+zoPttEk1mvZVwvW/9wc2PKb/3kruYrTa3X57Fz7vmfVeMQjPMssXl7XjdfstpN4d9YykHI/H0DJiXSzUaYV87l/1C/GNpURYSGbPC1c+UPjEOlOsdtUvJii+k+JDIl83crgenTbvn9bqu53iBfR4MrIZln1uB5bZaDbdrl/qzZXFAsZfSGVGxlMJu5+djgjjxGdAIcmOVCrwApn+A2EccaSG9kwcjpQzGqVTwgeJqdVvN+mmr0fe6ruM4DcvxeoFrdwddqcNXKb+m13kw45Dvq3d9T73vAJOMgJJ4NedMDjrjsiRLtBI8tmsrVKMg5CWQKx32ncapazKSZDEowmaSRiKGWrbIigKZbPvvGAizwkoYztKco7g4he8mefitrIf0iYhyYCqjLsiewpHLyCnTeT/t5m7aJXwgIqIOmywuzwneMtn/9DYzaliqganywqwajmrLX0IcATA/4GcelqaKF63ITvTygpV3hlSVTtneJaota2K1EkVDPaWYuYQ3bdPyzBFgIWXvZZz+AmpWEOanbpyK9UHkyr7PT/AFHXHEIZHjpxXLTzw3RsDUcyOUx2fz2bfMXkhZNw4bfszWi+WrRDH+8OGCfaz8pPlG/q3TPHpr1xGsnTgyT/nG4ITO1UrdLy/vzAZOJSyRgpjmu+DHAI4F3zdWRa64cDlNT4LD+180pXRtHWGcCsrDvl4YdtW34MlfMvDfnP6AKRT+9cresHev7MnlcCR1MEF65Uv+29kgxbhgkLsYKbi09Y18fcrgdL6j9q8Ejwu+7X4k+PuZdP4w/2nZqenheej8Cw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jxnjD2wMnsCMcaBLk6ZJTJNsX3aEfAG1tgSSDIRfv7KJHaAkm+wMM4yur84990NHOhcoS50gFAK4JIxqo4uu/k/Ha06blmcbrZblG27S9o12y0mMZgI2wsjrJJ6jayMhchhRIRGVXd2x7KZhW+o3tq3Ac4Km23DbnZ+6dg9cKGjl0rB0bZOlVARl2K6ecxowJIgIKMpABBIHcfjtKlCeAao46b3zHcsyIO/NpVwEpokbCWBIU9zALDPPzQOf80QEMZlRJHMOzzET0dWf967X68a62WB8ZjqWZZlWx1Q+iSCzz3rvU7UZkhGdst06QpRRglFKtqgg9Q3knCVamM4YJ3KevQJtm7ZVQBuwwQa2XfpZN18ClOzeiXRAkgtkiDmyK7A7mAIHikH7cTfq6p/f18Hd3jFHVEwZz8TR+mOUgK4gZQtIDFFlVrF7P+KJcvXOAQcjitNckBVcF2OyQBiEdsNhSjZXRKjhS4RWtl/biGrCAH+kJefmPk9F2zxRmQsyAyH/T7/2e7VDuUdpDj3rcTJeUZ5dn7lbeSnp9nbeRuYZS3/OuiWFfecdqbrVz+vjQa3n6nnTQzgbuv1B8hjdLrbtwZ0YeKbv/Bi011fh7NKywwEeRvzvx8Xm8sakFqMPg8nYmlzPbu5+PcTtp21G0GotW08s+/qJm/ZqsnZt+iuO8Ozr2W+2+Us+9lFI4uXwy5JG4/D2PhR5fB1Z41vgeHjPrXg6SeNt6reheXm7OQMfReF21fy0hOWlHK7H5MvNz69n+Vx4bvclp/0cDo2VHMT55BdgWS2L0RhdaEPVLyTflpbCQhJjWroGi0KfhAQq9V6xq5CVIFfiQ5JANXO3HrRbduRHfc/33dAehgPLteyhFVpep+N6fbvSnx2LI4oRo1NSxCoUdjc/bxPEWSCAJsCNFcvxHIT+BuIFkkgb0Tt1MBgVMGZKwT130GpfDJyW5fl2x3f6fjNyfNvveNFAJdDXtWsmv9PvPJxK4Ifq3TxQ7zvAZEGgkPhizoUadCFVSZZolcvUbqxQg0KuLgFe6HDguG3PFCRbpFAQNjOW5Ck0FvNFWSBT7P4dA2FRWonAC8YlSstT+GqSx9+qeiifhBQOosioD6qncOIycqp0Xk+7tZ92BR/mCSkOmyqu5ATvmBx+epmZYljqganzwqIejnrLByFOAJhv8DOPS1PHS1ZkL3p1wao7Q6lKr2rvEjWWjXy1ysuG+oVicgVv2qblmzHgXMne05j9BmrWEOa7bpya9VHk2n7IL5dzGkskIVPjp5XLdzw3YhDFc2Okjs/mvW+Zg5CqbhI28pQtStWrpGD85sMFB7jwU+Yb9bdmPHlp1wmsvTgqT/XGkITOilVxvzy9MhuYKViiBJHxffBTAKeCHxrrItdcpJqmSS7h9S9aoXRdHWHMcipHF3pp2Fffkqd8WkDw4vQHTKnwz1f2Rrx6ZT9+u4qVDmZIr33JfzsbpBwXDGqXICWXrr5Rr08VnM721P6Z4GnBt723BP8wk94f5j8tezU9Pg+9fwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065231</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5728A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5775A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_FUNC_ADULT_SAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="d85d3ec6-ce3d-4a59-bab4-e43d315300ef"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU" id="f4babe74-1397-4891-8a95-aa893da0e256"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB587BA1FAE0401F0A059945B1:13D6E2C7"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB57B0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB57B0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB57B0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB57C2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB580AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5844A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB57C2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB580AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5844A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyjyjNpZfQiFYKKQwZWhgo174cGWenMSR2iZ228PXHTkloS+EwR6pUeWd77bUvXvYBR1nqeD7nkAvCqBYOevo/LnbdKI4eDKuDXKOFH5oG6iDLQI6DLXDc5j64uhZyXkBIuUBU9HTHspuGbcnflW15bcdrug3bbU907QZyLqGlS8PStWWWUu6VYXt6kVOPIU64R1EG3BPYG/ujoSc9PVRx0vsHK5ZlwLyfCDHzTBM3IsCQpriBWWYemBs+BxH3xmRKkShyeIsZ8Z7+tnexWDQWzQbLp6ZjWZZpdU3pE3Ey/an3f1SbIQppzFbrAFFGCUYpeUWK1AhEwiLNT6csJyLJPoG2TdtS0AYssYHtFv2pm+8BSnbfRNogmXNk8ATZFdglxJADxaBdX4Y9/ef3Orjae5UjymOWZ3xr/XeUgM4hZTOIDF5lVrH7PuKOcvUPAHshxWnByRzO1JjMEAau/ckhJssh4XL4Iq6V7deWvJowwH/TkgNznaekbe6ozIBMgYv/06/1Xq1QblBaQP8ifArPLqen1L22XMi72e39dHB283s29HslhXXnFam61W/r7UGt5+pt091p5/X34N69sOjexf1L8/gK2+NJPHwI49vF0/wkPB/lbNm+sOc3MQp/8Yx0x93LcDJ8SJzZ495k77QzPLsexcnQ7vy4j5KbSOwPh3vNc2wv7ZcimLduJ2AdueFd5/X2V6f9J35NXp+6SUD9cVyIx8dbws4G+9eJPXLn/njhWCcnV5OWc/FjClma2BOWjk+eUY5GwZD13nNaz2HTWMnBuHh4BCyqpRqNcKAdy34h8bW0KAuJjLh09WZKn7gAKvS+2qVkxSuk+JDIk81crY/2O3bgBodtN3B8+9g/slqWfWz5VrvbbbUP7Up/Viy2KAaMxkTFUgq7mp+vCeLM40AjyI05K3ACXP8CcYAE0kJ6KQ8GoxyumFTwdnB4fOQO7I5/2GwHx0HXbQf2wHKctjz7/r6ja2dMnNPz3I8F5Jvq3dxQ70vAZEZASbyacy4HnQtZkmc0L0RqN+aoQaGQl0CudNhzWvttk5NsloIibGYsKlJozJJZWSCTr/4dA2FeWgnHM5YLlJan8NMkt79V9ZA+EVEOXGV0CLKnsOMycqp0Pk+7s552Be8XEVGHTRZX5ASvmGx+ep8ZNSz1wNR5YV4PR73lLyF2AJhf8DO3S1PHi+ZkLXp1wco7Q6pKv2rvM2o8N4r5vCgb6irFzCW8aZuWa44BF1L2Xq7YE1CzhjC/dePUrLci1/ZNfoVI6FggAZkcP61cfuO5MQaunhuhPD7L775lNkLKuglYil22IJWvEsX4y4cL9rDyk+Y/8m/B8ui9XTuw1uLIPOUbQxA6VSt1v7x8MhuYSVgiBZHl6+C7AHYF3zTWRa65CDlND4WAz79oSul6OsKYFVSEA700rKtvyVO8zMB7d/oAUyr825W95J9e2Xej4VjqYIb02pf8t7NBynHBIHdxUnLp6Uv5+pTB6XRN7d8I7hb8Q+srwd/MpP/B/NGyVtPt89D/Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyjyjNpZfQiFYKKQwZWhgo174cGWenMSR2iZ228PXHTkloS+EwR6pUeWd77bUvXvYBR1nqeD7nkAvCqBYOevo/LnbdKI4eDKuDXKOFH5oG6iDLQI6DLXDc5j64uhZyXkBIuUBU9HTHspuGbcnflW15bcdrug3bbU907QZyLqGlS8PStWWWUu6VYXt6kVOPIU64R1EG3BPYG/ujoSc9PVRx0vsHK5ZlwLyfCDHzTBM3IsCQpriBWWYemBs+BxH3xmRKkShyeIsZ8Z7+tnexWDQWzQbLp6ZjWZZpdU3pE3Ey/an3f1SbIQppzFbrAFFGCUYpeUWK1AhEwiLNT6csJyLJPoG2TdtS0AYssYHtFv2pm+8BSnbfRNogmXNk8ATZFdglxJADxaBdX4Y9/ef3Orjae5UjymOWZ3xr/XeUgM4hZTOIDF5lVrH7PuKOcvUPAHshxWnByRzO1JjMEAau/ckhJssh4XL4Iq6V7deWvJowwH/TkgNznaekbe6ozIBMgYv/06/1Xq1QblBaQP8ifArPLqen1L22XMi72e39dHB283s29HslhXXnFam61W/r7UGt5+pt091p5/X34N69sOjexf1L8/gK2+NJPHwI49vF0/wkPB/lbNm+sOc3MQp/8Yx0x93LcDJ8SJzZ495k77QzPLsexcnQ7vy4j5KbSOwPh3vNc2wv7ZcimLduJ2AdueFd5/X2V6f9J35NXp+6SUD9cVyIx8dbws4G+9eJPXLn/njhWCcnV5OWc/FjClma2BOWjk+eUY5GwZD13nNaz2HTWMnBuHh4BCyqpRqNcKAdy34h8bW0KAuJjLh09WZKn7gAKvS+2qVkxSuk+JDIk81crY/2O3bgBodtN3B8+9g/slqWfWz5VrvbbbUP7Up/Viy2KAaMxkTFUgq7mp+vCeLM40AjyI05K3ACXP8CcYAE0kJ6KQ8GoxyumFTwdnB4fOQO7I5/2GwHx0HXbQf2wHKctjz7/r6ja2dMnNPz3I8F5Jvq3dxQ70vAZEZASbyacy4HnQtZkmc0L0RqN+aoQaGQl0CudNhzWvttk5NsloIibGYsKlJozJJZWSCTr/4dA2FeWgnHM5YLlJan8NMkt79V9ZA+EVEOXGV0CLKnsOMycqp0Pk+7s552Be8XEVGHTRZX5ASvmGx+ep8ZNSz1wNR5YV4PR73lLyF2AJhf8DO3S1PHi+ZkLXp1wco7Q6pKv2rvM2o8N4r5vCgb6irFzCW8aZuWa44BF1L2Xq7YE1CzhjC/dePUrLci1/ZNfoVI6FggAZkcP61cfuO5MQaunhuhPD7L775lNkLKuglYil22IJWvEsX4y4cL9rDyk+Y/8m/B8ui9XTuw1uLIPOUbQxA6VSt1v7x8MhuYSVgiBZHl6+C7AHYF3zTWRa65CDlND4WAz79oSul6OsKYFVSEA700rKtvyVO8zMB7d/oAUyr825W95J9e2Xej4VjqYIb02pf8t7NBynHBIHdxUnLp6Uv5+pTB6XRN7d8I7hb8Q+srwd/MpP/B/NGyVtPt89D/Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3Tqo1OacqcjzJQCgoKK4OXz5UxIU4i2SW1SwO/Xn6TYCogePDPMMNndWXvtS1ZyzmEYFG2HcxwLwqg26DT1fyrY94uoNDMAQHWjXJkBA84ANqA/s4qlxqwKq2VdG3Ce4AHlAlLR1IvAKhkWkL+pBexK0S41CiXLeta1BxxzCS1dCkDX1mFAuZ2GbepJTG0GOeE2hSHmtkD2xBkNbelpw4yT3jrfsEwDxq2FEJFtmqjgYYSDABUQC81zc8fn3OP2hMwpFEmMP2J6vKl/7F2tVoVVqcDiuVkEAJigYUofj5P5qd46yTZjb0B9tlm7kDJKEAzIX6hIjbBYME9zgjmLiViE30BbpgUUtIHXyEBWmZ7q5meAlN2RSDskYw4NvoBWBnaHfRxjirB2fzdo6qfHdXCzdxpDyn0Wh3xv/TtKmC5xwCLsGTzLLGN3POKBcrXOMbIHFAUJJ0t8rcYkgghz7TbGPlkPCZfD53Etbb+25tmEYfSblpyb2zwlbfNAZTpkjrn4P/3a7tUG5QEGCW4N/77cly9Lj4tR+zIZ93uWW439ChqTdr2ZUth23pDKW/2x3h/UfK4+NtHx2ZRXxJnXvwaTP6ZVKT4+8PLq4ZKO+GwytC5e6M2siMHTLZqOQ97rct+tMfo2q9TffTp6ZeHYWk7G95foJTqp+qUL33o1R9NRMFhcu+C9tkpqwcVFP7kiKHaXdcu9uao+g9uz52SILvnj2Z9ZfxzdOmAQDNsvT8P1tdkJnS7rXZys6IPTmLtvLOq7V1fTntUfNT9z2s5h15jJwSSZvWAksqUajUFH68l+QfGztCgL8Qw/dbUjpU9cYCr0ltqlZMVOpPgQz5bN3Ky79arl1tx2pQ4cx+o5XVAGVg84oNJolCttK9OfDYs9ii6jPlGxlMJu5udngii0OaYejo0lS9ACc/0HxA4UUBvQO3kwGOV4yqSCdzqg3LVqpU6tWKp2nbJbBu1qp1MtO23Q7VY7unbNxA29iR1f4HhXvUs76n2HEYkIVhKv5pzLQedCluQNLhMRWIUlLFCcyEsgVjpsF8v1islJGAVYETZD5iUBLkSLKC2QyTf/RQMinloJRxGLBQzSU/htkvvfsnpIH48oB64yamPZU3zgMipm6XyfdnU77QzeSTyiDpssrogJ2jDZ/fQ5M2pY8oHJ80I8H458yy8hDgCYP/Az90uTx/OWZCt6dsHKO0OqSitr7xssvBWS5TJJG1pTihlLeNMyQc2cYJRI2XufsldMzRzCPOrGyVnvRc7tu/wSsaATAQUO5fhp6fKI58YEc/XcGMjjsz72LbMTUtZN4LU4ZHMD+SpRjH98uCAbKT9pvpV/KxZ7n+06gLUVR+Yp3xiC0Llaqfvl/ZvZQEzCEimILN4GPwRwKPiuMS9yzkXIaZolAn//RVNK19QhQiyhYqAURRq21TflKd4jbH86fYFJFf7jyl7zb6/sp9FwInUwhHruS/7b2SDpuCAsd3GScmnqa/n6lMHpfEvtPwgeFPxaG/wk+LuZtL6Yv1q2arp/Hlr/Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx46RjW0unsCMw+XEbZImEJI0L2eEvAG1tkQsmUC/vpKJHaAkJzkzzDDa3lp77YuWdCJwmtSDUAjIJOXMiPod81+/3poCwQ3LbXq+5WHsWthxbavebMwaM3vqTV3PNCIhcoiYkJjJjlm3HddybPW7cezArweeU3M898E0biETClq51GzTWKcJE0ERtmPmGQs4FlQEDKcgAkmCcXhxHijPAJeczO7JlmURMOsupFwGCJFaDASShNQIT9EJ2vM5iUUwpnOGZZ7Bc8xYdMznvU9PT7Unt8azOarbto3sNlI+saDzz2b3U7kZ4ojN+Hbdw4wzSnBCf2NN6gLkgsdGmMx5RuUifQXaQY6toS1YE4s4HvtsopcABbt3Iu2RzAS2xAI7JdgIZpABI2BMRlHH/Py+Dm733mSYiRnPUnGw/hglYCtI+BJiS5SZlezej3ikXN0TIEHESJILuoJLPSZLTEAYVxnM6PqcCjV8sTCK9htrUU4YkI+05ATt8lS00ZHK9OkchPw//drt1RblFic5dKWgm9vVZPL7zLsY5vNLgtDXwaYnkc87BYVd5y2pqtXP68NBrebqeRPzn6YbjscM9dOLVZrc2pPb4ZfeQ/rPNZLzG7/5lQ7teZhFFIU8cQfzhn3dxAPCBj/PhDeW67Z7tvkxvB/9eLj/hC8xyME3N4bzzeUkRdH1bfwtGi6vV9fR3Wz0c9IUZ0l292V95anvD+0v96MonTitSTO834C9JNNr+Yg3X3+dTvxPOBxPvsVX0+Fqczdt3Df4MOy85LSbw76xlINxPv0JRJZLPRpR3xiqfmH5trRoC42tWeEaLLU+CQlMml29S8tKkCvxoXGgmrldD1oNp9fsnfotzwudYTiwPdsZ2qHtt9uef+qU+rNlcUCxx9mM6lhaYbfz8zZBkgYCWAyZteI5WYAw30DsY4mNiI3UweBMwA1XCt7zW03PHbZ6ttNseI7bqztt16k32qd9N/SHDdO45PI7+56FMwnZvnq7e+o9AkKXFLTE6zkXatCFVCV5xKtcJk5thWsMcnUJZFqHg7rX8pGg6TIBTRilPM4TqC0Xy6JASGz/6xYmorBSQZY8kzgpTuGrSR5+K+uhfGKqHYTO6BRUT+HIZeSW6byedmM37RI+zGOqD5sqrswo2TLZ//QyM3pYqoGp8iKiGo5qywchjgCgN/ihw9JU8eIV3YleXrDqzlCq0i3b+4hrj7V8tcqLhja1YmYKHjnIbqIxkFzJ3uaG/wKGKgj0rhunYn0QubLv88vlgo0llpCq8TOK5TueG2MQ+rkRqeOzfu9bZi+kqpuEtTxm6yXqVaIZv/lwIQHRfsp8pf6eeBa/tOsI1k4clad6Y0jK5nql75fNK7NBuIKlShB5tgt+DOBY8H1jVeSKi1TTNM0lvP7F0ErXMTEhPGcy6puFYVd9C55ys4TgxekvmELhn6/stXj1yr6/OB8rHUyxWfnS/3a2aDEuBNQuQQsuHXOtXp8qOJvvqP0zwaOC3zy13xL8/Uy6f5n/tuzU9PA8dP8A</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065236</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065238</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB57C3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB580BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5845A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_FUNC_ADULT_BAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="742fdcc5-4c20-479f-bd3f-4cb6f9aec130"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB594CA1FAE0401F0A059945B1:37E6EB80"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5881A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5881A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5881A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5893A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB58DBA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5915A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5893A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB58DBA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5915A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chcfiOClKAso3UdrelZUtfrowzBO8mdogdCvvr1w5NCpT2dq+EhDwZnznz4WOfC5zErucLAZmknBnBqGf+6yKEF3XctbouIKuB3IXVQZ255RDUJS5ptqHVMI1AiBwCJiRmsme6DqpbyFG/e+R4Tddr1GutpvNkGlPIhIJWLjXHNDZJzIRXhO2ZecY8jgUVHsMJCE8Sb+JfX3nK08MlJ7N/vmNZBMz6SylTz7ZJLQQCcUxqhCf2uX3gcx4Kb0IjhmWewUvMUPTMl73Pz8+153qNZ5HtOo5jO11b+YSCRmdm/0u5GcKALfhuPcSMM0pwTH9jTeoa5JKHhh9HPKNymbwDjWzkaGgLNsQiqMHOTPs1QMHuk0gHJDOBLbHEqAS7gwVkwAgYD3dBzzz7XAd3e+8zzMSCZ4k4Wv8dJWBriHkKoSXKzEp2n0c8Ua7+ORAvYCTOBV3DjR6TFBMQxvcMFnRzRYUavlAYRfuNjSgnDMjftOTc3uepaNsnKjOiEQj5f/q136sdyhTHOfSXa7cVjbZhNr+KZpIPf/njbVtmT+35Ra+gsO+8I1W1+mV9PKjVXL1sGqPRrf3DQeDOyTSeTi5XIPh2FpPLxjydtkijNRgPbxJUT9acDei0fRMM2PSfVnsWOYMrtvnOn74tk+7mAUbbL2Mx+DH/eTHefg1X11F8vc3TYLC5HjHiOnwpHqh9MYtaM37nfL173M7qv8ePk8VwlT7d3s6Cy3hE/OUqGFzG61+d/MtcQeTMjyYdwvHz8n5m3/Zec9rP4dBYysEkn/8EIsulHo1gZIxVv7D8WFq0hYbWonD1Uq1PQgKTZl/v0rLi5Up8aOipZu7WF50WGraHg2anW/fR2L9wGg4aO77T7HYbzQEq9WfH4ojikLMF1bG0wu7m52OCJPEEsBAya81zsgRhfoA4whIbAbtTB4MzAfdcKXi92fHdVrfujp1Wxx05Q+Sjzhihpt8ctYa+axo3XH5j3zJ/ISE7VO/6gXrfAaEpBS3xes6FGnQhVUlWeJ3LGNXWuMYgV5dApnXYcxudpi1oksagCdsJD/MYaukyLQpki92/a2EiCisVJOWZxHFxCt9N8vhbWQ/lE1LtIHRGA1A9hROXUb1M5/20W/tpl/B+HlJ92FRxZUbJjsnhp9eZ0cNSDUyVFxHVcFRb/hLiBID9AT/7uDRVvHBN96KXF6y6M5Sq9Mv2rnBtVcvX67xoaFsrZqbgbWQ7bXsCJFeyt73nv4DZFYT9qRunYn0UubIf8svlkk0klpCo8TOK5SeeGxMQ+rkRqOOz+exb5iCkqpuEjTxlG8bqVaIZf/hwIR7Rfsr8Xf098yx8bdcJrL04Kk/1xpCURXql75ftO7NBuIKlShB5tg9+CuBU8ENjVeSKi1TTNM8lvP/F0ErXMzEhPGcyGJmFYV99C55ym4L36vQGplD4lyt7I969sh+vryZKBxNsVr70v50tWowLAbVL0IJLz9yo16cKzqI9tX8heFrwO+gjwT/MpP/G/NayV9Pj89D/Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chcfiOClKAso3UdrelZUtfrowzBO8mdogdCvvr1w5NCpT2dq+EhDwZnznz4WOfC5zErucLAZmknBnBqGf+6yKEF3XctbouIKuB3IXVQZ255RDUJS5ptqHVMI1AiBwCJiRmsme6DqpbyFG/e+R4Tddr1GutpvNkGlPIhIJWLjXHNDZJzIRXhO2ZecY8jgUVHsMJCE8Sb+JfX3nK08MlJ7N/vmNZBMz6SylTz7ZJLQQCcUxqhCf2uX3gcx4Kb0IjhmWewUvMUPTMl73Pz8+153qNZ5HtOo5jO11b+YSCRmdm/0u5GcKALfhuPcSMM0pwTH9jTeoa5JKHhh9HPKNymbwDjWzkaGgLNsQiqMHOTPs1QMHuk0gHJDOBLbHEqAS7gwVkwAgYD3dBzzz7XAd3e+8zzMSCZ4k4Wv8dJWBriHkKoSXKzEp2n0c8Ua7+ORAvYCTOBV3DjR6TFBMQxvcMFnRzRYUavlAYRfuNjSgnDMjftOTc3uepaNsnKjOiEQj5f/q136sdyhTHOfSXa7cVjbZhNr+KZpIPf/njbVtmT+35Ra+gsO+8I1W1+mV9PKjVXL1sGqPRrf3DQeDOyTSeTi5XIPh2FpPLxjydtkijNRgPbxJUT9acDei0fRMM2PSfVnsWOYMrtvnOn74tk+7mAUbbL2Mx+DH/eTHefg1X11F8vc3TYLC5HjHiOnwpHqh9MYtaM37nfL173M7qv8ePk8VwlT7d3s6Cy3hE/OUqGFzG61+d/MtcQeTMjyYdwvHz8n5m3/Zec9rP4dBYysEkn/8EIsulHo1gZIxVv7D8WFq0hYbWonD1Uq1PQgKTZl/v0rLi5Up8aOipZu7WF50WGraHg2anW/fR2L9wGg4aO77T7HYbzQEq9WfH4ojikLMF1bG0wu7m52OCJPEEsBAya81zsgRhfoA4whIbAbtTB4MzAfdcKXi92fHdVrfujp1Wxx05Q+Sjzhihpt8ctYa+axo3XH5j3zJ/ISE7VO/6gXrfAaEpBS3xes6FGnQhVUlWeJ3LGNXWuMYgV5dApnXYcxudpi1oksagCdsJD/MYaukyLQpki92/a2EiCisVJOWZxHFxCt9N8vhbWQ/lE1LtIHRGA1A9hROXUb1M5/20W/tpl/B+HlJ92FRxZUbJjsnhp9eZ0cNSDUyVFxHVcFRb/hLiBID9AT/7uDRVvHBN96KXF6y6M5Sq9Mv2rnBtVcvX67xoaFsrZqbgbWQ7bXsCJFeyt73nv4DZFYT9qRunYn0UubIf8svlkk0klpCo8TOK5SeeGxMQ+rkRqOOz+exb5iCkqpuEjTxlG8bqVaIZf/hwIR7Rfsr8Xf098yx8bdcJrL04Kk/1xpCURXql75ftO7NBuIKlShB5tg9+CuBU8ENjVeSKi1TTNM8lvP/F0ErXMzEhPGcyGJmFYV99C55ym4L36vQGplD4lyt7I969sh+vryZKBxNsVr70v50tWowLAbVL0IJLz9yo16cKzqI9tX8heFrwO+gjwT/MpP/G/NayV9Pj89D/Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHqvgBEKAqCBBQneyA22n0OnHy8o4l+CZxIHYAdpfv3ZoUqC021kJCfnm+txzP3zsc46TuO72OYdM0JRpgd/V/4HQac7CFjYajuUYtm3XjY5NQmMW1q0Wbluh3ZnpWsB5DgHjAjPR1eum1TAsU/6mluk2667drNmd1qOu/YSMS2jpUjN1bZvEjLtF2K6eZ8xNMafcZTgB7griTvrjkSs9XVxy0nvnO5ZFwKy3EGLpIkRqIRCIY1IjaYLO0YHPecjdCY0YFnkGLzFD3tVf9m42m9qmUUuzCNVN00RmB0mfkNPoq977Um6GMGDzdLf2MEsZJTimz1iRGoNYpKHWj6M0o2KRvANtIctU0AZsiUEsm33V0WuAgt0nkQ5IZhwbfIGtEuwG5pABI6Dd3gRd/evnOrjbO80w4/M0S/jR+s8oAVtDnC4hNHiZWcnu84gnytU7B+IGjMQ5p2u4VGOyxAS4dp3BnG5HlMvhC7lWtF/b8nLCgPxJS87RPk9JG52ojE8j4OL/9Gu/VzuUnzjOoXc/PPM2rfEDT5x7JxlMF1Hb6ay22d1k2C0o7DvvSFWtflkfD2o1Vy+bPKc9az3k7K+HcAGkFV/fXHkPweD7VgTZY/M7+omCnEPjnjyZXsws685qxbPhuH825hnJJzd/z+I5x6tHfvkMX86eh8/WYpQg1DYj8vsqWvnh6Lbjz2x/di1G/g/r7Hn0ox0M0+hx4j3eTufTh20Y981xp41/bSZ1fudc939E357vGl9y754/rb6NkoUHQ+/pvn8RdV9z2s/h0FjKwSSf/QIiyqUajcDXLmS/sPhYWpSFhsa8cHWXSp+4ACb0ntqlZMWVNclo6Mpm7tbDtmN5LW/QbPuDvnXRH5q2aV2YfbPZ6djNgVXqz47FEUUvZXOqYimF3c3PxwRJ4nJgIWTGOs3JArj+AaKPBdYCdiMPRso4TFOp4JLboDU0B3bHd2yzMRy0m37zouE7TvvCa/qWrl2m4opdZf25gOxQvRsH6n0DhC4pKIlXc87loHMhS7LC61zEVm2NawxyeQlkSofdut1uIk6TZQyKMErSMI+htlwsiwIhvvuvG5jwwko5WaaZwHFxCt9N8vhbWQ/pE1LlwFVGA5A9hROXUaNM5/20nf20S/h+HlJ12GRxRUbJjsnhp9eZUcNSDUyVF+HVcFRb/hDiBAD6gB86Lk0VL1zTvejlBSvvDKkqvbK9K1xb1fL1Oi8a2lKKmUl4ZCGzhSZAcil7T9P0NzBUQaBP3TgV66PIlf2QXy4WbCKwgESOn1YsP/HcmABXz41AHp/tZ98yByFl3QRsxSmbF8tXiWL84cOFuET5SfO1/NukWfjarhNYe3FknvKNISiL1ErdL0/vzAZJJSyVgphm++CnAE4FPzRWRa64CDlNs1zA+180pXRdHROS5kwEvl4Y9tW34CmeluC+Or2BKRT+5cre8nev7PvxaCJ1MMF65Uv/29mgxbgQkLs4Lbh09a18fcrgLNpT+xeCpwW/bX0k+IeZ9N6Y31r2anp8Hnr/Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc7I4FP3+/AqGfuwgoPgCo87gS7tYa1t13Xa/7MQQNC0kSILa59dvgkLVarfdGWecXG7OPfclJ2kyEIVlx2UMJRxToni9lvqPDcHcr1TKWq3RMDVrDm0NAFTVbMsAgQ2seVCuq4rHWIo8wjggvKWWDbOimYb4TU3DqZYdq14q182/VWWGEiaghUvJUJVtFBLmZGFbapoQhwKGmUNAhJjDoTNx74eO8HRAzkltN3css4BJe8l57Og6LPkIojCEJUgjvakf+TR95kzwggCeJmgf02ctdb93s9mUNpUSTRZ62TAM3bB14eMzvLhS27/yzcj3SEB36y4glGAIQvwbSFL3iC+pr7jhgiaYL6ML0KZuGhJaQ1uoQdMiV6r+ESBj902kI5IJAxpbAjMHG6MAJYhApPw59lrq1fc6uNs7TQBhAU0idrL+GSVE1iikMfI1lmeWs/s+4plytZsIOh6BYcrwGo3kmMQAIqY8JijA2yFmYvh8pmTtV7YsnzAEf9KSpn7IU9DWz1SmhxeI8f/Tr8Ne7VBmIExR26vfRI0/wpCP342HJfFvn18Xt6+93siErYzCofOOVNHq/fp0UIu52m8K7jrj0awXddLl6+R69ryahtS8G0yD8apS0+v+3L9fuQ336eaVserT5G44W6eP21srgO+D7ks/sB8nQ2xtuWG76S/7Ph7eXt9VZj3vdonhW22ajKIn+OZuNmNr6veqfm39uBp0nlbD7urFfalvtl64eL6Fg79Wo/W611jN3Fl3NnkLBoNfm2vm0klMYnpXfrnZGvGQtj5yOszh2JjLwSSdvyLI86UcDa+n3Ih+Af61tEgL9rUgc3ViqU+MI8LVttwlZcVJhfhg3xHN3K37jZrZrXc7VdusuuaN2zcsw7wxXKNq21a1Y+b6s2NxQrFLSYBlLKmwu/n5miCMHIaIjxJtTVO4REz9ArEHOFA8MhYHgxKGplQouNkXPa1YVsU1G4Zt2PVepdap9etmv+rWu92uqowofyAPiRtwlByrd+VIvccI4hgjKfFyzpkYdMZFSVZgnfLQLK1BiaBUXAKJ1GGnbDWqOsNRHCJJWI+on4aoFC/jrEA62/2XNQBZZsUMxjThIMxO4cUkT7/l9RA+PpYOTGbUQaKn6MxlVMnTuZx27TDtHN5NfSwPmyguTzDcMTn+9DEzcliKgSnygqwYjmLLDyHOAOhf8NNPS1PE89f4IHp+wYo7Q6hKO2/vCpRWpXS9TrOG1qViJgJeN3Wjrk8QTIXsvU/pGyJ6AaF/68YpWJ9ELuzH/FK+JBMOOIrE+CnZ8hvPjQli8rnhieOz/e5b5iikqBtHW37O1g3Fq0Qy/vLhAh0o/YT5UfxtaOJ/tOsM1kEckad4Y3BMFnIl75f3C7MBqYDFQhBpcgh+DuBc8GNjUeSCCxfTNE85uvxFkUrXUgGENCXc66mZ4VB9M578PUbOh9MnmEzh91f2ll28sp/vhxOhgxFQC1/8384azsYFIrGL4YxLS92K16cIThYHar8neFbwxdh8JfjHmbQ/mT9bDmp6eh7a/wI=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065242</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065244</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5894A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB58DCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5916A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_FUNC_YOUTH_SAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="99a02aae-8915-4c3f-a340-87a3e08584da"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5A1EA1FAE0401F0A059945B1:A1E1749"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5952A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5952A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5952A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5964A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB59ACA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB59E7A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5964A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB59ACA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB59E7A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jxmwDQZfJjBjbiktuTSk2W5edoR8jEVsCSzZIf31K5nYAUqy6c4ww+j46DvfueiTzjlKk5YfcA6ZIIxq01FP/6fdcj3PNVHDMsFq2G4UNtzFYtGIvDCKPNtGGFxdm3Kew5Rygajo6S3Takt/+buzTL/T8m2v6bjmg67dQ8YltHRpmrq2TRPK/TJsT88z6jPECfcpSoH7Avvz4HLmS08fVZz0/vmOZRkw68dCrH3DwM0QMCQJbmKWGufGgc95yP05WVIk8gxeYoa8p7/sfXp6aj61myxbGi3TNA3TM6RPyMnys97/VG2GcEojtlsPEWWUYJSQX0iRugQRs1ALkiXLiIjTN6AtwzIVdAO2uIEtm37WjdcAJbsPIh2QzDhq8BhZFdgtRJABxaD9uJ329M8f6+Bu712GKI9YlvKj9Z9RAlpAwtYQNniVWcXu44gnytU/B+xPKU5yTgq4UmOyluy5dpNBRLYzwuXwhVwr269teTVhgP+kJefGPk9J2zhRmRFZAhf/p1/7vdqh3KMkh348K1K3/S1YDS66w4UzCsbiMu38wrP8sVdS2Hfekapb/bI+HtR6rl42FYub4EfHiJ+nA9F+PLN/OtbtcLD5loxHYjAnaBlbsx9f8dnPECIPFw5Y3TRk8dX1KE+u0otNshqz6Du9//v79eRTiO8fkJuyB8gvzr6Kr1MnO7Mcc9J9trd3D6vtXzEvHm6CdABfzE18d72yR8ObtoO3C3fr4dUquI7c+Zgb4+744tPZ08NqxQp3c/bo4NWl+2UW9F5z2s/h0FjJwTxfrACLaqlGYzrSJrJfSLwvLcpCwkZUuvprpU9cABV6X+1SsuLnUnxI6Mtm7tZjt2sNneGg43XtwJoEY9M2rYkZmB3PszsDq9KfHYsjikNGI6JiKYXdzc/7BHHqc6AhZI2C5TgGrr+DOEICaVN6Kw8GoxzumFTwwcgeuLacwpbjTIYtezzxvOHE9Cyr03I63YmuXTFxTa+zIBKQHap3+0C9bwGTNQEl8WrOuRx0LmRJNqjIRWI1C9SkkMtLIFM67Ldst2Nwkq4TUISNlIV5As11vC4LZPDdf6uBMC+thOM1ywRKylP4ZpLH36p6SJ+QKAeuMhqA7CmcuIzaVTpvp93dT7uCD/KQqMMmiysygndMDj+9zowalnpg6rwwr4ej3vKHECcAjHf4GcelqeOFBdmLXl2w8s6QqtKv2rtBzU0zL4q8bKijFDOT8IZlmI4xB5xL2Xu+Y49AjRrC+NCNU7M+ilzbD/nlIqZzgQSkcvy0cvmB58YcuHpuTOXx2X70LXMQUtZNwFacsg0T+SpRjN99uGAfKz9pvpF/TywLX9t1AmsvjsxTvjEEoUu1UvfL8xuzgZmEJVIQWbYPfgrgVPBDY13kmouQ07TIBbz9RVNK19MRxiynYjrSS8O++pY8xfMa/Fen32BKhX+5srf8zSv75+VsLnUwRXrtS/7buUHKccEgd3FScunpW/n6lMHpck/tXwieFvxO6z3BP8yk/5v5d8teTY/PQ/9f</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jxmwDQZfJjBjbiktuTSk2W5edoR8jEVsCSzZIf31K5nYAUqy6c4ww+j46DvfueiTzjlKk5YfcA6ZIIxq01FP/6fdcj3PNVHDMsFq2G4UNtzFYtGIvDCKPNtGGFxdm3Kew5Rygajo6S3Takt/+buzTL/T8m2v6bjmg67dQ8YltHRpmrq2TRPK/TJsT88z6jPECfcpSoH7Avvz4HLmS08fVZz0/vmOZRkw68dCrH3DwM0QMCQJbmKWGufGgc95yP05WVIk8gxeYoa8p7/sfXp6aj61myxbGi3TNA3TM6RPyMnys97/VG2GcEojtlsPEWWUYJSQX0iRugQRs1ALkiXLiIjTN6AtwzIVdAO2uIEtm37WjdcAJbsPIh2QzDhq8BhZFdgtRJABxaD9uJ329M8f6+Bu712GKI9YlvKj9Z9RAlpAwtYQNniVWcXu44gnytU/B+xPKU5yTgq4UmOyluy5dpNBRLYzwuXwhVwr269teTVhgP+kJefGPk9J2zhRmRFZAhf/p1/7vdqh3KMkh348K1K3/S1YDS66w4UzCsbiMu38wrP8sVdS2Hfekapb/bI+HtR6rl42FYub4EfHiJ+nA9F+PLN/OtbtcLD5loxHYjAnaBlbsx9f8dnPECIPFw5Y3TRk8dX1KE+u0otNshqz6Du9//v79eRTiO8fkJuyB8gvzr6Kr1MnO7Mcc9J9trd3D6vtXzEvHm6CdABfzE18d72yR8ObtoO3C3fr4dUquI7c+Zgb4+744tPZ08NqxQp3c/bo4NWl+2UW9F5z2s/h0FjJwTxfrACLaqlGYzrSJrJfSLwvLcpCwkZUuvprpU9cABV6X+1SsuLnUnxI6Mtm7tZjt2sNneGg43XtwJoEY9M2rYkZmB3PszsDq9KfHYsjikNGI6JiKYXdzc/7BHHqc6AhZI2C5TgGrr+DOEICaVN6Kw8GoxzumFTwwcgeuLacwpbjTIYtezzxvOHE9Cyr03I63YmuXTFxTa+zIBKQHap3+0C9bwGTNQEl8WrOuRx0LmRJNqjIRWI1C9SkkMtLIFM67Ldst2Nwkq4TUISNlIV5As11vC4LZPDdf6uBMC+thOM1ywRKylP4ZpLH36p6SJ+QKAeuMhqA7CmcuIzaVTpvp93dT7uCD/KQqMMmiysygndMDj+9zowalnpg6rwwr4ej3vKHECcAjHf4GcelqeOFBdmLXl2w8s6QqtKv2rtBzU0zL4q8bKijFDOT8IZlmI4xB5xL2Xu+Y49AjRrC+NCNU7M+ilzbD/nlIqZzgQSkcvy0cvmB58YcuHpuTOXx2X70LXMQUtZNwFacsg0T+SpRjN99uGAfKz9pvpF/TywLX9t1AmsvjsxTvjEEoUu1UvfL8xuzgZmEJVIQWbYPfgrgVPBDY13kmouQ07TIBbz9RVNK19MRxiynYjrSS8O++pY8xfMa/Fen32BKhX+5srf8zSv75+VsLnUwRXrtS/7buUHKccEgd3FScunpW/n6lMHpck/tXwieFvxO6z3BP8yk/5v5d8teTY/PQ/9f</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx0jy9gYPIEZMHDjNh8tkDbtyx0hLyBqy8SSDemvr2xiByjJTe+TR+vV2bMfOtKFIHFkeX0hIJUs4Vow7Or/EozNEIdgLNouMez2vGnMLWwattNpuy6xcNuhuhYIkUHAhSRcdnXLxE1D+WBzhk3PsTwHN1qm9UPXvkIqFLRyaZi6tosjLrwybFfPUu4lRDDhcRKD8CT1pv3rK095eqTipPcu9izLgGlvJeXGQ4g2QqAQRbRBkxhdoCOfi1B4U7bkRGYpPMUMRVd/2rvdbhvbZiNJl8gyTROZHaR8QsGW7/Xeu2ozhAFfJPu1T3jCGSUR+0UKUtcgV0mo9aNlkjK5il+AxgibBbQBO2pQbPP3OnoOULJ7I9IRyVQQQ6wIrsAmsIAUOAXtbhJ09fdv6+B+7ywlXCySNBYn67+jBDyHKNlAaIgqs4rd2xHPlKt3AdQLOI0ywXK4KcZkQygI7XMKC7a7YkINXyi0sv3aTlQTBvRvWnKBDnkq2uhMZYZsCUL+n34d9mqP8pVEGfTCD59mn4ejPGv+GAfX891qML2mYH7/6NvdksKh855U3eqn9emg1nP1tIkl6ys7uOyPvn0TN7uWb6ERHQ226Ap/dNnVPFvfuLb075fpl/iu77QvycQm4SrZyNyHu+Hs7lcoOPo5HUzml/hd6kDz53r0BcPswzbO2GoWiLa8f7D4p2X+HUHqhner7W62xq1/3MHtMv/hd26aZD7L491g4qd3zfs1ghvx4XHaf0fzQRvQ0l1xvLa/XEZoue0+53SYw7GxkoNpNl8DldWyGI1gqI1Vv4h8XVoKCwuNRenqbQp9EhK41HvFrkJWvEyJDws91cz9etRuYd/1B06n7/fxuD8ybROPzb7pdDq2M8CV/uxZnFD0E75gRaxCYffz8zpBGnsCeAipkScZXYHQX0EcEkm0gE/UwUi4gFmiFByPbdexcGtstp2O4w7GzXbTH5vNjj12/XG7pWs3ibzlt2l/ISE9Vu/mkXpPgLINg0LiizkXatCFVCV5IHkmI9zISYNDpi6BtNBhz7LbDhIs3kRQEEZxEmYRNDarTVkgJPZfyyBUlFYm6CZJJYnKU/hikqf/qnoon5AVDqLIaACqp3DmMrKrdF5Ou3WYdgXfz0JWHDZVXJkyumdy/Ot5ZophqQemzouKejjqLX8JcQYAvcIPnZamjhfm7CB6dcGqO0OpSq9q7wNpPDSyPM/KhrqFYqYKHmFkumgKNFOy9zhLfgJHNQR6041Tsz6JXNuP+WVyxaeSSIjV+Gnl8g3PjSmI4rkRqOOze+tb5iikqpuEnTxn8yP1KikYv/pwoR4t/JT5s/pskzR8btcZrIM4Kk/1xpCML4tVcb88vjAbNFGwTAlikh6CnwM4F/zYWBe55iLVNM0zCS//0Qql6+qE0iTjMhjqpeFQfUue8nED3rPTHzClwj9d2Tvx4pV9f301VToYE732Zf/tbLByXCioXYKVXLr6Tr0+VXC+PFD7J4LnBd+xXhP840x6f5j/tBzU9PQ89H4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fX4HSx1VwAgkJUUEKX6u0BdrSpVVfrowzgNvEgdihtL/+2qFJgaW93SshIU/GZ858+NjnHMdRzfM5h1TQhFWCXkv7xyJGGOIm6E4zxLrlNojuui7RnRAMYoDZsB1DqwScZxAwLjATLa1mmHXdNOTvzjQ8u+bZ9apVdx61yhRSLqGlS1Xu2sYR414etqVlKfMSzCn3GI6Be4J4E3945UlPDxectPb5jmUeMG0vhVh5CJFqCASiiFRJEqNzdOBzHnJvQhcMiyyF95ghb2nve19eXqov9WqSLlDNMAxkNJH0CTldnGntH8VmCAM2T3brLmYJowRH9A0rUkMQyySs+NEiSalYxp9Am8g0FLQOW6IT02JnGvoIkLP7JtIByZRjnS+xWYDdwhxSYAQqv2+Dlnb2vQ7u9t6lmPF5ksb8aP13lIBtIEpWEOq8yKxg933EE+VqnwPxAkaijNMNjNSYrDABXrlOYU63V5TL4Qt5JW9/ZcuLCQPyNy05R/s8JW10ojI9ugAu/k+/9nu1Q5niKIN27Wmw7sSrK2c8jX7W6mkveH28wNlm4JJWTmHfeUeqbPX7+nhQy7l637SMEhoZ8evz+GaQ9Bq9m+A5YxdDm0/cS8fvSPwNRT+N5SW+qQ8v3SkjdvNycrkY9kW/8+Skb+M+d6/uh3Fj+PvH02s2M9MbNH32xxBOL25+WQ+jWWdG3kbT2eKNDh+vbNa958HN/W86YZu+XbcGS0Gvfz1cXvS6k3Wn6UeTXnq9eZz/aM5GKPav6Zit+yOCRsMoaH3ktJ/DobGQg0k2ewIiiqUajaBXGch+YfG1tCgLDfV57uqtlD5xAUxobbVLyYqXSfGhoSebuVv33YbZdbodu9l3fHPg9w3LMAeGb9jNpmV3zEJ/diyOKHYTNqcqllLY3fx8TZDEHgcWQqpvkowsgWtfIPawwJWA3cqDkTAOd4lUcMe3XMcw7Vqj4zS6A8v1LcdyrV7Hd7udfkPq8CgRYzZO/bmA9FC96wfqfQuErigoiVdzzuWgcyFLssabTERmdYOrDDJ5CaRKh72a5dqI03gVgSKM4iTMIqiulqu8QIjv/ms6Jjy3Uk5WSSpwlJ/CT5M8/lbUQ/qEVDlwlVEHZE/hxGVkFel8nnZjP+0C3s9Cqg6bLK5IKdkxOfz0MTNqWMqBKfMivByOcstfQpwAQF/wQ8elKeOFG7oXvbhg5Z0hVaVdtHeNq+tqttlkeUMdpZiphEcmMhw0AZJJ2Xu9S56BoRICfevGKVkfRS7th/wysWQTgQXEcvwq+fIbz40JcPXcCOTx2X73LXMQUtZNwFacsnUj+SpRjL98uBCPKD9pvpZ/L0kafrTrBNZeHJmnfGMIyhZqpe6X109mgyQSlkpBTNJ98FMAp4IfGssil1yEnKZZJuDzLxWldC0NE5JkTAQ9LTfsq2/OU7yuwPtw+gMmV/j3K3vLP72yH4ZXE6mDMdZKX/rfzjrNx4WA3MVpzqWlbeXrUwZniz21fyd4WvDt2leCf5hJ+w/zn5a9mh6fh/a/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065250</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5965A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB59ADA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB59E8A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_FUNC_YOUTH_BAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="070abf66-1a39-4d22-9a46-c4848740ce18"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5AF0A1FAE0401F0A059945B1:70EAA1A9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5A24A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5A24A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5A24A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5A36A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5A7EA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5AB9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5A36A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5A7EA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5AB9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxBRuwJzBjIGnd3AjQNu3LGUXegFpbIpIMJF9/JBM7QElOemaYYbS9tfbaFy3pVKA886JYCOCSMGokw675TysIOk3fubfc4D6wfCdsWuEM2hakXttzAt/3fM80EiEKSKiQiMqu6Tlu03Id9Zu6ThR4URA0On7w0zS+ARcKWrk0HNPY5BkVURm2axacRgwJIiKKchCRxNEkvrqMlGeEKk5m73TLsgzIewspl5Ft40YKGLIMNzDL7VN7z+c0FdGEzCmSBYfnmKnoms971+t1Y91sMD63PcdxbCe0lU8qyPyj2ftQbYY0oTO2XQ8QZZRglJEnpEldgVyw1IizOeNELvJXoF3bdTS0BRtsYdenH037JUDJ7p1IeyS5QJZYILcCG8MMOFAMxtdx0jU/vq+D271TjqiYMZ6Lg/XfUQK6gowtIbVElVnF7v2IR8rVOwUcJRRnhSAruNZjskQYhDHiMCObSyLU8KXCKNtvbEQ1YYD/piWn9i5PRds+UpkhmYOQ/6dfu73aonxDWQG9E/r4I/xG2DVpBTNxe3cWjvopv0+K8Vm3pLDrvCVVt/p5fTio9Vw9bwL/unPmzk+uvKDdjvHvJ9xv3uTfN6gjfogHma/dq8/j0cZrBRf3SN4O208/N0F/fjMJ579mnc/uevzEbvHDycWn2/jDp+n6C+/ki/g8hwt+OR+NpstVC6bL4uSzNzhZnLO7WzfLR0n2lZLFCntt5651w9uXIH6ff4dw4Tc/tS49hE/4+sPjNERFhtJ4lCf0B97Ycdx9yWk3h31jJQeT4v4XYFkt9WgkQ+Nc9QvJt6VFW0hqzUrXaKn1SUig0uzpXVpWokKJD0kj1czt+qzTcgftQT+Im63YPY/PHN9xz53YCcLQD/pupT9bFgcUB4zOiI6lFXY7P28TxHkkgKbArRUr8AKE+QbiEElkJHSsDgajAqZMKfiw2XSGAz+IwzBsOa7fGfbPXMcPvI7X6vSdoWlcM3lDb3g8k8D31bu5p95jwGRJQEu8nnOhBl1IVZIHtCpk5jZWqEGhUJcA1zoceX4nsAXJlxlownbO0iKDxnKxLAtki+2/ZyEsSisReMm4RFl5Cl9N8vBbVQ/lkxLtIHRGfVA9hSOXkV+l83rard20K/i4SIk+bKq4khO8ZbL/6WVm9LDUA1PnhUU9HPWWv4Q4AmC/wc8+LE0dL12RnejVBavuDKUqvaq9D6jx0ChWq6JsaFsrJlfwtms7bXsCuFCy9zhlv4HaNYT9rhunZn0Qubbv8yvkgk4kkpCr8TPK5TueGxMQ+rmRqOOzee9bZi+kqpuEjTxmG2TqVaIZv/lwwRHWfso8Un9rxtOXdh3B2omj8lRvDEnoXK/0/fL4ymxgpmCJEkTGd8GPARwLvm+si1xzkWqa7gsJr38xtNJ1TYQxK6hMtKIow676ljzl4xKiF6c/YEqFf76yN+LVK/vu6nKidDBHZu1L/tvZIuW4YFC7BCm5dM2Nen2q4HS+o/bPBI8Lvue/Jfj7mfT+MP9p2anp4Xno/Qs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxBRuwJzBjIGnd3AjQNu3LGUXegFpbIpIMJF9/JBM7QElOemaYYbS9tfbaFy3pVKA886JYCOCSMGokw675TysIOk3fubfc4D6wfCdsWuEM2hakXttzAt/3fM80EiEKSKiQiMqu6Tlu03Id9Zu6ThR4URA0On7w0zS+ARcKWrk0HNPY5BkVURm2axacRgwJIiKKchCRxNEkvrqMlGeEKk5m73TLsgzIewspl5Ft40YKGLIMNzDL7VN7z+c0FdGEzCmSBYfnmKnoms971+t1Y91sMD63PcdxbCe0lU8qyPyj2ftQbYY0oTO2XQ8QZZRglJEnpEldgVyw1IizOeNELvJXoF3bdTS0BRtsYdenH037JUDJ7p1IeyS5QJZYILcCG8MMOFAMxtdx0jU/vq+D271TjqiYMZ6Lg/XfUQK6gowtIbVElVnF7v2IR8rVOwUcJRRnhSAruNZjskQYhDHiMCObSyLU8KXCKNtvbEQ1YYD/piWn9i5PRds+UpkhmYOQ/6dfu73aonxDWQG9E/r4I/xG2DVpBTNxe3cWjvopv0+K8Vm3pLDrvCVVt/p5fTio9Vw9bwL/unPmzk+uvKDdjvHvJ9xv3uTfN6gjfogHma/dq8/j0cZrBRf3SN4O208/N0F/fjMJ579mnc/uevzEbvHDycWn2/jDp+n6C+/ki/g8hwt+OR+NpstVC6bL4uSzNzhZnLO7WzfLR0n2lZLFCntt5651w9uXIH6ff4dw4Tc/tS49hE/4+sPjNERFhtJ4lCf0B97Ycdx9yWk3h31jJQeT4v4XYFkt9WgkQ+Nc9QvJt6VFW0hqzUrXaKn1SUig0uzpXVpWokKJD0kj1czt+qzTcgftQT+Im63YPY/PHN9xz53YCcLQD/pupT9bFgcUB4zOiI6lFXY7P28TxHkkgKbArRUr8AKE+QbiEElkJHSsDgajAqZMKfiw2XSGAz+IwzBsOa7fGfbPXMcPvI7X6vSdoWlcM3lDb3g8k8D31bu5p95jwGRJQEu8nnOhBl1IVZIHtCpk5jZWqEGhUJcA1zoceX4nsAXJlxlownbO0iKDxnKxLAtki+2/ZyEsSisReMm4RFl5Cl9N8vBbVQ/lkxLtIHRGfVA9hSOXkV+l83rard20K/i4SIk+bKq4khO8ZbL/6WVm9LDUA1PnhUU9HPWWv4Q4AmC/wc8+LE0dL12RnejVBavuDKUqvaq9D6jx0ChWq6JsaFsrJlfwtms7bXsCuFCy9zhlv4HaNYT9rhunZn0Qubbv8yvkgk4kkpCr8TPK5TueGxMQ+rmRqOOzee9bZi+kqpuEjTxmG2TqVaIZv/lwwRHWfso8Un9rxtOXdh3B2omj8lRvDEnoXK/0/fL4ymxgpmCJEkTGd8GPARwLvm+si1xzkWqa7gsJr38xtNJ1TYQxK6hMtKIow676ljzl4xKiF6c/YEqFf76yN+LVK/vu6nKidDBHZu1L/tvZIuW4YFC7BCm5dM2Nen2q4HS+o/bPBI8Lvue/Jfj7mfT+MP9p2anp4Xno/Qs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH8+UpqVQ6Agztcix9yioeNXx5U5INxBPm0KT8uGvv0mxFRC9emeYYbK7s/baH1nJKcdJbHs+55AJmjIt7HX0f9y6OyZ4HBn1NhkbTrtuG23LRQZBFq638BgmrqtrIec5hIwLzERHt5FVNywkf3cW8hq213BrLdR80rV7yLiEli41pGvrJGbcK8J29DxjXoo55R7DCXBPEG/kX1160tPDJSe9e7plWQTMujMh5p5pkloEBOKY1EiamKfmns9pxL0RnTIs8gxeY0a8o7/uXa1WtVW9lmZT00YImahtSp+I0+mJ3v1RboYoZJN0uw4wSxklOKYvWJG6AjFLI82Pp2lGxSz5ANoyLaSgDVgTg1gOO9HNtwAFuy8i7ZHMODb4DFsl2C1MIANGQPv7NuzoJ1/r4HbvXYYZn6RZwg/W36MEbAlxOofI4GVmJbuvIx4pV/cUiBcyEuecLmGgxmSOCXDtOoMJXV9SLocv4lrRfm3NywkD8p2WnJq7PCVt80hlenQKXPyffu32aotyj+McumwhblrR/fiP3wN/+htZwePkediH+SXvFBR2nbekqla/rg8HtZqr1003bqN5tmlPrQfngpCm+4Csp9nir4TWF1EYXPtDfvPcg5xv7q/F7CJnDTf4tbz/7dwN48HVwL7zcS+0m3yJaLL4MRwEjxsh4DrpuTPLgV/+4CcaoCAdxAPnesUW+PHPYpjnT+OXMzJ2LpZzcttzwJluNq7fCJpDy2IbdNGfvuCHH2lICfr5crPqZ0v7onk/eCKdt5x2c9g3lnIwysfPQES5VKMR9rS+7BcWn0uLstDImBSu3lzpExfAhN5Vu5SseLkUHxp5spnb9XmraQVucNbw3XPf6vvnyEFWH/mo0W47jTOr1J8tiwOKQcomVMVSCrudn88JksTjwCLIjGWakxlw/RPEHhZYC9mtPBgp43CXSgXv988D33Ltvt+v26jVbDdakqUb2E7vvNWy27o2SMWQDTN/IiDbV+/6nnrfAqFzCkri1ZxzOehcyJIs8DIXsVVb4hqT4yNwpnTYs51Ww+Q0mcegCJtJGuUx1OazeVEgk2//bQMTXlgpJ/M0EzguTuGHSR5+K+shfSKqHLjK6AxkT+HIZeSU6XycdnM37RLezyOqDpssrsgo2TLZ//Q2M2pYqoGp8iK8Go5qyzchjgCYn/AzD0tTxYuWdCd6ecHKO0OqSrds7wLXFrV8ucyLhrpKMTMJb1omcs0RkFzK3uYu/QPMrCDML904FeuDyJV9n18uZmwksIBEjp9WLL/w3BgBV8+NUB6f9VffMnshZd0ErMUxWxDLV4li/OnDhXhE+UnztfxbpVn01q4jWDtxZJ7yjSEom6qVul82H8wGSSUslYKYZrvgxwCOBd83VkWuuAg5TeNcwMdfNKV0HR0TkuZMhD29MOyqb8FTbObgvTm9gykU/vXKXvMPr+zHq8uR1MEE65Uv/W9ngxbjQkDu4rTg0tHX8vUpg7Ppjtq/Ejwu+LbzmeDvZ9J9Z35v2anp4Xno/gs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb6M4FH7vr0D0cUSAhNxQEynXXaZNO9M0vb2sjDkET8GmtknS+fVrSKFJmnY7K0WKfDj+zncu/uwzgZK47g6EAC4Jo5o37un/BA2/3m63QgMFYctw/AAZftNuG81uEEADHOTYvq55QmTgUSERlT29btkNw7bU78a23GbdbXZr7W77UddugQsFrVxqlq5tkpgKtwjb0zNOXYYEES5FCQhXYnc+mF24ytNFJSe9f7ZlWQTk/UjK1DVNXAsAQxzjGmaJeWbu+ZwFwp2TJUUy4/AaMxA9/XXver2urRs1xpdm3bIs0+qayicQZHmq90/KzRB4NGTb9QhRRglGMfmNclIzkBELtEG8ZJzIKPkA2jZtK4c2YIMNbDv0VDffAhTsvoi0R5ILZIgI2SXYNYTAgWLQFtdeTz/9Wge3e284oiJkPBEH6z+jBHQFMUshMESZWcnu64hHytU/A+x6FMeZICu4zMckRRiE9oNDSDYXRKjhC4RWtF/biHLCAP9JS87MXZ6KtnmkMmOyBCH/T792e7VFuUVxBv3H0LnyVpJLyu/ibDONqGTnN12/NWG9gsKu85ZU1erX9eGgVnP1uml2E9rWj83d97vLLLt9XAcWv4ge/Yenh1Z6/7BY+NfPMLxaDi/nnVbaSr6B9/fvKPyerhnwxWP956Le3tyH8xEaed7J1fD6MqD+0lktktl6uj6Pya2Pomnk1396v76RlT3Bt3eDdtB6OCf3lC+izXj5be3PlsibZldj0u7g1cWdeDlP6AmBbhI0npwJfWZ/jZP59xfce8tpN4d9YykH88z/BViWy3w0vLE2Vf1C8nNpyS0kMMLC1U1zfRISqNT7+a5cVtxMiQ8JXNXM7XrSadmj9mjYHAy7A3s6mFiOZU+tgdXsdp3m0C71Z8vigOKI0ZDksXKF3c7P5wRx4gqgAXBjxTIcgdA/QRwjiTSPXquDwaiAG6YUvDPsNKZTxbhjT51xsz5WRAfT1sieTB3bGk907ZLJK3rFB6EEvq/ejT31vgZMUgK5xOdzLtSgC6lK8oxWmYzt2grVKGTqEuC5Drt1p9M0BUnSGHLCZsKCLIZaGqVFgUyx/a8bCIvCSgROGZcoLk7hh0kefivroXwCkjuIPKMhqJ7CkcvIKdP5OO3Wbtol/CALSH7YVHElJ3jLZP/T28zkw1INTJUXFtVwVFv+EOIIgPkJP/OwNFW8YEV2opcXrLozlKr0y/Y+o9pzLVutsqKh7VwxuYI3bdNqm3PAmZK9lxv2BNSsIMwv3TgV64PIlX2fXyYjOpdIQqLGTyuWX3huzEHkzw1PHZ/NV98yeyFV3SRs5DHbKFavkpzxpw8X7OLcT5l/qL8148Fbu45g7cRReao3hiR0ma/y++Xlg9nATMESJYiM74IfAzgWfN9YFbniItU0+ZmEj79oudL1dIQxy6j0xnph2FXfgqd8ScF9c3oHUyj865W9ER9e2fezi7nSwQTplS/5b2eDFOOCQe0SpODS0zfq9amC0+WO2r8SPC74deczwd/PpP/O/N6yU9PD89D/Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065254</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065256</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5A37A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5A7FA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5ABAA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_FUNC_CHILD_SAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="28867471-d117-405d-b1e5-3b1e9da466cc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5B08A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5B86A1FAE0401F0A059945B1:903EC660"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5AF6A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5AF6A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5AF6A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5B08A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5B50A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5B8BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5B08A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5B50A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5B8BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4kIHhhqjPgZY/danuq7W77ciaEoGkhoSSo3b9+BxSq1va0Z8YZJ4uVb33rki+54DCOTMflHKeCMKqM+h313yYM6ib0LS30IdAsYAZaG6OWZjQatuUjq2E0LFUZcZ7hEeUCUtFRTWDUNQPI39wAjl13gFkz7cajqtzhlEto6VIDqrKJI8qdImxHzVLqMMgJdyiMMXcEcmbuZOxITweWnNTuxZZlETDtLoVIHF1HtQAjHEWohlisX+gHPhcBd2ZkQaHIUryLGfCOutu7Xq9r63qNpQvdBADooK1Ln4CTxbnaPSs342BEQ7Zd9yBllCAYkT8wJzXBYskCxY0WLCViGX8AbegGyKE1vEEaMix6rupvAQp2X0Q6IJlyqPElNEqwGxziFFOEldubUUc9/1oHt3vnKaQ8ZGnMj9bfo4TpCkcswYHGy8xKdl9HPFGu7gVGzoiiKONkhaf5mCQQYa5cpzgkmzHhcvgCrhTtVza8nDCMvtOSC32fp6Stn6hMnywwF/+nX/u92qLcwSjD3WbS/2fd8G/r6Hb91F/f8utf9s00DKZ00iko7DtvSVWt3q2PB7Waq92my/Bhch/8crPf47twarbBY7CcX1rtV3leL707ww/vEtd+vHzshZsn/97n3ujaW43bbkgnzE5cdwN9N+v/uHzoBWfWczT/DVaR4d693D62H5j/kwY2gYvGcgOGy6vEm7eyyBiPB35kbuYMezYLgyGYTO2n+5Xuez+f+3HS+BF7g/VZ/DS+Wgsbzm8In/55vbRGoPOW034Oh8ZSDmaZ/4SRKJf5aIz6ylD2C4rPpSW3kEALC1cnyfWJC0yF2s135bLiZFJ8SODIZm7Xg1bD6DV7nu2BlmsM3QGwgDEELrDbbcv2jFJ/tiyOKPYYDUkeK1fY7fx8ThDFDsc0wKm2YhlaYq5+gtiHAiojeiMPBqMcz5lU8IHbAjbwesP2oF4fem7TdA174FqNPhhYVqupKlMmruhV6oYCp4fqXT9Q7xuMSEJwLvH5nHM56FzIkrzAVSYio7aCNYozeQmkuQ47ptWydU7iJMI5YT1mQRbhWrJMigLpfPtvahDxwko4SlgqYFScwg+TPP5W1kP6BCR34HlGHpY9xe8uI1P+dul8nHZjP+0S3s0Ckh82WVyRErRlcvjpbWbyYakGpsoL8Wo4qi3fhDgBoH/CTz8uTRUvWJG96OUFK+8MqSrdsr0vsPZSy1arrGhoM1fMVMLrhg6a+gyjTMre65w9Y6pXEPqXbpyK9VHkyn7ILxNLOhNQ4FiOn1Isv/DcmGGePzdG8vhsvvqWOQgp6ybwRpyy9SL5KskZf/pwQQ7K/aT5Wv6tWRq8tesE1l4cmad8YwhCF/kqv19eP5gNxCQskYLI0n3wUwCngh8aqyJXXIScJj8T+OMvSq50HRUixDIqRn21MOyrb8FTvCbYeXN6B1Mo/O7K3vAPr+z7yXgmdTCGauVL/ttZI8W4ICx3cVJw6agb+fqUweliT+13BE8KvjtsfCb4h5l035nfW/Zqenweun8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4kIHhhqjPgZY/danuq7W77ciaEoGkhoSSo3b9+BxSq1va0Z8YZJ4uVb33rki+54DCOTMflHKeCMKqM+h313yYM6ib0LS30IdAsYAZaG6OWZjQatuUjq2E0LFUZcZ7hEeUCUtFRTWDUNQPI39wAjl13gFkz7cajqtzhlEto6VIDqrKJI8qdImxHzVLqMMgJdyiMMXcEcmbuZOxITweWnNTuxZZlETDtLoVIHF1HtQAjHEWohlisX+gHPhcBd2ZkQaHIUryLGfCOutu7Xq9r63qNpQvdBADooK1Ln4CTxbnaPSs342BEQ7Zd9yBllCAYkT8wJzXBYskCxY0WLCViGX8AbegGyKE1vEEaMix6rupvAQp2X0Q6IJlyqPElNEqwGxziFFOEldubUUc9/1oHt3vnKaQ8ZGnMj9bfo4TpCkcswYHGy8xKdl9HPFGu7gVGzoiiKONkhaf5mCQQYa5cpzgkmzHhcvgCrhTtVza8nDCMvtOSC32fp6Stn6hMnywwF/+nX/u92qLcwSjD3WbS/2fd8G/r6Hb91F/f8utf9s00DKZ00iko7DtvSVWt3q2PB7Waq92my/Bhch/8crPf47twarbBY7CcX1rtV3leL707ww/vEtd+vHzshZsn/97n3ujaW43bbkgnzE5cdwN9N+v/uHzoBWfWczT/DVaR4d693D62H5j/kwY2gYvGcgOGy6vEm7eyyBiPB35kbuYMezYLgyGYTO2n+5Xuez+f+3HS+BF7g/VZ/DS+Wgsbzm8In/55vbRGoPOW034Oh8ZSDmaZ/4SRKJf5aIz6ylD2C4rPpSW3kEALC1cnyfWJC0yF2s135bLiZFJ8SODIZm7Xg1bD6DV7nu2BlmsM3QGwgDEELrDbbcv2jFJ/tiyOKPYYDUkeK1fY7fx8ThDFDsc0wKm2YhlaYq5+gtiHAiojeiMPBqMcz5lU8IHbAjbwesP2oF4fem7TdA174FqNPhhYVqupKlMmruhV6oYCp4fqXT9Q7xuMSEJwLvH5nHM56FzIkrzAVSYio7aCNYozeQmkuQ47ptWydU7iJMI5YT1mQRbhWrJMigLpfPtvahDxwko4SlgqYFScwg+TPP5W1kP6BCR34HlGHpY9xe8uI1P+dul8nHZjP+0S3s0Ckh82WVyRErRlcvjpbWbyYakGpsoL8Wo4qi3fhDgBoH/CTz8uTRUvWJG96OUFK+8MqSrdsr0vsPZSy1arrGhoM1fMVMLrhg6a+gyjTMre65w9Y6pXEPqXbpyK9VHkyn7ILxNLOhNQ4FiOn1Isv/DcmGGePzdG8vhsvvqWOQgp6ybwRpyy9SL5KskZf/pwQQ7K/aT5Wv6tWRq8tesE1l4cmad8YwhCF/kqv19eP5gNxCQskYLI0n3wUwCngh8aqyJXXIScJj8T+OMvSq50HRUixDIqRn21MOyrb8FTvCbYeXN6B1Mo/O7K3vAPr+z7yXgmdTCGauVL/ttZI8W4ICx3cVJw6agb+fqUweliT+13BE8KvjtsfCb4h5l035nfW/Zqenweun8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vghACFqCAFKHfTlrZbaHe7L1fGmYDbxAmxE2B//dqhSYHS3u6VkJAn4zNnPnzsM46jsO64nEMqaMw0b9jV/235ljVr2IFhNTsdo1FvgNGegWlgPLNbgGcNqz3TNY/zDDzGBWaiq9dNyzYsU/6mluk0bcds1Oqd+i9de4CUS2jpUjN1bR2FjDtF2K6epcyJMafcYTgC7gjiTNzxlSM9HVxy0ntnW5ZFwLS3ECJxECI1HwiEIamROEJnaM/nzOfOhM4ZFlkKLzF93tVf9q5Wq9rKrsXpHNVN00RmB0kfn9P5V733pdwMvseCeLseYBYzSnBIf2NFagxiEfuaG87jlIpF9A60hSxTQRuwJgaxGuyrjl4DFOw+ibRHMuXY4AtslWB3EEAKjIB2f+d19a+f6+B27zTFjAdxGvGD9d9RApZDGCfgG7zMrGT3ecQj5eqdAXE8RsKM0xyu1ZgkmADXblMI6PqKcjl8PteK9mtrXk4YkL9pyRna5SlpoyOVGdI5cPF/+rXbqy3KAw4z6FnmJtvg1sVvc7i6ORn129Hz+jFAk8vBebegsOu8JVW1+mV9OKjVXL1sSlYcPXw/D26fVt9mJ1l2Lh5X4ysvc73nSzf40SEnUd4c/Fo/fFuTk/v6Lbjt9Dm/gmnfntPngbu8ePz5j4f8Bz+afUFsHNy078mv9U/8NLzvzx77EbPszMX3J8EFnn7vJxv3arCUU+glXr4MJ/E4RBfNaf3xx7enSe7Ry2viXY6/u/XRF+Yu4d7O8pa4uRUP551Nc9x9zWk3h31jKQeTbPYERJRLNRreUBvJfmHxsbQoC/WNoHB1EqVPXAATek/tUrLiZFJ8qO/IZm7X5+2WNTgd9Jv9pulaI/fcbJjWyHRNeb4azb5V6s+WxQHFQcwCqmIphd3Oz8cESeRwYD6kRh5nZAFc/wBxiAXWPHYnD0bMOExjqeDD/qDTbtmNkdUw3VbbsvvN9sg+bbm21bFHrtTh61jcsJvUDQSk++pt76n3HRCaUFASr+acy0HnQpZkifNMhFYtxzUGmbwEUqXDTr3RbiJOoyQERRhFsZ+FUEsWSVEgxLf/dQMTXlgpJ0mcChwWp/DdJA+/lfWQPj5VDlxl1AfZU3hzGdWdZpnO+2m3dtMu4d3Mp+qwyeKKlJItk/1PrzOjhqUamCovwqvhqLb8JcQRAPQBP3RYmiqen9Od6OUFK0+rVJVe2d4lri1rWZ5nRUNPlWKmEh5ZyDxFEyCZlL3NNH4GhioI9Kkbp2J9ELmy7/PLxIJNBBYQyfHTiuUnnhsT4Oq54cnjs/7sW2YvpKybgLU4ZhuE8lWiGH/4cCEOUX7SfCv/VnHqv7brCNZOHJmnfGMIyuZqpe6XzTuzQWIJS6Ugxuku+DGAY8H3jVWRKy5CTtMsE/D+F00pXVfHhMQZE95QLwy76lvwFJsEnFenNzCFwr9c2Wv+7pX9c3w1kToYYb3ypf/tbNBiXAjIXZwWXLr6Wr4+ZXA231H7F4JHBd8dtT4S/P1Mem/Mby07NT08D70/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoYwcBBVGmOgNUW3pvdXfX/XImhqDphkST4KW//gQsVK3tac+MM04WK9/61iVfcspBmtRdj3PEBKZECc866j82aFtjy4YaGo+bmtUwDK1txVBzLCM2nSZyIqelKiHnGQoJF4CIjlo3zIZmGvI3NA3XbriGU2vY5h9VeUKMS2jpUjNUZZUmhLtF2I6aMeJSwDF3CUgRdwV0B97NtSs9XVByUrunG5ZFQNadCjFzdR3WIgRRksAapKl+qu/4nEbcHeAJASJj6C1mxDvq297lcllbNmqUTfS6YRi60dalT8Tx5FjtHpWbURSSmG7WASCUYAgS/ApyUjdITGmkeMmEMiym6SfQpm4aObSGVlCDpkWOVf09QMHum0g7JBkHGp8CswR7RDFiiECk/HoMO+rx9zq42TtkgPCYspTvrX9GCZEFSugMRRovMyvZfR/xQLm6pwi6IYFJxvEC3eZjMgMQceWeoRivrjGXwxdxpWi/suLlhCH4k5ac6ts8JW39QGXO8ARx8X/6td2rDcoTSDLUbfnp8qR9Mb9v2JfhiDw+wPBJJ/VW8DjpFBS2nTekqla/rfcHtZqrt03X13d2wKH/sBre6i0TRJevyZovRs3eb+E/9K2b819O/3d8Ga6YOehNn7L2gnD//H560rSn1B9P0D1Yv1B2OX+9OHoa9Z4s+45cja7ur5xYZv+yvIj/rq9uxmIu5i8BSmO+/DM9f4jX8cx7HgxphBPm168n7GzdG46s9ksaeM7i/Ll9dMJfR+eDwag3Hy2sQWz2Eth5z2k7h11jKQeDbPyCoCiX+WiEZ0pf9guIr6Ult+BIiwtXd5brExeICLWb78plxc2k+ODIlc3crHutphk4gW/7Ld8z+17PsAyzb3iG3W5btm+W+rNhsUcxoCTGeaxcYTfz8zVBmLockQgxbUEzOEVc/QLxDAighORRHgxKOBpSqeBt3/baPafp+b3Abnm+YbZ6Zt0KLCsIjH7TUZVbKu7IHfNigdiuejd21PsRQTzDKJf4fM65HHQuZEnmYJGJxKwtQI2gTF4CLNdht261bJ3jdJagnLCe0ihLUG02nRUF0vnmv64ByAsr5nBGmQBJcQo/TXL/W1kP6RPh3IHnGflI9hR9uIzqrl2m8yFt6+ClVcJ7WYTzwyaLKxiGGya7n95nJh+WamCqvCCvhqPa8kOIAwD6F/z0/dJU8aIF3opeXrDyzpCq0i3bOwe1eS1bLLKioU6umEzC66ZuOPoAwUzK3npI/yKiVxD6t26civVe5Mq+yy8TUzIQQKBUjp9SLL/x3Bggnj83Qnl8Vt99y+yElHUTaCUO2YJEvkpyxl8+XKALcz9pvpd/S8qi93YdwNqKI/OUbwyBySRf5ffL+pPZgFTCYimIlG2DHwI4FHzXWBW54iLkNI0zgT7/ouRK11EBhDQjIjxTC8O2+hY8xXqG3HenDzCFwr9d2Sv+6ZX9fHM9kDqYArXyxf/trOFiXCCSuzguuHTUlXx9yuBksqX2bwQPCr7Xb34l+LuZdD+YP1q2arp/Hrr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06531</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06533</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5B09A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5B51A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5B8CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_FUNC_CHILD_BAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="5d03e113-a613-4dcc-9961-a4b38d72b08b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5BF2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5C70A1FAE0401F0A059945B1:146486F8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5BE0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5BE0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5BE0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5BF2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5C3AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5C75A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5BF2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5C3AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5C75A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YQUBFkqjPUl5atbd3qtrv9cieGo6SFoCQo7a+/CRaq1vZ274wzTg4nz3nOS57klKE4qrseY5ByklDF73fUf7BVt0zkzLSWg+da04K5NgMHaQ3sNAK7aTiO3VYVn7EMfMo4oryj1g2zoZmG+E1Nw7UartGuNVrmg6rcQcoEtHCpGaqSxxFlbhG2o2YpdRPECHMpioG5HLsT72rkCk8XlZzU7umWZREw7YacL11dx7UAMEQRruEk1k/1PZ/TgLkTsqCIZym8xgxYR33du9lsaptGLUkXet0wDN1o68InYGTxXe1+KzdD4NN5sl33EE0owSgiL0iSugIeJoHiRYskJTyMP4A2ddOQ0BrkWMNmk35X9bcABbsvIu2RTBnSWIjMEuwW5pACxaD8uvU76vevdXC7d5oiyuZJGrOD9d9RArqGKFlCoLEys5Ld1xGPlKt7Ctj1KY4yRtZwLcdkiTAwZZzCnOQjwsTwBUwp2q/krJwwwH/TklN9l6egrR+pTJ8sgPH/06/dXm1R7lCUQXf62MqMyyf9pnV+wsbo4XIdP15PBqNn3+8UFHadt6SqVr+uDwe1mqvXTT+9OvpxafuP/Ok3835dtHsLNuiPYyPsvVyakzvv+nzOEaDH23Pkze4eVuNeePG0+XnP7/U/V+2Lq3Bojh4gb824/W2T44xlYes8JHUSbH5ja3Xy7KQU7unUGA+ejHW+um/NTOd6uTm5eYlGxq+xk8fWTfvP2mnQn/PJyezmwclpPgm/0bwRXNTj1Qk5mZKUj6Io6bzltJvDvrGUg0k2ewTMy6UcDb+vDEW/EP9cWqSFBNq8cHWXUp8YB8rVrtwlZcXNhPiQwBXN3K4HTsvs2b0z62xY98yhNzCahjk0PMNqt5vWmVnqz5bFAcVeQudExpIKu52fzwni2GVAA0i1dZLhEJj6CWIfcaT49FYcjIQymCZCwYfG4MzyzIbZNG3b8uxWv2WfDQdOYyBo121bVa4TfkNvUm/OId1X78aeet8CJksCUuLlnDMx6IyLkqzQOuORWVujGoVMXAKp1GG33nQsnZF4GYEkrMdJkEVQW4bLokA62/7XNYRZYSUML5OUo6g4hR8mefitrIfwCYh0YDKjMxA9hXeXUd21ynQ+Tru1m3YJ72UBkYdNFJenBG+Z7H96mxk5LNXAVHlhVg1HteUvIY4A6J/w0w9LU8UL1mQnennBijtDqEq3bO8K1Va1bL3OiobaUjFTAa+bumHrE8CZkL3nafIEVK8g9C/dOBXrg8iVfZ9fxkM64YhDLMZPKZZfeG5MgMnnhi+OT/7Vt8xeSFE3Djk/ZutF4lUiGX/6cMEuln7CPBZ/myQN3tp1BGsnjshTvDE4oQu5kvfL8wezgRMBS4QgJuku+DGAY8H3jVWRKy5cTNMs4/DxF0UqXUdFGCcZ5X5fLQy76lvw5M9LcN+c3sEUCv96Zefswyv799VoInQwRmrlS/7bWSPFuGAQuxgpuHTUXLw+RXC62FH7V4LHBX9gfCb4+5l035nfW3Zqengeuv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YQUBFkqjPUl5atbd3qtrv9cieGo6SFoCQo7a+/CRaq1vZ274wzTg4nz3nOS57klKE4qrseY5ByklDF73fUf7BVt0zkzLSWg+da04K5NgMHaQ3sNAK7aTiO3VYVn7EMfMo4oryj1g2zoZmG+E1Nw7UartGuNVrmg6rcQcoEtHCpGaqSxxFlbhG2o2YpdRPECHMpioG5HLsT72rkCk8XlZzU7umWZREw7YacL11dx7UAMEQRruEk1k/1PZ/TgLkTsqCIZym8xgxYR33du9lsaptGLUkXet0wDN1o68InYGTxXe1+KzdD4NN5sl33EE0owSgiL0iSugIeJoHiRYskJTyMP4A2ddOQ0BrkWMNmk35X9bcABbsvIu2RTBnSWIjMEuwW5pACxaD8uvU76vevdXC7d5oiyuZJGrOD9d9RArqGKFlCoLEys5Ld1xGPlKt7Ctj1KY4yRtZwLcdkiTAwZZzCnOQjwsTwBUwp2q/krJwwwH/TklN9l6egrR+pTJ8sgPH/06/dXm1R7lCUQXf62MqMyyf9pnV+wsbo4XIdP15PBqNn3+8UFHadt6SqVr+uDwe1mqvXTT+9OvpxafuP/Ok3835dtHsLNuiPYyPsvVyakzvv+nzOEaDH23Pkze4eVuNeePG0+XnP7/U/V+2Lq3Bojh4gb824/W2T44xlYes8JHUSbH5ja3Xy7KQU7unUGA+ejHW+um/NTOd6uTm5eYlGxq+xk8fWTfvP2mnQn/PJyezmwclpPgm/0bwRXNTj1Qk5mZKUj6Io6bzltJvDvrGUg0k2ewTMy6UcDb+vDEW/EP9cWqSFBNq8cHWXUp8YB8rVrtwlZcXNhPiQwBXN3K4HTsvs2b0z62xY98yhNzCahjk0PMNqt5vWmVnqz5bFAcVeQudExpIKu52fzwni2GVAA0i1dZLhEJj6CWIfcaT49FYcjIQymCZCwYfG4MzyzIbZNG3b8uxWv2WfDQdOYyBo121bVa4TfkNvUm/OId1X78aeet8CJksCUuLlnDMx6IyLkqzQOuORWVujGoVMXAKp1GG33nQsnZF4GYEkrMdJkEVQW4bLokA62/7XNYRZYSUML5OUo6g4hR8mefitrIfwCYh0YDKjMxA9hXeXUd21ynQ+Tru1m3YJ72UBkYdNFJenBG+Z7H96mxk5LNXAVHlhVg1HteUvIY4A6J/w0w9LU8UL1mQnennBijtDqEq3bO8K1Va1bL3OiobaUjFTAa+bumHrE8CZkL3nafIEVK8g9C/dOBXrg8iVfZ9fxkM64YhDLMZPKZZfeG5MgMnnhi+OT/7Vt8xeSFE3Djk/ZutF4lUiGX/6cMEuln7CPBZ/myQN3tp1BGsnjshTvDE4oQu5kvfL8wezgRMBS4QgJuku+DGAY8H3jVWRKy5cTNMs4/DxF0UqXUdFGCcZ5X5fLQy76lvw5M9LcN+c3sEUCv96Zefswyv799VoInQwRmrlS/7bWSPFuGAQuxgpuHTUXLw+RXC62FH7V4LHBX9gfCb4+5l035nfW3Zqengeuv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkchFwg0UUFKuOwybSktTDXty8o4J8Rt4oTYAdpfv3ZoUmBot12pEvXJ8Xe+c/FnnzOUxJbrMQY5JylVxoOu+g8KTDDsjqWBaYZaK2xizel0FhqywGnjM2uxsNuqMmasgDFlHFHeVS3DbGqmIf7mpuHaTdc0G6bTeVCVO8iZgBYuDUNVtklMmVuG7apFTt0UMcJcihJgLsfuzLu6dIWniypOau98x7IMmPcizjNX13EjAAxxjBs4TfRz/cDnPGDujCwp4kUOrzED1lVf9242m8am2UjzpW4ZhqEbji58AkaW39Xet2ozBGMaprt1H9GUEoxi8oIkqSvgURooXrxMc8Kj5B1oUzcNCa3BFmvYbNHvqv4WoGT3SaQDkjlDGouQWYHdQgg5UAzKr9txV/3+uQ7u9s5zRFmY5gk7Wn+NEtA1xGkGgcaqzCp2n0c8Ua7eOWB3THFcMLKGiRyTDGFgyjSHkGwvCRPDFzClbL+yZdWEAf5KS871fZ6Ctn6iMgOyBMb/T7/2e7VDuUNxAT0c39xMsc94MXu4GfDb6M6eXMaLohj+6pYU9p13pOpWv66PB7Weq9dNoXWGvBVbnN2RPhvARXjv3bYi+0fcmf69IZPnv4p1dLW4vI7GTyjt6+GjP7x6yubkdzvgzxfIjtCMwAsKH0Z88s16Gf6YsPnST/zLCz9tL+95Bxft5N7httf6tZ4EPDGWd8/O6PdyhG6W5HH60Myy++ufMg995ZnBNL3wo8efnvXNWp1dBf2N+Hfuvzw8jqf2sPuW034Oh8ZKDmbF4hEwr5ZyNMYDZST6hfjH0iItJNDC0tXNpD4xDpSrPblLyopbCPEhgSuauVsPz9pmv9P37X7T88yRNzRahjkyPMN2nJbtm5X+7FgcUeynNCQyllTY3fx8TBAnLgMaQK6t0wJHwNQPEAeII2VMb8XBSCmDeSoU3BO0fKvvDSy7ObIMx+v0nU6rPxr4Q8cxO46qTFJ+Ta9zL+SQH6p380C9bwGTjICUeDnnTAw646IkK7QueGw21qhBoRCXQC512LVaZ7bOSJLFIAnrSRoUMTSyKCsLpLPdr6UhzEorYThLc47i8hS+m+Txt6oewicg0oHJjHwQPYUTl5FRpfN+2u39tCt4rwiIPGyiuDwneMfk8NPbzMhhqQemzguzejjqLV+EOAGgf8BPPy5NHS9Yk73o1QUr7gyhKr2qvSvUWDWK9booG9qRipkLeN3UjY4+A1wI2Xuep09A9RpC/9SNU7M+ilzbD/kVPKIzjjgkYvyUcvmJ58YMmHxujMXx2X72LXMQUtSNw5afsvVj8SqRjD98uGAXSz9hnoqfTZoHb+06gbUXR+Qp3hic0KVcyfvl+Z3ZwKmAJUIQ03wf/BTAqeCHxrrINRcupmlRcHj/iyKVrqsijNOC8vFALQ376lvy5M8ZuG9Of8CUCv96ZW/Zu1f276vLmdDBBKm1L/lvZ42U44JB7GKk5NJVt+L1KYLT5Z7avxI8Kfj+0PhI8A8z6f1h/tOyV9Pj89D7Fw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7fv4Khjx0EBG9MdUZEW1sv3WK7u/tyJoaFpoWgJKjtrz8BC1Vre9oz44yTxcq3vnXJl1wwFAZlq80YxJxEVOo7TfkfD2PUQHVfMap6XTH9mqnMqpqvlGflemVWriDTqMlSn7EE+pRxRHlTLmu6oeia+E11zaoYll4t1QzjUZbuIWYCWriUNFnahgFlVha2KScxtSLECLMoCoFZHFtueziwhKeFck5y62LHMgsYtxacLy1VxSUPMAQBLuEoVC/UA58Lj1kumVPEkxjeYnqsKb/t3Ww2pY1RiuK5WtY0TdUaqvDxGJmfya1f+Wbw+tSPdusOohElGAXkFaWkhsAXkSe1g3kUE74IP4HWVV1LoRXYYgXrJj2T1fcAGbtvIh2QjBlS2ALpOdgEfIiBYpDuJv2mfPa9Du72TmNEmR/FITta/4wS0DUE0RI8heWZ5ey+j3iiXK0LwFaf4iBhZA2jdEyWCAOTbmPwyXZAmBg+j0lZ+6UtyycM8E9acqHu8xS01ROVccgcGP8//drv1Q7lHgUJtG4mbfw8rq9+e/Pq7dXMHK/h3L66u2rwbjOjsO+8I1W0+m19PKjFXL1tGq4D37x8XS1n5au7eufv5WjkhQ662Ty7g/PNwGnc3CZ0MesN+9Pba/9lMpzWnqoP3ccHuwf3zuTFnY+GhruqTu/dy18MB+Hfp8oI+9vfk8F0bgxmE+12PL43r21/oN/Unka+bQ8a1WRw56zOu+XYSM4nd+rAv56PYxe7f+zXG5W8dse2/ssGexqaYNzMncc/IxrMtu3me077ORwaczlwk9kTYJ4v09HoO1JP9Avxr6UltRBP8TNXa5nqE+NAudxKd6WyYiVCfIhniWbu1t16Ve/UOnalU6u09V67q5ma3tPaWqXRMCu2nuvPjsURxU5EfZLGShV2Nz9fE8ShxYB6ECvrKMELYPIXiA7iSOrTiTgYEWUwjYSCdzrVsuPUDLNWbxh2rVtta06vUq7YRkVv9wxDlkYRH9Nx3PY5xIfqbRyo9wQwWRJIJT6dcyYGnXFRkhVaJzzQS2tUopCISyBOddgqm/WKyki4DCAlrIaRlwRQWi6WWYFUtvsvKwizzEoYXkYxR0F2Cj9N8vhbXg/h45HUgaUZ2SB6CicuIy1P50Pa5slLK4dvJx5JD5soLo8J3jE5/PQ+M+mwFANT5IVZMRzFlh9CnABQv+CnHpemiOetyV70/IIVd4ZQlVbe3hUqrUrJep1kDa2lihkLeFVXtZrqAk6E7L1Mo2egagGhfuvGKVgfRS7sh/wSvqAuRxxCMX5StvzGc8MFlj43+uL4bL/7ljkIKerGYctP2TqBeJWkjL98uGALp37CfCv+NlHsvbfrBNZeHJGneGNwQufpKr1fXj6ZDRwJWCIEMYr3wU8BnAp+aCyKXHDhYppmCYfPv0ip0jVlhHGUUN535Mywr74ZT/6yBOvd6QNMpvBvV/aWfXplPwwHrtDBEMmFL/lvZ4Vk44JB7GIk49KUt+L1KYLT+Z7avxE8Kfh2V/tK8A8zaX0wf7Ts1fT4PLT+BQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06538</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5BF3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5C3BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5C76A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_FUNC_CHILD_BAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="24f12140-dd52-4079-ad3a-3f2e56ebfc14"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5CEEA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8938091529BE0401F0A07996E28:1DD1AE0B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5CDCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5CDCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5CDCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5CEEA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C893805C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8938096529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5CEEA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C893805C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8938096529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4ERBSZ6gwqtnZrb3a33b6cScNC00K4JKjtrz8BC1Vre9oz44yTxcq3vnXJl5wwFAZ122EMUk4iKo0GHfkfEyPDNw1TadZNS2noYCmPhu8pZqMJj6D52GhpsjRiLIMRZRxR3pHrmm4ouiZ+t7pmm4atWzVLa85k6Q5SJqCFS03sWocBZXYRtiNnKbUjxAizKQqB2RzbU2cytoWnjUpOcvdkw7IImHYXnMe2quKaBxiCANdwFKon6o7PicfsKZlTxLMU3mJ6rCO/7V2tVrWVUYvSuVrXNE3V2qrw8RiZH8vdo3IzeCPqR5t1H9GIEowC8opyUhPgi8iTnGAepYQvwk+gdVXXcmgF1ljBeoMey+p7gILdN5F2SKYMKWyB9BLsBnxIgWKQ/tyMOvLx9zq42XubIsr8KA3Z3vpnlIAuIYhi8BRWZlay+z7igXJ1TwDbI4qDjJElXORjEiMMTLpKwSfrMWFi+DwmFe2X1qycMMA/acmJus1T0FYPVGZA5sD4/+nXdq82KHcoyKDbMMbns3PaWtDkNUycfvN+/RL71rT16nQKCtvOG1JVq9/W+4NazdXbpuuH22QdJ+qdEfZWk4fzxcvjXHuejawVXc8nS+6MX54WZ9n9XzfBv4fP5qnv1oOp8Xs2HYftIR6k6JeuW+Tysp5YR9f37QvaW65OoWGGFzS5U63eq3/21OSaHsH4kc3V4TM5Cx/Oh8ng8n51PZ096S3XjcL72dXTHdKv2HP8d7A8bSezo0mf3s2aaXK++vXUvr55Pm396bzntJ3DrrGUg2n2+ASYl8t8NEYDaSj6hfjX0pJbiKf4hasd5/rEOFAud/NduazYmRAf4tmimZu1azX1fqvfM/uu6+hDx9Uamj7UHM1stxtmTy/1Z8Nij2I/oj7JY+UKu5mfrwni0GZAPUiVZZThBTD5C8QB4kga0RtxMCLK4DYSCj5ouU3D6jVc09Adq9F2zJ41dN2hpTfqvabhytJFxC/pZer4HNJd9TZ21PsGMIkJ5BKfzzkTg864KEmClhkP9NoS1Shk4hJIcx226w3LVBkJ4wBywmoYeVkAtXgRFwVS2ea/riDMCithOI5SjoLiFH6a5P63sh7CxyO5A8sz6oHoKRy4jLQync/Tbm6nXcI7mUfywyaKy1OCN0x2P73PTD4s1cBUeWFWDUe15YcQBwDUL/ip+6Wp4nlLshW9vGDFnSFUpVu2N0G1pJYtl1nR0FaumKmAV3VVa6lTwJmQvZfb6BmoWkGo37pxKtZ7kSv7Lr+ML+iUIw6hGD+pWH7juTEFlj83RuL4rL/7ltkJKerGYc0P2fqBeJXkjL98uGAb537CfCX+VlHqvbfrANZWHJGneGNwQuf5Kr9fXj6ZDRwJWCIEMUq3wQ8BHAq+a6yKXHHhYpoeMw6ff5FypevICOMoo3w0kAvDtvoWPPlLDPa70weYQuHfruw1+/TKfpiMp0IHQyRXvuS/nRVSjAsGsYuRgktHXovXpwhO51tq/0bwsOAP+l8J/m4m3Q/mj5atmu6fh+6/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4ERBSZ6gwqtnZrb3a33b6cScNC00K4JKjtrz8BC1Vre9oz44yTxcq3vnXJl5wwFAZ122EMUk4iKo0GHfkfEyPDNw1TadZNS2noYCmPhu8pZqMJj6D52GhpsjRiLIMRZRxR3pHrmm4ouiZ+t7pmm4atWzVLa85k6Q5SJqCFS03sWocBZXYRtiNnKbUjxAizKQqB2RzbU2cytoWnjUpOcvdkw7IImHYXnMe2quKaBxiCANdwFKon6o7PicfsKZlTxLMU3mJ6rCO/7V2tVrWVUYvSuVrXNE3V2qrw8RiZH8vdo3IzeCPqR5t1H9GIEowC8opyUhPgi8iTnGAepYQvwk+gdVXXcmgF1ljBeoMey+p7gILdN5F2SKYMKWyB9BLsBnxIgWKQ/tyMOvLx9zq42XubIsr8KA3Z3vpnlIAuIYhi8BRWZlay+z7igXJ1TwDbI4qDjJElXORjEiMMTLpKwSfrMWFi+DwmFe2X1qycMMA/acmJus1T0FYPVGZA5sD4/+nXdq82KHcoyKDbMMbns3PaWtDkNUycfvN+/RL71rT16nQKCtvOG1JVq9/W+4NazdXbpuuH22QdJ+qdEfZWk4fzxcvjXHuejawVXc8nS+6MX54WZ9n9XzfBv4fP5qnv1oOp8Xs2HYftIR6k6JeuW+Tysp5YR9f37QvaW65OoWGGFzS5U63eq3/21OSaHsH4kc3V4TM5Cx/Oh8ng8n51PZ096S3XjcL72dXTHdKv2HP8d7A8bSezo0mf3s2aaXK++vXUvr55Pm396bzntJ3DrrGUg2n2+ASYl8t8NEYDaSj6hfjX0pJbiKf4hasd5/rEOFAud/NduazYmRAf4tmimZu1azX1fqvfM/uu6+hDx9Uamj7UHM1stxtmTy/1Z8Nij2I/oj7JY+UKu5mfrwni0GZAPUiVZZThBTD5C8QB4kga0RtxMCLK4DYSCj5ouU3D6jVc09Adq9F2zJ41dN2hpTfqvabhytJFxC/pZer4HNJd9TZ21PsGMIkJ5BKfzzkTg864KEmClhkP9NoS1Shk4hJIcx226w3LVBkJ4wBywmoYeVkAtXgRFwVS2ea/riDMCithOI5SjoLiFH6a5P63sh7CxyO5A8sz6oHoKRy4jLQync/Tbm6nXcI7mUfywyaKy1OCN0x2P73PTD4s1cBUeWFWDUe15YcQBwDUL/ip+6Wp4nlLshW9vGDFnSFUpVu2N0G1pJYtl1nR0FaumKmAV3VVa6lTwJmQvZfb6BmoWkGo37pxKtZ7kSv7Lr+ML+iUIw6hGD+pWH7juTEFlj83RuL4rL/7ltkJKerGYc0P2fqBeJXkjL98uGAb537CfCX+VlHqvbfrANZWHJGneGNwQuf5Kr9fXj6ZDRwJWCIEMUq3wQ8BHAq+a6yKXHHhYpoeMw6ff5FypevICOMoo3w0kAvDtvoWPPlLDPa70weYQuHfruw1+/TKfpiMp0IHQyRXvuS/nRVSjAsGsYuRgktHXovXpwhO51tq/0bwsOAP+l8J/m4m3Q/mj5atmu6fh+6/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoMxJERJnqDEo9m2lru7318nImhqDphkBJQOqv3wELVWt72jPjjJPFyre+dcmXXDAYBk3LZgwnnERUcp2e/G+nC3VDayOloxlIabW0lrJsaZoCoe/rsOn7BujIkstYil3KOKS8JzeBpisaEL+ZBixDt5qgYbTBkywtcMIEtHBpAFnKw4Ayqwzbk9OEWhFkhFkUhphZHFlT++baEp4WrDjJ/YsdyzJg0l9zHluqihoeRjgIUANFoXqhHvhceMyakhWFPE3wW0yP9eS3vZvNprHRG1GyUpsAABV0VeHjMbI6l/tn1WbsudSPdushpBElCAZkCwtSN5ivI0+yg1WUEL4OP4HWVA0U0ArOkYK0Fj2X1fcAJbtvIh2QTBhU2BpqFdgE+zjBFGFpPnF78vn3OrjbO0sgZX6UhOxo/TNKmGY4iGLsKazKrGL3fcQT5epfYGS5FAUpIxkeF2MSQ4SZdJdgn+TXhInh85hUtl/KWTVhGP2kJRfqPk9BWz1RGYesMOP/p1/7vdqhLGCQ4v78cp5NwOMyXtm+uc39wXxwtZ1MyP0z65UU9p13pOpWv62PB7Weq7dN0d0IXwnQzlWaJxsPub72e7DMH9vzyaM6vv0NwsHSd5+gNty+bDt5snBex/lTeLe2F+2cmuQf2sWLbbZ9mb3ens1MEIzVLL7+5S8gSSb8Hmy9pj9bopFPTfdmrZH163xsz570BWHOEF+y5kPmzudb2uR3s3s9NsyH54fp8g+4Ovu1fRQRXgbb1vN4MMsmbW3Te89pP4dDYyUH03T5jBGvlsVouI40Ev2C/GtpKSzEU/zS1YoLfWIcUy73i12FrFipEB/iWaKZu/Vlp60NO129A4yh0ewOLkELaCNgA7PbbV82O5X+7FgcURxG1CdFrEJhd/PzNUEUWgxTDydKFqVojZn8BaIDOZRcOhEHI6IMzyKh4MC5dHRnpDuGNnAcA7RM3TZN07DBSNeN1lCWxhG/pbeJ7XOcHKq3fqDeE4xITHAh8cWcMzHojIuSvMAs5YHWyGCD4lRcAkmhw1az1TFURsI4wAVhNYy8NMCNeB2XBVLZ7r+pQMRKK2EojhIOg/IUfprk8beqHsLHI4UDKzIaYNFTfOIy0qp0Pk+7vZ92BW+nHikOmyguTwjaMTn89D4zxbDUA1PnhZhWca+3/BDiBID6BT/1uDR1PC8je9GrC1bcGUJV+lV7X2DjpZFmWVo21CwUMxHwqqYCU51ilArZe51FfzBVawj1WzdOzfoocm0/5JfyNZ1yyHEoxk8ql994bkwxK54brjg++XffMgchRd04zvkp2zAQr5KC8ZcPF2Shwk+Y78TfJkq893adwNqLI/IUbwxO6KpYFffL6yezgSIBS4QgRsk++CmAU8EPjXWRay5cTNMy5fjzL1KhdD0ZIhSllLuOXBr21bfkyV9jbL07fYApFf7tys7Zp1f2w831VOhgCOXal/y3s0LKcUFY7GKk5NKTc/H6FMHpak/t3wh+EHxzODCGztDWRnYt+Ea32zIG70fyIJP+B/NHy15Nj89D/y8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgOBdIooIUoMwwlN7o0Jm+HLmOAbeJQ2MHQr/+2KFJgdKezpGQkHe211774mWfcJTEVhByTjJBU6YN+239H+ha9r3jYcPxm03DcRxo+DPbNJqubdrRzIQWRLo25DwnQ8YFYqKtWya0DWjK3w00A9cOLLthQ+9O16Yk4xJaujRMXSuSmPGgDNvW84wFKeKUBwwlhAcCB5NwfBZIzwBVnPTOyZZlGTDrLIRYBgDgRkQwiWPcwGkCTsCez0nEgwmdMyTyjLzEjHhbf9m7Xq8ba7uRZnNgmaYJTB9In4jT+Ve986XaTKIhm6XbdQ+xlFGMYvqMFKkxEYs00sJ4nmZULJJ3oCGApoI2SIENDB32VQevAUp2n0TaI5lxZPAFghXYNZmRjDBMtF/Xw7b+9XMd3O69yRDjszRL+MH67ygRtiJxuiSRwavMKnafRzxSrs4JwcGQ4TjndEXO1ZgsESZcu8zIjBZnlMvhi7hWtl8reDVhBP9NS07ALk9JGxypTJ/OCRf/p1+7vdqiTFGckw4Z8acxu3VDaqfrs9tRXow22f3Ee+zidklh13lLqm71y/pwUOu5etmUrkHBnu3Tn4l7CjaXfWt6bibnD+M/P5+X8/nV1KG/vj/cf4uS1mghsjh69uFmetcqzs+vErhKL/Fd9HjfS7Kr6fjiywoONt3+460YFt/vehD3f4OLHzhmqG+OSRx+Gz/kPl/SS/9H9wf6hm6/XxZitVg/wLOf8cW4t7m6++ONBvGVB7relxCG0wEYWX46OmWt5Nov5u3XnHZz2DdWcjDJ7x8IFtVSjcawrw1kv5D4WFqUhUbGrHQNlkqfuCBM6B21S8lKkEvxoVEgm7ldn3pN2PN82zP9pmv53VPTMeHADM2W7zdPLa/Sny2LA4q9lM2oiqUUdjs/HxPEScAJi0hmrNIcLwjXP0DsI4G0IbuWByNlnNykSsGh1+w6PdeCLvQ9u9d3Qtvthr6suWN51kDXzlNxwS6ycCZItq/e9p56XxNMl5QoiVdzzuWgcyFL8oRWuYhhY4UajOTyEsiUDgeW47mA02QZE0UYJGmUx6SxXCzLAgG+/bcMhHlppRwv00yguDyF7yZ5+K2qh/SJqHLgKqMukT0lRy4jWKXzJm3n6KVVwYd5RNVhk8UVGcVbJvufXmdGDUs9MHVemMOKe73lLyGOAIAP+IHD0tTxohXdiV5dsPLOkKrSqdr7hBpPjXy1ysuGtpRiZhIeQGC2wITgXMre5iZ9JAzUEOBTN07N+iBybd/nl4sFmwgkSCLHTyuXn3huTAhXz42hPD7FZ98yeyFl3QQpxDFbL5avEsX4w4cLDrDyk+ZL+bdOs+i1XUewduLIPOUbQ1A2Vyt1v2zemQ2cSlgqBTHNdsGPARwLvm+si1xzEXKa7nNB3v+iKaVr6wjjNGdi2NdLw676ljzFZkmCV6c3MKXCv1zZBX/3yv49PptIHUyQXvvS/3Y2aDkumMhdnJZc2nohX58yOJvvqP0LwTeC3+p13V6/F8JBWAu+6/uO2309knuZdN6Y31p2anp4Hjr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065317</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065319</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5CEFA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C893805D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8938097529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_FUNC_CHILD_BAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="fa72bc78-9033-461b-939e-644774b8f435"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89380FD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C893817A529BE0401F0A07996E28:2949E0D9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C89380EB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C89380EB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C89380EB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89380FD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8938145529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C893817F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89380FD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8938145529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C893817F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I4FP3ur+jUjw60hQJtB5jhVXHBR0Gd1S87Ib3QaJvWJi3or9+kUAQEFnfGGcztzbnnvuQkdYYCv+S0GIOYk5Aqg25D/cfFYKNq1SqAMbULJrhGwbbNUgFNkY1rJTDBclVlwFgCA8o4oryhlnSjXDB08fdo6E6l7JTMomVbr6ryDDET0MKlqKvKMvApc7KwDTWJqRMiRphDUQDM4diZtEZDR3g6KOekNusrllnAuOlxHjmahosuYPB9XMRhoNW1HZ+6y5wJmVPEkxjWMV3WUNd7F4tFcVEuhvFcK+m6rum2JnxcRuaXavMi3wzugM7C1bqDaEgJRj75QpLUCLgXukrLn4cx4V5wBNrQDF1CF2CJC9gw6aWqfQfI2J2JtEMyZqjAPGTkYGOYQQwUg/I0HjTUy/M6uNr7GCPKZmEcsL317ygBTcEPI3ALLM8sZ3c+4oFyNeuAnQHFfsJICndyTCKEgSn3MczIckiYGD6XKVn7lSXLJwzwb1pS17Z5Ctragcp0yRwY/z/92u7VCuUZ+Qk0F6/Ps977RBv3hu/3L5XbhN70kTlHw5enRkZh23lFatPq9Xp/UDdztd401q7ePPFvbdL373S/95fFJi+t/tScptoVufEXy6HLzV6Hfvb75ddrl/jcu611vqB6+/AwpSP9Zq5/vT5b6WiBLpKXh/frx/F9lSxR9Pm0uG7R5U1XL48sKEe9B07TQeu9HeKSV/nqlmc301FcnS2CZ+ot2YuZgvdKgupVv5v6nF2AMfQG+hWtGPyNeHd2+IEb3zlt57BrzOVgkkzfAPN8KUdj0FX6ol+In5YWaSFuYZa5OpHUJ8aBcrUpd0lZcRIhPsR1RDNX655VNTqWXbb0frdSsts93dSNvt7Sa7Zd7ZWsXH9WLPYodkI6IzKWVNjV/JwmiAOHAXUhLqRhgj1g6gnELuJIGdCxOBghZfAYCgVv9XWjaxudrlVpt81qS++Zpm23S3a5XGv37aqq3IX8D/0Tt2Yc4l31Lu+o9xgwiQhIiZdzzsSgMy5K8oHShPtGMUVFCom4BGKpw2KfVdEYCSIfJGEtCN3Eh2LkRVmBNLb6FUqEWWYlDEdhzJGfncKjSe5/y+shfFwiHZjMqA2ip3DgMjLydI6nXd1OO4dvJS6Rh00Ul8cEr5jsfvqeGTksm4HZ5IWZkXPfbPklxAEA7QQ/bb80m3huSrai5xesuDOEqjTz9n6g4kcxSdMka2hNKmYs4DVD02vaBHAiZO/zMXwHqm0gtLNunA3rvcgb+y6/hHt0whGHQIyfki3PeG5MgMnnxkAcn+W5b5mdkKJuHJb8kK3ji1eJZHzy4YIdLP2E+V78LML4O/FDWFtxRJ7ijcEJncuVvF8+j8wGDgUsEYIYxtvghwAOBd81boq84cLFNE0TDse/KFLpGirCOEwoH3TVzLCtvhlP/hmB8+30AyZT+PWVvWRHr+y/R8OJ0MEAqRtf8t/OBZKNCwaxi5GMS0NditenCE7nW2q/JnhY8HvtU4K/m0nzh/mnZaum++eh+S8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU/I4FP3ur+jUjw60hQJtB5jhVXHBR0Gd1S87Ib3QaJvWJi3or9+kUAQEFnfGGcztzbnnvuQkdYYCv+S0GIOYk5Aqg25D/cfFYKNq1SqAMbULJrhGwbbNUgFNkY1rJTDBclVlwFgCA8o4oryhlnSjXDB08fdo6E6l7JTMomVbr6ryDDET0MKlqKvKMvApc7KwDTWJqRMiRphDUQDM4diZtEZDR3g6KOekNusrllnAuOlxHjmahosuYPB9XMRhoNW1HZ+6y5wJmVPEkxjWMV3WUNd7F4tFcVEuhvFcK+m6rum2JnxcRuaXavMi3wzugM7C1bqDaEgJRj75QpLUCLgXukrLn4cx4V5wBNrQDF1CF2CJC9gw6aWqfQfI2J2JtEMyZqjAPGTkYGOYQQwUg/I0HjTUy/M6uNr7GCPKZmEcsL317ygBTcEPI3ALLM8sZ3c+4oFyNeuAnQHFfsJICndyTCKEgSn3MczIckiYGD6XKVn7lSXLJwzwb1pS17Z5Ctragcp0yRwY/z/92u7VCuUZ+Qk0F6/Ps977RBv3hu/3L5XbhN70kTlHw5enRkZh23lFatPq9Xp/UDdztd401q7ePPFvbdL373S/95fFJi+t/tScptoVufEXy6HLzV6Hfvb75ddrl/jcu611vqB6+/AwpSP9Zq5/vT5b6WiBLpKXh/frx/F9lSxR9Pm0uG7R5U1XL48sKEe9B07TQeu9HeKSV/nqlmc301FcnS2CZ+ot2YuZgvdKgupVv5v6nF2AMfQG+hWtGPyNeHd2+IEb3zlt57BrzOVgkkzfAPN8KUdj0FX6ol+In5YWaSFuYZa5OpHUJ8aBcrUpd0lZcRIhPsR1RDNX655VNTqWXbb0frdSsts93dSNvt7Sa7Zd7ZWsXH9WLPYodkI6IzKWVNjV/JwmiAOHAXUhLqRhgj1g6gnELuJIGdCxOBghZfAYCgVv9XWjaxudrlVpt81qS++Zpm23S3a5XGv37aqq3IX8D/0Tt2Yc4l31Lu+o9xgwiQhIiZdzzsSgMy5K8oHShPtGMUVFCom4BGKpw2KfVdEYCSIfJGEtCN3Eh2LkRVmBNLb6FUqEWWYlDEdhzJGfncKjSe5/y+shfFwiHZjMqA2ip3DgMjLydI6nXd1OO4dvJS6Rh00Ul8cEr5jsfvqeGTksm4HZ5IWZkXPfbPklxAEA7QQ/bb80m3huSrai5xesuDOEqjTz9n6g4kcxSdMka2hNKmYs4DVD02vaBHAiZO/zMXwHqm0gtLNunA3rvcgb+y6/hHt0whGHQIyfki3PeG5MgMnnxkAcn+W5b5mdkKJuHJb8kK3ji1eJZHzy4YIdLP2E+V78LML4O/FDWFtxRJ7ijcEJncuVvF8+j8wGDgUsEYIYxtvghwAOBd81boq84cLFNE0TDse/KFLpGirCOEwoH3TVzLCtvhlP/hmB8+30AyZT+PWVvWRHr+y/R8OJ0MEAqRtf8t/OBZKNCwaxi5GMS0NditenCE7nW2q/JnhY8HvtU4K/m0nzh/mnZaum++eh+S8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vgJEAgUUGiIe1NW2gL3Wp3X65cZwBvgx1iB2h//dqhocDS3u6VkJAn4zNnPnzsU4HnqRv0hIBcUs6MuN8x/7XrzcRr4obVatfBariea/lOy7VIgnHS9lx4dJumEQtRQMyExEx2TNd26pZjq9+9YwfNeuB6tXrb+WkaD5ALBa1carZprOcpE0EZtmMWOQs4FlQEDM9BBJIE497gOlCeAa44md3TDcsyYN6dSZkFCJFaAgTSlNQIn6NTtOdzmohgTKcMyyKH15iJ6Jive1erVW1Vr/F8ilzbtpHtI+WTCDr9ana/VJshidmEb9YhZpxRglP6gjWpAcgZT4xeOuU5lbP5O9AOcmwNbcGaWMRpsK8megtQsvsk0h7JXGBLzLBTgY1gAjkwAsa3Udwxv36ug5u99zlmYsLzuThY/x0lYEtIeQaJJarMKnafRzxSru4pkCBmJC0EXcJQj0mGCQjjNocJXV9ToYYvEUbZfmMtqgkD8jctOUW7PBVtdKQyfToFIf9Pv3Z7tUF5wGkB3RG++Wf6MnRuqXtxRcOXO1aENntI0CDulBR2nTektq1+XR8O6nauXjddxyt4ERffzwYRlU9T72bwhEfeyVUapQBoFfYd5/Jm9vQ4u7mbtTDnKftJYcGfvz25bYxgkD16VF5F2K8/tL4If/izL3K6XgxpL4rayclT9rw4PzmJT/CiuPOQ/+P8Yn3n315G4fjXRSFTOqaXTtYc09t+vzFejkYoJgSfpfXBl9aPcMhGLe60yKjfpI9Zuuq85bSbw76xkoNx8fgLiKyWejTivnGu+oXlx9KiLTSxJqVrkGl9EhKYNLt6l5aVoFDiQ5NANXOzjtqeE7Z9pWiNZtP1zyK7YTvnds9u+b4Xue1KfzYsDiiGnE2ojqUVdjM/HxMk80AASyC3lrwgMxDmB4h9LLERs5E6GJwJuOdKwV3fUWSbXnju9XuNKDr3ndA96yvGYdjyI6XDQy5v2E3em0jI99W7vqfeIyA0o6AlXs+5UIMupCrJAi9Ve53aEtcYFOoSyLUOB26j3USCzrMUNGE050mRQi2bZWWBkNj8uxYmorRSQTKeS5yWp/DdJA+/VfVQPgnVDkJndAaqp3DkMnKqdN5P29tNu4LvFQnVh00VV+aUbJjsf3qbGT0s24HZ5kWEU3HfbvlLiCMA6AN+6LA023jJku5Ery5YdWcoVelW7V3g2qJWLJdF2dCWVsxcwSMH2S00BlIo2Xu+50/A0BYCferG2bI+iLy17/Mr5IyNJZYwV+NnlMtPPDfGIPRzI1bHZ/3Zt8xeSFU3CWt5zBam6lWiGX/4cCEB0X7KfKv+VjxP3tp1BGsnjspTvTEkZVO90vfL8zuzQbiCpUoQeb4LfgzgWPB947bIWy5STdNjIeH9L4ZWuo6JCeEFk3HfLA276lvylM8ZBG9Of8CUCv96Za/Fu1f298H1WOngHJtbX/rfzhYtx4WA2iVoyaVjrtXrUwVn0x21fyV4VPDt6Owjwd/PpPuH+U/LTk0Pz0P3Nw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1PSFoTSEWYAgVM/AIWj1/NyJ6YbiLYpJCmgv/4kxSIgevXOMMNkd2fttT+ykjOB48j1G0IAlzRhRnBeM/91PKiGHoBV9rySVSqOQ+uxjEsWeM7juGhXXNcJTSMQIoWACYmZrJmu7RQtx1a/kWP7p0XfrRYc2/tjGnfAhYJWLgXbNFZxxISfha2ZKWd+ggUVPsMxCF8Sf9i4vvKVp49zTmb9bM0yC8jrUylnPkKkEAKBKCIFksToDO34nIXCH9IJwzLl8BYzFDXzbe9yuSwsi4WET5Br2zayq0j5hIJOjs36Ub4ZwoCNk/W6hVnCKMERfcWa1DXIaRIajWiScCqn8SfQDnJsDW3BiljEKbFjE70HyNh9E2mHJBfYElPs5GC3MAYOjIDx+zaomcff6+B674hjJsYJj8Xe+meUgC0gSmYQWiLPLGf3fcQD5aqfAfEDRqJU0AX09JjMMAFhDDiM6eqKCjV8oTCy9hsrkU8YkJ+05Axt81S00YHKnNMJCPl/+rXdqzXKHY5SqIuua8+HYlFyuyfN3niynBQfeqT/4l5MahmFbec1qU2r39b7g7qZq7dNq2c3DjvenM5Tex4PehfL1/uee30pL05GNyN8FUzlHZ863cFgeTILr2a9x557cYmC/n2rEj29Pt0vfg3C5gi17F7zyD4Nu5fg3YxazYtqv3vP0cmqchHYz6/RnxPW/j3m5KU4WHSdVr/KS5cP/cEqCi5f3Nfu7YiSuIrc8fLp4Tl0L4uroxtZZsX2ffLccq8q16+/ho+k9p7Tdg67xlwOhunjExCZL/VoBOdGR/ULy6+lRVtoaI0zV3+m9UlIYNKs611aVvxUiQ8NfdXM9brtlZ2WVy16TqVz6labbbtkOx27YVeq1XLb9XL9WbPYo9hK2JjqWFph1/PzNUES+wJYCNxaJCmZgjC/QDzHEhsBu1UHI2ECRolScLdcPS13vKbdcu1Kqe02nLLXcrS103HL5w3T6CWyz/q8MZbAd9W7uKPet0DojIKWeD3nQg26kKokc7xIZeQUFrjAIFWXANc67Lsl7xQJGs8i0IRRnIRpBIXZdJYVCIn1v2thIjIrFWSWcImj7BR+muT+t7weyiek2kHojJqgegoHLiMnT+dD2qWDl1YO30hDqg+bKq7klKyZ7H56nxk9LJuB2eRFhJNz32z5IcQBAPQFP7Rfmk28cEG3oucXrLozlKrU8/bOcWFeSBeLNGtoRSsmV/DIQXYFDYGkSvZeRskzMLSBQN+6cTas9yJv7Lv8UjllQ4klxGr8jGz5jefGEIR+bgTq+Ky++5bZCanqJmElD9lakXqVaMZfPlyIT7SfMg/U3zLh74kfwtqKo/JUbwxJ2USv9P3y8slskETBUiWICd8GPwRwKPiucVPkDReppukxlfD5F0MrXc3EhCQpk8G5mRm21TfjKV9m4L87fYDJFP7tyl6JT6/sf66vhkoHY2xufOl/O1s0GxcCapegGZeauVKvTxWcTbbU/o3gQcG3282vBH83k/oH80fLVk33z0P9Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065324</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065325</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89380FE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8938146529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8938180529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_FUNC_CHILD_BAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="ae2010e8-724b-42d9-87c6-794b93d5cfd6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89381E6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8938265529BE0401F0A07996E28:4BCAD402"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C89381D4529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C89381D4529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C89381D4529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89381E6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8938230529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C893826A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89381E6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8938230529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C893826A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSxwqchC1EgESB3qZ0Bbq+XBlnAH8NTogdlv76zw6EAgUuvRIS8mR85sziY1c4HvuWU+ccIkEDprnNqv6vCdi0rL6d6ZegmMlj28z07ZyXGVgAGPrFXA4MXXM5j8FlXGAmqrplmLmMachfzzScQs7JmVnLtj907QUiLqGlS1bumo99xp0kbFWPI+YEmFPuMDwG7gjidOt3t470dHDKSa9VliyTgFFtJEToIESyHhDwfZIlwRhV0JZPxeNOlw4ZFnEEq5ger+qrvbPZLDvLZYNoiCzDMJBRRtLH43R4rtfO0s3guWwQLNcNzAJGCfbpF1ak7kCMAk+r+8MgomI0PgBtItNQ0BmYkwwx8+xcR98BEnYnIm2RjDjO8BE2U7AODCACRkB77rhV/fy0Di739iLM+CCIxnxn/TtKwKbgByF4GZ5mlrI7HXFPuWoVII7LiB9zOoV7NSYhJsC1xwgGdH5LuRw+j2tJ+7U5TycMyG9aUkGbPCVttKcyTToELv5PvzZ7tUR5wX4MteHrDN2I4Rvlg9FtfXQzWXASkfbDu/VUTShsOi9JrVu9Wu8O6nquVpvqfyJz+vr63sGu+/U8KuD5rH/5Vp6FonVx4b7nKX58Qa+iex0HaIRb13ZwP7p4tntf3c7lU/+qPyT/mPe5TxeR1/ZZ7tOfYni4joeTDhQfHpufJT5suG+997ZpXYnrh6eXnrj5LM/b721itQzX67FH6JTQYnFxF7YvnruNr9Lnx8J6Gn+cdcp5yzUKk/w0f91/DF/8nF39zmkzh21jKgfduP8HiEiXajTcpnYl+4XFcWlRFioPQ+LqhEqfuAAm9JrapWTFiaX4UM+RzVyuW3bRbNjlnG22igWrfNky8oZ5ZdSNUrlcbFl2qj9LFjsUGwEbUBVLKexyfo4TJGOHA/MgykyDmIyA60cQm1hgzWUdeTACxqEXSAWvN0qtQj1fMC6bjXyx0bhqGmWz0Wq1LsvlZsMq6dp9IB7YQ1QfCIi21Tu3pd4dIDSkoCRezTmXg86FLMkET2Phm9kpzjKI5SUQKR12rLxdQJyOQx8UYTQOvNiHbDgKkwIhvvy3MpjwxEo5CYNIYD85hQeT3P2W1kP6eFQ5cJXRJciewp7LyErTOZx2cTPtFL4ee1QdNllcEVGyZLL96Xtm1LCsB2adF+Fmyn295ZcQewDQEX5otzTreN6UbkRPL1h5Z0hVqaXtneDsJBtPp3HS0JJSzEjCIxMZJdQFEkvZW/SCT2BoDYFOunHWrHcir+3b/GIxYl2BBYzl+GnJ8oTnRhe4em648vjMT33LbIWUdRMwF/tsDV++ShTjow8X4hDlJ82P8m8WRN53u/ZgbcSReco3hqBsqFbqflkcmA0SSFgqBTGINsH3AewLvm1cF3nNRchp6scCDn/RlNJVdUxIEDPhNvXEsKm+CU+xCMH5dvoBkyj86sqe84NX9tvdbVfq4Bjra1/6384ZmowLAbmL04RLVZ/L16cMzoYbar8iuF/wm/ljgr+dSe2H+adlo6a756H2Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSxwqchC1EgESB3qZ0Bbq+XBlnAH8NTogdlv76zw6EAgUuvRIS8mR85sziY1c4HvuWU+ccIkEDprnNqv6vCdi0rL6d6ZegmMlj28z07ZyXGVgAGPrFXA4MXXM5j8FlXGAmqrplmLmMachfzzScQs7JmVnLtj907QUiLqGlS1bumo99xp0kbFWPI+YEmFPuMDwG7gjidOt3t470dHDKSa9VliyTgFFtJEToIESyHhDwfZIlwRhV0JZPxeNOlw4ZFnEEq5ger+qrvbPZLDvLZYNoiCzDMJBRRtLH43R4rtfO0s3guWwQLNcNzAJGCfbpF1ak7kCMAk+r+8MgomI0PgBtItNQ0BmYkwwx8+xcR98BEnYnIm2RjDjO8BE2U7AODCACRkB77rhV/fy0Di739iLM+CCIxnxn/TtKwKbgByF4GZ5mlrI7HXFPuWoVII7LiB9zOoV7NSYhJsC1xwgGdH5LuRw+j2tJ+7U5TycMyG9aUkGbPCVttKcyTToELv5PvzZ7tUR5wX4MteHrDN2I4Rvlg9FtfXQzWXASkfbDu/VUTShsOi9JrVu9Wu8O6nquVpvqfyJz+vr63sGu+/U8KuD5rH/5Vp6FonVx4b7nKX58Qa+iex0HaIRb13ZwP7p4tntf3c7lU/+qPyT/mPe5TxeR1/ZZ7tOfYni4joeTDhQfHpufJT5suG+997ZpXYnrh6eXnrj5LM/b721itQzX67FH6JTQYnFxF7YvnruNr9Lnx8J6Gn+cdcp5yzUKk/w0f91/DF/8nF39zmkzh21jKgfduP8HiEiXajTcpnYl+4XFcWlRFioPQ+LqhEqfuAAm9JrapWTFiaX4UM+RzVyuW3bRbNjlnG22igWrfNky8oZ5ZdSNUrlcbFl2qj9LFjsUGwEbUBVLKexyfo4TJGOHA/MgykyDmIyA60cQm1hgzWUdeTACxqEXSAWvN0qtQj1fMC6bjXyx0bhqGmWz0Wq1LsvlZsMq6dp9IB7YQ1QfCIi21Tu3pd4dIDSkoCRezTmXg86FLMkET2Phm9kpzjKI5SUQKR12rLxdQJyOQx8UYTQOvNiHbDgKkwIhvvy3MpjwxEo5CYNIYD85hQeT3P2W1kP6eFQ5cJXRJciewp7LyErTOZx2cTPtFL4ee1QdNllcEVGyZLL96Xtm1LCsB2adF+Fmyn295ZcQewDQEX5otzTreN6UbkRPL1h5Z0hVqaXtneDsJBtPp3HS0JJSzEjCIxMZJdQFEkvZW/SCT2BoDYFOunHWrHcir+3b/GIxYl2BBYzl+GnJ8oTnRhe4em648vjMT33LbIWUdRMwF/tsDV++ShTjow8X4hDlJ82P8m8WRN53u/ZgbcSReco3hqBsqFbqflkcmA0SSFgqBTGINsH3AewLvm1cF3nNRchp6scCDn/RlNJVdUxIEDPhNvXEsKm+CU+xCMH5dvoBkyj86sqe84NX9tvdbVfq4Bjra1/6384ZmowLAbmL04RLVZ/L16cMzoYbar8iuF/wm/ljgr+dSe2H+adlo6a756H2Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxVyhUBUkLiEOenltIdLp+3LyDgG3CY2tZ0U+vVjh4YChU47EhLyzvbaa1+87HMO0sQJ2pwjJjAlWtRr6v9U7QaAIPaNmu05hhd7wACuhQx3ClzPdxqW51i6FnGeoYhwAYho6o5lu4Ztyd/ItoKqG7hOpd7wHnXtDjEuoaVLRe5apgnhQRG2qWeMBBRwzAMCUsQDAYNh+/oqkJ4BKDnprfM1yyIga82FWASmCSsxgihJYAXS1Dw3d3zOYx4M8YwAkTH0HjPmTf197+vra+XVrVA2Mx3LskyrYUqfmOPZqd46KTejOCJTul53AaEEQ5DgN6BIXSMxp7HWTmaUYTFPj0Dbpm0paAMtoQFtj5zq5keAgt03kXZIMg4MPgd2CTZAU8QQgUgbD6Kmfvq9Dq73jhggfEpZyvfWP6OESI4SukCxwcvMSnbfRzxQrtY5gkFEYJJxnKPfakwWACKu3TI0xcsrzOXwxVwr2q8teTlhCP6kJefmNk9J2zxQmR6eIS7+T7+2e7VGuQNJhloAdu8u7Jpvk7OzuXBvUBqKLuVsUgubBYVt5zWpTavf1/uDupmr903kT/+yf++xVX/UBZPu09mDXfsVj26j4W1n3Enc0XiCLx5eV6M+c/M/f3XGQ9v75d907gWs0cd2OEj+fqqnnF7yG3hyv2LVWFwm/B6O67fpmX8xX42yh/whnk4uhyTNRXz21PXZsxiOUDsbVKnpvrl37pyP/eTRvrCfnh/x4OUyql/nJ6w9odVl+MChGbLe2+OqHTU/ctrOYddYysEwmzwhKMqlGo2op/Vlv4D4WlqUBcfGtHANFkqfuEBE6C21S8lKkEnxwXEgm7leh/Wa3a033LrjWlWn0Qktz7L7VtvyG41a6NRL/Vmz2KPYpWSKVSylsOv5+ZogTAOOSIyYkdMMzhHXv0DsAQG0iAzkwaCEoxGVCu6HNd/q2WHPsht2p1bthlWv74ZdqxFWGx2/p2u/qbghN6w9FYjtqre7o94DBPECIyXxas65HHQuZEleQJ6JxK7koEJQJi8BpnQ4cLx61eQ4XSRIETZTGmcJqizmi6JAJl//OwaAvLBiDheUCZAUp/BokvvfynpInxgrB64y6iDZU3TgMnLKdI6nXdtOu4RvZzFWh00WVzAM10x2P33MjBqWzcBs8oLcLrlvtvwQ4gCA+QU/c780m3hxjreilxesvDOkqrTK9r6Ayksly/OsaKivFJNJeNM2Ld8cIphJ2VuN6DMi5gbC/NaNs2G9F3lj3+WXiTkZCiBQKsdPK5bfeG4MEVfPjUgen+V33zI7IWXdBFqKQ7ZuIl8livGXDxcYQOUnzbfy75Wy+KNdB7C24sg85RtDYDJTK3W/rI7MBqQSFktBpGwb/BDAoeC7xk2RN1yEnKZJJtDxL5pSuqYOIKQZEZFSFGnYVt+Cp1gtUPDh9AmmUPj3K3vJj17Z99dXQ6mDKdA3vvi/nQ1cjAtEchfHBZemvpSvTxmczLbU/p3gQcG3e95Xgr+bSeuT+bNlq6b756H1Lw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SG5fSEWYKqKeKbhS3ex9fzsR0AdE2qUkK6K8/SbEIiB49M8wwWV351rcu+ZIjgbLUCyMhgEvCqBEPOuY/TaeF6z74VmOCGlbdb7hWgMGx2jDBbitpQd1pmkYsRAExFRJR2TE9x/Ut11G/G9cJG37oN2r1ILgzjVvgQkErl5pjGssspSIsw3bMgtOQIUFESFEGIpQ4HEcXw1B5hqjiZHaPVizLgLw7kzIPbRvXEsCQpriGWWYf2Vs+R4kIx2RKkSw4vMZMRMd83btYLGoLv8b41PYcx7Gdtq18EkGmB2b3R7UZkphO2GrdR5RRglFKXpAmdQFyxhIjSqeMEznLPoB2bdfR0BYssYXdOj0w7bcAJbsvIm2R5AJZYobcCuwaJsCBYjB+Xccd8+BrHVztveGIignjmdhZf48S0DmkLIfEElVmFbuvI+4pV/cIcBhTnBaCzOFSj0mOMAhjxGFClkMi1PAlwijbbyxFNWGAv9OSI3uTp6Jt76nMgExByP/Tr81erVBuUVpA17m7uuWXv85G+MIlg6w3n4wFuP7dJVl0SgqbzitS61a/rncHdT1Xr5twPi/yRtZkN48DMcIFS1iAYDxGT+mw/dDMG4NsLqI/9DQ7D8YsODv+PTp9dBdXmCwu2tP44WV4fxWdn14+sGD5gxYM8SzOm749jM8XMPnbK+oNO0LSecEBxSOMRfP5Eegpj+KH2D38fXZOeiNY9k6uDp+vZ4/P08MxT0973unVDzcZtJcQ9S5vZ+Sv/h1etIPOW06bOWwbKzkYF/cPgGW11KMRD4wT1S8kP5cWbSGJNSldw1zrk5BApdnVu7SshIUSH5KEqpmr9XHQdPtB2w+8ZtTw2r1jp+64J07ktNrt5rEXVPqzYrFDsc/ohOhYWmFX8/M5QZyFAmgC3JqzAs9AmJ8gDpBERkyv1cFgVMANUwre6DVPgqDu9/tOXVE9HvheK2r1G23P9VwnGJjGJZM/6U8eTSTwbfX2t9T7GjDJCWiJ13Mu1KALqUryhOaFTN3aHNUoFOoS4FqHQ68eNGxBsjwFTdjOWFKkUMtneVkgW6z+PQthUVqJwDnjEqXlKfwwyd1vVT2UT0K0g9AZ9UD1FPZcRl6Vzru063svrQo+KhKiD5sqruQEr5hsf3qbGT0s64FZ54WFW3Ffb/kmxB4A+xN+9m5p1vGSOdmIXl2w6s5QqtKt2vuEak+1Yj4vyoa2tGJyBW+7ttOyx4ALJXvPN0ydcnsNYX/pxlmz3om8tm/zK+SMjiWSkKnxM8rlF54bYxD6uRGr47P86ltmK6Sqm4Sl3Gfrp+pVohl/+nDBIdZ+yjxSfwvGk7d27cHaiKPyVG8MSehUr/T98vzBbGCmYIkSRMY3wfcB7Au+bVwXec1Fqmm6LyR8/MXQStcxEcasoDLWiqIMm+pb8pTPOYRvTu9gSoV/vbKX4sMr+8/FcKx0MEPm2pf8t7NFynHBoHYJUnLpmEv1+lTB6XRD7V8J7hV8d1D/TPC3M+m+M7+3bNR09zx0/wU=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065330</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065332</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89381E7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8938231529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C893826B529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_FUNC_CHILD_SAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="d2e27260-f3e9-43cc-a4c2-1ed6cc9c0d9d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89382D2529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5D74A1FAE0401F0A059945B1:19F93AD1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C89382C0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C89382C0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C89382C0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89382D2529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5D3FA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5D79A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89382D2529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5D3FA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5D79A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcZyNfABtPYIZwOXELKQ2ENnk5o8gyKLVlI8lg8vWVTEyAkpzkzDDDaHtr7bUvWtIlh0ls+13OMRMkpVrQb+v/eshroJaFjabdcI16K7IMaFp1w2madceBkWN5oa4FnOc4oFxAKtq6bVqOYZnyN7NMv+H4jluzPftB1+aYcQktXWqmrhVJTLlfhm3rOaN+CjnhPoUJ5r5A/rQ7HvnS04cVJ71zuWNZBmSdpRCZDwCqhRjhOEY1lCbgEhz5XIbcn5IFhSJn+CVmyNv6y97NZlPbOLWULYBtmiYwW0D6hJwsvuidi2ozDgMapbt1D9KUEgRj8gwVqTEWyzTUuvEiZUQskzegLWCZCtrABTKQVadfdPAaoGT3QaQjkoxDgy+hVYHd4ggzTBHW7m6Dtv7lYx3c7Z0xSHmUsoSfrD9HCdM1jtMMhwavMqvYfRzxTLk6lxj5AUVxzska36gxySDCXJswHJFiRLgcvpBrZfu1glcThtFnWnIJDnlK2uBMZfpkgbn4P/067NUOZQ7jHHd+/ppPhrFIvM3d9d02yeNoedV3g/xpvGiXFA6dd6T2rX5Znw7qfq5eNs1G7OGpP743+U24pNdwA+fPD91rO5uaaGDze4t/+1E8Rf+MGqL79f7hftxbzR/F8BvIirvkprjrsW20XbcmNwjgi+vl49ob09m8y39eDUa31vCBOVfP6fP9cOJs5yu+9foZ+r4ar55/uPGk/0h/zyeMBHGwKFqP42gAfhf519F8uK67Fz8m1vXXdc/NG2DWh8ve/aLbfs3pMIdjYyUH0/zxCSNRLdVoBH1tKPsFxfvSoiwkNKLS1c+UPnGBqdA7apeSFT+X4kNCXzZztx54TavntRzP7tsNu3U1MOumNTS7pttqNQe2V+nPjsUJxV5KI6JiKYXdzc/7BFHic0xDzIx1mqMl5vo7iH0ooBbQW3kwUsrxLJUK3ug1hoO+2/TMZsNqufWh6w4aTmtYN4f15vCqoWs3qfhOv7NuJDA7Vm/nSL1vMSIZwUri1ZxzOehcyJKs4DoXsVVbwxrFubwEmNJh3657DcBJksVYEQZJGuYxrmXLrCwQ4Lt/24CIl1bCUZYyAePyFL6Z5Om3qh7SJyTKgauMrrDsKT5zGdlVOm+n3TxMu4Lv5iFRh00WVzCCdkyOP73OjBqW/cDs80Lcqrjvt3wS4gwAeIcfOC3NPl64JgfRqwtW3hlSVTpVe1ewtqrl63VeNtRViskkPLCA6YIpRrmUve0s/Y0p2EOAD904e9Ynkff2Y365WNKpgAIncvy0cvmB58YUc/XcCOTxKT76ljkKKesmcCHO2XqxfJUoxu8+XJCPlJ80T+TfJmWviZ/DOogj85RvDEHoQq3U/bJ9YzZQKmGJFMSUHYKfAzgX/Ni4L/Kei5DT9JgL/PYXTSldW4cIpTkVQV8vDYfqW/IU2wz7r05/wZQK/3JlF/zNK/vXeDSVOphAfe9L/tvZIOW4ICx3cVJyaeuFfH3K4HRxoPYvBM8Lfs98T/CPM+n8Zf7bclDT0/PQ+QM=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcZyNfABtPYIZwOXELKQ2ENnk5o8gyKLVlI8lg8vWVTEyAkpzkzDDDaHtr7bUvWtIlh0ls+13OMRMkpVrQb+v/eshroJaFjabdcI16K7IMaFp1w2madceBkWN5oa4FnOc4oFxAKtq6bVqOYZnyN7NMv+H4jluzPftB1+aYcQktXWqmrhVJTLlfhm3rOaN+CjnhPoUJ5r5A/rQ7HvnS04cVJ71zuWNZBmSdpRCZDwCqhRjhOEY1lCbgEhz5XIbcn5IFhSJn+CVmyNv6y97NZlPbOLWULYBtmiYwW0D6hJwsvuidi2ozDgMapbt1D9KUEgRj8gwVqTEWyzTUuvEiZUQskzegLWCZCtrABTKQVadfdPAaoGT3QaQjkoxDgy+hVYHd4ggzTBHW7m6Dtv7lYx3c7Z0xSHmUsoSfrD9HCdM1jtMMhwavMqvYfRzxTLk6lxj5AUVxzska36gxySDCXJswHJFiRLgcvpBrZfu1glcThtFnWnIJDnlK2uBMZfpkgbn4P/067NUOZQ7jHHd+/ppPhrFIvM3d9d02yeNoedV3g/xpvGiXFA6dd6T2rX5Znw7qfq5eNs1G7OGpP743+U24pNdwA+fPD91rO5uaaGDze4t/+1E8Rf+MGqL79f7hftxbzR/F8BvIirvkprjrsW20XbcmNwjgi+vl49ob09m8y39eDUa31vCBOVfP6fP9cOJs5yu+9foZ+r4ar55/uPGk/0h/zyeMBHGwKFqP42gAfhf519F8uK67Fz8m1vXXdc/NG2DWh8ve/aLbfs3pMIdjYyUH0/zxCSNRLdVoBH1tKPsFxfvSoiwkNKLS1c+UPnGBqdA7apeSFT+X4kNCXzZztx54TavntRzP7tsNu3U1MOumNTS7pttqNQe2V+nPjsUJxV5KI6JiKYXdzc/7BFHic0xDzIx1mqMl5vo7iH0ooBbQW3kwUsrxLJUK3ug1hoO+2/TMZsNqufWh6w4aTmtYN4f15vCqoWs3qfhOv7NuJDA7Vm/nSL1vMSIZwUri1ZxzOehcyJKs4DoXsVVbwxrFubwEmNJh3657DcBJksVYEQZJGuYxrmXLrCwQ4Lt/24CIl1bCUZYyAePyFL6Z5Om3qh7SJyTKgauMrrDsKT5zGdlVOm+n3TxMu4Lv5iFRh00WVzCCdkyOP73OjBqW/cDs80Lcqrjvt3wS4gwAeIcfOC3NPl64JgfRqwtW3hlSVTpVe1ewtqrl63VeNtRViskkPLCA6YIpRrmUve0s/Y0p2EOAD904e9Ynkff2Y365WNKpgAIncvy0cvmB58YUc/XcCOTxKT76ljkKKesmcCHO2XqxfJUoxu8+XJCPlJ80T+TfJmWviZ/DOogj85RvDEHoQq3U/bJ9YzZQKmGJFMSUHYKfAzgX/Ni4L/Kei5DT9JgL/PYXTSldW4cIpTkVQV8vDYfqW/IU2wz7r05/wZQK/3JlF/zNK/vXeDSVOphAfe9L/tvZIOW4ICx3cVJyaeuFfH3K4HRxoPYvBM8Lfs98T/CPM+n8Zf7bclDT0/PQ+QM=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6PgfBBCooIUAsxmpjAtMDPdvqyMY8AlsSF2gPbXrxOaFCjt0pWQkG+uzz33w8e+5jCJTc/nHKeCMKqE3Zb6z9TB06lhRxq0I6jVpzbWmmbkaM7UqjeNpmVOZ3VVCTnPcEi5gFS0VFM3LM3Q5W9i6J5teZZbqzvOg6r8ximX0NKlpqvKLokp94qwLTVLqccgJ9yjMMHcE8gb+4MbT3p6sOSktq/3LIuAaXshxMoDANUijHAcoxpiCbgGRz7XEffGZE6hyFL8EjPiLfVl73a7rW2tGkvnwNR1HegukD4RJ/Mvavuq3IyjkM7Yfh1AyihBMCbPMCc1wGLBIsWP5ywlYpG8A20AQ8+hNbxDGjLq9IsKXgMU7C5EOiKZcqjxBTRKsBGe4RRThJVfo7Clfrmsg/u9kxRSPmNpwk/Wn6OE6QbHbIUjjZeZlewuRzxTrvY1Rl5IUZxxssHDfExWEGGu3KZ4RnY3hMvhi7hStF/Z8XLCMPpMS67BIU9JG5ypTJfMMRf/p1+Hvdqj/IZxhtvJ8zBcI2xjf/DoN4w+sr9F9efwrxubtQoKh857UlWrX9ang1rN1cum20005V3XvOMhCX/dE2e6IzvBWLSeNdzGaJatHGD3B6TxuEz0bMiF/2c78SfGA9gOh78fGw+jYcO+2QS76HtwlYX3cH037/gj3VoswbR3639dJ9aSdcPHpVgG+gZ/W+yYv3wgcGmZG95gf2ZgdruMf9p8+8u4e/77O6ivwSTV06sH6DqDyX36QwzA3QD2vtabrdecDnM4NpZyMM6mjxiJcpmPRthV+rJfUHwsLbmFRNqscPVWuT5xgalQ2/muXFa8TIoPiTzZzP2612wYgRN07K7V942+39PrutHXfd123brdMUr92bM4oRgwOiN5rFxh9/PzMUGUeBzTCKfahmVogbn6AWIXCqiEdCQPBqMcT5hUcMftB/1+r69bgdPvuJ2g13W6DcOtB7obWG5HVYZM/KQ/U38mcHqs3taReo8wIiuCc4nP55zLQedClmQNN5mIjdoG1ijO5CWQ5jrsmfWmDThJVjHOCYOERVmMa6vFqigQ4Pt/U4OIF1bC0YqlAsbFKXw3ydNvZT2kT0RyB55n1MGyp/jMZWSW6byfduMw7RLezyKSHzZZXJEStGdy/Ol1ZvJhqQamygvxajiqLZ+EOAMAPuAHTktTxYs25CB6ecHKO0OqSrts7xrW1rVss8mKhjq5YqYSHhhAd8AYo0zK3tOELTEFFQS46MapWJ9EruzH/DKxoGMBBU7k+CnF8oLnxhjz/LkRyuOzu/QtcxRS1k3gnThnC2L5KskZf/hwQR7K/aT5Vv5tWRq9tusM1kEcmad8YwhC5/kqv1+e3pkNxCQskYLI0kPwcwDngh8bqyJXXIScpmkm8PtflFzpWipEiGVUhF21MByqb8FTPK2w9+r0BqZQ+Jcre8ffvbLvBzdjqYMJVCtf8t/OGinGBWG5i5OCS0vdydenDE7nB2r/QvCN4Dddq2kGum26nUrwHddt9MxmVcCjTNpvzG8tBzU9PQ/tfwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6OQD0JIooIUSClMKcxA2+32ZeU6F3BJHBo7QOfXrx2aFCjtdlZCQr65PvfcDx/7nKEktvyAMcg4SakyCFvqP87jrA62izTbaM40O3Kamms3bc1z3UbdfbQ9p4FUZcBYDgPKOKK8pVqGWddMQ/xuTMNv1H3bqjmu86Aqd5AxAS1caoaqbJOYMr8I21LzjPopYoT5FCXAfI79aXA99IWnj0pOavt8x7IImLUXnK98Xce1CDDEMa7hNNHP9QOf84j5UzKniOcZvMaMWEt93bvZbGqbei3N5rplGIZueLrwiRiZn6ntb+VmiAZ0lu7WXURTSjCKyW8kSV0DX6SREsTzNCN8kXwAbeqmIaE12GINmzY9U/W3AAW7LyIdkMwY0tgCmSXYBGaQAcWg3E4GLfXsax3c7b3JEGWzNEvY0frPKAFdQ5yuINJYmVnJ7uuIJ8rVPgfsDyiOc0bWMJJjskIYmPIzgxnZDgkTwxcxpWi/smXlhAH+k5ac6/s8BW39RGVCMgfG/0+/9nu1Q7lDcQ7t714+uh/3LxL9+m/Xup10M8DLn7fb8WXQKijsO+9IVa1+XR8PajVXr5vuc5t2otF94tn9p862P78PEUlnoylebceL5ff0rwbvI+PeW8bh3frK7f5w7YermWcuRsb0CTXoFG7Gy/BymBg/voXj7tIhwz4YDnOtyys2fnh20ObCvX1aT7LtxnkkZGr0e+GgO5pvNg9odBPfoWvPHfyyeN966ZPvw7odG8FdffJtiS9f4mf7l9APHISA1wy33nLaz+HQWMrBNH98AszLpRyNQaj0RL8Q/1xapIVE2qxw9VdSnxgHytW23CVlxc+F+JDIF83crS9cx+w2u51G2PQCsxdcGLZh9ozAaHie3eiYpf7sWBxR7KZ0RmQsqbC7+fmcIE58BjSCTFunOV4AUz9BDBFHyoBOxMFIKYObVCq444ZO4Nim1w2tRtAJe5Zp9C68pu0aXrNnqcoo5WM6zoIZh+xQvesH6j0BTFYEpMTLOWdi0BkXJXlG65zHZm2NahRycQlkUod9y3YbOiPJKgZJWE/SKI+htlqsigLpbPdvaQizwkoYXqUZR3FxCj9M8vhbWQ/hExHpwGRGHRA9hROXUb1M513a9slLq4QP8ojIwyaKyzOCd0wOP73NjByWamCqvDCrhqPa8ocQJwD0T/jpx6Wp4kVrshe9vGDFnSFUpV229xnVnmv5ep0XDW1KxcwEvG7qRlOfAs6F7L3cpEugegWhf+nGqVgfRa7sh/xyvqBTjjgkYvyUYvmF58YUmHxuDMTx2X71LXMQUtSNw5afsnVj8SqRjD99uGAfSz9h/in+NmkWvbXrBNZeHJGneGNwQudyJe+Xlw9mA6cClghBTLN98FMAp4IfGqsiV1y4mKbHnMPHXxSpdC0VYZzmlA9CtTDsq2/Bk7+swH9zegdTKPzrlb1lH17Z99fDqdDBBKmVL/lvZ40U44JB7GKk4NJSt+L1KYLT+Z7avxJ8J/iuV3etrtGwvE4l+E3Pcy4styrgQSbtd+b3lr2aHp+H9r8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065336</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065338</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89382D3529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5D40A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5D7AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_FUNC_CHILD_SAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="7e71a5cf-bb29-47e9-81b6-d222214c8418"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861D0C7DB9854F7E0401F0A079904B3</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D0D0FBC211A5E0401F0A059963DC:1CBDE93E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0C0BF5D6FFEE0401F0A059963C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0C0BF5D6FFEE0401F0A059963C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0C0BF5D6FFEE0401F0A059963C1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0C7DB9854F7E0401F0A079904B3</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D0D0FB8D11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D0D0FBC711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0C7DB9854F7E0401F0A079904B3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FB8D11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FBC711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyokDoFcVJC4lGk6FJim95cj19mA2+CksQO0X3+c0KTA0J7OkZCQd7bXXvviZZ9wvIhMr8M5pILGTPH7LfWfpoVQSB7rGjZdolmu42qO3UCaMwXUANOxbNNUFZ/zDHzGBWaipZoGqmvIkL8rZHiNumdZNce0HlTlBlIuoaVLzVCV9SJi3CvCttQsZV6MOeUewwvgniBe0LkYetLTwyUntX2yYVkETNtzIRJP10ktBAJRRGokXugn+o7PSci9gM4YFlkK7zFD3lLf965Wq9qqXovTmW4ahqEbri59Qk5nR2r7R7kZQp9N4826h1nMKMERfcM5qQsQ8zhUOtEsTqmYLz6BRjoycmgN1kQjyGJHqv4RoGD3TaQdkinHGp9jVIJdwhRSYASU60u/pR59r4ObvVcpZnwapwu+t/47SsCWEMUJhBovMyvZfR/xQLnaJ0A8n5Eo43QJo3xMEkyAK5MUpnQ9pFwOX8iVov3KmpcTBuRvWnKib/OUtPUDlenTGXDxf/q13asNyg2OMmiPzpq/z+Z8hIPj3uOzfmPz0SSeoTEX162CwrbzhlTV6vf1/qBWc/W+iXf86YrPnla35wSmP1fWS7f3az28jWxqjm4mF8FPlLHh23IY2G/nr9f4FqHjs3G/2X1jg9HxYEUNk5/ds4e70dnPH/rl8H6tHz/gHnoexrR+PrDCZNI5Zv35fXTeNV/EeNRJ3OvJ7a/V89MgbbKH353zuxSv1kH0FpwmyLmcjP007Dn4BwQ3b5bbOL8Y3zGOiE+p3/rIaTuHXWMpB0H2+ARElMt8NPy+MpD9wuJracktNNSmhauX5PrEBTChtvNduax4mRQfGnqymZv1qdNEfaNn97uu07AG9qlhGWhgdAzbdQ2rWy/1Z8Nij2IvZlOax8oVdjM/XxMkC48DCyHVlnFG5sDVLxD7WGDFZ5fyYMSMw1UsFbzfMbu2Y/eQ2zOtLnJQ3bUlXadrOc1uo95TlVEsxmycdqYC0l31ru+o9yUQmlDIJT6fcy4HnQtZkhe8zESEaktcY5DJSyDNddgzLaehc7pIIsgJ64s4zCKoJfOkKJDON/+mhgkvrJSTJE4FjopT+GmS+9/KekifkOYOPM+oC7KncOAyqpfpfJ52czvtEr6ThTQ/bLK4IqVkw2T308fM5MNSDUyVF+Go5F5t+UuIAwD6F/z0/dJU8cIl3YpeXrDyzpCq0i7b+4JrL7VsucyKhtq5YqYSXke6YesBkEzK3utV/AxMryD0b904Feu9yJV9l18m5iwQWMBCjp9SLL/x3AiA588NXx6f9XffMjshZd0ErMUhWy+Sr5Kc8ZcPF+KR3E+aJ/JvFafhR7sOYG3FkXnKN4agbJav8vvl9ZPZILGEpVIQ43Qb/BDAoeC7xqrIFRchp+kxE/D5FyVXupaKCYkzJvy+Whi21bfgKV4T8D6c/oApFP79yl7zT6/su4thIHVwgdXKl/63s0aLcSEgd3FacGmpa/n6lMHZbEvt3wkeEHyjO2j0m4PBaSX4Dddt1nsfR3Ink/Yf5j8tWzXdPw/tfwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyokDoFcVJC4lGk6FJim95cj19mA2+CksQO0X3+c0KTA0J7OkZCQd7bXXvviZZ9wvIhMr8M5pILGTPH7LfWfpoVQSB7rGjZdolmu42qO3UCaMwXUANOxbNNUFZ/zDHzGBWaipZoGqmvIkL8rZHiNumdZNce0HlTlBlIuoaVLzVCV9SJi3CvCttQsZV6MOeUewwvgniBe0LkYetLTwyUntX2yYVkETNtzIRJP10ktBAJRRGokXugn+o7PSci9gM4YFlkK7zFD3lLf965Wq9qqXovTmW4ahqEbri59Qk5nR2r7R7kZQp9N4826h1nMKMERfcM5qQsQ8zhUOtEsTqmYLz6BRjoycmgN1kQjyGJHqv4RoGD3TaQdkinHGp9jVIJdwhRSYASU60u/pR59r4ObvVcpZnwapwu+t/47SsCWEMUJhBovMyvZfR/xQLnaJ0A8n5Eo43QJo3xMEkyAK5MUpnQ9pFwOX8iVov3KmpcTBuRvWnKib/OUtPUDlenTGXDxf/q13asNyg2OMmiPzpq/z+Z8hIPj3uOzfmPz0SSeoTEX162CwrbzhlTV6vf1/qBWc/W+iXf86YrPnla35wSmP1fWS7f3az28jWxqjm4mF8FPlLHh23IY2G/nr9f4FqHjs3G/2X1jg9HxYEUNk5/ds4e70dnPH/rl8H6tHz/gHnoexrR+PrDCZNI5Zv35fXTeNV/EeNRJ3OvJ7a/V89MgbbKH353zuxSv1kH0FpwmyLmcjP007Dn4BwQ3b5bbOL8Y3zGOiE+p3/rIaTuHXWMpB0H2+ARElMt8NPy+MpD9wuJracktNNSmhauX5PrEBTChtvNduax4mRQfGnqymZv1qdNEfaNn97uu07AG9qlhGWhgdAzbdQ2rWy/1Z8Nij2IvZlOax8oVdjM/XxMkC48DCyHVlnFG5sDVLxD7WGDFZ5fyYMSMw1UsFbzfMbu2Y/eQ2zOtLnJQ3bUlXadrOc1uo95TlVEsxmycdqYC0l31ru+o9yUQmlDIJT6fcy4HnQtZkhe8zESEaktcY5DJSyDNddgzLaehc7pIIsgJ64s4zCKoJfOkKJDON/+mhgkvrJSTJE4FjopT+GmS+9/KekifkOYOPM+oC7KncOAyqpfpfJ52czvtEr6ThTQ/bLK4IqVkw2T308fM5MNSDUyVF+Go5F5t+UuIAwD6F/z0/dJU8cIl3YpeXrDyzpCq0i7b+4JrL7VsucyKhtq5YqYSXke6YesBkEzK3utV/AxMryD0b904Feu9yJV9l18m5iwQWMBCjp9SLL/x3AiA588NXx6f9XffMjshZd0ErMUhWy+Sr5Kc8ZcPF+KR3E+aJ/JvFafhR7sOYG3FkXnKN4agbJav8vvl9ZPZILGEpVIQ43Qb/BDAoeC7xqrIFRchp+kxE/D5FyVXupaKCYkzJvy+Whi21bfgKV4T8D6c/oApFP79yl7zT6/su4thIHVwgdXKl/63s0aLcSEgd3FacGmpa/n6lMHZbEvt3wkeEHyjO2j0m4PBaSX4Dddt1nsfR3Ink/Yf5j8tWzXdPw/tfwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jx0j37h5AjOAoXVzIQtZmvZlR0gyVrAlYslA+utXMjEBQrLpzjDD6PjoO9+56JMuBMxSN+gJQXJJOTOisGP+gxGxPR97ll8nvuX7dsOae3ButV3cmLdbTTJ3W6YRCVGQiAkJmeyYru14lmOr351jB3Uv8Js122//Mo0ZyYWCVi412zS2WcpEUIbtmEXOAg4FFQGDGRGBRMG0d30VKM8AVpzM7sWOZRkw7yZSrgIAUA0TRNIU1RDPwAU48rnAIpjSBYOyyMlzTCw65vPezWZT23g1ni+Aa9s2sNtA+WBBF5/N7qdqM8ERi/luPYCMM4pgSn9DTeqayIRjo5cueE5lkr0B7QDH1tAW2SILOT77bIKXACW7DyIdkcwFtEQCnQpsQmKSE4aI8fck6pifP9bB3d67HDIR8zwTJ+s/o0TYmqR8RbAlqswqdh9HPFOu7gVBQcRQWgi6Jjd6TFYQEWHc5iSm2ysq1PBhYZTtN7aimjCC/qQlF+CQp6INzlQmpAsi5P/p12GvdigzmBakO/+L8j5eumSGpvn3OPvV+0r7P9m0NfY7JYVD5x2pfauf16eDup+r5014Gc1vs+XoKkl+TWwumzdfL73Y+eJjvvky36KFv8LNO+dyCWgOLsFgk3nzeLNcR2k8hKN1M3zcJNcuvh/ETw+fMgTcaHLbu6o3xrPhMFu4Kzf5/vM2gfU8ul8v06k9FZOf+Gbbn42/bR+w/zT+mg5+/74fu1ePs6EMH6/rUS8rnsDdp4dtgr8lKIQ/2rMfvB3ff9t0XnI6zOHYWMnBtJg/ECSrpR6NKDRGql9Qvi8t2kKxFZeuwUrrk5CESbOrd2lZCQolPhQHqpm79bDVcEI7tEf9Vug4vfrQ9m1nZPfservd8MJBpT87FicUB5zFVMfSCrubn/cJoiwQhGGSW2teoIQI8x3EEEpoRGyiDgZngtxxpeCe03O8uhsO+2G70Wr0hq4/HLj1tuM4g1Z/0DSNGy7HbJz3YknyY/X2jtR7QhBdUaIlXs+5UIMupCrJI1wXMnVqa1hjpFCXQK51OHD9Vh0Imq1SogmDjOMiJbVVsioLBMTu37UgEqWVCrTiuYRpeQrfTPL0W1UP5YOpdhA6oz5RPSVnLiOvSufttBuHaVfwvQJTfdhUcWVO0Y7J8aeXmdHDsh+YfV5IOBX3/ZY/hDgDAN7hB05Ls4+H1/QgenXBqjtDqUq3au8jrD3WivW6KBva1IqZK3jgALsJpgQVSvae7viSMLCHAB+6cfasTyLv7cf8CpmwqYSSZGr8jHL5gefGlAj93IjU8dl+9C1zFFLVTZKtPGcbpOpVohm/+3BBAdJ+ynyr/jY8xy/tOoN1EEflqd4YkrKFXun75emN2UBcwVIliDw/BD8HcC74sXFf5D0XqaZpXkjy9hdDK13HhAjxgskoNEvDofqWPOXTigQvTq9gSoV/vrK34s0r+/76aqp0MIPm3pf+t7NFy3FBRO0StOTSMbfq9amCs8WB2j8TfC34A7s/qoeN0Wh4LPiDlyN5lEn3lfm15aCmp+eh+y8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/bhT2lKK0BFmeCviqriCLvrlTkwPELdNsEkK+OtvUiwCote9M8wwOT15znNe8iSnHCVxOWhxDqkgjBqDbsP8B2reY21awdZjzcdWZYrAeqyCZ1WngH23OsWuj0xjwLmEAeUCUdEwy47rWa6jfmPXCXwvqNRLdbf2YBp3kHIFrVxKjmmskpjyIA/bMGVKA4Y44QFFCfBA4GDUurwIlGeACk5m83TDMg+YNudCLALbxqUIMMQxLmGW2Kf2ns9pxIMRmVEkZAqvMSPeMF/3LpfL0tIrsXRmlx3HsZ26rXwiTmbfzea3YjNEAzplm3UHUUYJRjF5QZrUJYg5i4xWPGMpEfPkA2jXdh0NbcEKW9it0O+m/RYgZ/dFpD2SKUcWnyO3ALuBKaRAMRi3N4OG+f1rHdzsHaeI8ilLE36w/jtKQDOI2QIiixeZFey+jnikXM1TwMGA4lhyksGVHpMFwsCN6xSmZHVBuBq+iBt5+40VLyYM8N+05NTe5alo20cq0yUz4OL/9Gu3VxuUOxRLaI6HbJw5yyGtVaOxvKiTq97v6GVdPeFOI6ew67whtW316/pwULdz9bqpXWePZ5O62/8x5ZfzGWT9y7OntYvvH5LR7fXaDpdXWdy5Rb2HmT/x5bPHZL/ry0kte3pYhdd/zuKzs+WP4Wry1Hv69tB/dmt2L87OL87n5/d4PArXT/NfchHSX94kkwn8Ym6r73Xbf27rtZif3/ftk5WT8uEknERueQJ3dxgP+z8nv/m3u9/nZ2kWzshSxuL69uXn/azxltNuDvvGQg5G8vEJsCiWejQGXSNU/ULic2nRFhJZ09w1WGh94gKoMJt6l5aVQCrxIVGgmrlZ92pVt+t0nbDdOXHdlt9zKo4bOi3Hr9erXrdT6M+GxQHFDqNTomNphd3Mz+cEcRJwoBGkVsYkngM3P0HsIoGMAb1RB4NRDmOmFNz3HM8L2145bCveHe+k55VbNbddrvqu45XLpnHFxJAO09ZUQLqv3t6eet8AJgsCWuL1nHM16FyokjyjTIrYLWWoREGqSyDVOhyUKzXf5iRZxKAJ2wmLZAylxXyRF8jmm/+yhTDPrYTjBUsFivNT+GGSh9+KeiifiGgHrjNqg+opHLmMvCKdd2lXjl5aBXxLRkQfNlVckRK8YbL/6W1m9LBsB2abF+ZuwX275S8hjgDYn/CzD0uzjRdlZCd6ccGqO0OpSrNo7zMqPZdklsm8oSdaMVMFb7u2c2KPAEsle+sx+wPU3kLYX7pxtqwPIm/t+/ykmNORQAISNX5GvvzCc2MEXD83Bur4rL76ltkLqeomYCWO2TqxepVoxp8+XHCAtZ8yX6u/JUujt3YdwdqJo/JUbwxB6Eyv9P2y/mA2MFOwRAkiS3fBjwEcC75v3BZ5y0WoaXqUAj7+Ymila5gIYyapGHTN3LCrvjlPsV5A8Ob0DiZX+Ncre8U/vLInlxcjpYMJMre+5L+dLZKPCwa1i5OcS8NcqdenCk5nO2r/SvC94Hecduh3q2HY2xf8ztuR3Muk+c783rJT08Pz0PwX</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065343</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065345</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0C7DB9954F7E0401F0A079904B3</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D0D0FB8E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D0D0FBC811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_FUNC_CHILD_SAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="bf62e2e3-dc13-4d88-8c77-fd101a7dd5d4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861D0D0FC2E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D0D0FCAB11A5E0401F0A059963DC:54071101"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0D0FC1C11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FC1C11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FC1C11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0D0FC2E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D0D0FC7611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D0D0FCB011A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FC2E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FC7611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FCB011A5E0401F0A059963DC</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3TqM/QCpdARZspFrR8oivqpL2diukujJalNiuCvP0mxCIgePTPMMNndWXvtS1ZyxNEssT2fc8gEYVQL+m39HztEjtt0nQq2a06lXo8eK+gxqlUs1HSisB65uBbqWsB5DgHlAlHR1m3Tkg6m/F1bpufUPMeqtmr2g67dQsYltHSpmrq2mCWUe0XYtp5n1GOIE+5RNAPuCexN/NHQk54eKjnpnaMVyyJg1omFSD3DwNUQMCQJrmI2M46MLZ+jkHsTMqVI5Bm8xwx5W3/f+/r6Wn2tVVk2NWzTNA2zZUifkJPpod45KDdDGNCIrdY9RBklGCXkDSlSIxAxCzU/mbKMiHj2BbRlWKaCrsACV7BVp4e68RGgYPdDpC2SGUcVHiOrBLuCCDKgGLSbq6CtH/6sg6u91xmiPGLZjO+sf0cJ6BwSlkJY4WVmJbufI+4pV+cIsBdQnOSczOFcjUmKMHBtnEFEFkPC5fCFXCvary14OWGAf9OSI2OTp6Rt7KlMn0yBi//Tr81erVBuUZJD5ywy+RPvxqEb1BPXTp7rd4sT5/qchqN2QWHTeUVq3er39e6grufqfdP8jfHlQ3M8Mv9Mb/jyzshvX9Fz8DJIo9rpw7x504VjhN1x6zKau6NbNvVJI41rZ1dpDJNLdnr/PJziP7fxvdm4Och9alye+28C+Sf960yEl8sxSv6Ok9AKzkaN4XLGGnkjf3L/2uMzm50+3KLh1TN58Pu5icMwiuFhGvsv9xe9m/nB28tJZNp3DZ+NnyfDpIe43/7IaTOHbWMpB5P88QmwKJdqNIK+diz7hcT30qIsJKxEhauXKn3iAqjQO2qXkhUvl+JDQk82c7UeNBtW3+ybxz17YFm+MzDrpnVs+qbTajVq/V6pPysWOxR7jEZExVIKu5qf7wnimceBhpBV5izHMXD9G8Q+EkgL6JU8GIxyuGZSwQcD27acltXq2l1n4DqtZncwqLuu1ez33W7rWNfOmbigF5kfCci21bu2pd5XgElKQEm8mnMuB50LWZIXNM9FYlXnqEohl5dApnTYs+tNx+BkliagCBszFuYJVNM4LQpk8NW/XUGYF1bCccoygZLiFH6Z5O63sh7SJyTKgauMuiB7Cnsuo3qZztdpNzbTLuH9PCTqsMniiozgFZPtTx8zo4ZlPTDrvDC3Su7rLb+E2ANgfMPP2C3NOl44JxvRywtW3hlSVTple19Q9aWaz+d50VBXKWYm4Q3LMF1jAjiXsre8Zs9AjTWE8aMbZ816J/Lavs0vFzGdCCRgJsdPK5Y/eG5MgKvnRiCPz+Knb5mtkLJuAhZin62XyFeJYvztwwV7WPlJ81j+vbLsI/F9WBtxZJ7yjSEInaqVul+WX8wGZhKWSEFk2Sb4PoB9wbeN6yKvuQg5TY+5gK+/aErp2jrCmOVUBH29MGyqb8FTLFPwPpw+wRQK/35lL/iXV/bdaDiROjhD+tqX/LdzhRTjgkHu4qTg0tYX8vUpg9Pphtq/E9wv+FbvO8HfzqTzyfzZslHT3fPQ+Rc=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3TqM/QCpdARZspFrR8oivqpL2diukujJalNiuCvP0mxCIgePTPMMNndWXvtS1ZyxNEssT2fc8gEYVQL+m39HztEjtt0nQq2a06lXo8eK+gxqlUs1HSisB65uBbqWsB5DgHlAlHR1m3Tkg6m/F1bpufUPMeqtmr2g67dQsYltHSpmrq2mCWUe0XYtp5n1GOIE+5RNAPuCexN/NHQk54eKjnpnaMVyyJg1omFSD3DwNUQMCQJrmI2M46MLZ+jkHsTMqVI5Bm8xwx5W3/f+/r6Wn2tVVk2NWzTNA2zZUifkJPpod45KDdDGNCIrdY9RBklGCXkDSlSIxAxCzU/mbKMiHj2BbRlWKaCrsACV7BVp4e68RGgYPdDpC2SGUcVHiOrBLuCCDKgGLSbq6CtH/6sg6u91xmiPGLZjO+sf0cJ6BwSlkJY4WVmJbufI+4pV+cIsBdQnOSczOFcjUmKMHBtnEFEFkPC5fCFXCvary14OWGAf9OSI2OTp6Rt7KlMn0yBi//Tr81erVBuUZJD5ywy+RPvxqEb1BPXTp7rd4sT5/qchqN2QWHTeUVq3er39e6grufqfdP8jfHlQ3M8Mv9Mb/jyzshvX9Fz8DJIo9rpw7x504VjhN1x6zKau6NbNvVJI41rZ1dpDJNLdnr/PJziP7fxvdm4Och9alye+28C+Sf960yEl8sxSv6Ok9AKzkaN4XLGGnkjf3L/2uMzm50+3KLh1TN58Pu5icMwiuFhGvsv9xe9m/nB28tJZNp3DZ+NnyfDpIe43/7IaTOHbWMpB5P88QmwKJdqNIK+diz7hcT30qIsJKxEhauXKn3iAqjQO2qXkhUvl+JDQk82c7UeNBtW3+ybxz17YFm+MzDrpnVs+qbTajVq/V6pPysWOxR7jEZExVIKu5qf7wnimceBhpBV5izHMXD9G8Q+EkgL6JU8GIxyuGZSwQcD27acltXq2l1n4DqtZncwqLuu1ez33W7rWNfOmbigF5kfCci21bu2pd5XgElKQEm8mnMuB50LWZIXNM9FYlXnqEohl5dApnTYs+tNx+BkliagCBszFuYJVNM4LQpk8NW/XUGYF1bCccoygZLiFH6Z5O63sh7SJyTKgauMuiB7Cnsuo3qZztdpNzbTLuH9PCTqsMniiozgFZPtTx8zo4ZlPTDrvDC3Su7rLb+E2ANgfMPP2C3NOl44JxvRywtW3hlSVTple19Q9aWaz+d50VBXKWYm4Q3LMF1jAjiXsre8Zs9AjTWE8aMbZ816J/Lavs0vFzGdCCRgJsdPK5Y/eG5MgKvnRiCPz+Knb5mtkLJuAhZin62XyFeJYvztwwV7WPlJ81j+vbLsI/F9WBtxZJ7yjSEInaqVul+WX8wGZhKWSEFk2Sb4PoB9wbeN6yKvuQg5TY+5gK+/aErp2jrCmOVUBH29MGyqb8FTLFPwPpw+wRQK/35lL/iXV/bdaDiROjhD+tqX/LdzhRTjgkHu4qTg0tYX8vUpg9Pphtq/E9wv+FbvO8HfzqTzyfzZslHT3fPQ+Rc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1GIE8IlUUHiUira0mmBMu28HBlnA+4kdogdoP36Y4eGAkN7OkdCQt7ZXnvti5d9LnAcuUFLCEgl5czodxvmP2SKZlPwp9a0jHzLK09dy5/6vjUliHhlUqkS4ptGX4gM+kxIzGTDdJFTthykfmMHBZWy+pXq5dov05hAKhS0cikh09jEERNBHrZhZikLOBZUBAzHIAJJglFrcBMozwAXnMzm+ZZlHjBtLqRMAtsmpRAIRBEpER7b5/aBz3koghGdMyyzFN5ihqJhvu1dr9eldbnE07ntIoRs5NvKJxR0fmY2vxWbIeyzGd+uO5hxRgmO6CvWpAYgFzw0WtGcp1Qu4g+gHdtBGtqCDbGI47Ez034PkLP7ItIByVRgSyywU4ANYQYpMALGw7DfMM++1sHt3nGKmZjxNBZH67+jBGwFEU8gtESRWcHu64gnytU8BxL0GYkyQVdwq8ckwQSEcZfCjG5uqFDDFwojb7+xEcWEAfmblpzb+zwVbftEZbp0DkL+n37t92qLMsFRBk1vOrYZWv+8//0w2GSj9Io8tZ8uxz6azBs5hX3nLaldq9/Wx4O6m6u3Ta3l1e19jCaLe5eG1fZrevP88/ukT32S4stFrRZ1QkeM/RqfPf4S1/DC8R28XCxjb5S9luu1i8t4PHm0B9XnKLn5FmUTG7vDST38NXwdVi+TuzV3H9p+ezBN2p0rf+CVs97T6s6rvV4m0XpZ4dflnvMikRj6+Mm/+s6uH1dJtdeL4/m3HvWeb+lVxW17t7NRu36zEY33nPZzODQWcjDKps9AZLHUo9HvGj3VLyw/lxZtoaE1y12DROuTkMCk2dS7tKwEmRIfGgaqmdv1Rb3qdFEX9Tq1quO0KhfIQ04PtVDF96vlbqfQny2LI4odzmZUx9IKu52fzwmSOBDAQkitFc/IAoT5CWIXS2z02VAdDM4EjLlScL9d7VVQ9cLp+l6l4164Vc9zO5163XMrPQc5pnHL5Q/2I23NJKSH6l0+UO8hEJpQ0BKv51yoQRdSlWSJV5mMnNIKlxhk6hJItQ4Hrlev2ILGSQSasB3zMIuglCySvEC22P67FiYit1JBEp5KHOWn8MMkj78V9VA+IdUOQmfUBtVTOHEZeUU6H6dd3U+7gG9lIdWHTRVXppRsmRx+ep8ZPSy7gdnlRYRTcN9t+UuIEwD2J/zs49Ls4oUruhe9uGDVnaFUpVm0d4lLy1K2WmV5Q2taMVMFbzs2qtkjIJmSvZcx/w3M3kHYX7pxdqyPIu/sh/wyuWAjiSXEavyMfPmF58YIhH5u9NXx2Xz1LXMQUtVNwkaesnUi9SrRjD99uJCAaD9lvlN/a56G7+06gbUXR+Wp3hiSsrle6fvl5YPZIFzBUiWIPN0HPwVwKvihcVfkHReppmmaSfj4i6GVrmFiQnjGZL9r5oZ99c15ypcEgnenP2ByhX+7sjfiwyv7cXAzUjoYY3PnS//b2aL5uBBQuwTNuTTMjXp9quBsvqf2bwRPC77T+UzwDzNp/mH+07JX0+Pz0PwX</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyOwExIKUUHiUtpM79B2mHk5Ms4G3CY2jR2g/fqxQ0OB0p72SEjIO9trr33xso8kSWI3aEkJqWKCW2G3Yf9bd/CIHlZIiTrVUcnDMCqNvKpbwmMfwK/VXL/m2lYoZQYhl4pw1bBd7FRKDta/WwcHfiXwq+VDXP9jW/eQSg2tXcrYtpZJzGWQh23YWcoDQSSTAScJyEDRYNC6OA+0Z0AKTnbzaMUyD5g2p0rNAoRoOQIKcUzLVCToCG35HEUyGLAJJypL4TVmJBv2697FYlFeVMoinSAXY4xwHWmfSLLJgd38UWyGKORjsVp3CBecURKzF2JIXYCaishqxRORMjVNPoB2kIMNdAmWVFfT4wc2eguQs/si0hbJVJKSnBKnAOvDGFLgFKy7ftiwD77WwdXe25RwORZpInfW36MEfA6xmEFUkkVmBbuvI+4pV/MIaBByGmeSzeHSjMmMUJDWdQpjtjxnUg9fJK28/dZSFhMG9DstOUKbPDVttKcyXTYBqf5PvzZ7tUK5J3EGzfklG/VluxKd3f3pTftXXdSiV6e93mkSNnIKm84rUutWv653B3U9V6+bSKc6/el759fDcEgEIUqcPvZH3SuxYFmi5g/9k0fhHzLwT85vn86eX9yXh4uHpHomeMh//77pYpm23HYMdXLf/3HSow+4uvxn+DO8OPbu48nlcTVaehP/evIrYU/VylWEhrMsTZ9PFy/DE1V/8bLZcyoz5/HmVFY6i8GdqN70bx4gZj9qN7fj2olLbtATWv7Khl2MG285beawbSzkYJCNHoCqYmlGI+xaPd0voj6XFmNhUWmcuwYzo09SAVd20+wyshJkWnxYFOhmrtbHtarTxV3c67Sx47T8Y+xhp4db2K/Xq5Vup9CfFYsdih3Bx8zEMgq7mp/PCdIkkMAjSEtzkdEpSPsTxC5RxAp5Xx8MwSXcCq3gbrvjVtqanVbldsWvVlz/sNbzPN/3PezXWrZ1KdQVv0pbYwXptnpXttS7D5TNGBiJN3Mu9aBLpUvyROaZip3ynJQ5ZPoSSI0OB65X85FkySwGQxglIspiKM+ms7xASK7+3RKhMrcySWciVSTOT+GHSe5+K+qhfSJmHKTJqA26p7DnMvKKdN6l7e29tAr4VhYxc9h0cVXK6IrJ9qe3mTHDsh6YdV5UOgX39ZZvQuwBQJ/wQ7ulWceL5mwjenHB6jtDq0qzaO8TKT+Vs/k8yxt6aBQz1fDIQfgQDYBmWvaeb8UjcLSGQF+6cdasdyKv7dv8MjXlA0UUJHr8rHz5hefGAKR5boT6+Cy/+pbZCqnrpmCp9tk6sX6VGMafPlxoQI2fNl/rv4VIo7d27cHaiKPz1G8MxfjErMz98vzBbFChYZkWRJFugu8D2Bd827gu8pqL0tM0yhR8/MUyStewCaUi4yrs2rlhU31znup5BsGb0zuYXOFfr+yl/PDKHl6cD7QOJsRe+7L/di6xfFwo6F2S5Vwa9lK/PnVwPtlQ+1eC+wXf6Xwm+NuZNN+Z31s2arp7Hpp/AQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065350</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065352</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0D0FC2F11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D0D0FC7711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D0D0FCB111A5E0401F0A059963DC</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_FUNC_YOUTH_BAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="bb1da092-6cd7-48f9-8cc6-3922b9b1562f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT" id="b640c33b-9694-4dec-ab58-b80de10092ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D0D0FD9411A5E0401F0A059963DC:8BAD1D40"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0D0FD0511A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FD0511A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FD0511A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0D0FD1711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D0D0FD5F11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D0D0FD9911A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FD1711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FD5F11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FD9911A5E0401F0A059963DC</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBcQgQooKUNrSbDvQGrbp9WbnOATyTOGnscJlfv3ZoKDC021kJCfnk+DvfufizTwRJE8cPhIBCsowbUdgz/8EYO57jgOXa07bluh1sdXH32Yrb2HEc3GxTD5tGJEQJEReScNkzHRs3LWyr3wTbfqvpt7yG53aeTOMBCqGglUvDNo1VmnDhV2F7ZllwPyOCCZ+TFIQvqT8ORkNfefqk5mT2TzYsq4BFfy5l7iNEGzFQSBLaoFmKTtCez0ks/DGbcSLLAl5jxqJnvu5dLpeNZbORFTPk2LaN7C5SPrFgs69m/0u9GeKIT7PN+ozwjDNKEvaLaFIjkPMsNoJklhVMztN3oDHCtoa2YEUtil3+1URvASp2n0TaI1kIYok5wTXYHUyhAE7BuL+LeubXz3Vws3dSEC6mWZGKg/WfUQK+gCTLIbZEnVnN7vOIR8rVPwHqR5wmpWALuNJjkhMKwrgpYMpWQybU8MXCqNpvrEQ9YUD/pCUnaJenoo2OVCZkMxDy//Rrt1cblAeSlNC/SNfMfURLb1UOLz3evQwLEeCXq0k061UUdp03pLatfl0fDup2rl433V070+jvsxtEXI94ZXd09rRiA1d+wyhNrn6NbrLuw/PqFE/JsNNxxg+t++/fuXt5+zS4hvUsHVzSrDODZcLx+vbLhRydTm4cr3gaT+6vBnD97eaq44Rjdn9x8WNoSy9gP+WDyIed+aUT8mb5mAwe1xd565uHg5G8jpr3j3ayOiW3Xv6lK35EQubh809A47+6SNwGvbecdnPYN9ZyMC6ffwCV9VKPRhQa56pfRH4sLdrCYmtaufq51ichgUuzr3dpWfFLJT4s9lUzN+uB18ahHdrnIe5gHLQGtmvjczuwW91uuxme1fqzYXFA8SzjU6ZjaYXdzM/HBGnqC+AxFNYiK+kchPkBYkgkMSJ+pw5GxgVMMqXgzebgvHWK7W7oDdoDz3MxdlvhYBDauBMEdsc0rjJ5za+LYCqh2Ffv5p563wFlOQMt8XrOhRp0IVVJXsiilAluLEiDQ6kugULrsO+4XgsJluYJaMIozeIygUY+z6sCIbH5dyxCRWVlguZZIUlSncJ3kzz8VtdD+cRMOwid0SmonsKRy8it03k/7fZu2jV8UMZMHzZVXFkwumGy/+ltZvSwbAdmmxcVuOa+3fKHEEcA0Af80GFptvHiBduJXl+w6s5QqtKv2/tCGi+NcrEoq4Z2tGIWCh5hZHfQGGipZG89yX4CR1sI9KkbZ8v6IPLWvs+vlHM+lkRCqsbPqJafeG6MQejnRqSOz+qzb5m9kKpuElbymO0sUa8SzfjDhwv1qfZT5hv1t8yK+K1dR7B24qg81RtDMj7TK32/rN+ZDZopWKYEMSt2wY8BHAu+b9wWectFqml6LiW8/8XQStczCaVZyWUUmpVhV30rnnKdg//m9BtMpfCvV/ZKvHtlP46GY6WDKTG3vuy/nS1WjQsFtUuwikvPXKnXpwrOZztq/0rwuODbrY8Efz+T/m/m3y07NT08D/1/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBcQgQooKUNrSbDvQGrbp9WbnOATyTOGnscJlfv3ZoKDC021kJCfnk+DvfufizTwRJE8cPhIBCsowbUdgz/8EYO57jgOXa07bluh1sdXH32Yrb2HEc3GxTD5tGJEQJEReScNkzHRs3LWyr3wTbfqvpt7yG53aeTOMBCqGglUvDNo1VmnDhV2F7ZllwPyOCCZ+TFIQvqT8ORkNfefqk5mT2TzYsq4BFfy5l7iNEGzFQSBLaoFmKTtCez0ks/DGbcSLLAl5jxqJnvu5dLpeNZbORFTPk2LaN7C5SPrFgs69m/0u9GeKIT7PN+ozwjDNKEvaLaFIjkPMsNoJklhVMztN3oDHCtoa2YEUtil3+1URvASp2n0TaI1kIYok5wTXYHUyhAE7BuL+LeubXz3Vws3dSEC6mWZGKg/WfUQK+gCTLIbZEnVnN7vOIR8rVPwHqR5wmpWALuNJjkhMKwrgpYMpWQybU8MXCqNpvrEQ9YUD/pCUnaJenoo2OVCZkMxDy//Rrt1cblAeSlNC/SNfMfURLb1UOLz3evQwLEeCXq0k061UUdp03pLatfl0fDup2rl433V070+jvsxtEXI94ZXd09rRiA1d+wyhNrn6NbrLuw/PqFE/JsNNxxg+t++/fuXt5+zS4hvUsHVzSrDODZcLx+vbLhRydTm4cr3gaT+6vBnD97eaq44Rjdn9x8WNoSy9gP+WDyIed+aUT8mb5mAwe1xd565uHg5G8jpr3j3ayOiW3Xv6lK35EQubh809A47+6SNwGvbecdnPYN9ZyMC6ffwCV9VKPRhQa56pfRH4sLdrCYmtaufq51ichgUuzr3dpWfFLJT4s9lUzN+uB18ahHdrnIe5gHLQGtmvjczuwW91uuxme1fqzYXFA8SzjU6ZjaYXdzM/HBGnqC+AxFNYiK+kchPkBYkgkMSJ+pw5GxgVMMqXgzebgvHWK7W7oDdoDz3MxdlvhYBDauBMEdsc0rjJ5za+LYCqh2Ffv5p563wFlOQMt8XrOhRp0IVVJXsiilAluLEiDQ6kugULrsO+4XgsJluYJaMIozeIygUY+z6sCIbH5dyxCRWVlguZZIUlSncJ3kzz8VtdD+cRMOwid0SmonsKRy8it03k/7fZu2jV8UMZMHzZVXFkwumGy/+ltZvSwbAdmmxcVuOa+3fKHEEcA0Af80GFptvHiBduJXl+w6s5QqtKv2/tCGi+NcrEoq4Z2tGIWCh5hZHfQGGipZG89yX4CR1sI9KkbZ8v6IPLWvs+vlHM+lkRCqsbPqJafeG6MQejnRqSOz+qzb5m9kKpuElbymO0sUa8SzfjDhwv1qfZT5hv1t8yK+K1dR7B24qg81RtDMj7TK32/rN+ZDZopWKYEMSt2wY8BHAu+b9wWectFqml6LiW8/8XQStczCaVZyWUUmpVhV30rnnKdg//m9BtMpfCvV/ZKvHtlP46GY6WDKTG3vuy/nS1WjQsFtUuwikvPXKnXpwrOZztq/0rwuODbrY8Efz+T/m/m3y07NT08D/1/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tq452SlC+hI8wUEA8qooAcjy93QppCrm0CSUrRX3+TYhEQvXpnmGGyu7P22h9ZyblEcVT0fCmJUJQzq9dp2H+fVch06tbKzrRWRU4ZwZJTL9XqDqxWK2Vcc6vhdGpbPSkT0mNSIaYadhG6JceF+jd2oVcpexAWzsrwybYmREgNrV0K0LbWccSkl4Vt2IlgHkeSSo+hmEhPYW/k92887emhnJPdPN+wzAKK5lyphQcALgQEkyjCBcxjcA72fM4D6Y3ojCGVCPIWM5AN+21vmqaFtFTgYgaKEEIA60D7BJLOTu3mSb6ZBD0W8s26jRhnFKOIviJDqk/UnAeWH824oGoefwLtAhcaaIessYPdMju1wXuAjN03kfZICokcOUduDjYkIRGEYWI9DHsN+/R7HdzsHQvEZMhFLA/WP6NE2IpEfEECR+aZ5ey+j3ikXM1zgr0ew1Ei6YrcmjFZIEykdSdISNc3VOrhC6SVtd9ay3zCCP5JS87BLk9NGxypTIfOiFT/p1+7vdqgTFCUkOYl/rUcPwZ+8uv16fpuDqviTzeszsRz9NDIKOw6b0htW/22PhzU7Vy9berxIb5S5cFV+6GCLie81TobXOPnGCyefdB256kC63aLMn+89EdRVxSfapVoMBi34jm+iQaX6ZDBQASSr2fpyXIJxuJ+Mm23Rrf93+lseNGqT8NaecbvU4TT1z8sCJKr+0dZwW12IcPfKemjp2CS3oSTZXl9xVqXbqe0lBe1F3pyNQ1x37+7Hl/2n5ery8n1X8+N95x2c9g35nIwSqb/EKzypRmNXsfq6n4h9bW0GAsNnDBz9RZGn6QiTNlNs8vIipdo8aGBp5u5WV/Uqm4HdmC3U+m6rl+5gGXodqEPK/V6tdRp5/qzYXFAsc1ZSE0so7Cb+fmaII49SVhAhLPiCZ4TaX+B2EEKWT021AeDM0nGXCt4vd6tl0p+rV2tue5Z0fXLXejW291qqe53WpWabd1yNWAD4YeKiH31Lu2p95BguqDESLyZc6kHXSpdkiVaJSpyCytUYCTRl4AwOuwVy7UKkDReRMQQBjEPkogUFvNFViAgN/9FB2GZWanECy4UirJT+GmSh9/yemifgBoHaTJqEd1T8uEy0hnl6XyednU37RzeTwJqDpsurhIUb5jsf3qfGTMs24HZ5oWlm3PfbvkhxBEA8AU/cFiabbxgRXei5xesvjO0qjTz9i5RYVlIVqska+iZUUyh4YEL4BkYEZxo2XsZ82fCwBYCfOvG2bI+iLy17/NL1JyNFFIk1uNnZctvPDdGRJrnRk8fn/V33zJ7IXXdFFmrY7Z2pF8lhvGXDxfsYeOnzXf6L+UieG/XEaydODpP/cZQlM3MytwvL5/MBuYalmpB5GIX/BjAseD7xm2Rt1yUnqZposjnXyyjdA0bYcwTpnodOzPsqm/GU70siPfu9AEmU/i3K3stP72yH/s3I62DMbK3vvS/nR2ajQsmepekGZeGvdavTx2czXbU/o3gccGHla8Efz+T5gfzR8tOTQ/PQ/Nf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0TpYwVxuJVEgBQIzKQDBUHbU/py5Dob8EzipLHDpV8/dmgoUOhpj4SEvLO99toXL7vBcRiUbIdzSASNmOa5Tf1f36qVapZZLuBaBRUq5ToqWIg8F6BWe0azWZkQs6prHucpeIwLzERTLyHpbyL5uzORXa3YqFSsmvUnXXuAhEto6VJEurYOA8btLGxTTxNmR5hTbjMcArcFsSfOoG9LTxvnnPRWY8syC5i0FkLEtmGQog8EgoAUSRQaDePAp+Fze0LnDIs0gbeYPm/qb3tXq1VxVS5GydwoIYQMZBnSx+d0fqm3LvLN4HtsFm3XHcwiRgkO6CtWpAYgFpGvOcE8SqhYhGegTcNECroAa1IgZoVd6sZ7gIzdF5EOSCYcF/gCmznYGGaQACOg3Y+9pn75tQ5u994lmPFZlIT8aP09SsCWEEQx+AWeZ5az+zriiXK1GkBsj5Eg5XQJt2pMYkyAa6MEZnTdp1wOn8+1rP3amucTBuQ7LWkY+zwlbeNEZVw6By7+T7/2e7VFecBBCq3ufPgw3gxfNnfTzaJT3/x0a4M/3lXUfhw0Mwr7zltSu1a/rY8HdTdXb5vEYko8HFbD526tMlmZZefVTcbX90tr0i8PK4+9/qszmc6f7vrOGpxOmVz9mo/bm2X3aTqa3gx7hvdLrF4GeGM+hRej18qKGdWHGzOc/Lzuk6g8p1PC7ntX5sL8cfvaG6XroP00qax+o3KwGv+z8m67o8Fz4KQ3OO2v591RP56SWXyFrYubH8zcTDudNtA0uao9xt598z2n/RwOjbkcTNLn30BEvlSj4blaT/YLi8+lRVmoX5hlrnas9IkLYEJvqV1KVuxUig/1bdnM7bpbr5kuclHPtSzTdKpdVEFmDzmoalm1stvJ9WfL4ohiJ2IzqmIphd3Oz+cESWhzYD4khWWUkgVw/RNEFwuseWwsD0bEONxFUsFRtXtdtnpds1PpVOuu6bQtq1pzu6hTqpTanZKu3UZiyIaJMxOQHKp3+UC9x0BoTEFJvJpzLgedC1mSF7xMRWAWl7jIIJWXQKJ02C5V6lWD0zAOQBE2wshPAyjGizgrkMG3/6UCJjyzUk7iKBE4yE7h2SSPv+X1kD4+VQ5cZdQG2VP4cBnJjPJ0zqdd2087h3dSn6rDJosrEkq2TA4/vc+MGpbdwOzyItzMue+2fBPiBIDxCT/juDS7eP6S7kXPL1h5Z0hVaeXtfcHFl2K6XKZZQ6+VYiYS3jANdG1MgKRS9jZ30R9gxg7C+NKNs2N9FHlnP+SXigWbCCwglOOnZcsvPDcmwNVzw5PHZ/3Vt8xBSFk3AWtxytYJ5KtEMf704UJsovykeST/VlHiv7frBNZeHJmnfGMIyuZqpe6XzZnZIJGEpVIQo2Qf/BTAqeCHxl2Rd1yEnKbnVMD5L5pSuqaOCYlSJjxXzwz76pvxFJsY7HenDzCZwr9d2Wt+9sp+HPQnUgdDrO986X87F2g2LgTkLk4zLk19LV+fMjib76n9G8HTgo+qnwn+YSatD+aPlr2aHp+H1l8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065357</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065359</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0D0FD1811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D0D0FD6011A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D0D0FD9A11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_FUNC_YOUTH_BAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="9c4070fc-000a-4e4d-8f9b-c72bff3fdb41"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B752C0A1E0401F0A079904DF:AD160F96"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0D0FDD611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FDD611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FDD611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0D0FDE811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B71DC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B757C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FDE811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B71DC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B757C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6MQh4SQRAUp08BOOv2Gdqd9WRnnAu4EOxM7QPn16wRCgdJuZyUk5Jvrc8/98LFPBZ6lzSAUAnJJOdPiqKP/A207wXa7bWDPcw0HnJaBx7ZnOFYbNce2jZ2xp2uxEAXETEjMZEdvIss2LKR+QwsFLSdATqPte0+69gC5UNDKpYF0bTlLmQiqsB29yFnAsaAiYHgGIpAkGISXF4HyDHDNSe+erllWAfPuVMosME3SSIBAmpIG4TPz1NzzOU1EMKAThmWRwyZmIjr6Zu9isWgs7AbPJ2YTIWQi31Q+iaCTL3r3pN4MSczGfL0+w4wzSnBKV7gkdQlyyhMtTCc8p3I6ewfaMi1UQhuwJAaxHPZFN18DVOw+ibRHMhfYEFNs1WB3MIYcGAHt/i7u6F8+18H13mGOmRjzfCYO1n9GCdgcUp5BYog6s5rd5xGPlKt7CiSIGUkLQedwVY5JhgkI7SaHMV1eUKGGLxFa1X5tKeoJA/InLTk1d3kq2uaRykR0AkL+n37t9mqN8oDTArrn4+UDcodnIRn5d2Z+NuDm7fdfq3sbkU5FYdd5TWrb6s36cFC3c7XZtIpF1EL94rr3hMzr0Q2NFzf3abxYZVfkdtJr+eKef2U/2IS205Dlib/M8mEa8l5r2L/+67wPovl8ec7lV9pyT+TziPgPod9zM+ciROl8FRPLao1GYxpe9GF1m3979J2rB/pDrl6omM2nP1Bys3Cfmn/35N3jUDbDVlt85zde/P2EA7r1vfPH52tn6P38Be4j6rzmtJvDvrGWg0ExegYi62U5GnGk9VW/sPxYWkoLTYxx5RpkpT4JCUzq3XJXKStBocSHJoFq5nrd81wrQhHqRz3PssJWDznI6qMQtXzftaOzWn/WLA4onnE2pmWsUmHX8/MxQTILBLAEcmPOCzIFoX+AGGGJtZjdqYPBmYAhVwre93w79D0HRf2e1/Obbs8P7bbrKkW2W1FbqfcVl9fsOg/HEvJ99bb31PsOCM0olBJfzrlQgy6kKslvPC9kajXmuMGgUJdAXupw0HS8linoLEuhJGzOeFKk0MimWVUgU6z/mwYmorJSQTKeS5xWp/DdJA+/1fVQPgktHUSZ0TdQPYU3l1GZ0Sad99N2d9Ou4cMioeVhU8WVOSVrJvufXmemHJbtwGzzIsKquW+3/CHEEQDzA37mYWm28ZI53YleX7DqzlCq0q3b+xs3fjeK+byoGtouFTNX8KZlorY5AFIo2XsZ8l/AzC2E+akbZ8v6IPLWvs+vkFM2kFjCTI2fVi0/8dwYgCifG7E6PsvPvmX2Qqq6SVjKY7azVL1KSsYfPlxIQEo/Zb5RfwueJ6/tOoK1E0flqd4YkrJJuSrvl5d3ZoNwBUuVIPJ8F/wYwLHg+8ZtkbdcpJqmUSHh/S9aqXQdHRPCCybjSK8Mu+pb8ZQvGQSvTm9gKoXfXNlL8e6V/fPyYqB0cIb1rS/9b2eDVuNCQO0StOLS0Zfq9amCs8mO2m8IHhf8yP1I8Pcz6b4xv7Xs1PTwPHT/BQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6MQh4SQRAUp08BOOv2Gdqd9WRnnAu4EOxM7QPn16wRCgdJuZyUk5Jvrc8/98LFPBZ6lzSAUAnJJOdPiqKP/A207wXa7bWDPcw0HnJaBx7ZnOFYbNce2jZ2xp2uxEAXETEjMZEdvIss2LKR+QwsFLSdATqPte0+69gC5UNDKpYF0bTlLmQiqsB29yFnAsaAiYHgGIpAkGISXF4HyDHDNSe+erllWAfPuVMosME3SSIBAmpIG4TPz1NzzOU1EMKAThmWRwyZmIjr6Zu9isWgs7AbPJ2YTIWQi31Q+iaCTL3r3pN4MSczGfL0+w4wzSnBKV7gkdQlyyhMtTCc8p3I6ewfaMi1UQhuwJAaxHPZFN18DVOw+ibRHMhfYEFNs1WB3MIYcGAHt/i7u6F8+18H13mGOmRjzfCYO1n9GCdgcUp5BYog6s5rd5xGPlKt7CiSIGUkLQedwVY5JhgkI7SaHMV1eUKGGLxFa1X5tKeoJA/InLTk1d3kq2uaRykR0AkL+n37t9mqN8oDTArrn4+UDcodnIRn5d2Z+NuDm7fdfq3sbkU5FYdd5TWrb6s36cFC3c7XZtIpF1EL94rr3hMzr0Q2NFzf3abxYZVfkdtJr+eKef2U/2IS205Dlib/M8mEa8l5r2L/+67wPovl8ec7lV9pyT+TziPgPod9zM+ciROl8FRPLao1GYxpe9GF1m3979J2rB/pDrl6omM2nP1Bys3Cfmn/35N3jUDbDVlt85zde/P2EA7r1vfPH52tn6P38Be4j6rzmtJvDvrGWg0ExegYi62U5GnGk9VW/sPxYWkoLTYxx5RpkpT4JCUzq3XJXKStBocSHJoFq5nrd81wrQhHqRz3PssJWDznI6qMQtXzftaOzWn/WLA4onnE2pmWsUmHX8/MxQTILBLAEcmPOCzIFoX+AGGGJtZjdqYPBmYAhVwre93w79D0HRf2e1/Obbs8P7bbrKkW2W1FbqfcVl9fsOg/HEvJ99bb31PsOCM0olBJfzrlQgy6kKslvPC9kajXmuMGgUJdAXupw0HS8linoLEuhJGzOeFKk0MimWVUgU6z/mwYmorJSQTKeS5xWp/DdJA+/1fVQPgktHUSZ0TdQPYU3l1GZ0Sad99N2d9Ou4cMioeVhU8WVOSVrJvufXmemHJbtwGzzIsKquW+3/CHEEQDzA37mYWm28ZI53YleX7DqzlCq0q3b+xs3fjeK+byoGtouFTNX8KZlorY5AFIo2XsZ8l/AzC2E+akbZ8v6IPLWvs+vkFM2kFjCTI2fVi0/8dwYgCifG7E6PsvPvmX2Qqq6SVjKY7azVL1KSsYfPlxIQEo/Zb5RfwueJ6/tOoK1E0flqd4YkrJJuSrvl5d3ZoNwBUuVIPJ8F/wYwLHg+8ZtkbdcpJqmUSHh/S9aqXQdHRPCCybjSK8Mu+pb8ZQvGQSvTm9gKoXfXNlL8e6V/fPyYqB0cIb1rS/9b2eDVuNCQO0StOLS0Zfq9amCs8mO2m8IHhf8yP1I8Pcz6b4xv7Xs1PTwPHT/BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc6o6FH3vr2DoYwcJFFSY6oyK9nhOv7U9bV/upGGraSFQEhT99TdgoWptb3tnnHGy2Vl77Y+s5ITjMDDdDueQCBoxZei11H8ahlN/sidYs32baBZYoDXrhqPVbdzAE+fJenIaqjLkPIUh4wIz0VJNZBxrBpK/sYFc23JRvWY1rUdVuYOES2jpUkOqkoUB424RtqWmCXMjzCl3GQ6Bu4K4o875mSs9XVxyUtsna5ZFwKQ9EyJ2dZ3UfCAQBKRGolA/0bd8TnzujuiUYZEm8BbT5y31be9isagtjmtRMtVNhJCOHF36+JxOD9X2QbkZ/CGbROt1D7OIUYIDusI5qXMQs8hXOsE0SqiYhZ9AG7qBcmgNMqIRw2KHqv4eoGD3TaQtkgnHGp9howS7gQkkwAgotzfDlnr4vQ6u944TzPgkSkK+s/4ZJWBzCKIYfI2XmZXsvo+4p1ztEyDukJEg5XQOF/mYxJgAV64SmNDsjHI5fD5XivYrGS8nDMhPWnKib/KUtPU9lfHoFLj4P/3a7NUa5Q4HKbSfgh48TLM/r+jyz2T27D3zF+80SETY5a2CwqbzmlTV6rf17qBWc/W2iVqr26kYwtHyN8myZNjvd06tMD7W71+W3VNy9it7JuQej0+P9BVlt4939l9xvThddUbx5fLiqh8uybzxYN+sbl/0gya3+xdofnc9R3d3j+bEfj0Kw7D51zGzwaq/jIlzPp6Y3QV3Ll6cM/N6kIxvu2T8SqOm4aP4d3rdaK4euBiPgtnB9a/zvn01pRdHxCfnndtVk7fec9rMYdtYysEofXoGIsplPhpDTxnIfmHxtbTkFuprk8LVjXN94gKYUNv5rlxW3FSKD/Vd2cz1ui+Pj2caqNswvB7qGH1kIWOAOqjhOMjyBqX+rFnsUOxFbELzWLnCrufna4IkdDkwHxJtHqVkBlz9AtHDAitDdiMPRsQ4jCOp4Bbq9RrdQV8y7JhN26ubyLTqvUG37jS7jYatKheRuGSXSWciINlW7+Mt9b4BQmMKucTnc87loHMhS/KK56kIjNoc1xik8hJIch12Tatp65yGcQA5YT2M/DSAWjyLiwLpfP1vapjwwko5iaNE4KA4hZ8mufutrIf08WnuwPOMuiB7Ch8uI5lRmc7nadc30y7hO6lP88MmiysSStZMtj+9z0w+LNXAVHkRbpTcqy0/hNgDoH/BT98tTRXPn9ON6OUFK+8MqSrtsr2vuPZaS+fztGhoI1fMRMLrho4a+ghIKmVvOY5egOkVhP6tG6divRO5sm/zS8WMjQQWEMrxU4rlN54bI+D5c2Moj0/23bfMVkhZNwGZ2GfrBfJVkjP+8uFCXJL7SfOV/FtEif/erj1YG3FknvKNISib5qv8fll+MhskkrBUCmKUbILvA9gXfNtYFbniIuQ0PaUCPv+i5ErXUjEhUcrE0FMLw6b6FjzFMgb33ekDTKHwb1d2xj+9su/Pz0ZSB0OsVr70v501WowLAbmL04JLS83k61MGZ9MNtX8j+EHwkYcGnlc3jI5dCb7tOPVjr1cVcCuT9gfzR8tGTXfPQ/tf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1OaQkuhI8wUC8d6FY+AHo8vd0IaINqmJUkB76+/SbEVEL2eO8MMk92dtdf+yErOOUziuudzjpkgKdXCoKP/HYGG3WhN2wa23Klhw0bLmM5Q3QBuw8JwOrUtEOlayHmOQ8oFpKKj14HVMCwgfxMLeI7tgVYNNMCTrj1gxiW0dKkBXdskMeVeEbaj54x6KeSEexQmmHsCeWP/5tqTnh4sOend8y3LIiDrLoTIPNNEtQgjHMeohtLEPDf3fM4j7o3JnEKRM/wWM+Id/W3ver2urRu1lM3NOgDABG1T+kSczE/17km5GUchnaXb9QWkKSUIxuQfqEjdYLFII82P5ykjYpF8Am2ZFlDQBt4gA1k2PdXN9wAFu28i7ZFkHBp8Aa0SbIRnmGGKsHY/Cjv66fc6uN07YZDyWcoSfrD+M0qYrnCcZjgyeJlZye77iEfK1T3HyAspinNOVnioxiSDCHPtJ8MzsrkmXA5fxLWi/dqGlxOG0Z+05Nzc5Slpm0cqE5A55uL/9Gu3V1uUBxjnuOuS0R0TYXhmTpxl7OZn4szNZ+wutu87BYVd5y2pqtVv68NBrebqbdMajm9Wvx5/RRub28+3jxn/nQ3ukzg0+2D5k40em42zYXZTr1t3VryeNvMeTa7OhuzmxU+D64dX9/fQtrPft25yd38Sp68LnE9a+WWWtNopaLSfHEj690mGZq3hKLYfpvHl0zq0x/jqufF8+br2o4ndenwZ0ml8Zt/fimCCnsPlKlo6J1f+j7/6zoCyyY/ZMK//mg78zntOuznsG0s5GOfTZ4xEuVSjEQbaQPYLiq+lRVlIZMwKVy9T+sQFpkLvql1KVrxcig+JPNnM7brfalpB3QI913EvgG/1gQ2sAfCB224DOxiU+rNlcUDxIqUzomIphd3Oz9cEUeJxTCPMjFWaowXm+heIARRQC+lIHoyUcjxJpYLbTn3Qbzt9q265F33Xsnu9Xt92mj3fsfq9QaBrw1Tc0lvmzwRm++rd2FPvEUYkI1hJvJpzLgedC1mSJVzlIrZqK1ijOJeXAFM67NXtlmNykmQxVoTNJI3yGNeyRVYUyOTb/7oBES+shKMsZQLGxSn8NMnDb2U9pE9ElANXGfWw7Cn+cBnJjMp0Pk+7uZt2Ce/nEVGHTRZXMIK2TPY/vc+MGpZqYKq8ELdK7tWWP4Q4AmB+wc88LE0VL1qRnejlBSvvDKkq3bK9S1hb1vLVKi8a6irFZBLetEzgmmOMcil7r5P0BVOzgjC/deNUrA8iV/Z9frlY0LGAAidy/LRi+Y3nxhhz9dwI5fHZfPctsxdS1k3gjThmu4jlq0Qx/vLhgjyk/KT5p/xbp+w98WNYO3FknvKNIQidq5W6X14/mQ2USlgiBTFlu+DHAI4F3zdWRa64CDlN01zgz79oSuk6OkQozakIlaJIw676FjzFa4a9d6cPMIXCv13ZG/7plf14cz2WOphAvfIl/+1skGJcEJa7OCm4dPSNfH3K4HS+o/ZvBD8IPgjAIAialuU7leA77XazEVxUBdzLpPvB/NGyU9PD89D9Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06543</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06545</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0D0FDE911A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B71EC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B758C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_FUNC_YOUTH_BAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="1e134f84-6ab2-4660-a2e6-8ba8cab33d69"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B823C0A1E0401F0A079904DF:E4403C99"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210B794C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210B794C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210B794C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210B7A6C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B7EEC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B828C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210B7A6C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B7EEC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B828C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6vgJIQAUUGipMxkll6m0M50XlbGOYCH4ATb4dJfv3ZoKFDabVdCQj45/s53Lv7sc4HniRt0hAAuacqMKGyZ/7jjRrOBSWw5VRxbHoywhccuWBC7uOaRBvGxbxqREDlETEjMZMt0badqObb6DR07qHmBY1ccr/bbNB6ACwWtXCq2aaznCRNBEbZl5pwFKRZUBAzPQQSSBIPOVT9QngEuOZnt8y3LIiBvT6XMAoRIJQYCSUIqJJ2jc3Tgcx6LYEAnDMucw3PMWLTM572r1aqyqlZSPkGubdvIbiLlEws6OTPbX8rNEEdsnG7XXcxSRglO6BPWpK5ATtPY6CSTlFM5nb8B7SDH1tAWrIlFHI+dmeglQMHug0gHJLnAlphipwS7gzFwYASM+7uoZZ59rIPbvUOOmRinfC6O1p+jBGwJSZpBbIkys5LdxxFPlKt9DiSIGElyQZdwrcckwwSEccthTNd9KtTwxcIo2m+sRTlhQD7TknO0z1PRRicqE9IJCPl/+rXfqy3KA05yaD/K3k3YD8d/Tx/d5sX0YV51N19neX6Z3LcKCvvOW1K7Vj+vjwd1N1fPm8jG+Xadr4f1H/kSPQ1Ir/4wWYnL6aYXockMVxMyzJ74yv+6GTlXFH2bfR9dNUYLwa9szocPt24fZyxZxLNxePvFdfObGVrQXz+bf6L7J/4rdX9ns7rTfKQPl7P6n3TYjxKXNGqLZLROmjGWnaFPU2/lXt/8NZPX0dPoZub+lNO7u59fkqVTJ98aUP1eu2T+U200+dF6yWk/h0NjKQeDfPQHiCyXejSi0OipfmH5vrRoC42tceEaZFqfhAQmzbbepWUlyJX40DhQzdyuLxu+E7qOfVHv+F2741zanu307I5dbzZtL+yV+rNlcUSxm7Ix1bG0wm7n532CZB4IYDFwa5nmZArCfAcxxBIbEbtTByNlAoapVvCwavvdnu97fsMLu/6F3bwIO41G1el6dli7MI3rVN6wG94ZS+CH6l09UO87IDSjoCVez7lQgy6kKskCL3OZOJUlrjDI1SXAtQ4HrteoIUHnWQKaMJqncZ5AJZtmRYGQ2P67FiaisFJBspRLnBSn8M0kj7+V9VA+MdUOQmd0AaqncOIysst03k7b30+7hO/kMdWHTRVXckq2TA4/vcyMHpbdwOzyIsIpue+2fBLiBAB6hx86Ls0uXryke9HLC1bdGUpV2mV7F7iyqOTLZV40tK4Vkyt45CC7jgZAciV7m2E6A4Z2EOhDN86O9VHknf2QXy6nbCCxhLkaP6NYfuC5MQChnxuROj7rj75lDkKquklYy1O2bqJeJZrxuw8XEhDtp8y36m+V8vilXSew9uKoPNUbQ1I20St9v2zemA2SKliqBDHl++CnAE4FPzTuirzjItU0jXIJb38xtNK1TExImjMZhWZh2FffgqfcZBC8OL2CKRT++cpeizev7F9X/YHSwTk2d770v50tWowLAbVL0IJLy1yr16cKziZ7av9M8LTgN733BP8wk/Yr82vLXk2Pz0P7Xw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6vgJIQAUUGipMxkll6m0M50XlbGOYCH4ATb4dJfv3ZoKFDabVdCQj45/s53Lv7sc4HniRt0hAAuacqMKGyZ/7jjRrOBSWw5VRxbHoywhccuWBC7uOaRBvGxbxqREDlETEjMZMt0badqObb6DR07qHmBY1ccr/bbNB6ACwWtXCq2aaznCRNBEbZl5pwFKRZUBAzPQQSSBIPOVT9QngEuOZnt8y3LIiBvT6XMAoRIJQYCSUIqJJ2jc3Tgcx6LYEAnDMucw3PMWLTM572r1aqyqlZSPkGubdvIbiLlEws6OTPbX8rNEEdsnG7XXcxSRglO6BPWpK5ATtPY6CSTlFM5nb8B7SDH1tAWrIlFHI+dmeglQMHug0gHJLnAlphipwS7gzFwYASM+7uoZZ59rIPbvUOOmRinfC6O1p+jBGwJSZpBbIkys5LdxxFPlKt9DiSIGElyQZdwrcckwwSEccthTNd9KtTwxcIo2m+sRTlhQD7TknO0z1PRRicqE9IJCPl/+rXfqy3KA05yaD/K3k3YD8d/Tx/d5sX0YV51N19neX6Z3LcKCvvOW1K7Vj+vjwd1N1fPm8jG+Xadr4f1H/kSPQ1Ir/4wWYnL6aYXockMVxMyzJ74yv+6GTlXFH2bfR9dNUYLwa9szocPt24fZyxZxLNxePvFdfObGVrQXz+bf6L7J/4rdX9ns7rTfKQPl7P6n3TYjxKXNGqLZLROmjGWnaFPU2/lXt/8NZPX0dPoZub+lNO7u59fkqVTJ98aUP1eu2T+U200+dF6yWk/h0NjKQeDfPQHiCyXejSi0OipfmH5vrRoC42tceEaZFqfhAQmzbbepWUlyJX40DhQzdyuLxu+E7qOfVHv+F2741zanu307I5dbzZtL+yV+rNlcUSxm7Ix1bG0wm7n532CZB4IYDFwa5nmZArCfAcxxBIbEbtTByNlAoapVvCwavvdnu97fsMLu/6F3bwIO41G1el6dli7MI3rVN6wG94ZS+CH6l09UO87IDSjoCVez7lQgy6kKskCL3OZOJUlrjDI1SXAtQ4HrteoIUHnWQKaMJqncZ5AJZtmRYGQ2P67FiaisFJBspRLnBSn8M0kj7+V9VA+MdUOQmd0AaqncOIysst03k7b30+7hO/kMdWHTRVXckq2TA4/vcyMHpbdwOzyIsIpue+2fBLiBAB6hx86Ls0uXryke9HLC1bdGUpV2mV7F7iyqOTLZV40tK4Vkyt45CC7jgZAciV7m2E6A4Z2EOhDN86O9VHknf2QXy6nbCCxhLkaP6NYfuC5MQChnxuROj7rj75lDkKquklYy1O2bqJeJZrxuw8XEhDtp8y36m+V8vilXSew9uKoPNUbQ1I20St9v2zemA2SKliqBDHl++CnAE4FPzTuirzjItU0jXIJb38xtNK1TExImjMZhWZh2FffgqfcZBC8OL2CKRT++cpeizev7F9X/YHSwTk2d770v50tWowLAbVL0IJLy1yr16cKziZ7av9M8LTgN733BP8wk/Yr82vLXk2Pz0P7Xw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3S6n0tTWoR2hBmkqLhV3OJWty9nYrqAaJtALlz89SctFoGNHj0zzDBZXfnWty75kiOJs7QataUEoShnVi9u2v8AgIcTv+H4uPHkBDUSOLhRrTqNQ28YhkO/2sCBbfWk1NBjUmGmmnYVeb7jIfO79VBUCyLPq9TR4aNt3YGQBtq4VJBtLbKUyagI27S1YBHHksqI4QxkpEg0aF9eRMYzwiUnu3W0YlkEFK2xUpPIdUklAQJpSiqEZ+6Ru+VzlMhoQEcMKy3gLWYim/bb3vl8Xpn7FS5GbhUh5KLQNT6JpKMfduug3AxJjw35at3BjDNKcEpfcU7qEtSYJ1Y7HXFB1Tj7ANpzPZRDO7AgDvEC9sN23wMU7L6ItEVSSOzIMfZKsBsYggBGwPp902vaP77WwdXeW4GZHHKRyZ319ygBm0HKJ5A4ssysZPd1xD3lah0BiXqMpFrSGVzlYzLBBKR1LWBIFxdUmuFLpFW031rIcsKAfKclR+4mT0Pb3VOZmI5Aqv/Tr81erVDucKqh5QnyXH2+ClM9nnWCKbmI4/701/3hGYyaBYVN5xWpdavf1ruDup6rt01wv7jxr+Rj6iVx213MveT67Ox2eX6v66fj18c+D6+JrNfi5fHjGdfP7ukgmPKX38jvz6vJILs+ftAhrw3H0L4/PBj+eoTR6cXiLByk5331x++dPnR+32lBfsYp9rOzTNxl92mC6ueJcjt4evmyfKjeiB4KGqTb+dUnV6/wTGU35q8Hi6X+M73U4fK5cXvYQPXT827zPafNHLaNpRwM9NMzEFUu89HoxdaJ6RdWn0tLbqGJMyxco0muT1IBU3Yr35XLSqSN+NAkMs1crbvm5MRVDx3Xu90OantdFCDvBLVRPQxREJ+U+rNisUOxw9mQ5rFyhV3Nz+cESRZJYAkIZ8Y1GYO0P0GMscJWj92Yg8GZhFtuFNzv1Osnx4FfP4kboe91a35wHKNaHPvoJAjaoW1dcdVnfdEeKhDb6u1vqfcNEDqhkEt8PufSDLpUpiRTPNMq9SozXGGgzSUgch2OqkGj5kqaTVLICbsZT3QKlcl4UhTIlav/qoOJLKxUkgkXCqfFKfwwyd1vZT2MT0JzB5lndAymp7DnMkJlOh+nfbiZdgnf1gnND5sprhKUrJhsf3qfmXxY1gOzzotIr+S+3vJNiD0A7if83N3SrOMlM7oRvbxgzZ1hVKVVtneKK9OKns100dB6rpjCwLuei+ruAIg2sre85S/A3DWE+6UbZ816J/Lavs1PqzEbKKwgM+NnFcsvPDcGIPPnRs8cn8VX3zJbIU3dFCzUPlsnNa+SnPGnDxcSkdzPmK/N35yL5L1de7A24pg8zRtDUTbKV/n9svxgNgg3sNQIIheb4PsA9gXfNq6LvOaizDQ9aQUff7FypWvamBCumerFdmHYVN+Cp1pOIHp3+gumUPi3K3shP7yyHy4vBkYHM2yvfel/Ozu0GBcCZpekBZemvTCvTxOcjTbU/o3gfsEPg88EfzuT1l/mvy0bNd09D61/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHlchH9AQooIETehkprQd6HQrXlaucwOeSew0diD0168dGgoM7XZWQkK+uT733A8f+5yjLHX8IedQCMKoFgV9/Z92D7qOi7tGF1zb6KCea3id9qOReB6GLnYSN/F0LeK8hIhygajo645ltw3bkr872/LPOr7dbjln7lzX7qHgElq6tCxdq7KUcr8O29fLgvoMccJ9ijLgvsD+bDi58qWnjxpO+uB8y7IOWAyWQuS+aeJWDBjSFLcwy8xz88DnPOb+jCwoEmUBLzFj3tdf9q7X69a63WLFwnQsyzKtnil9Yk4Wn/XBp2YzxBFN2HZ9gSijBKOUPCNFagJiyWJtmC5YQcQyewPaNm1LQRtQYQPbHfpZN18D1Ow+iHRAsuDI4EtkN2BTSKAAikH7MY36+uePdXC7965AlCesyPjR+s8oAV1BynKIDd5k1rD7OOKJcg3OAfsRxWnJyQqu1ZjkCAPXbgtISHVFuBy+mGt1+7WKNxMG+E9acm7u85S0zROVCcgCuPg//drv1RblHqUlDJbPnm0N722Wj62wfPgF42j1yGAefZn0awr7zltSu1a/rI8HdTdXL5uo982aBAFeXtp06STT0f36QYRVVZ19mz8+zjck+F6FV9++fK9YZVob9zZc/7y+LGamxX8shL2BK+/mOnteumF8/wldAS86dPP3w9e/WJCQdZTjzmpxk9Hbe89DpFuhSVJNCzMI8rMJ5eN0XfHoV76+mRbzaxHCavJz/sPF1dx9/nS5tiZjZ+492J2bIKluL92o/5rTfg6HxkYOZuXjT8CiWarRiAJtLPuFxPvSoiwkNpLa1c+VPnEBVOgDtUvJil9K8SGxL5u5XYeeaweObY08x7uwhnZodSx7bA2tbq9ndYJxoz9bFkcULxhNiIqlFHY7P+8TxJnPgcZQGCtW4iVw/R3EAAmkRXQqDwajHO6YVHCn1xl5XjgKnWFoB73eaOiMR8HZsN3z3F7YDXXtmokbelMMEwHFoXq3D9R7CpjkBJTEqznnctC5kCV5QqtSpHZrhVoUSnkJFEqHfafjnZmcZHkKirCZsbhMoZUv87pAJt/+OwbCvLYSjnNWCJTWp/DNJI+/NfWQPjFRDlxlNALZUzhxGVlNOm+n7e6n3cAPy5iowyaLKwqCt0wOP73OjBqW3cDs8sLcbrjvtvwhxAkA8x1+5nFpdvHiFdmL3lyw8s6QqjJo2vuEWk+tcrUq64Z2lWIWEt60TatrzgCXUvY2d+wXUHMHYX7oxtmxPoq8sx/yK8WSzgQSkMnx0+rlB54bM+DquRHJ41N99C1zEFLWTUAlTtkuUvkqUYzffbhgHys/ab6Vf2tWxK/tOoG1F0fmKd8YgtCFWqn7ZfPGbGAmYYkURFbsg58COBX80Lgr8o6LkNP0WAp4+4umlK6vI4xZSUUU6LVhX31rnmKTg//q9BtMrfAvV3bF37yyHyZXM6mDGdJ3vuS/nQ1SjwsGuYuTmktfr+TrUwaniz21fyF4UvC7vc57gn+YyeA38++WvZoen4fBvw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06549</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065411</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210B7A7C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B7EFC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B829C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_FUNC_YOUTH_SAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="78112be6-587e-49c7-a51e-ce2fc7a0bef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B8F4C0A1E0401F0A079904DF:D54F3F9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210B865C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210B865C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210B865C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210B877C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B8BFC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B8F9C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210B877C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B8BFC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B8F9C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgJAUSooKUcplmei9th+nLketswG1ip7EDlK8/dmgoUNrTORIS8s722mtfvOxDgdPEDUIhIJeUMyPqtc1/iNMcNx6IbzXBr1t13z2w/LqHrYbXgOaDX6+TmJhGJEQBERMSM9k2Xds5sBxb/W4cO2jUA8ev2e7BvWncQS4UtHKp2aaxSBMmgjJs2yxyFnAsqAgYTkEEkgTD8Ow0UJ4BrjiZncMVyzJg3plKmQUIkVoMBJKE1AhP0SHa8jmMRTCkE4ZlkcNrzFi0zde98/m8Nj+o8XyCXNu2kd1CyicWdPLd7HyrNkMcsTFfrbuYcUYJTugSa1JnIKc8NsJkwnMqp+kH0A5ybA1twYJYxKmz7yZ6C1Cy+yLSFslcYEtMsVOBXcMYcmAEjNvrqG1+/1oHV3tvcszEmOep2Fn/HSVgM0h4BrElqswqdl9H3FOuziGQIGIkKQSdwbkekwwTEMZlDmO6OKVCDV8sjLL9xkJUEwbkb1pyiDZ5KtpoT2V6dAJC/p9+bfZqhXKHkwI69zKyf53aTrffeOgeL1u9+5Yv+g2v9XLVLilsOq9IrVv9ut4d1PVcvW46haPfmd1F3IZllPZv58uX3y9iMBq5Jzg/yf6EJ/dL8fjrGI2Efybdy4P70e2iWKZ/UCKH3H3kvauTuZONnjPn5NskOrX7yU95dYziYy9+vO8tLqbjq9l18yFt5T8uLo/SZJ4dNe+mhA+Hy9HN+XFK+/Nf6fDn0/H4dpr4g+V5PAtH6eTi2yV6PP8huzeZexk9nj2Ft9On9ltOmzlsGys5GBYPj0BktdSjEfWMgeoXlp9Li7bQ2BqXrkGm9UlIYNLs6F1aVoJCiQ+NA9XM1brvN52e69hHvud17dDp23XbGdih7bVadr03qPRnxWKHYpezMdWxtMKu5udzgiQNBLAYcmvGCzIFYX6C2MMSGxG7VgeDMwE3XCl4ozsIe3bL85xu96jh1f1+M+yG/YHrt1p+o+6ZxjmXF+wiD8cS8m31PthS72sgNKOgJV7PuVCDLqQqyTOeFTJxajNcY1CoSyDXOhy4db+BBE2zBDRhlPK4SKCWTbOyQEis/l0LE1FaqSAZzyVOylP4YZK736p6KJ+YagehMzoC1VPYcxnZVTofp93cTLuCD4uY6sOmiitzSlZMtj+9zYwelvXArPMiwqm4r7f8JcQeAPQJP7RbmnW8eEY3olcXrLozlKp0qvY+49pzrZjNirKhnlbMXMEjB9keGgIplOy93PAnYGgNgb5046xZ70Re27f5FXLKhhJLSNX4GeXyC8+NIQj93IjU8Vl89S2zFVLVTcJC7rN1E/Uq0Yw/fbiQgGg/Zb5Uf3Oex2/t2oO1EUflqd4YkrKJXun75eWD2SBcwVIliDzfBN8HsC/4tnFd5DUXqabpoZDw8RdDK13bxITwgsmoZ5aGTfUtecqXDII3p3cwpcK/XtkL8eGVPTo7HSodTLG59qX/7WzRclwIqF2Cllza5kK9PlVwNtlQ+1eC+wW/2fhM8Lcz6bwzv7ds1HT3PHT+BQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgJAUSooKUcplmei9th+nLketswG1ip7EDlK8/dmgoUNrTORIS8s722mtfvOxDgdPEDUIhIJeUMyPqtc1/iNMcNx6IbzXBr1t13z2w/LqHrYbXgOaDX6+TmJhGJEQBERMSM9k2Xds5sBxb/W4cO2jUA8ev2e7BvWncQS4UtHKp2aaxSBMmgjJs2yxyFnAsqAgYTkEEkgTD8Ow0UJ4BrjiZncMVyzJg3plKmQUIkVoMBJKE1AhP0SHa8jmMRTCkE4ZlkcNrzFi0zde98/m8Nj+o8XyCXNu2kd1CyicWdPLd7HyrNkMcsTFfrbuYcUYJTugSa1JnIKc8NsJkwnMqp+kH0A5ybA1twYJYxKmz7yZ6C1Cy+yLSFslcYEtMsVOBXcMYcmAEjNvrqG1+/1oHV3tvcszEmOep2Fn/HSVgM0h4BrElqswqdl9H3FOuziGQIGIkKQSdwbkekwwTEMZlDmO6OKVCDV8sjLL9xkJUEwbkb1pyiDZ5KtpoT2V6dAJC/p9+bfZqhXKHkwI69zKyf53aTrffeOgeL1u9+5Yv+g2v9XLVLilsOq9IrVv9ut4d1PVcvW46haPfmd1F3IZllPZv58uX3y9iMBq5Jzg/yf6EJ/dL8fjrGI2Efybdy4P70e2iWKZ/UCKH3H3kvauTuZONnjPn5NskOrX7yU95dYziYy9+vO8tLqbjq9l18yFt5T8uLo/SZJ4dNe+mhA+Hy9HN+XFK+/Nf6fDn0/H4dpr4g+V5PAtH6eTi2yV6PP8huzeZexk9nj2Ft9On9ltOmzlsGys5GBYPj0BktdSjEfWMgeoXlp9Li7bQ2BqXrkGm9UlIYNLs6F1aVoJCiQ+NA9XM1brvN52e69hHvud17dDp23XbGdih7bVadr03qPRnxWKHYpezMdWxtMKu5udzgiQNBLAYcmvGCzIFYX6C2MMSGxG7VgeDMwE3XCl4ozsIe3bL85xu96jh1f1+M+yG/YHrt1p+o+6ZxjmXF+wiD8cS8m31PthS72sgNKOgJV7PuVCDLqQqyTOeFTJxajNcY1CoSyDXOhy4db+BBE2zBDRhlPK4SKCWTbOyQEis/l0LE1FaqSAZzyVOylP4YZK736p6KJ+YagehMzoC1VPYcxnZVTofp93cTLuCD4uY6sOmiitzSlZMtj+9zYwelvXArPMiwqm4r7f8JcQeAPQJP7RbmnW8eEY3olcXrLozlKp0qvY+49pzrZjNirKhnlbMXMEjB9keGgIplOy93PAnYGgNgb5046xZ70Re27f5FXLKhhJLSNX4GeXyC8+NIQj93IjU8Vl89S2zFVLVTcJC7rN1E/Uq0Yw/fbiQgGg/Zb5Uf3Oex2/t2oO1EUflqd4YkrKJXun75eWD2SBcwVIliDzfBN8HsC/4tnFd5DUXqabpoZDw8RdDK13bxITwgsmoZ5aGTfUtecqXDII3p3cwpcK/XtkL8eGVPTo7HSodTLG59qX/7WzRclwIqF2Cllza5kK9PlVwNtlQ+1eC+wW/2fhM8Lcz6bwzv7ds1HT3PHT+BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHkfBCQmERAWJQtFEU2gX2pnpvqyMcwF3EjvEDl+/fu3QUGBot7MSEvLN9bnnfvjYVwKnST3sCgG5pJwZUb9t/hM4QTNoNG3LrXsNy5u2XGsK06nluU3Xd8D24qlrGpEQBURMSMxk26zbjms5tvo9OHbY8EInqPl1+2/T+A65UNDKpWabxiZNmAjLsG2zyFnIsaAiZDgFEUoSTrrD21B5hrjiZHau9izLgHlnIWUWIkRqMRBIElIjPEVX6MTnKhbhhM4ZlkUOLzFj0TZf9q7X69rarfF8juq2bSM7QMonFnT+2ex8qjZDHLEZ3697mHFGCU7oDmtSQ5ALHhvdZM5zKhfpG9AOcmwNbcGGWMTx2GcTvQYo2X0Q6YRkLrAlFtipwMYwgxwYAeNxHLXNzx/r4H7vQ46ZmPE8FWfrP6MEbAUJzyC2RJVZxe7jiBfK1bkCEkaMJIWgKxjpMckwAWHc5zCjm1sq1PDFwijbb2xENWFA/qQlV+iYp6KNLlSmT+cg5P/p13Gv9ijfcVJAJwiaT4/zL71vZDiCUTC+u7+9ETFx491Tu6Rw7LwndWj1y/p8UA9z9bLpW+PX+icSPh4Pl6M7SeuPP1qpX19G47/S7hfqPcWoJa65v16uHm9HW/G47koc9Jqkz/KJ3F6PPVgmjWgif3zNPmXLyWb3LFcjuZ0/rXGQrJsZ3Tk7P8LDtDdm23v7eXYP8Re6yvKvWaTOol8fZs7uPnZ36OtzS+BvOZo4rSn/9akgN+Ku+7jZFnwzeOgFgjy1X3M6zuHUWMnBpJg+A5HVUo9G1DcGql9Yvi8t2kJja1a6hpnWJyGBSbOjd2lZCQslPjQOVTP365tW0+nXHfu6dT3o2V3nxvZsZ2B3bT8IbK8/qPRnz+KMYo+zGdWxtMLu5+d9giQNBbAYcmvFC7IAYb6D2McSGxEbq4PBmYAHrhS8GQSud+0OWn6j3+/1Pcfzb2y3ZTt91/e9Qd80Rlzesbu8O5OQn6q3e6LeYyA0o6AlXs+5UIMupCrJEq8KmTi1Fa4xKNQlkGsdDuteq4EETbMENGGU8rhIoJYtsrJASOz/6xYmorRSQTKeS5yUp/DNJM+/VfVQPjHVDkJndA2qp3DhMrKrdN5Ou3mcdgXfLWKqD5sqrswp2TM5/fQ6M3pYDgNzyIsIp+J+2PKHEBcA0Dv80HlpDvHiFT2KXl2w6s5QqtKp2rvEtWWtWK2KsqG+VsxcwSMH2T6aACmU7G0f+C9g6ACBPnTjHFifRT7YT/kVcsEmEktI1fgZ5fIDz40JCP3ciNTx2Xz0LXMSUtVNwkZesvUS9SrRjN99uJCQaD9lvld/a57Hr+26gHUUR+Wp3hiSsrle6ftl+8ZsEK5gqRJEnh+DXwK4FPzUeCjygYtU0zQtJLz9xdBK1zYxIbxgMtKKogzH6lvylNsMwlen32BKhX+5sjfizSv75/B2onQwxebBl/63s0XLcSGgdglacmmbG/X6VMHZ/EjtXwheFvxm4z3BP82k85v5d8tRTc/PQ+df</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj1WwHe5RQeJSdlLotFNou+3LyjgH8EziQOzQtL9+7dBQoLTbWQkJ+eT4O9+5+LPPJI1C1+tICYnisbD8fsv+Z0rZtFJzXQem9alTadaJM62Xqw6uE6iVq5hUyk3b8qVMwRdSUaFatotJ2SFY/yYEe9WK55JS2cWPtnUHidTQ2qWEbSuLQiG9PGzLThPhxVRy6QkagfQU88ady5GnPT1acLLbZxuWecCkvVBq6SHESgEwCENWYnGEztCez1kgvTGfC6rSBF5jBrJlv+59enoqPZVLcTJHLsYY4SbSPoHk8xO7/a3YDIEvZvFm3aMiFpzRkL9QQ+oS1CIOrE44jxOuFtEH0AQRbKAdyJjDSEWc2OgtQM7ui0h7JBNJHbmgpAC7gRkkIBhYtzd+yz75Wgc3eycJFXIWJ5E8WP8ZJRBrCOMlBI4sMivYfR3xSLnaZ8A8X7AwlXwNP8yYLCkDaV0nMOPZiEs9fIG08vZbmSwmDNiftOQM7fLUtNGRyvT5HKT6P/3a7dUG5Y6GKbT9m6Gr0Pe7cmU8no2G5OUWzkeLrHb787aVU9h13pDatvp1fTio27l63fTcuBmSZIDJxeS7L+aP6jEgvVu8yIbi4a/xsFa96PqTl0zcL66q3fC0Nw1RtHKrg6r7axR2pr/HvH+xKndQcDu6/HZxP3drrni8GlSDbPTQU3jIyPfVA1s+/rxKTsNV/9y9G5bTVTY5De7nl9di8TCt/GqoDsLXVws8CbMZPnWTF7iYf3uZrLovavIcDZbTZm9EVipuveW0m8O+sZCDcTr9BUwVSzMaft8a6H5R9bm0GAsPnFnu6i2NPkkFQtlts8vIipdq8eGBp5u5WZ83aqTvEtxtDJo93CHnuILJAHdwvdnElf6g0J8NiwOKvVjMuIllFHYzP58TZJEnQQSQOOs4ZQuQ9ieIfaqo5YsbfTBiIWESawXXrGpdXK5UB/VGv1Z3Sb9b6TbPy+7gvNcdNBu29SNWV+Iq6cwUJPvqXd5T7xtgfMnBSLyZc6kHXSpdkhVdpyokpTUtCUj1JZAYHfbcSqOKJI+WIRjCKIqDNITScrHMC4Tk5t91KJO5lUu2jBNFw/wUfpjk4beiHton4MZBmoy6oHsKRy4jUqTzcdq13bQL+E4acHPYdHFVwtmGyf6nt5kxw7IdmG1eTJKC+3bLH0IcAUCf8EOHpdnGC9Z8J3pxweo7Q6tKu2jvipZWpXS9TvOG1o1iJhoeEYTraAws1bL3PIl/g0BbCPSlG2fL+iDy1r7PL1ULMVZUQaTHz8qXX3hujEGa54avj0/21bfMXkhdNwWZOmbrhfpVYhh/+nBhHjN+2nyt/57iJHhr1xGsnTg6T/3GUFzMzcrcL88fzAaLNSzXghgnu+DHAI4F3zdui7zlovQ0TVMFH3+xjNK1bMpYnArl9+3csKu+OU/1vATvzekdTK7wr1d2Jj+8sv++HI21DkbU3vry/3Z2eD4uDPQuyXMuLTvTr08dXMx31P6V4HHBr1U/E/z9TNrvzO8tOzU9PA/tfwE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065417</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065419</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210B878C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B8C0C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B8FAC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_FUNC_YOUTH_SAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="c247bcbd-c102-4114-82a4-84dc37720ef2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B9C5C0A1E0401F0A079904DF:89B33908"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210B936C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210B936C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210B936C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210B948C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B990C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B9CAC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210B948C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B990C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B9CAC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTHx3ohXsHmCkU3HWDF0DE/XImpguIlqQ0KaC//iTFIiB69Mw4g1ld+da3LvmSOkeL0HZcziEWhFHN9xr6P7ZpAQS1Ug6XzFKuODUrudqj+g9bZatm2hauYV3zOU/Ap1wgKhq63FPIWab8G1mmUyo6diFftqp/dW0MMZfQ0iVv6tpmEVLupGEbehJThyFOuEPRArgjsDN0+z1Hejoo46Q361uWacC4ORcicgwD5wPAEIY4j9nCqBsHPvWAO0Myo0gkMbzFDHhDf9u7Xq/z60KexTPDNk3TMGuG9Ak4mZ3pzV/ZZgh8OmXbdRtRRglGIXlFilQfxJwFmhvOWEzEfPEJtGVYpoLOwQbnsFWkZ7rxHiBl902kA5IxRzk+R1YGNoApxEAxaHcDv6Gffa+D272jGFE+ZfGCH61/RgnoCkIWQZDjWWYZu+8jnihXsw7Y8SkOE05WcKXGJEIYuHYTw5RseoTL4Qu4lrZf2/BswgD/pCV1Y5+npG2cqIxHZsDF/+nXfq+2KGMUJtDs3kxaeNPxJ+GfXveihMbxJb9F4m+3U2ykFPadt6R2rX5bHw/qbq7eNnX8Z1odjc+LD2JZCq/iUUhrv9fo/LU0mj14V564Hfavu+3Z5rx7/hrfyvjL1xdU6UfVaqffK3cTPASz9XsMk0fvF7r0o3L5/g53RgGfTk27vISLyyv35vwV3/2Zj9zS43J5f3c+YMt5q/103XnuQMGcscETe+h5FzeL+2nrYj6jxuR28itZv9qFgVecvqDWuD+xypHbeM9pP4dDYyYHw+TxCbDIlmo0fE/ryn4h8bW0KAsJctPU1YmUPnEBVOhNtUvJipNI8SGBI5u5XXeqZcuzLbNVK1bbpmt1zKJpdU3XrNRqZtHrZvqzZXFEsc3olKhYSmG38/M1QbxwONAA4tyKJXgOXP8C0UMCaT4dyIPBKIcRkwruWm675VluodJqtbxCp1op2bbbtgt2pVurmjVdu2Liml7H7lRAfKjehQP1HgAmEQEl8WrOuRx0LmRJlmiViNDKr1CeQiIvgVjpsGMXqyWDk0UUgiJsLFiQhJCP5lFaIINvf+0cwjy1Eo4jFgsUpqfw0ySPv2X1kD4BUQ5cZdQC2VM4cRlZWTqfp13eTzuDd5OAqMMmiytigrdMDj+9z4walt3A7PLC3Mq477b8EOIEgPEFP+O4NLt4wYrsRc8uWHlnSFVpZu1dovwyn6xWSdrQilLMWMIblmFWjCHgRMrey4g9AzV2EMa3bpwd66PIO/shv0TM6VAgAQs5flq6/MZzYwhcPTd8eXw2333LHISUdROwEads7VC+ShTjLx8u2MHKT5pv5M+axcF7u05g7cWReco3hiB0plbqfnn5ZDYwk7BECiKL98FPAZwKfmjcFXnHRchpekwEfP5FU0rX0BHGLKHC9/TUsK++KU/xEoHz7vQBJlX4tyt7wz+9sif93lDq4ALpO1/y3845ko4LBrmLk5RLQ9/I16cMTmd7av9G8LTgF8pfCf5hJs0P5o+WvZoen4fmvw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTHx3ohXsHmCkU3HWDF0DE/XImpguIlqQ0KaC//iTFIiB69Mw4g1ld+da3LvmSOkeL0HZcziEWhFHN9xr6P7ZpAQS1Ug6XzFKuODUrudqj+g9bZatm2hauYV3zOU/Ap1wgKhq63FPIWab8G1mmUyo6diFftqp/dW0MMZfQ0iVv6tpmEVLupGEbehJThyFOuEPRArgjsDN0+z1Hejoo46Q361uWacC4ORcicgwD5wPAEIY4j9nCqBsHPvWAO0Myo0gkMbzFDHhDf9u7Xq/z60KexTPDNk3TMGuG9Ak4mZ3pzV/ZZgh8OmXbdRtRRglGIXlFilQfxJwFmhvOWEzEfPEJtGVYpoLOwQbnsFWkZ7rxHiBl902kA5IxRzk+R1YGNoApxEAxaHcDv6Gffa+D272jGFE+ZfGCH61/RgnoCkIWQZDjWWYZu+8jnihXsw7Y8SkOE05WcKXGJEIYuHYTw5RseoTL4Qu4lrZf2/BswgD/pCV1Y5+npG2cqIxHZsDF/+nXfq+2KGMUJtDs3kxaeNPxJ+GfXveihMbxJb9F4m+3U2ykFPadt6R2rX5bHw/qbq7eNnX8Z1odjc+LD2JZCq/iUUhrv9fo/LU0mj14V564Hfavu+3Z5rx7/hrfyvjL1xdU6UfVaqffK3cTPASz9XsMk0fvF7r0o3L5/g53RgGfTk27vISLyyv35vwV3/2Zj9zS43J5f3c+YMt5q/103XnuQMGcscETe+h5FzeL+2nrYj6jxuR28itZv9qFgVecvqDWuD+xypHbeM9pP4dDYyYHw+TxCbDIlmo0fE/ryn4h8bW0KAsJctPU1YmUPnEBVOhNtUvJipNI8SGBI5u5XXeqZcuzLbNVK1bbpmt1zKJpdU3XrNRqZtHrZvqzZXFEsc3olKhYSmG38/M1QbxwONAA4tyKJXgOXP8C0UMCaT4dyIPBKIcRkwruWm675VluodJqtbxCp1op2bbbtgt2pVurmjVdu2Liml7H7lRAfKjehQP1HgAmEQEl8WrOuRx0LmRJlmiViNDKr1CeQiIvgVjpsGMXqyWDk0UUgiJsLFiQhJCP5lFaIINvf+0cwjy1Eo4jFgsUpqfw0ySPv2X1kD4BUQ5cZdQC2VM4cRlZWTqfp13eTzuDd5OAqMMmiytigrdMDj+9z4walt3A7PLC3Mq477b8EOIEgPEFP+O4NLt4wYrsRc8uWHlnSFVpZu1dovwyn6xWSdrQilLMWMIblmFWjCHgRMrey4g9AzV2EMa3bpwd66PIO/shv0TM6VAgAQs5flq6/MZzYwhcPTd8eXw2333LHISUdROwEads7VC+ShTjLx8u2MHKT5pv5M+axcF7u05g7cWReco3hiB0plbqfnn5ZDYwk7BECiKL98FPAZwKfmjcFXnHRchpekwEfP5FU0rX0BHGLKHC9/TUsK++KU/xEoHz7vQBJlX4tyt7wz+9sif93lDq4ALpO1/y3845ko4LBrmLk5RLQ9/I16cMTmd7av9G8LTgF8pfCf5hJs0P5o+WvZoen4fmvw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH++UNLUC7QgzSOHQc1Q8VL3qy52QhhItSWnSUv31Ny0WAdGrd4YZJrs7a6/9kZWcCrSILbcnBEkl5UzzvY7+DzRbTtO0oNEiTtuwUQsbbdNxjGmzGbbsNp7h0NE1X4iM+ExIxGRHt0x4bEBT/a6h6Z7YrnXSMJvwQdduSSoUtHJpmLpWLGIm3CpsR89S5nIkqHAZWhDhSuwGvYtzV3m6qOakd0/XLKuAaXcuZeICgBshwSSOcQPzBTgFOz6noXADGjEks5S8xgxFR3/du1qtGqvjBk8jYJmmCUwHKJ9Q0OhI7/6oN5PQZzO+XvcR44xiFNMXVJK6IHLOQ60XRzylcr74ABoCaJbQBimwgaHNjnTwFqBi90WkHZKpQIaYI1iDTciMpIRhot1M/I5+9LUOrvdep4iJGU8XYm/9PUqE5STmCQkNUWdWs/s64oFydU8Jdn2G40zQnFyWY5IgTIR2lZIZLc6pUMMXCq1qv1aIesII/k5LTsE2T0UbHKiMRyMi5P/p13av1ii3KM5IV9xcXj6H/t3TdHg1sJP4poDzh5sZGsObTkVh23lNatPq1/X+oG7m6nXTS9DCwTi4ML3HHJ5M+OM0zqMVnbAgYKNfAX8GPzNwbv1tOfaioMvb0UMvGEfwti2X3D5fXUbjHumP79Hobjr78eA84vsRTfLWZN4bLke/Rv6lP25n/btg8PKAzOJiaQk4v28Ob8GDDSK4fHLGL3HRTAaIe+GUPaW/oz9/RS8/h+AHH4+PUV6Mznr2H+siLUg+6LzltJ3DrrGWgyCbPhIs62U5Gr6nDVW/kPxcWkoLDY1Z5eompT4JSZjUu+WuUlbcTIkPDV3VzPV60G5Cz4LmmeOYfbMHB6ZtwqHZU+fMMW1vWOvPmsUexT5nM1rGKhV2PT+fE8QLVxAWktTIeYbnROifIHpIIs1nE3UwOBPkmisFH3r94zZsO33vzGu1zH5/cDZQ1G27NWifeGeWrl1yOWbjtDeTJN1V7+Md9Z4QTBNKSokv51yoQRdSlWSJ8kzGsJGjBiOZugTSUoddy26fAEEXSUxKwmDBwywmjWSeVAUCYv1vGQiLykoFTngqUVydwg+T3P9W10P5hLR0EGVGZ0T1lBy4jGCdzsdpN7fTruF7WUjLw6aKK1OK10x2P73NTDksm4HZ5IUFrLlvtnwT4gAA+IQf2C/NJl6Y063o9QWr7gylKt26vUvUWDayPM+qhrZKxUwVPIDAbIGA4EzJ3vM1fyIMbCDAl26cDeu9yBv7Lr9MzlkgkSQLNX5atfzCcyMgonxu+Or4FF99y+yEVHWTpJCHbP1YvUpKxp8+XLCLSz9lvlJ/K56Gb+06gLUVR+Wp3hiSsqhclffL8wezgbmCpUoQeboNfgjgUPBd46bIGy5STdM0k+TjL1qpdB0dYcwzJn1Prwzb6lvxlM8Jcd+c3sFUCv96ZRfiwyv77uI8UDq4QPrGl/63s0GrccFE7RK04tLRC/X6VMFZtKX2rwQPC/5x8zPB382k+8783rJV0/3z0P0X</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqM6TlVugIM5WKVvEGuHWflzMhXUA2bVKaFNFfv5NiERA9emYcmayufOtbl3zJicBxVHE9ISCVlDMj8Nvmv5YNraozJqXaGOrqX9gqtZrVVgmTmj22rNABEppGIEQGARMSM9k2K5ZdLdmW+hvZlluvuZVGuVZv/GMavyAVClq5lC3TWMURE24etm1mKXM5FlS4DMcgXEncoXfdd5WniwtOZudkzTIPmHZmUiYuQqQcAoEoImXCY3SCdnxOQuEO6ZRhmaXwFjMUbfNt7/Pzc/m5WubpFFUsy0JWCymfUNDpsdk5KjZDGLAJX6+7mHFGCY7oK9akrkHOeGh40ZSnVM7iT6BtZFsaugQrUiJ2jR2b6D1Azu6bSDskU4FLYobtAmwAE0iBETAeBkHbPP5eB9d7RylmYsLTWOytf0YJ2BIinkBYEkVmBbvvIx4oV+cEiBswEmWCLuFGj0mCCQjjLoUJXfWpUMMXCiNvv7ESxYQB+UlLTtA2T0UbHaiMT6cg5P/p13av1ii/cJRB52rQFWT0JzqzGs5o0XpKcHbV73PnJgzaOYVt5zWpTavf1vuDupmrt00P88emnfRu5tVHmPJJEj7cs8tzWZl7Me6N+V3jdTJ6WiB66s3uItp6CeHBumgEdz6KJs9XwxY59/2Le1ZL48nZUXUZTucVoNd2vTmr1sOrUXZeGfUmF78vfvOneXTnOIOLgRcsH05v+6Pp0zWNncRbXjUux3M/y87Z4+uKz6/ZGbqJjnrjEb6xLu+b/mLuLdC99eC133PazmHXWMjBMBv/ASKLpR6NwDd6ql9Yfi0t2kLD0iR3dROtT0ICk2ZH79Ky4mZKfGjoqmau12fNhu1XbOu01fW6lmefWTXL7lme5bRaVs3vFfqzZrFHscvZhOpYWmHX8/M1QRK7AlgIaWnJMzIDYX6B6GOJjYAN1MHgTMCIKwXvNls93z89q9crfr3q1D3ba5z6Tq3qV5ya43VN44bLW3abehMJ6a56V3fUewCEJhS0xOs5F2rQhVQlWeBlJiO7vMRlBpm6BFKtw26l1qwjQeMkAk0YxTzMIignsyQvEBLr34pSIpFbqSAJTyWO8lP4aZL734p6KJ+QagehMzoF1VM4cBnZRTqfp93YTruA97KQ6sOmiitTStZMdj+9z4wels3AbPIiwi64b7b8EOIAAPqCH9ovzSZeuKRb0YsLVt0ZSlU6RXsXuLwoZ8tlljfU0YqZKnhkI8tBQyCZkr2XEZ8DQxsI9K0bZ8N6L/LGvssvkzM2lFhCrMbPyJffeG4MQejnRqCOz+q7b5mdkKpuElbykK0bqVeJZvzlw4W4RPsp8536eebpe+KHsLbiqDzVG0NSNtUrfb+8fDIbhCtYqgSRp9vghwAOBd81boq84SLVNI0zCZ9/MbTStU1MCM+YDHwzN2yrb85TviTgvjt9gMkV/u3KXolPr+yn6/5Q6WCMzY0v/W/nEs3HhYDaJWjOpW2u1OtTBWfTLbV/I3hY8KuNrwR/N5POB/NHy1ZN989D5y8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065422</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065424</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210B949C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B991C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B9CBC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_FUNC_YOUTH_SAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="5086181c-e502-4e7b-ba84-007566e9f8b1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210BA96C0A1E0401F0A079904DF:9BE76F88"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210BA07C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210BA07C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210BA07C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210BA19C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210BA61C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210BA9BC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210BA19C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210BA61C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210BA9BC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FH0/XxGlj1WIE8ItKkgQyihTeuHS9px5GRnHgA/BDrYDKV9/7NBQoLTTjoSEvLO99toXL/tKwGXs+m0hMJeEUSPsNs1/J96kAR1Uscpe1bU8rw6sCao0rGji4BqElXodANMIhUhxSIWEVDZNFzhlywHqN3aAX/F8t16qerV/TOMJc6GglUtJ7cqWMRV+HrZpppz6DAoifAqXWPgS+aP2bd9Xnj4sOJmtqx3LPCBvzaVMfNtGpQgjHMeohNjSvrKPfK4i4Y/IjEKZcvwaMxJN83XvZrMpbcolxme2CwCwQcNWPpEgswuz9aPYjKOQTtluHUDKKEEwJluoSd1iOWeR0Y5njBM5X34A7dgO0NAWzpCFHI9emPZbgJzdF5GOSHIBLTGHTgE2xFPMMUXYeByGTfPiax3c7R1zSMWU8aU4WX+PEqZrHLMER5YoMivYfR3xTLlaVxj5IUVxKsga3+kxSSDCwnjgeEqyPhFq+CJh5O03MlFMGEbfacmVfchT0bbPVKZLZljI/9Ovw17tUJ5gnOJWlAV9dlepTVbP/Sx2X8Yvg8tfbLaspayZUzh03pHat/p1fTqo+7l63bQJxsNtPAq4V31seM/8EcwrvYGbJCPxyIfPW0F6eOLdPFRH42dnUHdvnsLV87z8tLhJ++sIrfs/h+HAHWwXq2Dyg2/G23F6P8xmt8FsJXB4zdfwBWTUC/6WvSq7v6zGf8WIJVsQkl/J4K58u3Z6w77wRuUOGNFemTO26N5dBmT6oxcvFvBSlDn93c9uVuMGQc23nA5zODYWcjBKJ78xksVSj0bYNXqqX1B+Li3aQiJrmrv6idYnITGVZkvv0rLip0p8SOSrZu7W1/Wq03Ud0Gk7jQC0nWvgAacH2qDWaACv2yv0Z8fihGLA6JToWFphd/PzOUG09AWmEebWmqVojoX5CWIXSmiEdKgOBqMCj5lS8E7dq1Ua5dq106lXu0HQBVWnUwFut1otV1yvbBp3TN7Te96eSsyP1bt8pN5DjEhCsJZ4PedCDbqQqiQruE5l7JTWsERxqi4BrnXYd716xRZkmcRYE7aXLEpjXErmSV4gW+z+XQsikVuJQAnjEsb5KfwwydNvRT2UT0S0g9AZdbDqKT5zGTlFOh+nXT1Mu4BvpxHRh00VV3KCdkyOP73NjB6W/cDs80LCKbjvt3wT4gyA/Qk/+7Q0+3jRmhxELy5YdWcoVWkV7V3B0qqUrtdp3tCaVkyu4G3HBjV7hFGqZO9lzBaY2nsI+0s3zp71SeS9/ZhfKud0JKHESzV+Rr78wnNjhIV+boTq+GRffcschVR1kziT52xBrF4lmvGnDxfkI+2nzA/qb8N49NauM1gHcVSe6o0hCZ3plb5fXj6YDcQULFGCyPgh+DmAc8GPjfsi77lINU2TVOKPvxha6ZomRIilVIZdMzccqm/OU74k2H9zegeTK/zrlZ2JD6/sn7f9kdLBJTT3vuS/nS2SjwvCapcgOZemmanXpwpOZwdq/0rwvOCD2meCf5xJ6535veWgpqfnofUH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo4FH0/XxGlj1WIE8ItKkgQyihTeuHS9px5GRnHgA/BDrYDKV9/7NBQoLTTjoSEvLO99toXL/tKwGXs+m0hMJeEUSPsNs1/J96kAR1Uscpe1bU8rw6sCao0rGji4BqElXodANMIhUhxSIWEVDZNFzhlywHqN3aAX/F8t16qerV/TOMJc6GglUtJ7cqWMRV+HrZpppz6DAoifAqXWPgS+aP2bd9Xnj4sOJmtqx3LPCBvzaVMfNtGpQgjHMeohNjSvrKPfK4i4Y/IjEKZcvwaMxJN83XvZrMpbcolxme2CwCwQcNWPpEgswuz9aPYjKOQTtluHUDKKEEwJluoSd1iOWeR0Y5njBM5X34A7dgO0NAWzpCFHI9emPZbgJzdF5GOSHIBLTGHTgE2xFPMMUXYeByGTfPiax3c7R1zSMWU8aU4WX+PEqZrHLMER5YoMivYfR3xTLlaVxj5IUVxKsga3+kxSSDCwnjgeEqyPhFq+CJh5O03MlFMGEbfacmVfchT0bbPVKZLZljI/9Ovw17tUJ5gnOJWlAV9dlepTVbP/Sx2X8Yvg8tfbLaspayZUzh03pHat/p1fTqo+7l63bQJxsNtPAq4V31seM/8EcwrvYGbJCPxyIfPW0F6eOLdPFRH42dnUHdvnsLV87z8tLhJ++sIrfs/h+HAHWwXq2Dyg2/G23F6P8xmt8FsJXB4zdfwBWTUC/6WvSq7v6zGf8WIJVsQkl/J4K58u3Z6w77wRuUOGNFemTO26N5dBmT6oxcvFvBSlDn93c9uVuMGQc23nA5zODYWcjBKJ78xksVSj0bYNXqqX1B+Li3aQiJrmrv6idYnITGVZkvv0rLip0p8SOSrZu7W1/Wq03Ud0Gk7jQC0nWvgAacH2qDWaACv2yv0Z8fihGLA6JToWFphd/PzOUG09AWmEebWmqVojoX5CWIXSmiEdKgOBqMCj5lS8E7dq1Ua5dq106lXu0HQBVWnUwFut1otV1yvbBp3TN7Te96eSsyP1bt8pN5DjEhCsJZ4PedCDbqQqiQruE5l7JTWsERxqi4BrnXYd716xRZkmcRYE7aXLEpjXErmSV4gW+z+XQsikVuJQAnjEsb5KfwwydNvRT2UT0S0g9AZdbDqKT5zGTlFOh+nXT1Mu4BvpxHRh00VV3KCdkyOP73NjB6W/cDs80LCKbjvt3wT4gyA/Qk/+7Q0+3jRmhxELy5YdWcoVWkV7V3B0qqUrtdp3tCaVkyu4G3HBjV7hFGqZO9lzBaY2nsI+0s3zp71SeS9/ZhfKud0JKHESzV+Rr78wnNjhIV+boTq+GRffcschVR1kziT52xBrF4lmvGnDxfkI+2nzA/qb8N49NauM1gHcVSe6o0hCZ3plb5fXj6YDcQULFGCyPgh+DmAc8GPjfsi77lINU2TVOKPvxha6ZomRIilVIZdMzccqm/OU74k2H9zegeTK/zrlZ2JD6/sn7f9kdLBJTT3vuS/nS2SjwvCapcgOZemmanXpwpOZwdq/0rwvOCD2meCf5xJ6535veWgpqfnofUH</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbUts6FH3vV3jMYyex5FztIZnJjeJyKSVAKS9nVHknUWtLjiSb0K8/koNDkgYOPTPMBG1vrb32RUs6ViRN/HCgFEjNBHeicc/9h/oUd2jQrUEH4VoT4kat24z9GsE0hpn5hHHXdSKlcoi40oTrnusj3KhhZP5uMApbzbCB6jhoPLjOHUhloI1LHbnOKk24CsuwPTeXPBREMRVykoIKNQ2ng4vz0HiGpOLk9o/XLMuAsr/QOgs9j9ZjoJAktE5F6h17Oz7HsQqnbM6JziU8x4xVz33e+/j4WH9s1IWcez5CyEOBZ3xixeZHbv9DtRniiM/Eej0iXHBGScJ+E0vqAvRCxM4gmQvJ9CJ9BRp7GFnoGqxojeImP3K9lwAlu3ci7ZCUitTUguAK7BpmIIFTcG6vo5579L4OrvfeSMLVTMhU7a3/jhLwAhKRQVxTVWYVu/cjHihX/xhoGHGa5IoVcGnHJCMUlHMlYcZW50yZ4YuVU7bfWalqwoD+TUuOvW2ehrZ3oDJjNgel/0+/tnu1RrkjSQ795qcfzWj2mQyn6Kv6zNRp/PEaPTwO1ceoV1LYdl6T2rT6eb0/qJu5et5UnOLON5Ivsttxy+/4Z9OCjlXw/dvPaazlNwiih9GvIQ7O8osFFi1x1T6T54vWL6Ay96YFv4/omf/1Qcf+Za4/XN0U0hd6cDFP8Vfkk/bdyVKfdW6frk4nc51kvEXw5ez8frW8zdLTYsq6s2Hi6daoc0fmbX5/31LLJZoHAZngD5g3yJ3XJYPFp/RUfk9IPum95LSdw66xkoNp/uMnUF0t7WhEY+fE9Ivot6XFWlhcm5WuYWb1SWng2u3bXVZWwtyID4tD08z1etJt47GP0XDQxiM0wBPURPgEDVAnCFBzfFLpz5rFHsWR4DNmY1mFXc/P2wRpGirgMchaIXK6AOW+gTgmmjgRvzYHQ3AFN8IoOMbNdgOPB0Fr2JlMWuOB+b/jjwJ/Mjk5QUHTdS6F/sK/yMFMg9xV78aOel8DZRkDK/F2zpUZdKVNSZakyHWC6wWpc8jNJSCtDod+s9vyFEuzBCxhLxVxnkA9W2RlgTy1/jVKRFVpZYpmQmqSlKfw1ST3v1X1MD4xsw7KZjQE01M4cBn5VTqvp93eTruCH+Qxs4fNFFdLRtdMdj+9zIwdls3AbPKiClfcN1v+EuIAgPcGP2+/NJt4ccG2olcXrLkzjKr0q/YuSX1Zz4siLxvasYopDbyHPdTxpkBzI3tPN+IXcG8D4b3rxtmw3ou8se/yy/WCTzXRkJrxc8rlO54bU1D2uRGZ47N671tmJ6Spm4aVPmQbJeZVYhm/+XChIbV+xnxlfh6FjF/adQBrK47J07wxNONzu7L3y9Mrs0GFgWVGEIXcBj8EcCj4rnFT5A0XbabpR67h9S+OVbqeSygVOdfR2C0N2+pb8tRPGYQvTn/AlAr/fGWv1KtX9v3F+dToYErcjS/7b+caK8eFgtmlWMml567M69ME5/MttX8meFjwUectwd/NpP+H+U/LVk33z0P/Xw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4jSx1WIE0KACJACKavMQKeFdvrxsnIdA54mNo2dkPLr1w4NBUq7dCUk5Jvrc8/98LE7HCax7fmc41QQRrUw6Or/NF0LYKfuGI4d2YbTnNUN6Dy5Bmg1wZMD7Rly2roWcp7hkHIBqejqNrDqhgXk78YCXsPx6lbNrTuPuvYbp1xCS5ca0LUiiSn3yrBdPUupxyAn3KMwwdwTyJv645EnPT1YcdJ7nQ3LMmDaWwix9EwT1SKMcByjGmKJ2TH3fDoR96ZkTqHIUvwWM+Jd/W3varWqreo1ls5NGwBggrYpfSJO5ud676zajKOQzthmPYCUUYJgTNZQkRpjsWCR5sdzlhKxSD6BtkwLKGgDF8hAlkPPdfM9QMnuRKQ9kimHBl9AqwKb4BlOMUVYu52EXf38tA5u9t6kkPIZSxN+sP4eJUxzHLMljgxeZVaxOx3xSLl6HYy8kKI44yTHl2pMlhBhrl2leEaKEeFy+CKule3XCl5NGEbfaUnH3OUpaZtHKhOQOebi//Rrt1cblN8wznDP7UcPi/XfPmq95Nc37dktT4r0PlnPG2G3pLDrvCG1bfXb+nBQt3P1tildjBqr0e0weLxnLrkYrn0Sjtz2bYuN/mTBD/cvPvLr48e+vR4A6zpvXzlDt91C88ZiEBVP41FrSaNWnufDH/frszv/nk1XT+1x+5re3Y7Xg/HzA+27r9O4z+jzOuwDF7SKwRxFNn2tT2e5lUQ/75oscaNnsQqGSNTjbDy0Kabu2WMwEyCdjCZ/rlbh5UPhoOvue067OewbKzmYZk9/MBLVUo1GGGhD2S8ovpYWZSGRMStdvaXSJy4wFXpP7VKy4mVSfEjkyWZu1hct1wpsC/T9dn8AfOsCOMAaAh80223gBMNKfzYsDigOGJ0RFUsp7GZ+viaIEo9jGuHUyFmGFpjrXyAGUEAtpBN5MBjl+IZJBXf9Zst1bGto2bYVDNrBRWMwqNdtu2n3/ZZj6dolE7/or9SfCZzuq3d9T70nGJElwUri1ZxzOehcyJK8wDwTsVXLYY3iTF4CqdJhz3ZaDZOTZBljRdhMWJTFuLZcLMsCmXzzbxsQ8dJKOFqyVMC4PIWfJnn4raqH9ImIcuAqoz6WPcVHLiO7SufztN3dtCt4P4uIOmyyuCIlaMNk/9P7zKhh2Q7MNi/ErYr7dss3IY4AmF/wMw9Ls40X5WQnenXByjtDqkqvau8LrL3UsjzPyoY2lWKmEt60TNA0pxhlUvZeb9gzpuYWwjzpxtmyPoi8te/zy8SCTgUUOJHjp5XLE54bU8zVcyOUx6c49S2zF1LWTeBCHLMNYvkqUYy/fLggDyk/ab6SfyuWRu/tOoK1E0fmKd8YgtC5Wqn75fWT2UBMwhIpiCzdBT8GcCz4vnFb5C0XIafpKRP48y+aUrquDhFiGRVhoJeGXfUteYrXJfbenT7AlAr/dmUX/NMr+348mkodTKC+9SX/7WyQclwQlrs4Kbl09UK+PmVwOt9R+zeCxwUfNL8S/P1Meh/MHy07NT08D71/AQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065428</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065429</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210BA1AC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210BA62C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210BA9CC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>30.User_Get_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="02.User_Get_CS_GeoProfile" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true" id="ca60c885-8e2c-4090-9b0c-044bb9724c52"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="fe1b0271-f16d-44a5-8847-14115dd0f2ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>1140FFC452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9676100D1C3C71E0401F0A059979D6:6A8632B3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0719451388233185486</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>504065B452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:504065B452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:504065B452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1140FFC452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>05408B9552933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1140FFC452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:05408B9552933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VwblwSFSSuXVTaUmC7pS+VcQZwGxyIHS77648dGgqUdtkjIRlPxjPfXPx5rjiehbZf5RxiQSOmtRtl/QXMookLBIy8PSKGO3ItAxfBMRyrYDpecYSxN9K1NucJtBkXmImybpuWY1i2YZcGlu1bnu86OccpPOvaI8RcmpYqOVPX1rOQcT91W9aTmPkR5pT7DM+A+4L4/eptx5eaPs4w6ZWrLcrUYVyZCjH3ESK5AAiEIcmRaIau0IHOVcD9Pp0wLJIY3n0GvKy/n12tVrmVk4viCbJN00Smh6ROwOnkUq9cZIchaLNxtN3XMYsYJTikf7ACdQtiGgVaNZxEMRXT2RemLWSZyrQBa2IQy2WXOvpwkKI709IByJhjg0+xlRnrwRhiYAS0X712Wb88r4Lbs4MYMz6O4hk/2v8bJGBLCKM5BAbPIsvQnW/xRLoqV0D8NiNhwukS7lSbzDEBrnVjGNN1h3LZfAHX0vJray5/NOsyIP9Sliu0j1VCRyey06AT4OL/1Gy/XlsrjzhMoPIHvbW612EPTbmVf2q592b/qfe2eRjfmOUUwr7yFtSu3O/742bd9db7oXWn2/jFez+t+TPesN7gx1AMC/lNLerRQaG0aA4f8PXGfXA61ws03bT43XhdjPMrszmZ/B5Of5Ba8Vbc39+PsYfhoopR3+yTxVAE9WaESkOTEfvmoWQ9TkqMDmvtm2cMP+Fx8bPYda/D5avX6Y6fnW6tE/9+DgtJ7+nafB0u7CmNXi+eFqUJPIJZHSVo8/DkkVa7/BHTfgyHwowS+snoFYjItqo92g2tJeuFxff0oiQ0MMapqj9XHMUFMKFX1ClFLX4iCYgGvizmdm9Zrtlq1d287TmOa5n1mle15T/PLVktr1rKOGiL4ghiPWJjqnwplt32z/cAycznwAKIjWWUkClw/RuLDSyw1mY9eTkixmEQSRYvtpxas1nzmqV6Xi1OoVmvNerVVqvm5UtWQdfuInHP7uPqWEB8yOD5AwbvAaFzCormVZ9z2ehcyJQs8DIRoZVb4hyDRD4EseJi33ZLecTpbB6CAoxmUZCEkJtP52mCEN+utoEJT6W95iC9f1+Gd/wty4TUCahS4CqWGshqwomnyMkC+Trg0n7AmflqElB1zWRaRUzJFsnhp49uUW2yaxUZ0Uu9/2JluHfqZx//fBJ9Awod52PnKFjSPbfZmyqfCUkilayaC5xb5JLlMknrV1QEGUvzSPKkhfpAEslym0H0BgztTKCzHpkd6iPPO/khvkRMWV9gATPZbVq6PWPC6ANXE0Zb3pb1uePLgUuZNwFrcUpWD+UgohB/O6sQnyg9Ke7KZRXFwUe5Ttja8yPjlGOFoGyiduo52XzRFCSSZqnkvyjeN37KwCnnh8JdkndYhOymUSLg6y+aIrayjgmJEibaDT0V7JNtilNs5uB/KH0ykxL6+wu95l++0E+3nb6kvRnWd7r078oGTduFgK4GgRRLWV/LgVM6Z5M9cn8HuM/vedM1C/naX/n9MJLKJ/FnyV5Oj+9D5T8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VwblwSFSSuXVTaUmC7pS+VcQZwGxyIHS77648dGgqUdtkjIRlPxjPfXPx5rjiehbZf5RxiQSOmtRtl/QXMookLBIy8PSKGO3ItAxfBMRyrYDpecYSxN9K1NucJtBkXmImybpuWY1i2YZcGlu1bnu86OccpPOvaI8RcmpYqOVPX1rOQcT91W9aTmPkR5pT7DM+A+4L4/eptx5eaPs4w6ZWrLcrUYVyZCjH3ESK5AAiEIcmRaIau0IHOVcD9Pp0wLJIY3n0GvKy/n12tVrmVk4viCbJN00Smh6ROwOnkUq9cZIchaLNxtN3XMYsYJTikf7ACdQtiGgVaNZxEMRXT2RemLWSZyrQBa2IQy2WXOvpwkKI709IByJhjg0+xlRnrwRhiYAS0X712Wb88r4Lbs4MYMz6O4hk/2v8bJGBLCKM5BAbPIsvQnW/xRLoqV0D8NiNhwukS7lSbzDEBrnVjGNN1h3LZfAHX0vJray5/NOsyIP9Sliu0j1VCRyey06AT4OL/1Gy/XlsrjzhMoPIHvbW612EPTbmVf2q592b/qfe2eRjfmOUUwr7yFtSu3O/742bd9db7oXWn2/jFez+t+TPesN7gx1AMC/lNLerRQaG0aA4f8PXGfXA61ws03bT43XhdjPMrszmZ/B5Of5Ba8Vbc39+PsYfhoopR3+yTxVAE9WaESkOTEfvmoWQ9TkqMDmvtm2cMP+Fx8bPYda/D5avX6Y6fnW6tE/9+DgtJ7+nafB0u7CmNXi+eFqUJPIJZHSVo8/DkkVa7/BHTfgyHwowS+snoFYjItqo92g2tJeuFxff0oiQ0MMapqj9XHMUFMKFX1ClFLX4iCYgGvizmdm9Zrtlq1d287TmOa5n1mle15T/PLVktr1rKOGiL4ghiPWJjqnwplt32z/cAycznwAKIjWWUkClw/RuLDSyw1mY9eTkixmEQSRYvtpxas1nzmqV6Xi1OoVmvNerVVqvm5UtWQdfuInHP7uPqWEB8yOD5AwbvAaFzCormVZ9z2ehcyJQs8DIRoZVb4hyDRD4EseJi33ZLecTpbB6CAoxmUZCEkJtP52mCEN+utoEJT6W95iC9f1+Gd/wty4TUCahS4CqWGshqwomnyMkC+Trg0n7AmflqElB1zWRaRUzJFsnhp49uUW2yaxUZ0Uu9/2JluHfqZx//fBJ9Awod52PnKFjSPbfZmyqfCUkilayaC5xb5JLlMknrV1QEGUvzSPKkhfpAEslym0H0BgztTKCzHpkd6iPPO/khvkRMWV9gATPZbVq6PWPC6ANXE0Zb3pb1uePLgUuZNwFrcUpWD+UgohB/O6sQnyg9Ke7KZRXFwUe5Ttja8yPjlGOFoGyiduo52XzRFCSSZqnkvyjeN37KwCnnh8JdkndYhOymUSLg6y+aIrayjgmJEibaDT0V7JNtilNs5uB/KH0ykxL6+wu95l++0E+3nb6kvRnWd7r078oGTduFgK4GgRRLWV/LgVM6Z5M9cn8HuM/vedM1C/naX/n9MJLKJ/FnyV5Oj+9D5T8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5HKPm6F3AiBlFDFRTR7VDyArPpiDZMGZk1mMDPh4q8/M8EgILrsqbIKp9PT/fVlvu4zjpLYCZqcQyoIo1rYqetPFb9qRZHlGpHtjY0y8isGKld8wxtbNexYPkSer2sh5xmElAtERV13LNs1bMdwqkPbCexaUK6WbK/8qGsjSLk0LVVKlq6tkpjyIHdb17OUBgxxwgOKEuCBwMGgeX0VSM0AFZj0xtkGZe4wbcyEmAemiUsRYIhjXMIsMc/MPZ2ziAcDMqVIZCm8+Yx4XX+7u1wuS0u3xNKp6ViWZVo1U+pEnEy/641vxWWIQjphm3MbUUYJRjF5RQrUNYgZi7RmPGUpEbPkE9O2aVvKtAErbGC7TL/r5ruDHN2JlvZAphwZfIbswlgfJpACxaDd9cO6/v20Cm7uDlNE+YSlCT84/x0koAuI2RwigxeRFehOt3gkXY0zwEFIcZxxsoAb1SZzhIFrtylMyOqKcNl8Edfy8msrLv9I0WWA/6YsZ+YuVgndPJKdDpkCF/+nZrv12lgZoTiDRrfbYYOe72Z9VHVvaHd0t354CNG/ZvO5nkPYVd6A2pb77XzYrNveers0msQZu1qsetOLW3tELyzRnMJvcpk90vBKdBb9ux/3eHlvJxfzl/ueT93L1uKK9qIL+Omtrqt+zGatdfjzebV8nX3DI/dcRIk/S7ru6/DSzR6iZ7NShX+S5cVqHY1vbrzK7cPLM+PeIJ6MH9O79Sxp38ynd1nrhTD7sTfGP3rL3ihKL77581+vov04FsP+HVr8euy1zuvvMe3GsC8sKGGQjX8DFsVRtUfY0bqyXkh8TS9KQiJjkqsGc8VRXAAVekPdUtQSZJKASBTIYm7Olle2qq2a5zk11y3bVrtVazryv1q5andrzWrBQRsUBxDbjE6I8qVYdtM/XwPEScCBRpAaC5bhGXD9C4sdJJAW0r58HIxyGDLJ4s2O3fUd/7zt1vx2p6oowXPaMoCKb7XLlXNdu2GiR3tpcyIg3Wdwb4/B+4DJnICiedXnXDY6FzIlL2iRidguLVCJQiYHQaq4OHDKVc/kJJnHoACbCYuyGErz2TxPkMk3v46BMM+l/fNh/v4+De/wW5EJqRMRpcBVLC2Q1YQjo8gtAvk84OpuwIX5ZhYR9cxkWkVK8AbJ/qf3blFtsm0VGdFTe/BkF7i36idf/3jT/AKUeZiPraNoQXbcFjNVjglJIo2imi+o9FLKFossr5+vCDKV5k3Jk7Y5AJxJllsP2TNQc2vCPGnIbFEfeN7K9/FlYkYHAglIZLdp+fGEDWMAXG0YoXwtq1PXlz2XMm8CVuKYrB3LRUQh/nJXwQFWelJ8K3+WLI3ey3XE1o4fGadcKwShU3VS42T9SVNgJs0SyX8s3TV+zMAx5/vCbZK3WITspnEm4PMvmiK2uo4wZhkVYUfPBbtkm+MU6zkE70ofzOSE/jahV/zTCX1/fTWQtJcgfatL/qxskLxdMOhqEcix1PWVXDilczrdIfc3gLv87lllq+K1yn/i9/1IGh/EHyU7OT18D43/AA==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0719451388233185486</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0719451388233185486</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0719421388233182196</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0719451388233185486</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>2140FFC452933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>15409B9552933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe1b0271-f16d-44a5-8847-14115dd0f2ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true" id="7c869761-57d8-409b-b402-6dc5f0c48a9b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="43ec0f4c-b301-4507-90a3-521fff1fca1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>B840249652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173B3FA9775E0401F0A07995A24:718F4C43"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0719521388233192945</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>F740477652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F740477652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F740477652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>B840249652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>AC40007752933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:B840249652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:AC40007752933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chd3JRQaJczgb1CpT29KUyjgG3iZPaDpf++mOHhgKlXfZIlagn45lvLv5mzhhIEytsMYYoxxlRok5DfbLjuueCiaV5Ez/QnGAy1UDgAW3i2XHgm5O6ZRuqEjFWoIgwDghvqJZh2pppaZY/Mq3QDELXqLmB/agqY0SZMC1UauLWKk0IC0u3DbWgJMwAwywkIEUs5DActi4vQqEZggqT2jzboCwd0uac8zzUdViLEURJAmswS/UzfU/nLGbhEM8I4AVF7z5j1lDf7y6Xy9rSrmV0pluGYehGoAudmOHZT7X5o7qM4ohMs825DUhGMAQJfgMS1CXi8yxWWskso5jP0y9Mm7ppSNMaWkENmg75qeofDkp0J1raA0kZ0NgcmJWxAZoiighEyt0gaqg/T6vg5u6IAsKmGU3ZwfnvICGyQEmWo1hjVWQVutMtHklX8wzBMCIwKRheoCvZJjmAiCk3FE3x6gIz0XwxU8ryKysm/nDVZQj+TVnO9F2sArp+JDsdPEOM/5+a7dZrY2UMkgI13+L+RdTS+STq8uBmavV+9dMFfxxd8lmjhLCrvAG1Lff7+bBZt731fum335vpfW/ZD9yH1YBNC+rSyZK/DR9a0yz38gIjNl/f3dxioz/qxavVgNS9+zf32TcyOPk1Hj/O3OjOIL9ewMsPJ7/yJ/ev7k2b3b68Xj6sZ4U7/p1mdrtH+69252bcJ7R7fj1fre9Q9yH37o1/R8/EeOk/mBPz6hr7bzFj9522eT74Qaed9jh4e/nn4tlGbB1b5m3jI6bdGPaFFSUMi8kzgrw6yvaIOkpP1Avw7+lFSnCsTUvVMJccxTgiXG3KW5JawkIQEI5DUczN+dx3DMsJ6q4V2LZjGu3zoGWJ/wLHN3tBy684aIPiAGI7I1MsfUmW3fTP9wBhGjJEYkS1RVbAOWLqNxY7gAMlIgPxODLC0CgTLF7v2W2n63l1p9PqGZ7td03jvO11ey3XrRtBR1WuMn5NrmlryhHdZ3B3j8EHCOIcI0nzss+ZaHTGRUpewaLgiVlbgBpBhRgEVHJxaDm+qzOc5gmSgPU0i4sE1fJ5XiZIZ5tfSwOQldJBd1S+vy/DO/xWZULoxFgqMBnLORLVREdGkVMF8nXA/m7AlflWEWP5zERaOcVwg2T/00e3yDbZtoqI6Kk9fDIr3Fv1k69/vql/A0o/zMfWUbzAO26rmSrGhCCRZlXNV1B7rRWLRVHWz5MESYV5XfCkqQ8RLATLrUfZCyL61oR+0pDZoj7wvJXv4yv4nAw54CgV3aaUxxM2jCFicsOIxGtZnbq+7LkUeeNoxY/J2olYRCTib3cVGEKpJ8Q34meZ0fijXEds7fgRcYq1gmMykyc5TtZfNAXMhFks+C+ju8aPGTjmfF+4TfIWCxfdNCk4+vqLIomtoQIIs4LwSBKIEOySbYmTr3MUfih9MlMS+vuEXrEvJ/TD5cVQ0F4K1K0u/rOyhst2gUiVi0CJpaGuxMIpnJPZDrm/A9zl957nGI7gyz/x+34kzU/iz5KdnB6+h+Z/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chd3JRQaJczgb1CpT29KUyjgG3iZPaDpf++mOHhgKlXfZIlagn45lvLv5mzhhIEytsMYYoxxlRok5DfbLjuueCiaV5Ez/QnGAy1UDgAW3i2XHgm5O6ZRuqEjFWoIgwDghvqJZh2pppaZY/Mq3QDELXqLmB/agqY0SZMC1UauLWKk0IC0u3DbWgJMwAwywkIEUs5DActi4vQqEZggqT2jzboCwd0uac8zzUdViLEURJAmswS/UzfU/nLGbhEM8I4AVF7z5j1lDf7y6Xy9rSrmV0pluGYehGoAudmOHZT7X5o7qM4ohMs825DUhGMAQJfgMS1CXi8yxWWskso5jP0y9Mm7ppSNMaWkENmg75qeofDkp0J1raA0kZ0NgcmJWxAZoiighEyt0gaqg/T6vg5u6IAsKmGU3ZwfnvICGyQEmWo1hjVWQVutMtHklX8wzBMCIwKRheoCvZJjmAiCk3FE3x6gIz0XwxU8ryKysm/nDVZQj+TVnO9F2sArp+JDsdPEOM/5+a7dZrY2UMkgI13+L+RdTS+STq8uBmavV+9dMFfxxd8lmjhLCrvAG1Lff7+bBZt731fum335vpfW/ZD9yH1YBNC+rSyZK/DR9a0yz38gIjNl/f3dxioz/qxavVgNS9+zf32TcyOPk1Hj/O3OjOIL9ewMsPJ7/yJ/ev7k2b3b68Xj6sZ4U7/p1mdrtH+69252bcJ7R7fj1fre9Q9yH37o1/R8/EeOk/mBPz6hr7bzFj9522eT74Qaed9jh4e/nn4tlGbB1b5m3jI6bdGPaFFSUMi8kzgrw6yvaIOkpP1Avw7+lFSnCsTUvVMJccxTgiXG3KW5JawkIQEI5DUczN+dx3DMsJ6q4V2LZjGu3zoGWJ/wLHN3tBy684aIPiAGI7I1MsfUmW3fTP9wBhGjJEYkS1RVbAOWLqNxY7gAMlIgPxODLC0CgTLF7v2W2n63l1p9PqGZ7td03jvO11ey3XrRtBR1WuMn5NrmlryhHdZ3B3j8EHCOIcI0nzss+ZaHTGRUpewaLgiVlbgBpBhRgEVHJxaDm+qzOc5gmSgPU0i4sE1fJ5XiZIZ5tfSwOQldJBd1S+vy/DO/xWZULoxFgqMBnLORLVREdGkVMF8nXA/m7AlflWEWP5zERaOcVwg2T/00e3yDbZtoqI6Kk9fDIr3Fv1k69/vql/A0o/zMfWUbzAO26rmSrGhCCRZlXNV1B7rRWLRVHWz5MESYV5XfCkqQ8RLATLrUfZCyL61oR+0pDZoj7wvJXv4yv4nAw54CgV3aaUxxM2jCFicsOIxGtZnbq+7LkUeeNoxY/J2olYRCTib3cVGEKpJ8Q34meZ0fijXEds7fgRcYq1gmMykyc5TtZfNAXMhFks+C+ju8aPGTjmfF+4TfIWCxfdNCk4+vqLIomtoQIIs4LwSBKIEOySbYmTr3MUfih9MlMS+vuEXrEvJ/TD5cVQ0F4K1K0u/rOyhst2gUiVi0CJpaGuxMIpnJPZDrm/A9zl957nGI7gyz/x+34kzU/iz5KdnB6+h+Z/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SC5VeRpjhsvXgFreHoqgvTkwXEG3T0qRY/PUnKRYB0c0+M8yErK7Lty75klOG4sjy24xBxklClX6vqT7Wke0adcCaUTcczXZMR3syrBOtjhF2kQE2dg1V6TOWQ58yjihvqpZh1jXT0ix3ZFq+6fknjVrD8x5U5RYyJlwLlZqwKuKIMr8M21TzjPoJYoT5FMXAfI79oD249IWmjypMaut0hbIMmLVmnKe+ruNaCBiiCNdwEuun+pbOacj8gEwp4nkG7zFD1lTfbV9fX2uv9VqSTXXLMAzd8HShEzIyPVJbPypjCPt0kqz2XUQTSjCKyBuSoAbAZ0motKNpkhE+i79wbeqmIV1rUGANmzY9UvWPACW6Az1tgcwY0tgMmZWzIUwgA4pBuRn2m+rRYR1c2Y4yRNkkyWK2s/87SEAXECUphBqrMqvQHe5xT7lap4D9PsVRzsgCruSYpAgDU64zmJDikjAxfCFTyvYrBRM/Uk0Z4L9py6m+iVVA1/dUp0emwPj/6dlmv1ZeblGUQ6sdeHljND0P7as8btTnOnjL4GIcWjFulhA2lVeg1u1+3+8O63q23o1Illi3/Hpsd0w4Nm+uLPOmcX553nidDwqa1n8Ofy3uvOkLWo6Tt+L8/uXpOZ4nQ/N+du2czZe32fwa7l5uePdXFLo/6HJ4Pr+/cWnYx0/LxXPfuU/ny4n9i/SKi/nvi7en+fE/9N8iffbuH/AgPzZS596aHHce7o6DdDS+eAgoJXE0Gb8NfiyzLBiP3ZvnJBrwsMDYfWl+5LSZw7awooQgf3oGzKutHI9+TzkT/UL8e3qREhJqk1LVTyVHMQ6Uqy1pJanFzwUBkdAXzVzt211b9NRxTiyvXrdNo9vx2pb459mueea13YqDVih2IHYTOiEylmTZ1fx8DxDHPgMaQqYtkhzPgKnfeOwhjpQ+HYrDkVAGo0SweMPstRsd86dYnV7D9SzzrHPSObO7ntFpe726qlwl/Df9nbUnHLJtBj/ZYvAhYJISkDQv55yJQWdclGSOFjmPzNoC1Sjk4iLIJBf7lu2e6IzEaQQSsB4nYR5BLZ2lZYF0tlotDWFWSoc/R+X5+zK93W9VJYROSKQCk7l0QHQT9lxFdpXI1wm7mwlX7tt5SOQxE2XlGcErJNufPqZFjsl6VERGj93g0axwr9UPNv9sqX8DSt+txzpQuCAbYas7VVwTgkRaVTfnqDav5YtFXvbPkQSZCfe64ElTDwDnguWWo+QFqL52oR90yaxR70Rey7fx5XxGA444xGLalHJ7wAsjACZfGH1xWopDny9bIUXdOBR8n6wbiYeIRPztWwX7WOoJ8bVYXpMs/GjXHl8bcUSe4lnBCZ3KnbxOll8MBU6EWyL4L8k2ne9zsC/4tnBd5DUWLqbpKefw9RdFEltTRRgnOeX9nloKNsm2xMmXKfgfSp/clIT+fkMX7Msb+m5wGQjai5G61iV/VtZIOS4YVPkQKLE01UI8OEVwOt0g93eAm/x+5tiG7TiNP/H7diatT+LPko2a7p6H1n8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0719521388233192945</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0719521388233192945</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0719491388233189399</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0719521388233192945</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>C840249652933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>BC40107752933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43ec0f4c-b301-4507-90a3-521fff1fca1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true" id="44e9d761-69ee-4512-b489-7619d13c7e46"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="f61f1377-9b57-4e12-9112-c4306b2aa6db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5050689852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE9676100D793C71E0401F0A059979D6:B06E3BA3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072011388233201435</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9F402E7852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9F402E7852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9F402E7852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5050689852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4450C38952933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5050689852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4450C38952933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4jx0j29j4YwIzhI9eUiAtkLTNS0fIAnRjy8aSjcOvv5KJCRCS0juTGaL1avfs7tGRrhmMQtNvM4ZTTmKqDLpN9bdtQsNdNDzNcVBDsxw70OYNZ655QQPp0LYD0/VUZcBYhgeUcUh5UzV1o64Zpma6M8P0Dc+3vZpRNx5V5QGnTIQWLjVdVYoopMwv0zbVLKV+DBlhPoURZj5H/rQ9GvrC04cVJrV1vUNZJkxbK84THwBUCzDCYYhqKI7ANTjyuQ6YPyVLCnmW4pecAWuqL3s3m01tU6/F6RKYuq4D3QPCJ2BkeaW2PlWbcTCgi3i37kAaU4JgSLZQghphvooDpR0u45TwVfROaAMYugyt4QJpyLDolQpeE5ToLox0BDJlUGMraFTBJniBU0wRVu4ng6Z6ddkEd3tnKaRsEacRO1n/HSRMcxzGCQ40VlVWobs84pl2ta4x8gcUhRkjOR5LmiQQYaZ8S/GCFEPCBPkCppTjVwom/kjFMoz+ZizX4BCrgA7OdKdLlpjx/zOzw3ntojzAMMOtx2903INfnzecDIptwwL41yafh5P206hZQjh03oHaj/tlfUrWPbdeNkUOnC9TIijhYAzol+Ft8N1+mraH9/WtMY5sXjwwO/myWk5Gj/Uhexgn7hCS+ixH+fYm7fN1+0dYdCbhHYCPn7zPs3z82Bmh0ZeHbbd7x/R8HT2N/0lcNOyuf3621k4fAOvGvv0V2HXS+Nzdzn6OiscHpwg283unP0xGG0r02ffp7acf7vZ7Y9S9mZpzJ97280VuNV9rOqzh2FhJwjSb/4sRr5aSHoOu0hfzgvxjeZEWEmiL0tVPpEYxjilXW3KXlBY/EwJEAl8Mc7e2dVtvuJ5rm169bhl658Zrm+I/z3KNvtd2Kw3aoTiB2InpgshcUmV3/PkYIIp8hmmAUy2PM7TCTP0gYhdyqAzoRByOmDI8i4WK13uNhm33zJt+x7acnqv3HKuje3Xd7LumbQktHsf8jt6l7QXH6bGC20cKPsGIJARLmZc8Z4LojIuWrGGe8dCo5bBGcSYuglRqsW9arg0YiZIQS8AgioMsxLVklZQNAmz3a2oQsdI66c3K8/dueaffqk4In4BIByZrucFimvjMVWRVhbxfsHtYcBW+nQVEHjPRVp4StENy/OmVLZIme6qIin53pr+NCvfe/eLtb3eCD0CB037sEwU5OUhb3animhAi0qqmuYa1dS3L86ycnyMFMhXhgdBJA0wxyoTKPc/iJ0zBPgS46JLZoz7JvLcf48v4ik455DgSbFPK5QUvjClm8oUxEKeluPT5cpRS9I3jgp+zdULxEJGIP3yrIB9JP2H+Jn42cRq8jutMrIM8ok7xrOCELuVKXifP75ACxSIsEfoXp4fBzwU4l/zYuG/yHgsXbJpnHL//RZHC1lQhQnFG+aCrloZDsS1x8ucE+69Ob8KUgv5yQxfs3Rv652g4FbIXQXXvS/7srJGSLgir8iFQYmmqhXhwiuR0eSDuLwAP9d3rW7rZc/6o78eVtN6Y31oOenp6Hlr/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4jx0j29j4YwIzhI9eUiAtkLTNS0fIAnRjy8aSjcOvv5KJCRCS0juTGaL1avfs7tGRrhmMQtNvM4ZTTmKqDLpN9bdtQsNdNDzNcVBDsxw70OYNZ655QQPp0LYD0/VUZcBYhgeUcUh5UzV1o64Zpma6M8P0Dc+3vZpRNx5V5QGnTIQWLjVdVYoopMwv0zbVLKV+DBlhPoURZj5H/rQ9GvrC04cVJrV1vUNZJkxbK84THwBUCzDCYYhqKI7ANTjyuQ6YPyVLCnmW4pecAWuqL3s3m01tU6/F6RKYuq4D3QPCJ2BkeaW2PlWbcTCgi3i37kAaU4JgSLZQghphvooDpR0u45TwVfROaAMYugyt4QJpyLDolQpeE5ToLox0BDJlUGMraFTBJniBU0wRVu4ng6Z6ddkEd3tnKaRsEacRO1n/HSRMcxzGCQ40VlVWobs84pl2ta4x8gcUhRkjOR5LmiQQYaZ8S/GCFEPCBPkCppTjVwom/kjFMoz+ZizX4BCrgA7OdKdLlpjx/zOzw3ntojzAMMOtx2903INfnzecDIptwwL41yafh5P206hZQjh03oHaj/tlfUrWPbdeNkUOnC9TIijhYAzol+Ft8N1+mraH9/WtMY5sXjwwO/myWk5Gj/Uhexgn7hCS+ixH+fYm7fN1+0dYdCbhHYCPn7zPs3z82Bmh0ZeHbbd7x/R8HT2N/0lcNOyuf3621k4fAOvGvv0V2HXS+Nzdzn6OiscHpwg283unP0xGG0r02ffp7acf7vZ7Y9S9mZpzJ97280VuNV9rOqzh2FhJwjSb/4sRr5aSHoOu0hfzgvxjeZEWEmiL0tVPpEYxjilXW3KXlBY/EwJEAl8Mc7e2dVtvuJ5rm169bhl658Zrm+I/z3KNvtd2Kw3aoTiB2InpgshcUmV3/PkYIIp8hmmAUy2PM7TCTP0gYhdyqAzoRByOmDI8i4WK13uNhm33zJt+x7acnqv3HKuje3Xd7LumbQktHsf8jt6l7QXH6bGC20cKPsGIJARLmZc8Z4LojIuWrGGe8dCo5bBGcSYuglRqsW9arg0YiZIQS8AgioMsxLVklZQNAmz3a2oQsdI66c3K8/dueaffqk4In4BIByZrucFimvjMVWRVhbxfsHtYcBW+nQVEHjPRVp4StENy/OmVLZIme6qIin53pr+NCvfe/eLtb3eCD0CB037sEwU5OUhb3animhAi0qqmuYa1dS3L86ycnyMFMhXhgdBJA0wxyoTKPc/iJ0zBPgS46JLZoz7JvLcf48v4ik455DgSbFPK5QUvjClm8oUxEKeluPT5cpRS9I3jgp+zdULxEJGIP3yrIB9JP2H+Jn42cRq8jutMrIM8ok7xrOCELuVKXifP75ACxSIsEfoXp4fBzwU4l/zYuG/yHgsXbJpnHL//RZHC1lQhQnFG+aCrloZDsS1x8ucE+69Ob8KUgv5yQxfs3Rv652g4FbIXQXXvS/7srJGSLgir8iFQYmmqhXhwiuR0eSDuLwAP9d3rW7rZc/6o78eVtN6Y31oOenp6Hlr/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxkj25hgPIEZLiGlCW2Cya0vHSEvoNRIxpIN7a8/kokJkEvpmckM0Xq1++1F3+6ZwIvYDdpCQCopZ8ag1zR/QiM6rZ1OqxZMpsTyIq9uTU5dz3IBTyd12ydR1TeNgRAZDJiQmMmm6dpO1XJcy/XHjhu4dmB7Fbtu/zCNO0iFMq1UKrZprBcxE0HhtmlmKQs4FlQEDC9ABJIEYXt4FSjNAJeYzNbZBmXhMG3NpUwChEglAgJxTCqEL9AZ2tM5i0QQ0hnDMkvh2Wckmubz3dVqVVlVKzydIde2bWQ3kNKJBJ19NlufyssQDdiUb85dzDijBMf0D9aghiDnPDLa8YynVM4X75h2kGNr0xasiUUcj3020YuDAt2RlvZApgJbYo6d0tgIppACI2DcjgZN8/NxFdzcHaeYiSlPF+Lg/G+QgOUQ8wQiS5SRleiOt/hGulpnQIIBI3EmaA7fdJskmIAwrlOY0vUVFar5ImEU5TfWQv3RssuA/EtZztAuVgUdvZGdHp2BkP+nZrv12li5w3EGrd6fBn344dPh0g1P3euBOx+K8dOIX/iPzQLCrvIG1Lbcz+fDZt321vOlmHvLmjjJvoYXHftquT6fiP5d/gi3qBae5GMuJ19Wvy4iH6ksr6/uVuObztJ9uKnnJ+mN+3gJNe9+ZsdhuPyGJ586X09nt36NLedfhugSZeE49O5R9WGY+nlyf4mSG1lf8dUoTXK2pEl4kYWrrONd3if+l8fr/Hox7MCTP5P+xcntp4sf60nE56e9rPvUpuy+991rvsS0G8O+sKSEMJs8AZHlUbfHoGf0Vb2w/JhetIRG1rRQDRLNUUICk2ZL39LUEmSKgGgUqGJuzp5Xs7tVv1FzG9Wq59jdTqPtqv8anu/0G22/5KANigOIXc6mVPvSLLvpn48BkkUggEWQWjnPyByE+YHFHpbYGLCRehycCRhzxeLtvutVO+e+XevU3L596riOd37ecx2n7lb77bppfOPyO/uetqcS0n0Gr+0x+AgITShomtd9LlSjC6lSssR5JmOnkuMKg0wNglRzceB6fg0Jukhi0IDRgkdZDJVknhQJQmLz61qYiEI6Oh8X7+/d8A6/lZlQOhHVCkLH0gFVTTgcRU4jqJWBvB+wvxtwab6dRVQ/M5VWmVKyQbL/6aVbdJtsW0VF9LMb/nRK3Fv1o6+/vok+AIUO87F1FOV0x205U9WYUCTSKqu5xJVlJcvzrKhfXRNkqswjxZMOCoFkiuV+j/kvYGhrAh01ZLaoDzxv5fv4MjlnocQSFqrbjOJ4xIYRgtAbxkC9lvWx68ueS5U3CWv5lqwbq0VEI/5wVyEB0XpKfK1+VjyNXsr1hq0dPypOtVZIymb6pMfJ73eagnBllir+4+mu8bcMvOV8X7hN8haLVN00ySS8/8XQxNY0MSE8Y3LQMwvBLtkWOOXvBIIXpVdmCkJ/ntBr8e6EfhhehYr2Ftjc6tK/K1u0aBcCpl4ECixNc60WTuWczXbI/RngLr83+p7tntf9v/H7fiStV+LXkp2cHr6H1n8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072011388233201435</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072011388233201435</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0719571388233197746</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072011388233201435</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6050689852933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5450C38952933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f61f1377-9b57-4e12-9112-c4306b2aa6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true" id="4ac5920b-6215-407f-95af-dfe3bc85b8d9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="f1a12c5a-be0f-44c4-a0d4-e4c793d4681e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>F750E75A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED264CBFFC94E0401F0A05991653:BA762189"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0720101388233210591</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3750084A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3750084A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3750084A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F750E75A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EB50934B52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FD503CBB52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F750E75A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EB50934B52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:FD503CBB52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0jX8H2BGYcCAltbgXCSfLSUWQZlNqSY8kOya+vZGIC5FJ6ZjJDtF7tfnvRt3vAYZbaYcQ5LgRhVBsNuvqvBCUQubFl4E7gGa6bIMO3oG14jttpd1AnDu6gro04L/GIcgGp6Oq2aTmGZRu2P7Xs0DZD02sFTnCrazNccGlaqrRMXVtmKeVh7barlwUNGeSEhxRmmIcChZPo7DSUmiFsMOm9gxXK2mHRWwiRhwCgVowRTlPUQiwDB2BL5yDm4YTMKRRlgV98xryrv9x9fHxsPTotVsyBbZomMAMgdWJO5l/13pfmMo5HNGGrcx9SRgmCKXmGCtQZFgsWa1E6ZwURi+wD0xawTGXawEtkIMulX3Xw6qBGt6elLZAFhwZfQKsxNsYJLjBFWLsaj7r61/0quLo7LSDlCSsyvnP+N0iYVjhlOY4N3kTWoNvf4jvp6h1gFI4oSktOKnyu2iSHCHPtssAJWZ4SLpsv5lpdfm3J5R9pugyjfynLAdjEKqGDd7IzIHPMxf+p2Wa9VlZmMC1xL3t2qvb19OqKz/ND4ln3Sxs490v36RJ1awibyitQ63K/nHebdd1bL5dG8DJKLh8WFz9LftOmJxfBcWBbM//qHJx8Hy7Khxv++/ooGbg/fRvlfv78wzmb3VRWzEH0nBDr/Pb0JKog+C+nt1+YC7x7zzsPCjpMbn8nI8c6HR/Tu3FnWn0bHz74jFWL5VE/Qz8mJEhOrl32bdx+FoGdz04y9xib9Cd12cUsmN58Ob4tyjOzfd22Zrwopt/h4Kb7GtNmDNvChhIm5d09RqI5qvYYDbShrBcUn9OLkpDYSGrVMFccxQWmQu+pW4pawlISEIlDWczVedjxzKOOF3l24DiuZfYPg8iW/wWubw2DyG84aIViB2Kf0YQoX4plV/3zOUCUhRzTGBdGxUq0wFz/xOIACqiN6Fg+DkY5njLJ4u7A6x+1B87RYd/seJ3A94eOFw29yDn0hr7n6do5Exf0oogSgYttBve2GHyMEckJVjSv+pzLRudCpuQBVqVIrVYFWxSXchAUiotD2/U9wEmWp1gBBhmLyxS38kVeJwjw1a9tQMRr6fhoWr+/D8Pb/dZkQurERClwFcshltXEu6PICkKvCeTjgP3NgBvzURkT9cxkWkVB0ArJ9qfXblFtsm4VGdGv/uSX1eBeq+99/e1N8AkosJuPtaO4Ihtum5kqx4QkkV5TzQfYemiVVVXW9esogiykeSB50gITjErJck9T9htTsDYB9hoya9Q7ntfybXylWNCJgAJnstu0+rjHhjHBXG0YI/lalvuuL1suZd4EXor3ZP1ULiIK8ae7CgqR0pPiS/nzyIr4tVzv2NrwI+OUa4UgdK5Oapw8fdAUiEmzRPIfKzaNv2fgPefbwnWS11iE7Ka7UuCPv2iK2Lo6RIiVVIwGei3YJNsap3jKcfiq9MZMTegvE3rJP5zQ12enE0l7GdTXuuTvygap2wVhXS0CNZauvpQLp3RO5xvk/gJwk98dye+m7/6V37cj6b0Rv5Vs5HT3PfT+AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0jX8H2BGYcCAltbgXCSfLSUWQZlNqSY8kOya+vZGIC5FJ6ZjJDtF7tfnvRt3vAYZbaYcQ5LgRhVBsNuvqvBCUQubFl4E7gGa6bIMO3oG14jttpd1AnDu6gro04L/GIcgGp6Oq2aTmGZRu2P7Xs0DZD02sFTnCrazNccGlaqrRMXVtmKeVh7barlwUNGeSEhxRmmIcChZPo7DSUmiFsMOm9gxXK2mHRWwiRhwCgVowRTlPUQiwDB2BL5yDm4YTMKRRlgV98xryrv9x9fHxsPTotVsyBbZomMAMgdWJO5l/13pfmMo5HNGGrcx9SRgmCKXmGCtQZFgsWa1E6ZwURi+wD0xawTGXawEtkIMulX3Xw6qBGt6elLZAFhwZfQKsxNsYJLjBFWLsaj7r61/0quLo7LSDlCSsyvnP+N0iYVjhlOY4N3kTWoNvf4jvp6h1gFI4oSktOKnyu2iSHCHPtssAJWZ4SLpsv5lpdfm3J5R9pugyjfynLAdjEKqGDd7IzIHPMxf+p2Wa9VlZmMC1xL3t2qvb19OqKz/ND4ln3Sxs490v36RJ1awibyitQ63K/nHebdd1bL5dG8DJKLh8WFz9LftOmJxfBcWBbM//qHJx8Hy7Khxv++/ooGbg/fRvlfv78wzmb3VRWzEH0nBDr/Pb0JKog+C+nt1+YC7x7zzsPCjpMbn8nI8c6HR/Tu3FnWn0bHz74jFWL5VE/Qz8mJEhOrl32bdx+FoGdz04y9xib9Cd12cUsmN58Ob4tyjOzfd22Zrwopt/h4Kb7GtNmDNvChhIm5d09RqI5qvYYDbShrBcUn9OLkpDYSGrVMFccxQWmQu+pW4pawlISEIlDWczVedjxzKOOF3l24DiuZfYPg8iW/wWubw2DyG84aIViB2Kf0YQoX4plV/3zOUCUhRzTGBdGxUq0wFz/xOIACqiN6Fg+DkY5njLJ4u7A6x+1B87RYd/seJ3A94eOFw29yDn0hr7n6do5Exf0oogSgYttBve2GHyMEckJVjSv+pzLRudCpuQBVqVIrVYFWxSXchAUiotD2/U9wEmWp1gBBhmLyxS38kVeJwjw1a9tQMRr6fhoWr+/D8Pb/dZkQurERClwFcshltXEu6PICkKvCeTjgP3NgBvzURkT9cxkWkVB0ArJ9qfXblFtsm4VGdGv/uSX1eBeq+99/e1N8AkosJuPtaO4Ihtum5kqx4QkkV5TzQfYemiVVVXW9esogiykeSB50gITjErJck9T9htTsDYB9hoya9Q7ntfybXylWNCJgAJnstu0+rjHhjHBXG0YI/lalvuuL1suZd4EXor3ZP1ULiIK8ae7CgqR0pPiS/nzyIr4tVzv2NrwI+OUa4UgdK5Oapw8fdAUiEmzRPIfKzaNv2fgPefbwnWS11iE7Ka7UuCPv2iK2Lo6RIiVVIwGei3YJNsap3jKcfiq9MZMTegvE3rJP5zQ12enE0l7GdTXuuTvygap2wVhXS0CNZauvpQLp3RO5xvk/gJwk98dye+m7/6V37cj6b0Rv5Vs5HT3PfT+AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icx5TxDtgVqDIYZjyXbEDWl5SQZazElh1LZpmvH8nEBMhyuVOVKqJ2q/v0otN9TkGaGK5HKSoYzogU+B35udlq6WZzZihGG0DF0kygzFqRpYSwHQKIHKvZjGQpoLREAaEMENaRDU03FV1cmeqGa2iu5jSaTutJlu5QQblprtLQZGmVJoS6lduOXBbEzQDF1CUgRdRl0J14FyOXa7qgxiR3zzcoK4dFN2Ysd1UVNkIEUZLABsxS9Vzd0zkPqTvBcwJYWaB3nyHtyO93l8tlY2k2smKuGpqmqZqjcp2Q4vmp3D2pL6MwIFG2OfcByQiGIMH/AgHqArE4CyUvmWcFZnH6jWld1TVhWkErqEDdIqey+uGgQnekpT2QBQUKjYFeGxujCBWIQCTdjoOOfHpcBTd3pwUgNMqKlB6c/wwSIguUZDkKFVpHVqM73uIX6eqeI+gGBCYlxQt0Kdok5xFQ6bpAEV6NMOXNF1KpKr+0ovwP112G4J+U5Vzdxcqhq19kx8dzRNn/qdluvTZW7kBSom42ZbPo6tcM92P/akiv75GGi6v7+YvvdSoIu8obUNtyv58Pm3XbW++X/HWwHD20iH9hPbIk1wNQgKV2PW4b5V+j5qN2SS5Wqf34MIRPZ+FrnKztx9cBZLe9t5H5MswvZ/cGvP1nurw9u1NPXl+gaV3Fbbvsmeajb/3tN/FdMopm5tp5Xd2X0TjO84do1rw5Gw28IrV+mSGKby4HmeoPrDc0hLg/uWRvN1T3T0wyZcHT8DFdJw+313YWWxedj5h2Y9gX1pQwKWcvCLL6KNoj8KUhrxdgP9OLkOBQiSpVNxccRRkiTO6KW4Ja3JITEA5dXszNedCzNce0erbhmKala/2e4xn8P8dq60PHa9cctEFxALGfkQgLX4JlN/3zM0CYuhSREBXKIithjKj8g0UfMCAFZMwfR0YommacxXt229Md3egPNNsxbbPV13qe6Q2Mtjnsm/pAli4zdkWuCi9iqNhncHuPwccI4hwjQfOizylvdMp4St7AomSJ3liABkElHwSF4GLXsNq2SnGaJ0gAVtMsLBPUyOO8SpBKN7+GAiCtpOPBtHp/34Z3+K3OBNcJsVCgIpYe4tVEh6NId1y7DuT7gNu7AdfmvTLE4pnxtLICww2S/U8f3SLaZNsqPKLn/uRZr3Fv1Y++/vmm+gMo9TAfW0fhAu+4rWcqHxOcRLp1Nd9A461RLhZlVb+WIMiCm1c5T+rqBMGSs9x6mr0iom5NqEcNmS3qA89b+T6+ksVkwgBDKe82qToesWFMEBUbRsBfy+rY9WXPJc8bQyv2layf8EVEIP5xV4EuFHpcfM1/llkRfpTrC1s7fnicfK1gmMzFSYyT9TdNATNuFnP+y4pd418Z+Mr5vnCb5C0WxrtpVjL0/RdJEFtHBhBmJWGBL1eCXbKtcLJ1jtwPpU9mKkJ/n9Ar+u2EfrgYTTjtpUDe6uLfKyu4aheIZLEIVFg68oovnNw5me+Q+zvAXX43W7amtS3vd/y+H0n3k/izZCenh++h+x8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4j2eMb4AvE5gxEFqnkOZAbu1LR5EXUGPLYMlg+PVHMjEBQlJ6ZjJDtF7tfrv76ZMuGEpiyw8Yg4yTlCphr6X+MiOrbk6wrTXMJ9DqqIk11IxcrQ62PXnymk/NiasqIWM5hJRxRHlLtQzT1kxLs9xb0/Itwzftmum4P1XlHjImQguXmqEqRRJT5pdpW2qeUT9FjDCfogSYz7E/DoYDX3j6qMKkti+2KMuEWXvG+dzXdVyLAEMc4xpOE/1CP/C5iJg/JlOKeJ7BS86ItdSXvavVqraya2k21S3DMHTD04VPxMj0s9r+VG2GKKSTdLvuIppSglFMNkiCGgKfpZESxNM0I3yWvBPa1E1DhtagwBo26/Szqr8mKNGdGekAZMaQxmbIrIKNYAIZUAzK3ShsqZ/Pm+B2722GKJukWcKO1n8HCegS4nQOkcaqyip050c80a72BWA/pDjOGVnCtaTJHGFgyk0GE1IMCBPki5hSjl8pmPgjFcsA/81YLvR9rAK6fqI7PTIFxv/PzPbntY1yj+Ic2k3n382N97h+HN4/PDCXLi77/dBLXcH/Vglh33kLajful/UxWXfcetm0XiXTZ3QXhPGV+cMbPK6uvsHG+GmG7mYzdB/ywAhXRvN3fUnvFvGgKNDwn/XXq8nTTbi+/FE82vbq7tnE+P6LM15+6l2PyHORWlcbq4+5DV9Jv/lckNR44LFowpe+bXs/76N0+DCyPOtycU1nzpKYV2SRjILR5u557HU3tDNwxo3RJ6MzCBHHt9T07Adnve7aw9ZrTfs1HBorSRjnT78B82op6RH2lL6YF+Ify4u0kEiblK7+XGoU40C52pa7pLT4uRAgEvlimNt1v9cw7G6n07A8266bRrfjBZb4z6u7Zt8L3EqDtiiOIHZTOiEyl1TZLX8+BogTnwGNINOWaY5nwNQPIvYQR0pIR+JwpJTBbSpUvOFZTtDpG3XrsueYZrfuOH3XCLpOx3CtetNSleuUf6ffs2DCITtU8MaBgo8AkzkBKfOS50wQnXHRkgVa5jw2a0tUo5CLiyCTWuxbdbehM5LMY5CA9SSN8hhq89m8bJDOtr+WhjArraPL2/L8vVve8beqE8InItKByVo6IKYJJ64ioyrk/YLd/YKr8EEeEXnMRFt5RvAWyeGnV7ZImuyoIir61R3/MivcO/ezt7/dqX8ASj/uxy5RtCR7aas7VVwTQkTa1TQXqLao5ctlXs7PkQKZifC60ElTHwPOhcqtb9NnoPouhH7WJbNDfZR5Zz/El/MZHXPEIRFsU8rlGS+MMTD5wgjFaSnOfb4cpBR941DwU7ZuLIRYIv7wrYJ9LP2E+Ub8rNIseh3XiVh7eUSd4lnBCZ3KlbxO1u+QAqciLBH6l2b7wU8FOJX80Lhr8g4LF2x6yjm8/0WRwtZSEcZpTnnYU0vDvtiWOPl6Dv6r05swpaC/3NAFe/eGfhwOxkL2EqTufMmfnTVS0gWDKh8CJZaWWogHp0hOp3vi/gJwX99tp2EYbj34k74fVtJ+Y35r2evp8Xlo/wc=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0720101388233210591</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0720101388233210591</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072041388233204904</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072081388233208625</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0720101388233210591</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0850E75A52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FB50934B52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>0E503CBB52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1a12c5a-be0f-44c4-a0d4-e4c793d4681e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true" id="943b4b09-cff0-420e-b0f0-ad4aa7da8eab"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="3d9f91a0-cf40-4715-aeaa-9e1b3a3a0f69"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A160EF9C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9676100E0F3C71E0401F0A059979D6:7F29B1D0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0720211388233221157</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E060E88C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E060E88C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E060E88C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>A160EF9C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>9560389D52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A760545E52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:A160EF9C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:9560389D52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:A760545E52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkCg0RIAGBbraX5Va2h5fKOA54mzghdrjsr187EAqUdtkjVaKejGe+ufibqVEQhYbTpBSlDMdE8ty6/Dq1jIoJNF8xpoGhWJZZVmy/bCtaWTMqyJoGANiy5FGaIY9QBgiry4amm4puKIY90g3H0By9XLINbSJLY5RSbpqrlDRZWkchoU7uti5nKXFiQDF1CIgQdRh0hs3HB4drOqDAJDdqW5S5w7QxZyxxVBWWfARRGMISjCO1ph7p1HzqDPGMAJalaOfTp3V5d3e1WpVWZilOZ6qhaZqqVVWu41M8u5YbV8Vl5HskiLfnNiAxwRCE+DcQoB4Rm8e+1AxncYrZPPrEtK7qmjCtoDVUoG6Ra1l9d5Cju9DSEciUAoXOgV4YG6AApYhAJD0PvLp8fVkFt3dHKSA0iNOInpz/DRIiSxTGCfIVWkRWoLvc4pl0NWoIOh6BYUbxEj2JNkkARFTqpSjA6wdMefP5VMrLL60p/8NFlyH4L2WpqYdYOXT1THZcPEOU/Z+aHdZra2UMwgw1glk0CaPF1H2puKP0NiBuz22Ne8nP9WM9h3CovAW1L/fufNqs+97aXfIW3xb/JevyQivfrKa9JXrW/cmv5/u72fj38p7YPvnWjZpjNut0Fm9mf7joksHdd2zOJr2JixJX86ZxNtm0zepmchVW+wM6Ch7C1nRza45fvptT937S8rGVROWfi0R/xm/jR9qP+vebKO2EFWq7s75le/c0glM86ZJn6+nutuIFPevqJWUeXJk35s3dTX8+H1o3zfp7TIcxHAsLShhm018IsuIo2sNzpS6vF2Bf04uQYF8JclUnERxFGSJMbohbglqcjBMQ9h1ezO25qVe0TrfaLhtV07R0rd2qNg3+X9Wy9W61aRcctEVxArEdkwALX4Jlt/3zNUAYORQRH6XKMs7gHFH5C4suYEDyyIA/jphQNIo5i2uWXWlXm+VW127aZevWNTXNMq1Ot9u2jLbVkqWnmP0gP9JmwFB6zODlIwYfIIgTjATNiz6nvNEp4ylZgGXGQr20BCWCMj4IUsHFjmHZZZXiKAmRAKxGsZ+FqJTMkzxBKt3+GgqANJcOOqP8/X0a3um3IhNcx8dCgYpYWohXE50ZRVoRyOcB24cBF+abmY/FM+NpZSmGWyTHn967RbTJvlV4RK/t4ate4N6rX3z94031C1DqaT72jvwlPnBbzFQ+JjiJNIpqLkBpUcqWyyyv360gyJSbVzlP6uoQwYyz3GYUvyGi7k2oFw2ZPeoTz3v5Mb6MzcmQAYYi3m1SfrxgwxgiKjYMj7+W9aXry5FLnjeG1uycrB3yRUQg/nJXgQ4Uelzc4z+rOPXfy3XG1oEfHidfKxgmM3ES42TzSVPAmJvFnP/i9ND4OQPnnB8L90neY2G8m6YZQ59/kQSx1WUAYZwR5rlyLjgk2xwn2yTIeVf6YCYn9N2EXtNPJ/TL48OQ014E5L0u/ruygvN2gUgWi0COpS6v+cLJnZPZAbnvAB7ye0fj/G7bf+X340gaH8QfJQc5PX0PjT8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkCg0RIAGBbraX5Va2h5fKOA54mzghdrjsr187EAqUdtkjVaKejGe+ufibqVEQhYbTpBSlDMdE8ty6/Dq1jIoJNF8xpoGhWJZZVmy/bCtaWTMqyJoGANiy5FGaIY9QBgiry4amm4puKIY90g3H0By9XLINbSJLY5RSbpqrlDRZWkchoU7uti5nKXFiQDF1CIgQdRh0hs3HB4drOqDAJDdqW5S5w7QxZyxxVBWWfARRGMISjCO1ph7p1HzqDPGMAJalaOfTp3V5d3e1WpVWZilOZ6qhaZqqVVWu41M8u5YbV8Vl5HskiLfnNiAxwRCE+DcQoB4Rm8e+1AxncYrZPPrEtK7qmjCtoDVUoG6Ra1l9d5Cju9DSEciUAoXOgV4YG6AApYhAJD0PvLp8fVkFt3dHKSA0iNOInpz/DRIiSxTGCfIVWkRWoLvc4pl0NWoIOh6BYUbxEj2JNkkARFTqpSjA6wdMefP5VMrLL60p/8NFlyH4L2WpqYdYOXT1THZcPEOU/Z+aHdZra2UMwgw1glk0CaPF1H2puKP0NiBuz22Ne8nP9WM9h3CovAW1L/fufNqs+97aXfIW3xb/JevyQivfrKa9JXrW/cmv5/u72fj38p7YPvnWjZpjNut0Fm9mf7joksHdd2zOJr2JixJX86ZxNtm0zepmchVW+wM6Ch7C1nRza45fvptT937S8rGVROWfi0R/xm/jR9qP+vebKO2EFWq7s75le/c0glM86ZJn6+nutuIFPevqJWUeXJk35s3dTX8+H1o3zfp7TIcxHAsLShhm018IsuIo2sNzpS6vF2Bf04uQYF8JclUnERxFGSJMbohbglqcjBMQ9h1ezO25qVe0TrfaLhtV07R0rd2qNg3+X9Wy9W61aRcctEVxArEdkwALX4Jlt/3zNUAYORQRH6XKMs7gHFH5C4suYEDyyIA/jphQNIo5i2uWXWlXm+VW127aZevWNTXNMq1Ot9u2jLbVkqWnmP0gP9JmwFB6zODlIwYfIIgTjATNiz6nvNEp4ylZgGXGQr20BCWCMj4IUsHFjmHZZZXiKAmRAKxGsZ+FqJTMkzxBKt3+GgqANJcOOqP8/X0a3um3IhNcx8dCgYpYWohXE50ZRVoRyOcB24cBF+abmY/FM+NpZSmGWyTHn967RbTJvlV4RK/t4ate4N6rX3z94031C1DqaT72jvwlPnBbzFQ+JjiJNIpqLkBpUcqWyyyv360gyJSbVzlP6uoQwYyz3GYUvyGi7k2oFw2ZPeoTz3v5Mb6MzcmQAYYi3m1SfrxgwxgiKjYMj7+W9aXry5FLnjeG1uycrB3yRUQg/nJXgQ4Uelzc4z+rOPXfy3XG1oEfHidfKxgmM3ES42TzSVPAmJvFnP/i9ND4OQPnnB8L90neY2G8m6YZQ59/kQSx1WUAYZwR5rlyLjgk2xwn2yTIeVf6YCYn9N2EXtNPJ/TL48OQ014E5L0u/ruygvN2gUgWi0COpS6v+cLJnZPZAbnvAB7ye0fj/G7bf+X340gaH8QfJQc5PX0PjT8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfi5946XtCDO8iLdHUQT0ql+cmG4h2qbYpFD89TcpFgHRw7kzzECWze6zu0+e5JShOLK8NmOQcpJQxe811Sen4dp2vR5qyKyFWhW7oDkoaGg4CF2zikwHm7aq+Ixl4FPGEeVN1TJMWzMtzXImpuVZhvhUzLr7qCp3kDIRWrhUDFXJ44gyr0jbVLOUeglihHkUxcA8jr1xe3DpCU8PlZjU1ukaZZEwbc04n3u6jisBYIgiXMFJrJ/qOz6nAfPGZEoRz1L4yBmwpvqxd7lcVpZ2JUmnumUYhm64uvAJGJmeqK1f5WYIfBom63UX0YQSjCLyjiSoAfBZEijtaJqkhM/ib0KbumnI0BrkWMNmlZ6o+meCAt2RkXZApgxpbIbMMtgIQkiBYlBuR35TPTluguu9kxRRFiZpzPbWfwcJ6AKiZA6BxsrKSnTHRzzQrtYpYM+nOMoYWcCVpMkcYWDKMIWQ5JeECfIFTCnGr+RMfEjJMsB/M5ZTfRurgK4f6E6PTIHx/zOz7Xmto9yhKIPWXfzauRl386od8342GQ/OhvpqkfZGttMsIGw7r0Ftxv2x3ifrhlsfm/p6nk6siyU2u6uBPev9vn65RIByw4jrDzej1/5dLbyf/kYvOAscTK//eT+Paf7w79SKZov7lXMR0L5NL4Y+4sGv12qtY9084IfG+TkZ3g8HnQf38uaVzce3jZg02MB8vBmu0tx/1oeTeNWtQrBwECTJ1WsP4ZH7Pnh8vFxmTt55vP1lnaP3SbikZ7N+cDUa3oQzv/lZ03YNu8ZSEsbZ8wtgXi4lPfye0hfzQvxneZEWEmhh4erNpUYxDpSrLblLSouXCQEigSeGuV67tbphO26vZonDVTWNbsdtW+KXW3XMvtt2Sg1ao9iD2E1oSGQuqbJr/vwMEMceAxpAqi2SDM+AqT9E7CGOFJ+OxOFIKINJIlS8Wq8JCtoNq1+3LIGx37XMXrtv1c9Mu+7aHVW5Svg1vU7bIYd0V8FrOwo+AkzmBKTMS54zQXTGRUve0CLjkVlZoAqFTFwEqdRiz6o6NZ2ReB6BBKzHSZBFUJnP5kWDdLb+tjSEWWEdnU2K8/dtefv/lZ0QPgGRDkzW0gExTThwFZllId8X7GwXXIZvZwGRx0y0lacEr5Hs/vXJFkmTDVVERU/d8ZNZ4t64H7396079B1D6fj82iYIF2Upb3qnimhAi0iqn+YYqb5VssciK+TWkQKYivC500tTHgDOhcqtJ8gpU34TQj7pkNqj3Mm/su/gyPqNjjjjEgm1KsTzihTEGJl8Yvjgt+bHPl52Uom8ccn7I1o3EQ0Qi/vGtgj0s/YR5KL6WSRp8jutArK08ok7xrOCETuVKXierb0iBExGWCP1L0u3ghwIcSr5r3DR5g4ULNj1nHL7/R5HC1lQRxklGud9TC8O22BY4+WoO3qfTlzCFoH/c0Dn79oa+H1yOhezFSN34kj87a6SgCwZVPgQKLE01Fw9OkZxOt8T9A+C2vp8ZdePMcbp/0vfdSlpfzF8tWz3dPw+t/wA=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj07phYulA8wUKL44IgiI6BcnpimNtik0aUF//UkKRUDwcN4ZZko2m91nL3k2NQrCwLBsSlHMcESkbrsuv8I303QrSFNcXXOVErj2lDezaCimpheBqZu6Vy3KUpfSBHUJZYCwumzwPUU3FMMc64ZlaJZRKmiG/iJLExRTbpqrFDRZWoUBoVbmti4nMbEiQDG1CAgRtRi0RnbvzuKaFsgxyY3aGmXmMG74jM0tVYUFF0EUBLAAo1CtqXs6NZdaIzwjgCUx2vh0aV3enF0ul4VlsRDFM9XQNE3VqirXcSmeXcqNi/wwcrvEi9brFiARwRAE+AsIUD3E/MiV7GAWxZj54QnTuqprwrSCVlCBeolcyuq3gwzdmZb2QMYUKNQHem5siDwUIwKR9Djs1uXL8yq4PjuOAaFeFIf0YP1vkBBJURDNkavQPLIc3fkWj6SrUUPQ6hIYJBSn6F60yRxARKVBjDy8usOUN59Lpaz80oryH867DMF/KUtN3cXKoatHstPGM0TZ/6nZbr3WViYgSFBj0q7a2q3W8VclOrxpfTijhf+gj/XJy3M9g7CrvAa1Lfdmfdis297aHHLeP/qD3t0LocsxfRw+pddwfuW3/ks/n8duZ4W9/tQZhMvWwnu+HbxNm0/D5TSInkdmNKjQK60Fil1/etcp3pZUePFuuF/R0/ts/uGkn+HVKrn3782pEYcvtuYR3b+518fjYmmcdm7e56lK477Wsx8evEp6S5pf5ccUvFUnvVUH3PTjC20yfQEl/2FRYYPhdTV4rC7r3zHtxrAvzClhlLy9I8jypWiPblvq8HoB9ju9CAl2FS9TteaCoyhDhMkNcUpQi5VwAsKuxYu5XtvXFa1cKjtlo1oslnSt1azaBv9XLZl6p2qbOQetURxAbEXEw8KXYNl1//wOEIYWRcRFsZJGCfQRlX+x2AYMSF0y5JcjIhSNI87iesduVpyO7XS0crPdcpq6U3Y6nXKZ/9datiNL9xHrk35sewzF+wxe3mPwIYJ4jpGgedHnlDc6ZTwlC5AmLNALKSgQlPBBEAsu5ufMskpxOA+QAKyGkZsEqDD351mCVLr+GgqANJMOnXF2/06Gd7iXZ4LruFgoUBFLE/FqoiOjSM8DOR2wuRtwbt5OXCyuGU8rizFcI9nf+u4W0SbbVuERvbZGr3qOe6t+9vGfJ9VfQKmH+dg6clO84zafqXxMcBJp5NVcgMKikKRpktXvWhBkzM2rnCd1dYRgwlnucxx9IKJuTahnDZkt6gPPW/k+voT5ZMQAQyHvNilbnvHCGCEqXhhdfltW5z5f9lzyvDG0YsdkrYA/RATiX98q0IJCj4sH/LOMYve7XEds7fjhcfJnBcNkJlZinHyeaAoYcbOY818U7xo/ZuCY833hNslbLIx301vC0OkdSRBbXQYQRglh3bacCXbJNsPJPufI+lb6YSYj9M2EXtGTE3rauxtx2guBvNXFf1dWcNYuEMniIZBhqcsr/uDkzslsh9w3AHf53dEqmmOarb/x+34kjR/in5KdnB7eh8Yf</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0720211388233221157</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0720211388233221157</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0720141388233214214</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0720181388233218151</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0720211388233221157</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>B160EF9C52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>A560389D52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>B760545E52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d9f91a0-cf40-4715-aeaa-9e1b3a3a0f69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true" id="0c602d59-a23e-4f22-b8d6-e354e0979ead"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="5e79a886-e9be-43d3-b770-ef35038f0465"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5B60155F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED264D23FC94E0401F0A05991653:DC3BE0B1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0720321388233232403</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9A60B13F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9A60B13F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9A60B13F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5B60155F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4F60037062933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">51708D0162933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5B60155F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4F60037062933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:51708D0162933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx3jGxfjCcyAgcZJCC3QJM1LxsgLVmNLxJIN6a8/kokJEJLSM5MZovVq99uLvt1zFiSx5XYYg5RjShS/11IfTcuo2nWzqUGjDlrVdkBzGjNTsxzbboCB5jWnqSo+Yxn4hPGA8JZqGaatmZbQmZqWaxmu1ajUzOqDqtxCyoRpoVIxVGWdxIS5hduWmqXEpQHDzCVBAszlyJ10hteu0HSDEpPaPt+gLBym7YjzpavrqBICgjhGFUQT/Vzf0zkPmTvBCxLwLIVXnyFrqa93V6tVZWVXaLrQLcMwdKOpC52Q4cUXtX1WXobQJ3O6OXsBoQSjIMZ/AglqCDyiodKJFzTFPEo+MG3qpiFNa7BGGjKr5Iuqvzko0J1oaQ9kygKNRYFZGhvDHFIgCJSfY7+lfjmtgpu70zQgbE7ThB2c/w0SkBxiuoRQY2VkJbrTLR5JV/sckOsTFGcM53Aj22QZIGDK9xTmeH2NmWi+kClF+ZU1E3+47DJA/1KWc30Xq4CuH8lODy+A8f9Ts916bazcBnEG7XyEo9XSi7znX3bjLlrR5IkNmk/VqOe0Cgi7yhtQ23K/ng+bddtbr5eyUX733Bhc0YvlRWP4xFapc/E0/ZZ+/TFfDfxqTqfdRc/I6uMuzfq33du7n827cR54a07vLd+0a+zbUJ99r8/MRXQWdy+vfO+3k43732a/U7j0/a/ohv3xR/qwMyF0dDMaWFWvPx/O0l/27eXlMvcf/OjeuHZGqd1LHh7WL15M7oDWojNym19QuOjVrm76/o+rrnnltN5i2o1hX1hSwiSb/QbEy6NsD7+nDES9Av45vUgJDrV5oeouJUcxDoSrbXlLUoubCQLCoSuKuTnXunXDrNUGNatp21XT8LrNjiX+a1Ydc9DsOCUHbVAcQPQomWPpS7Lspn8+B4gSlwEJIdVymqEImPqJxV7AA8UnY/E4KGEwpYLFvUHNNvuNumEbjjPo903H8Qam0W80e6I+hqkqN5SPyCjtzDmk+wxe22PwMSC8xCBpXvY5E43OuEjJc5BnPDYreVAhkIlBkEoudq2qU9MZTpYxSMB6QsMshsoyWhYJ0tnm19ICxArpuD8t3t+H4R1+KzMhdEIsFZiMpQuimnBkFJllIB8H7OwGXJrvZCGWz0yklacYbZDsf3rrFtkm21YRET16k0ezxL1VP/n6+5v6J6D0w3xsHYU53nFbzlQxJgSJtMtqPgeV50qW51lRv4YkyFSY1wVPmvoEUCZY7mVKn4DoWxP6SUNmi/rA81a+jy/jEZnwgEMiuk0pjidsGBNgcsPwxWtZn7q+7LkUeeOw5sdkXiwWEYn4010FuUjqCfF38bOiafhWriO2dvyIOMVawTFZyJMcJy8fNAWiwiwW/EfTXePHDBxzvi/cJnmLhYtummUcPv6iSGJrqQFCNCPc76mFYJdsC5z8ZQnum9I7MwWhv07oNftwQt8PryeC9pJA3erivytruGgXBKpcBAosLXUtFk7hnCx2yP0V4C6/Nzt1o2vaf+X3/Uja78TvJTs5PXwP7f8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx3jGxfjCcyAgcZJCC3QJM1LxsgLVmNLxJIN6a8/kokJEJLSM5MZovVq99uLvt1zFiSx5XYYg5RjShS/11IfTcuo2nWzqUGjDlrVdkBzGjNTsxzbboCB5jWnqSo+Yxn4hPGA8JZqGaatmZbQmZqWaxmu1ajUzOqDqtxCyoRpoVIxVGWdxIS5hduWmqXEpQHDzCVBAszlyJ10hteu0HSDEpPaPt+gLBym7YjzpavrqBICgjhGFUQT/Vzf0zkPmTvBCxLwLIVXnyFrqa93V6tVZWVXaLrQLcMwdKOpC52Q4cUXtX1WXobQJ3O6OXsBoQSjIMZ/AglqCDyiodKJFzTFPEo+MG3qpiFNa7BGGjKr5Iuqvzko0J1oaQ9kygKNRYFZGhvDHFIgCJSfY7+lfjmtgpu70zQgbE7ThB2c/w0SkBxiuoRQY2VkJbrTLR5JV/sckOsTFGcM53Aj22QZIGDK9xTmeH2NmWi+kClF+ZU1E3+47DJA/1KWc30Xq4CuH8lODy+A8f9Ts916bazcBnEG7XyEo9XSi7znX3bjLlrR5IkNmk/VqOe0Cgi7yhtQ23K/ng+bddtbr5eyUX733Bhc0YvlRWP4xFapc/E0/ZZ+/TFfDfxqTqfdRc/I6uMuzfq33du7n827cR54a07vLd+0a+zbUJ99r8/MRXQWdy+vfO+3k43732a/U7j0/a/ohv3xR/qwMyF0dDMaWFWvPx/O0l/27eXlMvcf/OjeuHZGqd1LHh7WL15M7oDWojNym19QuOjVrm76/o+rrnnltN5i2o1hX1hSwiSb/QbEy6NsD7+nDES9Av45vUgJDrV5oeouJUcxDoSrbXlLUoubCQLCoSuKuTnXunXDrNUGNatp21XT8LrNjiX+a1Ydc9DsOCUHbVAcQPQomWPpS7Lspn8+B4gSlwEJIdVymqEImPqJxV7AA8UnY/E4KGEwpYLFvUHNNvuNumEbjjPo903H8Qam0W80e6I+hqkqN5SPyCjtzDmk+wxe22PwMSC8xCBpXvY5E43OuEjJc5BnPDYreVAhkIlBkEoudq2qU9MZTpYxSMB6QsMshsoyWhYJ0tnm19ICxArpuD8t3t+H4R1+KzMhdEIsFZiMpQuimnBkFJllIB8H7OwGXJrvZCGWz0yklacYbZDsf3rrFtkm21YRET16k0ezxL1VP/n6+5v6J6D0w3xsHYU53nFbzlQxJgSJtMtqPgeV50qW51lRv4YkyFSY1wVPmvoEUCZY7mVKn4DoWxP6SUNmi/rA81a+jy/jEZnwgEMiuk0pjidsGBNgcsPwxWtZn7q+7LkUeeOw5sdkXiwWEYn4010FuUjqCfF38bOiafhWriO2dvyIOMVawTFZyJMcJy8fNAWiwiwW/EfTXePHDBxzvi/cJnmLhYtummUcPv6iSGJrqQFCNCPc76mFYJdsC5z8ZQnum9I7MwWhv07oNftwQt8PryeC9pJA3erivytruGgXBKpcBAosLXUtFk7hnCx2yP0V4C6/Nzt1o2vaf+X3/Uja78TvJTs5PXwP7f8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQG6QhAiRI4DRqS3uAsqUvlXEMeEmcNHYg7a8/diAUKHTZI1Winoxnvrn4m2lQEIWG06YUpQzHRPK9pvxam+pW1QRQCar2VKnOgKFMZ2ZNsQztOrCsmQ11KEs+pRnyCWWAsKZsaLqp6IZi2CPdcAzNMfWKVtdfZGmMUspNc5WKJkt5FBLqFG6bcpYSJwYUU4eACFGHQWfYvr9zuKYDSkxyq7FBWThMWwvGEkdVYSVAEIUhrMA4UhvqgU4joM4QzwlgWYq2PgPalLd31+t1ZW1W4nSuGpqmqVpd5ToBxfMrufWjvIwCn8zizdkFJCYYghB/AAHqHrFFHEjtcB6nmC2iM6Z1VdeEaQXlUIF6lVzJ6qeDAt2Flg5AphQodAH00tgAzVCKCETS08BvyleXVXBzd5QCQmdxGtGj899BQmSFwjhBgULLyEp0l1s8ka5WA0HHJzDMKF6hvmiTBEBEpccUzXB+hylvvoBKRfmlnPI/XHYZgn9Tloa6j5VDV09kx8NzRNn/qdl+vTZWxiDMUItYNXfCFmQxuH3r/TOe9ewH5j51Fu+/us0Cwr7yBtSu3NvzcbPuemt7aVydJLP1cpX0sodxfUU/+n5w7+WT62RZdX9PSO3BJuHP5Q2cRH1Su/Gjjtbp6/2uBvr2MnXXHZzHnpZ47SH2fjyq/ksvrg+Xz2pkBHn/eeTd6nR5uyIf89DzJqNfHwvTs9qPyc3QhcnTyA//vXuxjNq7Fd9lH64x9YK+y49v48cf+W2QBD/HL0Zi5sM2StbWU/Mzpv0YDoUlJQyz6W8EWXkU7eF7Uo/XC7Dv6UVIcKDMClUnERxFGSJMbolbglqcjBMQDhxezM252rM0zbzWLKNumlVdczv1tsH/q1dtvVdv2yUHbVAcQXRjMsPCl2DZTf98DxBGDkUkQKmyijO4QFT+xqIHGJB8MuCPIyYUjWLO4lq9a7qm1+31aj2zWvUM13Jt2+q6um3q12ZdlvoxeyAPaXvGUHrI4LUDBh8giBOMBM2LPqe80SnjKXkDq4yFemUFKgRlfBCkgosdo2rXVIqjJEQCsBrFQRaiSrJIigSpdPNrKADSQjrojor3dza8429lJrhOgIUCFbF0EK8mOjGKjDKQ8wHb+wGX5ttZgMUz42llKYYbJIefPrtFtMmuVXhEr+7wVS9x79Qvvv71pvoNKPU4HztHwQrvuS1nKh8TnERaZTXfQOWtkq1WWVG/a0GQKTevcp7U1SGCGWe591G8RETdmVAvGjI71Eeed/JDfBknwiEDDEW826TieMGGMURUbBg+fy35pevLgUueN4ZydkrmhnwREYi/3VWgA4UeFz/yn3WcBp/lOmFrzw+Pk68VDJO5OIlx8n6mKWDMzWLOf3G6b/yUgVPOD4W7JO+wMN5N04yh818kQWxNGUAYZ4T5nlwI9sm2wMneE+R8Kn0xUxD6dkLn9OyEfr6/G3Lai4C808V/VlZw0S4QyWIRKLA05ZwvnNw5me+R+xbgPr/X25bW0c1e7Q/8fhhJ64v4q2Qvp8fvofUf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/A4jx3jCzYYT2CGS6FukiYBSi8vHSGvQYktEUsGkl9/JBMTICSlZyYzROvV7rcXfbsXHKWJE7Q5h0wQRrWw19T/uDW7BrjhGg6C2HAdFwwf0NSYonrDb0DkeVZN10LOcwgpF4iKpu5YdtWwHcPxx7YTOFZQ9So1v/pb1yaQcWlaqlQsXVunCeVB4bap5xkNGOKEBxSlwAOBg1H7+iqQmgEqMemtiw3KwmHWmguxCEwTVyLAkCS4gllqXph7OhcRD0ZkRpHIM3jxGfGm/nJ3tVpVVtUKy2amY1mWaTVMqRNxMjvXW2flZYhCGrPNuYsoowSjhDwjBeoaxJxFWjuZsYyIefqOadu0LWXagDU2sO3Sc918dVCgO9HSHsiMI4PPkV0aG0IMGVAM2vdh2NTPT6vg5u44Q5THLEv5wfnfIAFdQsIWEBm8jKxEd7rFI+lqXQAOQoqTnJMlfFNtskAYuHabQUzWV4TL5ou4VpRfW3P5R8ouA/wvZbkwd7FK6OaR7PTIDLj4PzXbrdfGygQlObT6rF5z7vPx5G7y86k3ZDFaPt9Fadxd3DULCLvKG1Dbcr+cD5t121svl37kuJ3Un7zJHH58fzZHibn2H74sL9PO1+S2/fluPKhPxMNgiAdjUhMPn76HPfM6bK9+RVfrO/ZsfepPf4/z0eXw/so7eybuYExvTG8uRmY3Xi2cWdfn94+ZVRvx+PbbzTRO0i/zr5erx84yD/HjQ3INg4Hn4pTVI0TA731yoq/m0Jpenn3xJxPSWHXi9XCAag+/5kPWfI1pN4Z9YUkJo3x6D1iUR9UeYU/ry3oh8TG9KAmJjLhQDRaKo7gAKvSWuqWoJcglAZEokMXcnD27bvk9y645jWrVta1up9F25H8N17f7jbZfctAGxQHELqMxUb4Uy27652OAOA040AgyY8lyPAeuf2CxhwTSQjqUj4NRDmOmWLzxuWo5vW7P7VT7Tt+t13pW3210vGrXczqdvq59Y+KG3mTtWEC2z+DeHoMPAZMFAUXzqs+5bHQuZEoe0TIXiV1ZogqFXA6CTHFx4Li+Z3KSLhJQgM2URXkClcV8USTI5Jtfx0CYF9Lh53Hx/t4N7/BbmQmpExGlwFUsHZDVhCOjyCkDeT9gfzfg0nw7j4h6ZjKtIiN4g2T/02u3qDbZtoqM6E939McucW/VT77+9qb5ASjzMB9bR9GS7LgtZ6ocE5JEWmU1H1HlsZIvl3lRv7oiyEyaNyVP2uYIcC5Z7mnMHoCaWxPmSUNmi/rA81a+jy8XczoSSEAqu00rjidsGCPgasMI5WtZn7q+7LmUeROwFsdk3UQuIgrxh7sKDrDSk+Jb+bNiWfRariO2dvzIOOVaIQidqZMaJ0/vNAVm0iyR/MeyXePHDBxzvi/cJnmLRchumuYC3v+iKWJr6ghjllMR9vRCsEu2BU7xtIDgVemNmYLQXyb0mr87oX9eX40k7aVI3+qSvysbpGgXDLpaBAosTX0tF07pnM52yP0F4C6/N9o1q2NX+95f+H0/ktYb8VvJTk4P30PrPw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0720321388233232403</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0720321388233232403</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0720251388233225288</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0720291388233229867</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0720321388233232403</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6B60255F52933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5F60037062933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>61708D0162933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e79a886-e9be-43d3-b770-ef35038f0465</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true" id="ed662c97-01aa-48bd-8325-ee16d567eb6e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="e51efb9d-d1a4-4d82-90e4-c40166555eee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>0570882262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED264D45FC94E0401F0A05991653:C92032BC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0720431388233243158</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>4470280262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:4470280262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:4470280262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0570882262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F8702E1362933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4B70A2B362933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0570882262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F8702E1362933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4B70A2B362933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0WnfrwpbdOibUeYQcSzHnon+KLel5uQLpDXNoEmBfSvf5NiERA97p1hhsl2s/vsjzy7pwJnKYpaQkAuKWdGfN4wfw99F3nBMbLCAAWWf4LrVugHnuX54XFyjHHdDZBpxEIUEDMhMZMNEzmuZ7nIQsGdiyLkRF5Q8/3wl2kMIBfKtFKpOaaxzFImotJtwyxyFnEsqIgYzkBEkkT91nU3UpoRrjCZzdMVytJh3pxIOY1sm9QSIJCmpEZ4Zp/aWzqniYj6dMywLHJ49ZmIhvl6d7FY1BZejedjGzmOYzuhrXQSQcdHZvNLdRmSmI346tzGjDNKcEpfsAZ1DXLCE6OVjnlO5ST7wLRru442bcGSWMT12ZFpvzko0R1oaQtkLrAlJtitjPVgBDkwAsY/vbhhHh1WwdXduxwzMeJ5JnbOfwcJ2BxSPoXEElVkFbrDLe5JV/MUSBQzkhaCzuFGt8kUExDGzxxGdNmlQjVfIoyy/MZSqB+tugzI35Tl1N7EqqDbe7JzTscg5P+p2Wa9VlYGOC2gKdkv5/HypTecwk97NLvt3M4TuLkZXF2JRglhU3kFal3u1/Nus6576/USF1/H8fFskc26y8dsent1d3/7dXBR//oiW7e9B56APVxiZ9K9GUBrzBbdmDod8tRBTH6bXLEkHPR/DV6ebe7G918eQ+DPncf7Rz/v9wJvULSejseo9zJ+TFrIOx98H1+edbwQ7nuj9vxy+p2zb94ghofuYji/XVzz+VN6nYvuMAuC4suJi4b4B/Rk73I0Q0M/iUnjLabNGLaFFSX0i+G/QGR11O0RnxsXql5Yfk4vWkITa1SqRlPNUUICk2ZT39LUEhWKgGgSqWKuzk79xAkChI5R6Hm+67TPQhWxelJ+4F6EraDioBWKHYhtzkZU+9Isu+qfzwGSLBLAEsitOS/IBIT5icVzLLERs556HJwJuOOKxVHH8xE6u0DBhRu23PoZ8h0/OPFbrheis7ZnGjdc/mA/8tZIQr7N4PUtBu8BoVMKmuZ1nwvV6EKqlMzwvJCpW5vjGoNCDYJcc3GE/KBuC5pNU9CA7YwnRQq16WRaJsgWq39kYSJKaa9zV76/D8Pb/VZlQukkVCsIHcsZqGrCnlGEqkA+DjjYDLgy3yoSqp+ZSqvMKVkh2f701i26TdatoiL63e7/divca/WDr7+/aX8Cyt7Nx9pRMqcbbquZqsaEIpFmVc0Zrs1qxXxelPU70QSZK/O24knX7gMpFMs93/EnYPbahH3QkFmj3vG8lm/jK+SE9SWWkKluM8rjARtGH4TeMGL1WpaHri9bLlXeJCzlPlk7VYuIRvzprkIiovWU+Kf6W/A8eSvXHlsbflScaq2QlI31SY+T5w+agnBllir+4/mm8X0G9jnfFq6TvMYiVTcNCwkffzE0sTVMTAgvmIzPzVKwSbYlTvk8hehN6Z2ZktBfJ/RSfDihH667fUV7GTbXuvTPyhYt24WAqReBEkvDXKqFUzln4w1yfwW4ye++f+KgwPkjv29H0nwnfi/ZyOnue2j+Bw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0WnfrwpbdOibUeYQcSzHnon+KLel5uQLpDXNoEmBfSvf5NiERA97p1hhsl2s/vsjzy7pwJnKYpaQkAuKWdGfN4wfw99F3nBMbLCAAWWf4LrVugHnuX54XFyjHHdDZBpxEIUEDMhMZMNEzmuZ7nIQsGdiyLkRF5Q8/3wl2kMIBfKtFKpOaaxzFImotJtwyxyFnEsqIgYzkBEkkT91nU3UpoRrjCZzdMVytJh3pxIOY1sm9QSIJCmpEZ4Zp/aWzqniYj6dMywLHJ49ZmIhvl6d7FY1BZejedjGzmOYzuhrXQSQcdHZvNLdRmSmI346tzGjDNKcEpfsAZ1DXLCE6OVjnlO5ST7wLRru442bcGSWMT12ZFpvzko0R1oaQtkLrAlJtitjPVgBDkwAsY/vbhhHh1WwdXduxwzMeJ5JnbOfwcJ2BxSPoXEElVkFbrDLe5JV/MUSBQzkhaCzuFGt8kUExDGzxxGdNmlQjVfIoyy/MZSqB+tugzI35Tl1N7EqqDbe7JzTscg5P+p2Wa9VlYGOC2gKdkv5/HypTecwk97NLvt3M4TuLkZXF2JRglhU3kFal3u1/Nus6576/USF1/H8fFskc26y8dsent1d3/7dXBR//oiW7e9B56APVxiZ9K9GUBrzBbdmDod8tRBTH6bXLEkHPR/DV6ebe7G918eQ+DPncf7Rz/v9wJvULSejseo9zJ+TFrIOx98H1+edbwQ7nuj9vxy+p2zb94ghofuYji/XVzz+VN6nYvuMAuC4suJi4b4B/Rk73I0Q0M/iUnjLabNGLaFFSX0i+G/QGR11O0RnxsXql5Yfk4vWkITa1SqRlPNUUICk2ZT39LUEhWKgGgSqWKuzk79xAkChI5R6Hm+67TPQhWxelJ+4F6EraDioBWKHYhtzkZU+9Isu+qfzwGSLBLAEsitOS/IBIT5icVzLLERs556HJwJuOOKxVHH8xE6u0DBhRu23PoZ8h0/OPFbrheis7ZnGjdc/mA/8tZIQr7N4PUtBu8BoVMKmuZ1nwvV6EKqlMzwvJCpW5vjGoNCDYJcc3GE/KBuC5pNU9CA7YwnRQq16WRaJsgWq39kYSJKaa9zV76/D8Pb/VZlQukkVCsIHcsZqGrCnlGEqkA+DjjYDLgy3yoSqp+ZSqvMKVkh2f701i26TdatoiL63e7/divca/WDr7+/aX8Cyt7Nx9pRMqcbbquZqsaEIpFmVc0Zrs1qxXxelPU70QSZK/O24knX7gMpFMs93/EnYPbahH3QkFmj3vG8lm/jK+SE9SWWkKluM8rjARtGH4TeMGL1WpaHri9bLlXeJCzlPlk7VYuIRvzprkIiovWU+Kf6W/A8eSvXHlsbflScaq2QlI31SY+T5w+agnBllir+4/mm8X0G9jnfFq6TvMYiVTcNCwkffzE0sTVMTAgvmIzPzVKwSbYlTvk8hehN6Z2ZktBfJ/RSfDihH667fUV7GTbXuvTPyhYt24WAqReBEkvDXKqFUzln4w1yfwW4ye++f+KgwPkjv29H0nwnfi/ZyOnue2j+Bw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3TqpVP6CZSOMINAtauoK+ji3uzENIWwbVKbFMr++jcpFgHRZd8ZZzCnJ+c85yPPOecMJLHldRlDGceUKEG/rf5yXxyraZsNLTJbTc2Btqm9NEBdM0LbccBLsxm1LFUJGMtRQBgHhLdVyzBtzbQ0yx2blmcZnmPVLMP+qSpPKGPCtFCpGapSJDFhXum2reYZ8ShgmHkEJIh5HHqj7vDGE5oeqDCpnfM1ytJh1plxnnq6DmshgiiOYQ3SRD/Xd3TOQ+aN8JQAnmfozWfI2urb3eVyWVvaNZpNdcswDN1o6UInZHh6qnZOqssoDEhE1+ceIJRgCGL8B0hQQ8RnNFS68ZRmmM+ST0ybumlI0xoqoAZNh5yq+ruDEt2RlnZAZgxobAbMytgDilCGCETK40PQVk+Pq+D67jgDhEU0S9je+d8gIbJAMU1RqLEqsgrd8RYPpKtzjqAXEBjnDC/QrWyTFEDElPsMRbi4wUw0X8iUsvxKwcQfrroMwX8py7m+jVVA1w9kp4+niPH/U7Pteq2tPIE4Rx3Ub4y/PSfLRjFM6vN8Mggbl5NgdH3X/94uIWwrr0Ftyv123m/WTW+9XWI/89HKN/3hTXbWSq/9SQTY7Ew8vvlcT90/9avVjPa+6Y8/wvsr9HyX6PQsCkL6hJ3p5Y8kS53+tDHqw0d8xSYn44EeXq+Y9X2e+c891A0XbjNeXP9+eKoP5+kt6N764/qSzhc3lxP/6tUp+uZiEJ21isxl0dk4oleD1W0fhsPHon7CikvXp4OgOTCYuTR6eYO232PajmFXWFHCKH+ZI8iro2yPoK/4ol6Af00vUoJDLSpVvVRyFOOIcLUjb0lq8XJBQDj0RDHXZ99tGtbAtBtWy7Yd0+hdtLqW+K/luKbf6roVB61R7EHsURJh6Uuy7Lp/vgYIE48hEqJMW9AczhBTv7DYBxwoAXkQj4MShsZUsPjA7Bm9Vt3w7VbTtOxGv2W5zoXf8xsigAtbMPgt5XfkLutGHGW7DF7fYfAHBHGKkaR52edMNDrjIiWvYJHz2KwtQI2gXAyCTHKxZzluXWc4SWMkAesJDfMY1dJZWiZIZ+tfSwOQldKHwbh8f5+Gt/+tyoTQCbFUYDKWCySqiQ6MIrsK5POA3e2AK/PdPMTymYm08gzDNZLdT+/dIttk0yoiol+90S+zwr1RP/r6x5v6F6D0/XxsHIULvOW2mqliTAgS6VTVfAW111q+WORl/ZqSIDNhXhc8aeojBHPBcqsx/Y2IvjGhHzVkNqj3PG/ku/hyPiMjDjhKRLcp5fGIDWOEmNwwAvFaimPXlx2XIm8cFfyQrBeLRUQi/nJXgR6UekJ8L36WNAvfy3XA1pYfEadYKzgmU3mS42T1SVNAKsxiwX802zZ+yMAh57vCTZI3WLjoppeco8+/KJLY2iqAkOaEB321FGyTbYmTr1LkvSt9MFMS+tuELtinE3oyvBkJ2kuAutHFf1fWcNkuEKlyESixtNVCLJzCOZlukfsbwG1+dxzB765h/Y3fdyPpfBB/lGzldP89dP4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+I8FP7ur+jUjw6kV6AdYQaKrLjiBZB99YsT0gDRNq1JymV//SbFIiC67DvjDOb05DnPueRJzjmMI8tvco6ZIAnVuu26/uxUx/a4atRKuBKaJWcc2qWxicOSVXM9N3TcauiEutblPMNdygWkoq5bhmmXTEv6DE3LtwzfccsVz3nStRFmXEJLl7Kha8s4otzPw9b1jFE/gZxwn8IYc18gf9DsXfvS04cFJ71xvmaZB2SNmRCpDwAqhxjhKEJllMTgHOz4nIfcH5AphSJj+D1myOv6+97FYlFe2OWETYFlGAYwPCB9Qk6mp3rjpNiMwy6dJOt1AGlCCYIR+Q0VqR4WsyTUmtE0YUTM4i+gTWAaCrqEl6iETIee6uAjQM7uSKQdkozDEp9BswDr4wlmmCKsPfS7df30uA6u9w4ZpHySsJjvrf+NEqZzHCWpjMGLzAp2xyMeKFfjHCO/S1GUcTLHN2pMUogw1+4YnpDlNeFy+EKu5e3Xllz+kWLKMPqXtpyDba6SOjhQnTaZYi7+T8+2+7VGGcEow42Re2al1+B2nMzStB2BS7b8OeoTkr106zmFbec1qU2739f7w7qZrfdNlA7o7W0wvRSL9uWN2XNWL1X446cXB+HgAd6zi97wR3OVPNhvvy6ekj666rirkf1qnA3vfrOf08CYXxmLtzH4zUDn5OrGNcbx1X3vzE3ZZatVe4hql8H87seIZqAza908Gq8dE/ZcLzTPcOvsxbDnCwn3Mr02RpP7sTeOUToFFMf94GT1aFw9PYJZv9f+lQ7TPrdf6x85beewaywkYZCNXzASxVKNR7etdWS/oPheXpSFhKVJ7uqnSqO4wFToDbVLSYufSQEioS+buV47rarRtFp2xfJs2zGNoOU1Lfmf59TMjtesFRq0ZrFHMUjohKhYSmXX8/M9QRT7HNMQs9I8ydAMc/0bxDYUUOvSvjwcCeV4mEgVt8xmxas47oVXMTpBzbODoOJcBN6FXXNalcDVtZtE3NJb1pwIzHYV3N1R8D5GJCVYybyacy4HnQtZkjc4z0RkluewTHEmLwKmtNi3nJoLOInTCCvCIE7CLMLldJbmBQJ8/WuVIOK5tX8xzM/fl+ntfysqIX1Cohy4yqWFZTfxgavILhL5OuHadsIFfDMLiTpmsqyCEbRmsvvpY1rUmGxGRWb0HAyezYL3xv3o7Z93gm9Igf16bAKFc7IVtrhT5TUhRaRRdPMNlt/K2Xye5f2rKoFkEh5InTTBAKNMqtxqmLxiCjYQ4KhLZsN6L/LGvssvEzM6EFDgWE6bli+PeGEMMFcvjK48Lctjny87IWXdBF6KQ7Ygkg8RxfjbtwrykfKT5jv5s0jYR+KHsLbiyDzls0IQOlUrdZ2svhgKlEhYIvUvYdvghwAOBd81boq84SLkNI0zgb/+oilhq+sQoSSjotvWc8O22OY8xSrF/ofTJ5hc0N9v6CX/8ob+r3c9kLIXQ33jS/7uXCL5uCCsq4dAzqWuL+WDUwan0y1xfye4o+9O1bBqhvU3fd/NpPHJ/NmyVdP989D4Aw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0720431388233243158</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0720431388233243158</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0720361388233236847</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0720401388233240872</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0720431388233243158</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1570882262933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>09702E1362933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>5B70A2B362933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e51efb9d-d1a4-4d82-90e4-c40166555eee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true" id="8feaff25-820c-4af3-baa6-845ba90671cd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="9acd1c9a-5834-403b-b34f-a5ecbadf81b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>FE70DC8462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360418B11EE5E0401F0A059945A9:7DBEA97E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0720521388233252800</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3E70607462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3E70607462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3E70607462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FE70DC8462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E280718562933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">35808D0662933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FE70DC8462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E280718562933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:35808D0662933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP5+fgVDP55BXkRFRp1Bsbe2Wq3a3rZfOjFETAvBkoC0v/4mKFat9njujCNk2ew++5In26AgDAzboRTFDEdE6rlN+cWAet0ElqaYBuJ/ujZTZrBaU7Tq3ASGYZaBVpWlHqUJ6hHKAGFN2dD0sqIbimFNdcM2NNu0SmWj/CxLDyim3DRXKWmylIUBoXbutiknMbEjQDG1CQgRtRm0J86gb3NNGxSY5FZjjTJ3GLcWjC1tVYUlD0EUBLAEo1BtqHs6DY/aE+wTwJIYbXx6tClv9q5Wq9KqXIpiXzU0TVO1usp1PIr9C7n1q9iMvB6ZR+t1B5CIYAgC/AkEqAFii8iTnMCPYswW4QnTuqprwrSCMqhA3SQXsvrlIEd3pqU9kDEFCl0AvTA2RnMUIwKRdD/uNeWL8yq43juNAaHzKA7pwfrvICGSoiBaIk+hRWQFuvMtHklXq4Gg3SMwSChO0a1okyWAiEqjGM1x1seUN59Hpbz8Ukb5DxddhuDflKWh7mLl0NUj2XGxjyj7PzXbrdfaygMIEtS6G1+3n9rx6HpFwdOiepn2I6//5jym3lMzh7CrvAa1Lfdmfdis297abOpaOPOX3uWN4XTuBhWSDaj6bNbbd//WzAl4Hif3t73YuHp2/rl20253Zc2n4WvoG1rqk2HbSUbmaux2zKvo0ce/2toQDIm79NUOqN2kldjotitvJH4bD4Y39+6tH2rZ/Corv476xnwxn/lJd4mnhM38+4Ra9fB39z4crjIvdB/av94/g+sH8/fDKJm5s88kgy5sfsW0G8O+sKCESTJ7RZAVS9EePVe65PUC7Gd6ERLsKfNc1V4KjqIMESa3xC5BLXbCCQh7Ni/men3ZrWluxzKrRr1c5meq0647Bn+rm5Z+WXesgoPWKA4gdiIyx8KXYNl1//wMEIY2RcRDsZJGCVwgKv9g0QUMSD0y5ocjIhRNI87izqXTMbWyadbLbcupduu6WRMit1LptKtWR5ZuIzYkw9iZMxTvM3hlj8HHCOIlRoLmRZ9T3uiU8ZS8gzRhgV5KQYmghF8EseBi2zCtikpxuAyQAKyGkZcEqLRcLPMEqXT9NBQAaS4dd6f5+TsZ3uG3IhNcx8NCgYpY2ohXEx25ispFIKcDtnYDLsw7iYfFMeNpZTGGayT7n766RbTJtlV4RC+dyYte4N6qn739+071B1DqYT62jrwU77gt7lR+TXASaRXVfAel91KSpklev5ogyJibVzlP6uoEwYSz3Mc0ekNE3ZpQz7pktqgPPG/l+/gStiATBhgKebdJ+fKMCWOCqJgwevy0ZOeOL3sued4YytgxWSfgg4hA/OOsAm0o9Lh4xB+rKPa+ynXE1o4fHicfKxgmvliJ6+TjRFPAiJvFnP+ieNf4MQPHnO8Lt0neYmG8m2YJQ6e/SILYmjKAMEoI67lyLtgl2xwn+1gi+0vpm5mc0Dc3dEZP3tCPg/6E014I5K0u/rOygvN2gUgWg0COpSlnfODkzom/Q+4bgLv8Xub8XtVqf+T3/Uha38TfJTs5PTwPrf8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o6EP5+fgVDP55BXkRFRp1Bsbe2Wq3a3rZfOjFETAvBkoC0v/4mKFat9njujCNk2ew++5In26AgDAzboRTFDEdE6rlN+cWAet0ElqaYBuJ/ujZTZrBaU7Tq3ASGYZaBVpWlHqUJ6hHKAGFN2dD0sqIbimFNdcM2NNu0SmWj/CxLDyim3DRXKWmylIUBoXbutiknMbEjQDG1CQgRtRm0J86gb3NNGxSY5FZjjTJ3GLcWjC1tVYUlD0EUBLAEo1BtqHs6DY/aE+wTwJIYbXx6tClv9q5Wq9KqXIpiXzU0TVO1usp1PIr9C7n1q9iMvB6ZR+t1B5CIYAgC/AkEqAFii8iTnMCPYswW4QnTuqprwrSCMqhA3SQXsvrlIEd3pqU9kDEFCl0AvTA2RnMUIwKRdD/uNeWL8yq43juNAaHzKA7pwfrvICGSoiBaIk+hRWQFuvMtHklXq4Gg3SMwSChO0a1okyWAiEqjGM1x1seUN59Hpbz8Ukb5DxddhuDflKWh7mLl0NUj2XGxjyj7PzXbrdfaygMIEtS6G1+3n9rx6HpFwdOiepn2I6//5jym3lMzh7CrvAa1Lfdmfdis297abOpaOPOX3uWN4XTuBhWSDaj6bNbbd//WzAl4Hif3t73YuHp2/rl20253Zc2n4WvoG1rqk2HbSUbmaux2zKvo0ce/2toQDIm79NUOqN2kldjotitvJH4bD4Y39+6tH2rZ/Corv476xnwxn/lJd4mnhM38+4Ra9fB39z4crjIvdB/av94/g+sH8/fDKJm5s88kgy5sfsW0G8O+sKCESTJ7RZAVS9EePVe65PUC7Gd6ERLsKfNc1V4KjqIMESa3xC5BLXbCCQh7Ni/men3ZrWluxzKrRr1c5meq0647Bn+rm5Z+WXesgoPWKA4gdiIyx8KXYNl1//wMEIY2RcRDsZJGCVwgKv9g0QUMSD0y5ocjIhRNI87izqXTMbWyadbLbcupduu6WRMit1LptKtWR5ZuIzYkw9iZMxTvM3hlj8HHCOIlRoLmRZ9T3uiU8ZS8gzRhgV5KQYmghF8EseBi2zCtikpxuAyQAKyGkZcEqLRcLPMEqXT9NBQAaS4dd6f5+TsZ3uG3IhNcx8NCgYpY2ohXEx25ispFIKcDtnYDLsw7iYfFMeNpZTGGayT7n766RbTJtlV4RC+dyYte4N6qn739+071B1DqYT62jrwU77gt7lR+TXASaRXVfAel91KSpklev5ogyJibVzlP6uoEwYSz3Mc0ekNE3ZpQz7pktqgPPG/l+/gStiATBhgKebdJ+fKMCWOCqJgwevy0ZOeOL3sued4YytgxWSfgg4hA/OOsAm0o9Lh4xB+rKPa+ynXE1o4fHicfKxgmvliJ6+TjRFPAiJvFnP+ieNf4MQPHnO8Lt0neYmG8m2YJQ6e/SILYmjKAMEoI67lyLtgl2xwn+1gi+0vpm5mc0Dc3dEZP3tCPg/6E014I5K0u/rOygvN2gUgWg0COpSlnfODkzom/Q+4bgLv8Xub8XtVqf+T3/Uha38TfJTs5PTwPrf8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2cgbSlQOsAMoBx7roiXoqJfnJgukGObQpMC8utvUiwCoodzZ5zBbDe7z77k2a1zHIWW2+IcEkFjpnkXDf0Zv9hQLlmlgmlAtWAHplXAZRMXHAsq1bFtORVzrGse5yl4jAvMREO3DFPqWwXLGZqWaxlu2SxWbOdJ1+4h4dK0VCkauraKQsbdzG1DTxPmxphT7jIcAXcFcf1W79qVmi7OMenN+gZl5jBpToWYuQiRYgAEwpAUSRyhOtrTqQfc9emEYZEm8O4z4A39/e5yuSwuS8U4mSDLMAxk1JDUCTidnOvNs/wyBB4bx5tzB7OYUYJDusYKVA/ENA60VjiJEyqm0RemTWQaynQBVqRATJud6+jDQYbuREt7IBOOC3yKzdzYAMaQACOg3Q28hn5+WgU3d4cJZnwcJxE/OP8dJGALCOMZBAWeR5ajO93ikXQ160Bcj5Ew5XQBN6pNZpgA124TGNPVNeWy+QKuZeXXVlz+0bzLgPxNWepoF6uEjo5k54JOgIv/U7Pdem2s3OMwhabfuTen6KYUEA+zyePVYtbv116Wb7j/2Mgg7CpvQG3L/X4+bNZtb71fGoSi07qvDGf93mg0e7kahET0lsNRcEm7qEx+jteU/pg+4kElns8X7dj0l2T+EK6G44fr27b9Ml//urIY4vDqdc66i9tBSg2/85Bw/2F917roPbEBuZpy8O8TI6p0H3/++zu9un5DwzXyRXr1WouGtyX85Ik+X1eqb+tKfNcatQd8dFb+x/Bf0yVJ/B8/09pwuvJ44yOm3Rj2hTkl+OnLbyAiP6r28C60rqwXFt/Ti5LQoDDOVN2Z4igugAm9qW4panFTSUA0cGUxN+dLyzGqplOuWLVSyTaNTrvWsuR/Ndsxu7WWk3PQBsUBxE7MxlT5Uiy76Z/vAZLI5cACSAqLOCVT4Po3Fi+wwJrHBvJxxIzDMJYs3m3VHKfdtW2nW+6abaNttTp2tdbpmGapdGk6unYTiz7rJ62xgGSfwct7DD4AQmcUFM2rPuey0bmQKZnjRSpCs7jARQapHASJ4mLXsp0y4jSahaAAoygO0hCKs+ksSxDim19JSYRn0sHlMHt/X4Z3+C3PhNQJqFLgKpY2yGrCkVFk54F8HbCzG3BuvpUGVD0zmVaRULJBsv/po1tUm2xbRUb03PGfzRz3Vv3k659vom9AocN8bB0FC7rjNp+pckxIEmnm1Zzj4ryYLhZpVr+qIshEmkeSJ03kA0kly70N41dgaGsCnTRktqgPPG/l+/hSMWW+wAIi2W1adjxhw/CBqw3Dk69lder6sudS5k3AShyTdUK5iCjE3+4qxCVKT4pv5c8yToKPch2xteNHxinXCkHZRJ3UOHn7oilILM1SyX9xsmv8mIFjzveF2yRvsQjZTS+pgK+/aIrYGjomJE6Z8C70TLBLthlO8TYD90Ppk5mM0N8n9Ip/OaFHvWtf0l6E9a0u/bNygWbtQkBXi0CGpaGv5MIpnbPJDrm/A9zl99Jl1agYVftP/L4fSfOT+LNkJ6eH76H5Hw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx3jK2A8gRkwpHVP0uQAzaUvHUVeY6W27FgymP76I5mYACEpPTPMMFqvdr+96Ns9YyhNLG/IGBScZFQJxn31ZxRBx+04DxrqPmDNiSJDc822o0VWaNl2x42Mh0hVAsZKCCjjiPK+ahmmrZmWZrlz0/Isw2t3Wka7/UNVbqBgwrRQaRmqUqUJZV7ttq+WBfUyxAjzKEqBeRx7s+HlhSc0PdRgUgdnG5S1w2IQc557uo5bIWBIEtzCWaqf6Xs6ZyHzZmRBES8LePYZsr76fHe1WrVWdisrFrplGIZu9HShEzKy+KgOPjSXIQxolG3OPqIZJRgl5DeSoC6Bx1moDJNFVhAep2+YNnXTkKY1qLCGTYd+VPUXBzW6Ey3tgSwY0liMzMbYFCIogGJQvk+DvvrxtApu7s4LRFmUFSk7OP8dJKBLSLIcQo01kTXoTrd4JF2DM8BeQHFSMrKEb7JNcoSBKdcFRKS6IEw0X8iUuvxKxcSPNF0G+G/KcqbvYhXQ9SPZGZMFMP5/arZbr42VG5SUMKCjmxi3J1/MCvj09vdX8v3T9SS/L83HrF9D2FXegNqW+/l82Kzb3nq+tPyX8biKO/dVceV07Cv3ux/j9Na9vZs45ZT+isfrdtcZxb97+McqtL5eg9NdT3l6599bw7uRH+dBYA3D0dekV324nM7b3U/mPVwYjzfhahZ8/pJEMELT9PPt6jowizlb+o/l4umfKL+Lg3PHRhPzfv5gktFNkswNPb+y10xP/Kv1+YcI35IqtYdxydvOstvzHdx/iWk3hn1hQwmz8uERMG+Osj2CsXIu6oX4+/QiJSTUolrVyyVHMQ6UqwN5S1KLVwoCIqEnirk5223XcMdGp2P1bNsxDX/UG4rX5PQc1zzvDd2GgzYoDiD6GY2I9CVZdtM/7wPEqceAhlBoy6zEMTD1HYtjxJES0Kl4HBllMM8Ei1tmxzWGnfOO3fXHvjvunNtDa+JY/sTsdY3xRFW+ZfyKXhXDiEOxz+DtPQafAiY5AUnzss+ZaHTGRUqe0LLkidlaohaFUgyCQnKxZzluW2ckzROQgPU0C8sEWnmc1wnS2ebf0hBmtXQ6mdfv783wDr81mRA6IZEKTMYyAlFNODKKnCaQtwN2dwNuzA/LkMhnJtLKC4I3SPY/vXSLbJNtq4iIfvqzn2aDe6t+8vXXN/V3QOmH+dg6Cpdkx20zU8WYECQyaKr5hFpPrXK5LOv6dSVBFsK8LnjS1GeAS8Fy63n2C6i+NaGfNGS2qA88b+X7+Eoe0xlHHFLRbUp9PGHDmAGTG0YgXkt16vqy51LkjUPFj8n8RCwiEvG7uwr2sNQT4mvxt8qK8KVcR2zt+BFxirWCE7qQJzlO1m80Bc6EWSL4Lyt2jR8zcMz5vnCb5C0WLrrpoeTw9hdFEltfRRhnJeXBWK0Fu2Rb4+TrHLwXpVdmakJ/ntAVe3NC311ezATtpUjd6pI/K2ukbhcMqlwEaix9tRILp3BOFzvk/gxwj98nXaNjdJ0/8ft+JINX4teSnZwevofBfw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0720521388233252800</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0720521388233252800</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0720461388233246719</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0720501388233250528</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0720521388233252800</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0F70EC8462933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F280718562933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>45808D0662933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9acd1c9a-5834-403b-b34f-a5ecbadf81b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true" id="08e03280-ae5b-49a7-ae90-b53d38c00203"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="29c5911f-9b6d-4461-8c1c-ca001cb9afc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E8802C2762933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9676100ED43C71E0401F0A059979D6:F890CF3D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072141388233264101</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>28808EF662933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:28808EF662933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:28808EF662933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E8802C2762933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>DC80042862933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CF801EC862933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E8802C2762933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:DC80042862933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:CF801EC862933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1VI4gQIUUGiULrptt0W6PVl5TgGvJvY1Ha49NcfOzQUKO2yR6pEPRnPfHPxN3MiYJaCsC0E5pIwakTdpvnLjeN6veojC0EILN9zYiuuxTWr0XBGng886FUd04iEyHFEhYRUNk3guJ7lAgsEQxeEwAmrQaXugmfTuMdcKNNKpaJuLbKUirBw2zRzTkMGBREhhRkWoUThoH11GSrNEJaYzNbJCmXhkLcmUk5D20aVBCOcpqiCWGaf2Fs6J4kIB2RMocw5fvOZiKb5dnc+n1fmXoXxsQ0cx7Gdhq10EkHGR2brW3kZJxEdsdW5AymjBMGUvEIN6grLCUuMdjpmnMhJ9olp13YdbdrCC5VN16dHpv3uoEB3oKUtkFxAS0ygWxrr4xHmmCJs3PWjpnl0WAVXd4ccUjFiPBM753+DhOkMp2yKE0uUkZXoDre4J12tE4zCiKI0F2SGr3WbTCHCwrjheEQWl0So5kuEUZTfWAj1R8ouw+hfynJib2JV0O092emSMRby/9Rss14rK/cwzXGLd+zrC87H1z2URb3aI+jxi8cuqD0fi2YBYVN5BWpd7rfzbrOue+vtEnXb7Gy+7Izq1XlSi5cMLXrz29MrNKx1jhnvzxbMFtE0eOour6uvbjWujsTdaR6jm9vGy9OL//AqfrzeePfR4Pj42zk4j7k4f7n3L57B9M679Y7/nJ0+ubgzvY2fht3O8vjx8vuFmGU9Z56Ns5vv42VMadYHMzTsi/ZvEs9/nt+Rseul3yAIvj88L9sPT9Hd3WMPpKN28z2mzRi2hSUlDPL4N0ayPOr2iLpGT9ULyq/pRUtIYo0K1XCqOUpITKXZ0rc0tYS5IiCShKqYq/NZEDigA+o10PA833U6p402UP81/MDtNdpByUErFDsQO4yOiPalWXbVP18DRFkoME0wt2YsRxMszC8sdqGERkT76nEwKvCQKRbvgVrjVL3zIPDdnu96tarf6fp1x/HqnhK6pnHN5E/6k7dHEvNtBq9uMXgfIzIlWNO87nOhGl1IlZIXOMtl6lZmsEJxrgYB11wcAj+o2oJk0xRrwHbGkjzFlelkWiTIFqtfYEEkCmn/bFi8v0/D2/1WZkLpJEQrCB3LKVbVxHtGkV8G8nnAwWbApfl2nhD9zFRaJSdohWT703u36DZZt4qK6Fdn8Mstca/VD77+8ab9BSh7Nx9rR8mMbLgtZ6oaE4pEWmU1X2DlpZLPZnlRv7omSK7M24onXXuAUa5YbjlkfzC11ybsg4bMGvWO57V8G18uJ3QgocSZ6jajOB6wYQyw0BtGpF7L4tD1ZculypvEC7lP1knVIqIRf7mroBBpPSW+UT9zxpP3cu2xteFHxanWCknoWJ/0OFl+0hSIKbNE8R/jm8b3GdjnfFu4TvIai1TdFOcSf/7F0MTWNCFCLKcy6pqFYJNsC5xyOcXhu9IHMwWhv03ohfh0Qj9eXQ4U7WXQXOuSvytbpGgXhE29CBRYmuZCLZzKOR1vkPsbwE1+B4rfg7Ne7W/8vh1J64P4o2Qjp7vvofUf</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1VI4gQIUUGiULrptt0W6PVl5TgGvJvY1Ha49NcfOzQUKO2yR6pEPRnPfHPxN3MiYJaCsC0E5pIwakTdpvnLjeN6veojC0EILN9zYiuuxTWr0XBGng886FUd04iEyHFEhYRUNk3guJ7lAgsEQxeEwAmrQaXugmfTuMdcKNNKpaJuLbKUirBw2zRzTkMGBREhhRkWoUThoH11GSrNEJaYzNbJCmXhkLcmUk5D20aVBCOcpqiCWGaf2Fs6J4kIB2RMocw5fvOZiKb5dnc+n1fmXoXxsQ0cx7Gdhq10EkHGR2brW3kZJxEdsdW5AymjBMGUvEIN6grLCUuMdjpmnMhJ9olp13YdbdrCC5VN16dHpv3uoEB3oKUtkFxAS0ygWxrr4xHmmCJs3PWjpnl0WAVXd4ccUjFiPBM753+DhOkMp2yKE0uUkZXoDre4J12tE4zCiKI0F2SGr3WbTCHCwrjheEQWl0So5kuEUZTfWAj1R8ouw+hfynJib2JV0O092emSMRby/9Rss14rK/cwzXGLd+zrC87H1z2URb3aI+jxi8cuqD0fi2YBYVN5BWpd7rfzbrOue+vtEnXb7Gy+7Izq1XlSi5cMLXrz29MrNKx1jhnvzxbMFtE0eOour6uvbjWujsTdaR6jm9vGy9OL//AqfrzeePfR4Pj42zk4j7k4f7n3L57B9M679Y7/nJ0+ubgzvY2fht3O8vjx8vuFmGU9Z56Ns5vv42VMadYHMzTsi/ZvEs9/nt+Rseul3yAIvj88L9sPT9Hd3WMPpKN28z2mzRi2hSUlDPL4N0ayPOr2iLpGT9ULyq/pRUtIYo0K1XCqOUpITKXZ0rc0tYS5IiCShKqYq/NZEDigA+o10PA833U6p402UP81/MDtNdpByUErFDsQO4yOiPalWXbVP18DRFkoME0wt2YsRxMszC8sdqGERkT76nEwKvCQKRbvgVrjVL3zIPDdnu96tarf6fp1x/HqnhK6pnHN5E/6k7dHEvNtBq9uMXgfIzIlWNO87nOhGl1IlZIXOMtl6lZmsEJxrgYB11wcAj+o2oJk0xRrwHbGkjzFlelkWiTIFqtfYEEkCmn/bFi8v0/D2/1WZkLpJEQrCB3LKVbVxHtGkV8G8nnAwWbApfl2nhD9zFRaJSdohWT703u36DZZt4qK6Fdn8Mstca/VD77+8ab9BSh7Nx9rR8mMbLgtZ6oaE4pEWmU1X2DlpZLPZnlRv7omSK7M24onXXuAUa5YbjlkfzC11ybsg4bMGvWO57V8G18uJ3QgocSZ6jajOB6wYQyw0BtGpF7L4tD1ZculypvEC7lP1knVIqIRf7mroBBpPSW+UT9zxpP3cu2xteFHxanWCknoWJ/0OFl+0hSIKbNE8R/jm8b3GdjnfFu4TvIai1TdFOcSf/7F0MTWNCFCLKcy6pqFYJNsC5xyOcXhu9IHMwWhv03ohfh0Qj9eXQ4U7WXQXOuSvytbpGgXhE29CBRYmuZCLZzKOR1vkPsbwE1+B4rfg7Ne7W/8vh1J64P4o2Qjp7vvofUf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqpVP6AUjpADPYivaIBwXkqDdOSFOItmlpUij++jcpFAHBw3lnnMFsN7vPfuTZbVAQBobVphQlDEdEcp2m/KYBv1Ida7oCKkZZqXjAV8ZejR9rNViumePquAxlyaU0RS6hDBDWlA1NLyu6oRjmUDcsQ7e0csm8vHyVpRFKKDfNVUqaLGVhQKiVu23KaUKsCFBMLQJCRC0GrUH7vmtxTQsUmORWY4Uyd5i0pozFlqrCkocgCgJYglGoNtQdnYZHrQGeEMDSBK19erQpr+8uFovSolyKkolqaJqmanWV63gUT87l1llxGXku8aPV2QYkIhiCAH8CAeoesWnkSe1gEiWYTcMjpnVV14RpBWVQgXqFnMvql4Mc3YmWdkAmFCh0CvTCWB/5KEEEIump7zbl89MquLo7TAChfpSEdO/8b5AQmaMgipGn0CKyAt3pFg+kq9VA0HIJDFKK5+i3aJMYQESlhwT5OOtiypvPo1Jefimj/A8XXYbgv5SloW5j5dDVA9lx8ARR9n9qtl2vlZURCFLUesT2wgedeYfaT9fasjfSnNl9uqhMVa2ZQ9hWXoHalHt93m/WTW+tL/XpTc2bzOJH8N4BNy/u8PZiSp5fMIF+t//L7pAbza+/3v96rn5+ZLOZVmePtd7oRpua4a1GtHLy+tAnvYq3fJ8/n/WnnjvqzdCCjrS7CMZD2IPxeOZ0nBF5tTszRE27vrjLJoPyx3Pnz+v8pbsEF4P4xTb0LEjSKfX19+5g9Ofi8/Zs9nDXy5gbZOnnbViNB5/JU/Mrpu0YdoUFJQzS8TuCrDiK9nAdqcPrBdjP9CIk2FP8XNWKBUdRhgiTW+KWoBYr5QSEPYsXc3V2bFPTKoZ5adTL5Yqu2Vf1tsH/q1dMvVNvmwUHrVDsQbQj4mPhS7Dsqn9+BghDiyLioUSZRymcIir/YNEBDEgu6fPHERGKhhFncafm1IzytWPa1/Z1x9ady7puVK+Mqm7Xyx1Hl6XfEeuRXtL2GUp2Gby6w+B9BHGMkaB50eeUNzplPCUzME9ZoJfmoERQygdBIrjYMipmVaU4jAMkAKth5KUBKsXTOE+QSle/hgIgzaX962H+/o6Gt/+tyATX8bBQoCKWK8Srib6NIs2qFoEcD9jcDrgw3049LJ4ZTytLMFwh2f301S2iTTatwiN6swdveoF7o37y9e831R9Aqfv52Djy5njLbTFT+ZjgJNIqqjkDpVkpnc/TvH41QZAJN69yntTVAYIpZ7nlMPpARN2YUE8aMhvUe5438l18KZuSAQMMhbzbpPx4woYxQFRsGC5/Ldmp68uOS543hjJ2SGYHfBERiH/cVaAFhR4XP/CfRZR4X+U6YGvLD4+TrxUMk4k4iXGyPNIUMOJmMee/KNk2fsjAIee7wk2SN1gY76ZxytDxL5IgtqYMIIxSwlxHzgXbZJvjZMsYWV9K38zkhL6e0Bk9OqGf77sDTnshkDe6+O/KCs7bBSJZLAI5lqac8YWTOyeTLXJfA9zmd8M0NfO6c/k3ft+NpPVN/F2yldP999D6Dw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1XIhQAhAiQIsM229AJs29OXyjgDcUkcGjtA++vXDg0Feln2SJWoJ+OZby7+ZhoMxZHlthmDlJOEKn63qT5WEAILnIpWcWo1zUYQaA7YFc12bDwtA67aVkVVfMYy8CnjiPKmahlmWTMtzXLGpuVapmvUShXHelCVW0iZMC1USoaqrOOIMjd321SzlLoJYoS5FMXAXI7dUXtw4QpNFxWY1FZjgzJ3mLZCzheuruNSABiiCJdwEusNfU+nETB3RGYU8SyFN58Ba6pvd1erVWlVLiXpTLcMw9CNui50AkZmp2rrpLgMgU+nyebsIZpQglFEXpEENQAeJoHSjmZJSngYf2Ha1E1DmtZgjTVs2vRU1d8d5OiOtLQHMmVIYyEyC2NDmEIKFIPye+g31dPjKri5O04RZdMkjdnB+d8gAV1ClCyEI1ZEVqA73uIn6Wo1ALs+xVHGyBIuZZssEAamXKcwJesLwkTzBUzJy6+smfgjRZcB/peyNPRdrAK6/kl2umQGjP+fmu3Wa2PlFkUZtBz9PuQ9e1xZG0Z3tTB79nw6mLSrdm3ezCHsKm9Abcv9dj5s1m1vvV269aedSY/a5V+1Xz/m0/Vovu7fDthDJx71PPzkzM6g+urMq90lXZZ7YFy+dpKby1W6up+ddTGZVq8m0cR/GdCqfXbS5aFfG4b3d5Nsnoazet/2rua4EnfD2uj8qtPrsxs0g9VNYtZ/e+ZdcnZxVjuHwSVa3f2H25mZDkOTVCfDzHgentz8eC4/rJ5eJuf2cPR0/fOnNW++x7Qbw76woIRRNnkCzIujbA+/q/RFvRD/nl6khATaNFd1F5KjGAfK1Za8JanFzQQBkcAVxdycvb5jmD3PqVr1ctk2Da9Tb1viv7rtmP162yk4aIPiAKKX0CmRviTLbvrne4A4dhnQAFJtmWQ4BKZ+Y7GLOFJ8OhSPI6EMxolgca/XtryKZZX7tbLZE1zc86y+bRi24dU6bcNRlcuEX9GrtD3lkO4zeGWPwYeAyYKApHnZ50w0OuMiJc9omfHILC1RiUImBkEqudi1bKeiMxIvIpCA9TgJsghKi3CRJ0hnm19LQ5jl0mFvnL+/L8M7/FZkQugERCowGUsHRDXhwygy3EoRyNcBO7sBF+bbWUDkMxNp5SnBGyT7n967RbbJtlVERI/e6NEscG/Vj77+8ab+DSj9MB9bR8GS7LgtZqoYE4JEWkU1n1HpuZQtl1lev5okyFSY1wVPmvoIcCZY7mWczIHqWxP6UUNmi/rA81a+jy/jIR1xxCEW3abkxyM2jBEwuWH44rWsj11f9lyKvHFY889kXiQWEYn4210Fu1jqCfG1+FklafBerk9s7fgRcYq1ghM6kyc5Tl6+aAqcCLNE8F+S7hr/zMBnzveF2yRvsXDRTZOMw9dfFElsTRVhnGSU+101F+ySbY6TvyzAfVf6YCYn9LcJvWZfTuj7wcVI0F6M1K0u+buyRvJ2waDKRSDH0lTXYuEUzulsh9zfAO7yu+U4htPrV//G7/uRtD6IP0p2cnr4Hlp/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072141388233264101</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072141388233264101</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0720571388233257374</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072111388233261403</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072141388233264101</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F8802C2762933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EC80042862933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>DF802EC862933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29c5911f-9b6d-4461-8c1c-ca001cb9afc6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true" id="eed38a5f-73cf-4e42-814c-ae2a07867767"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="15e41a60-413b-4cb6-9faa-5e377e3715ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>739089E962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360419151EE5E0401F0A059945A9:F7C3B953"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0721151388233275204</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>B290E2D962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:B290E2D962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:B290E2D962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>739089E962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>6790F4DA62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5A90508B62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:739089E962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:6790F4DA62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:5A90508B62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj0fBSYDmooIUCO3J9g70Ql8q1zHE28SmsUPD/vpjh4YCvSx7pErUk/HMNxd/M0ccZqntB5zjXBBGtSjs6I/tqWO3Y9c2LIhMo4Ucx/DaT9A4tC132nxyHdR0dS3ivMAR5QJS0dFt02oalm3Y7tiyfdvyTa/hOeaDrt3inEvTUqVh6lqZpZT7lduOXuTUZ5AT7lOYYe4L5I+C8zNfavqwxqR3j1YoK4d5NxFi7gOAGjFGOE1RA7EMHIEtnaOY+yMyo1AUOX7zGfOO/nb39fW18dpssHwGbNM0gekBqRNzMjvQuz/qyziO6JStzn1IGSUIpuQ3VKDOsUhYrAXpjOVEJNkXpi1gmcq0gUtkIKtFD3Tw7qBCt6elLZA5hwZPoFUbG+IpzjFFWLsZRh39YL8Kru6Oc0j5lOUZ3zn/HSRMFzhlcxwbvI6sRre/xU/S1T3CyI8oSgtOFvhCtckcIsy1qxxPSXlGuGy+mGtV+bWSyz9SdxlGf1OWI7CJVUIHn2QnJDPMxf+p2Wa9VlZuYVrgbotnL//Mywkn6cC5BzdZcL18+H15cZ8MOhWETeUVqHW53867zbrurbdLvXa2cG8vlmE4sgYnTlTY9syanPDECaJJOk2ZlycWdRk8ta/Y1c14ap+WwewZHreyDACz7aTk+ha1l+7L3fkPcPsvTt3zhWW1FrdshJ5x8sTbhLWsh+XTlZdMTganwrx+KMuiEJOT6fMEspMI/gzjACznzrEHEifHrBwP729+DH7dlcO7IspnFur322IC3M57TJsxbAtrShgVT78wEvVRtUcUaseyXlB8Ty9KQmJjWqn6c8VRXGAq9K66pajFLyQBkdiXxVydnaZnut7AO7S9ZrNlmf2eF9jyP6/lWsde4NYctEKxA7HP6JQoX4plV/3zPUCU+RzTGOfGghUowVz/xmIIBdQiOpSPg1GOx0yyuO303EEQeKHXC5uO6RyaZisY2FYY2r3DsBXo2gUTl/QyD6YC59sM3t5i8CFGZE6wonnV51w2OhcyJS9wUYjUaixgg+JCDoJccbFvt9w24CSbp1gBBhmLixQ35sm8ShDgq1/bgIhX0uFgXL2/L8Pb/VZnQurERClwFUsPy2riD6PI9Nt1IF8H7G4GXJsPipioZybTKnKCVki2P713i2qTdavIiB77o0erxr1W3/v6x5vgG1BgNx9rR/GCbLitZ6ocE5JEunU1X2DjpVEsFkVVP0cRZC7NA8mTFhhhVEiWW47ZM6ZgbQLsNWTWqHc8r+Xb+AqR0JGAAmey27TquMeGMcJcbRiRfC3lvuvLlkuZN4FL8Zmsn8pFRCH+dldBPlJ6Unwlf15ZHr+X6xNbG35knHKtEITO1EmNk+UXTYGYNEsk/7F80/hnBj5zvi1cJ3mNRchueioE/vqLpoito0OEWEFFFOqVYJNsK5xiOcf+u9IHMxWhv03okn85oe/Pz0aS9jKor3XJn5UNUrULwrpaBCosHb2UC6d0Tmcb5P4GcJPfe7ZnDuzwj/y+HUn3g/ijZCOnu++h+x8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj0fBSYDmooIUCO3J9g70Ql8q1zHE28SmsUPD/vpjh4YCvSx7pErUk/HMNxd/M0ccZqntB5zjXBBGtSjs6I/tqWO3Y9c2LIhMo4Ucx/DaT9A4tC132nxyHdR0dS3ivMAR5QJS0dFt02oalm3Y7tiyfdvyTa/hOeaDrt3inEvTUqVh6lqZpZT7lduOXuTUZ5AT7lOYYe4L5I+C8zNfavqwxqR3j1YoK4d5NxFi7gOAGjFGOE1RA7EMHIEtnaOY+yMyo1AUOX7zGfOO/nb39fW18dpssHwGbNM0gekBqRNzMjvQuz/qyziO6JStzn1IGSUIpuQ3VKDOsUhYrAXpjOVEJNkXpi1gmcq0gUtkIKtFD3Tw7qBCt6elLZA5hwZPoFUbG+IpzjFFWLsZRh39YL8Kru6Oc0j5lOUZ3zn/HSRMFzhlcxwbvI6sRre/xU/S1T3CyI8oSgtOFvhCtckcIsy1qxxPSXlGuGy+mGtV+bWSyz9SdxlGf1OWI7CJVUIHn2QnJDPMxf+p2Wa9VlZuYVrgbotnL//Mywkn6cC5BzdZcL18+H15cZ8MOhWETeUVqHW53867zbrurbdLvXa2cG8vlmE4sgYnTlTY9syanPDECaJJOk2ZlycWdRk8ta/Y1c14ap+WwewZHreyDACz7aTk+ha1l+7L3fkPcPsvTt3zhWW1FrdshJ5x8sTbhLWsh+XTlZdMTganwrx+KMuiEJOT6fMEspMI/gzjACznzrEHEifHrBwP729+DH7dlcO7IspnFur322IC3M57TJsxbAtrShgVT78wEvVRtUcUaseyXlB8Ty9KQmJjWqn6c8VRXGAq9K66pajFLyQBkdiXxVydnaZnut7AO7S9ZrNlmf2eF9jyP6/lWsde4NYctEKxA7HP6JQoX4plV/3zPUCU+RzTGOfGghUowVz/xmIIBdQiOpSPg1GOx0yyuO303EEQeKHXC5uO6RyaZisY2FYY2r3DsBXo2gUTl/QyD6YC59sM3t5i8CFGZE6wonnV51w2OhcyJS9wUYjUaixgg+JCDoJccbFvt9w24CSbp1gBBhmLixQ35sm8ShDgq1/bgIhX0uFgXL2/L8Pb/VZnQurERClwFUsPy2riD6PI9Nt1IF8H7G4GXJsPipioZybTKnKCVki2P713i2qTdavIiB77o0erxr1W3/v6x5vgG1BgNx9rR/GCbLitZ6ocE5JEunU1X2DjpVEsFkVVP0cRZC7NA8mTFhhhVEiWW47ZM6ZgbQLsNWTWqHc8r+Xb+AqR0JGAAmey27TquMeGMcJcbRiRfC3lvuvLlkuZN4FL8Zmsn8pFRCH+dldBPlJ6Unwlf15ZHr+X6xNbG35knHKtEITO1EmNk+UXTYGYNEsk/7F80/hnBj5zvi1cJ3mNRchueioE/vqLpoito0OEWEFFFOqVYJNsK5xiOcf+u9IHMxWhv03okn85oe/Pz0aS9jKor3XJn5UNUrULwrpaBCosHb2UC6d0Tmcb5P4GcJPfe7ZnDuzwj/y+HUn3g/ijZCOnu++h+x8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+JKEH73V6Syj1bIHZOUUIXgJa6wCCzu8cUaJx0YN0xiZgLor9+ZYBAQXfZUWYXT6en++jJf9ylDs8QKWoxBzklKlbDTUB8sz7Z807C0GEW25jzaJ5qHjVjzbWwjx3w8iZ26qoSMFRBSxhHlDdUyTFszLc3yRqYVWGZgOjWvXr9XlTHkTJgWKjVDVZazhLKgdNtQi5wGKWKEBRTNgAUcB8NW9yYQmgGqMKnN0xXK0mHenHKeBbqOaxFgSBJcw+lMP9W3dE4jFgzJhCJe5PDmM2IN9e3uYrGoLexamk90yzAM3fB1oRMxMvmmNo+qyxCFNE5X5zaiKSUYJeQVSVBd4NM0UlrJJM0Jn84+MW3qpiFNa7DEGjYd+k3V3x2U6A60tAUyZ0hjU2RWxgYQQw4Ug/JzEDbUb4dVcHV3lCPK4jSfsZ3zv0ECOockzSDSWBVZhe5wi3vS1TwFHIQUJwUjc+jJNskQBqb0c4jJ8oYw0XwRU8ryK0sm/kjVZYD/pSyn+iZWAV3fk50OmQDj/6dmm/VaWRmjpIAmfxrjhWsWoXt1lfM75z7vkO+dejH0bhslhE3lFah1ud/Ou8267q23S5eoP3p5wov/etcxvnCfLuvP5sjqoWE9e/Vv75Y/8nRkhz6HVy97vs+zu0un1/89aPnj74/Xj/SnfWdHl6Mb1noy6dGt5fr9i7Flta/cq9eXKA7HgGzoHpPn5fWyez3JOmF2dzzvXbjjWzAW3cj5ncRG//gSs0EvPL6bnbDiZjLtGL/wEeu3s+tBt9t3wvrZz/EvOkob7zFtxrAtrChhWDw+AebVUbZH2FEuRL0Q/5pepIREWlyqBpnkKMaBcrUpb0lqCQpBQCQKRDFX5/qJb1w4nVbd8m3bMY32md+yxH++45kXfsurOGiFYgdiO6Uxkb4ky67652uAeBYwoBHk2jwt8BSY+oXFDuJICelAPI6UMhBZVB/cuu263rl7fuYZtiuQnzjibBhu+8w4dzueqvRS/oP+yFsxh3ybwd0tBh8AJhkBSfOyz5lodMZFSp7RvOCJWZujGoVCDIJccnFgOZ6rMzLLEpCA9VkaFQnUsmlWJkhnq19LQ5iV0sH5qHx/n4a3+63KhNCJiFRgMpYzENWEPaPIqAL5PGBvM+DKfKuIiHxmIq08J3iFZPvTe7fINlm3iojooT18MCvca/WDr3+8qX8BSt/Nx9pRNCcbbquZKsaEIJFmVc1nVHuuFfN5UdbvRBJkLszrgidNfQi4ECz3Mkp/A9XXJvSDhswa9Y7ntXwbX8GndMgRh5noNqU8HrBhDIHJDSMUr2V56Pqy5VLkjcOS75O1E7GISMRf7io4wFJPiPviZ5Hm0Xu59tja8CPiFGsFJ3QiT3KcvHzSFDgVZongvzTfNL7PwD7n28J1ktdYuOimx4LD518USWwNFWGcFpSHHbUUbJJtiZO/ZBC8K30wUxL624Resk8n9K/uzVDQ3gypa13yd2WNlO2CQZWLQImloS7Fwimc08kGub8B3OT3M8s3zq2O/zd+346k+UH8UbKR09330PwD</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj07pBSq0I8wU0Be8oZTjUb84Md1CtE2hSbn4609SLAKCh/POdKbNdrP77CVP9oyhOLJcjzFIOUmo0m3X1Zfw1LCNihlqBq5UtErZtrTaq2FoVSdEhvhwTMCq0mUsgy5lHFFeVy3DLGumpVm1gWm5luma1VLVsZ9V5QFSJkwLlZKhKvM4oszN3dbVLKVughhhLkUxMJdj1/durl2h6aICk9o4W6LMHaaNEedjV9dxKQAMUYRLOIn1M31D5yxgrk+GFPEshU+fAaurn3tns1lpVi4l6VC3DMPQDUcXOgEjw2O1cVRshqBLw2S5biGaUIJRRD6QBHUDfJQEihcNk5TwUbzHtKmbhjStwRxr2KzQY1X/cpCjO9DSBsiUIY2NkFkY60MIKVAMyq9+t64eH1bB5d5BiigLkzRmW+t/gwR0ClEyhkBjRWQFusMt7khX4wyw26U4yhiZwq1skzHCwJS7FEIyvyZMNF/AlLz8ypyJhxRdBvhfynKmr2MV0PUd2WmTITD+f2q2Xq+llQcUZdDozSIru2QstKC7OHH6JkGdu+lFazKd1XMI68pLUKtyf663m3XVW5+bOsGwU+1XSfPp9mGi387fzVnTOO2VJ7XnezTr3OPZmx74J4sr++Pprd1ZmOHH4Ll39RR6Tfu3F73/OqlCZxGxa/x0dfT2OPLhv0viTf23h07Qu0xg6FxNO2Ni/z5vkveehwePcefk0r7uG6PbwezhDt35w3BeJm8Pp2gWDgb3dpODZWb3R9dP4DnnH8/8IvD4xO+cx0/1r5jWY9gUFpTgZ69vgHmxlO3RbSsXol6I/0wvUkICLcxV3bHkKMaBcrUhd0lqcTNBQCRwRTGXa9tzxKmqNU8tp1yumEar6XiW+HIqNfPC8WoFBy1RbEFsJTQk0pdk2WX//AwQxy4DGkCqTZMMj4CpP1hsI46ULu2Lw5FQBoNEsHirbF60HOOiVavYbdMu19pNu2lVTy3PLle981NVuU14j/ZSL+SQbjK4vcHgfcBkTEDSvOxzJhqdcZGSCZpmPDJLU1SikImLIJVc7FqVmq0zEo8jkID1OAmyCErj0ThPkM6Wb0tDmOXS/vkgP397w9v+V2RC6AREKjAZSxNENWHHVWQUgewPuLYecGHeywIij5lIK08JXiLZ/PXVLbJNVq0iInpp+S9mgXulfvD27zv1H0Dp2/lYOQqmZM1tcaeKa0KQSKOo5gSVJqVsOs3y+lUlQabCvC540tR9wJlgucUgeQeqr0zoB10yK9RbnlfyTXwZH1GfIw6x6DYlXx4wYfjA5ITRFadlfuj4suFS5I3DnO+StSIxiEjEP84q2MVST4jvxGuWpMFXuXbYWvMj4hRjBSd0KFfyOlnsaQqcCLNE8F+SrhvfZWCX803hKskrLFx002vGYf8fRRJbXUUYJxnl3baaC9bJNsfJF2Nwv5S+mckJ/fOGnrO9N/TjzbUvaC9G6kqX/F1ZI3m7YFDlIJBjqatzMXAK53S4Ru6fANf5vWk5xrnVdv7G75uRNL6Jv0vWcrp9Hhp/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0721151388233275204</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0721151388233275204</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072181388233268621</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0721121388233272354</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0721151388233275204</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>839089E962933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>7790F4DA62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>6A90508B62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15e41a60-413b-4cb6-9faa-5e377e3715ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="2d90f6cd-846f-4459-b189-9446b8b5b03e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ffd6501d-b35a-4c45-b645-262fe9a8d8c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>0E90967C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9676100F5E3C71E0401F0A059979D6:AEC756B1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0721241388233284647</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>4D90F05C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:4D90F05C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:4D90F05C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0E90967C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F1A0084D62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">44A0D1DD62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0E90967C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F1A0084D62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:44A0D1DD62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj3dK34DSjjBTCipeQS6gXv3ixDSFeNoEmxSKv/4mhSIgejh3xhnMdrP77Eue3QsGktjyfMZQyjElSq/TVF8iFNoOtF0talhIq76+As21DEMDkf1ai2DdaTiuqvQYy1CPMA4Ib6qWYdqaaWlWY2JanmV6llExHPtZVR5QyoRpoVIxVCVPYsK8wm1TzVLiUcAw8whIEPM49MZ+/9YTmh4oMamtizXKwmHamnE+93QdVkIEURzDCqSJfqHv6VyEzBvjKQE8S9HGZ8ia6ubucrmsLO0KTae6iMvQDVcXOiHD03O1dVZeRmGPRHR9DgChBEMQ4w8gQfURn9FQ8eMpTTGfJd+YNnXTkKY1lEMNmlVyruqfDgp0J1raA5kyoLEZMEtjIxShFBGIlPtRr6men1bB9d1JCgiLaJqwg/OfQUJkgWI6R6HGyshKdKdbPJKu1gWCXo/AOGN4gQayTeYAIqYMUxTh/BYz0XwhU4ryKzkTf7jsMgT/pCwX+i5WAV0/kp0OniLG/0/Nduu1tvIA4gy17vJJbnxUV4s0e/YbtdwK7nwLZ9FDvdcsIOwqr0Fty705Hzbrtrc2l64m19aDP1gt//kY/9VLIuiyx2H0NhkQf5i9AzbvPHVr3edkRq9ul6sr0BgBv++3G4ucm1XLTZ/a/MaPg8E7C4Oz+Ob2sl/XZ3FOrmktGsVXq24fLzvxLLxxHTB3nvBwGFhx+jRg149/3zvg7Rmz5PqxbT7032h/eL/IJ93qL3rVts+Ged8djq+m8QKBbsSN+JU2P2PajWFfWFLCOHt9Q5CXR9kevY5yKeoF+M/0IiU41KJC1ZtLjmIcEa625C1JLV4mCAiHnijm+mx0XcOtO0Hdcm27ahpB2/Ut8Z9bbZiXrt8oOWiN4gBiQEmEpS/Jsuv++RkgTDyGSIhSbUEzOENM/cFiB3Cg9MhIPA5KGJpQweKGHdhdu2M0OjXXaTu2067ZjhNYTttyO/V6TVUGlN+Ru9SPOEr3Gby2x+AjBPEcI0nzss+ZaHTGRUrewSLjsVlZgApBmRgEqeRiz6o2ajrDyTxGErCe0DCLUWU+mxcJ0tn619IAZIV01J0U7+/b8A6/lZkQOiGWCkzG0kaimujIKDLLQL4PuLEbcGnez0Isn5lIK08xXCPZ//TZLbJNtq0iInoJxi9miXurfvL1rzf1H0Dph/nYOgoXeMdtOVPFmBAk0iqr+Q4q75VssciK+jmSIFNhXhc8aepjBDPBcqsJ/YWIvjWhnzRktqgPPG/l+/gyPiNjDjhKRLcpxfGEDWOMmNwweuK15KeuL3suRd44yvkxWRCLRUQi/nFXgR6UekI8FD9Lmoaf5Tpia8ePiFOsFRyTqTzJcbL6pikgFWax4D+a7ho/ZuCY833hNslbLFx002vG0fdfFElsTRVASDPCex21EOySbYGTr+bI+1T6YqYg9M2Eztm3E/rf/u1Y0F4C1K0u/r2yhot2gUiVi0CBpanmYuEUzsl0h9w3AHf5vdpxjUuj9lt+34+k9UX8VbKT08P30PoP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj3dK34DSjjBTCipeQS6gXv3ixDSFeNoEmxSKv/4mhSIgejh3xhnMdrP77Eue3QsGktjyfMZQyjElSq/TVF8iFNoOtF0talhIq76+As21DEMDkf1ai2DdaTiuqvQYy1CPMA4Ib6qWYdqaaWlWY2JanmV6llExHPtZVR5QyoRpoVIxVCVPYsK8wm1TzVLiUcAw8whIEPM49MZ+/9YTmh4oMamtizXKwmHamnE+93QdVkIEURzDCqSJfqHv6VyEzBvjKQE8S9HGZ8ia6ubucrmsLO0KTae6iMvQDVcXOiHD03O1dVZeRmGPRHR9DgChBEMQ4w8gQfURn9FQ8eMpTTGfJd+YNnXTkKY1lEMNmlVyruqfDgp0J1raA5kyoLEZMEtjIxShFBGIlPtRr6men1bB9d1JCgiLaJqwg/OfQUJkgWI6R6HGyshKdKdbPJKu1gWCXo/AOGN4gQayTeYAIqYMUxTh/BYz0XwhU4ryKzkTf7jsMgT/pCwX+i5WAV0/kp0OniLG/0/Nduu1tvIA4gy17vJJbnxUV4s0e/YbtdwK7nwLZ9FDvdcsIOwqr0Fty705Hzbrtrc2l64m19aDP1gt//kY/9VLIuiyx2H0NhkQf5i9AzbvPHVr3edkRq9ul6sr0BgBv++3G4ucm1XLTZ/a/MaPg8E7C4Oz+Ob2sl/XZ3FOrmktGsVXq24fLzvxLLxxHTB3nvBwGFhx+jRg149/3zvg7Rmz5PqxbT7032h/eL/IJ93qL3rVts+Ged8djq+m8QKBbsSN+JU2P2PajWFfWFLCOHt9Q5CXR9kevY5yKeoF+M/0IiU41KJC1ZtLjmIcEa625C1JLV4mCAiHnijm+mx0XcOtO0Hdcm27ahpB2/Ut8Z9bbZiXrt8oOWiN4gBiQEmEpS/Jsuv++RkgTDyGSIhSbUEzOENM/cFiB3Cg9MhIPA5KGJpQweKGHdhdu2M0OjXXaTu2067ZjhNYTttyO/V6TVUGlN+Ru9SPOEr3Gby2x+AjBPEcI0nzss+ZaHTGRUrewSLjsVlZgApBmRgEqeRiz6o2ajrDyTxGErCe0DCLUWU+mxcJ0tn619IAZIV01J0U7+/b8A6/lZkQOiGWCkzG0kaimujIKDLLQL4PuLEbcGnez0Isn5lIK08xXCPZ//TZLbJNtq0iInoJxi9miXurfvL1rzf1H0Dph/nYOgoXeMdtOVPFmBAk0iqr+Q4q75VssciK+jmSIFNhXhc8aepjBDPBcqsJ/YWIvjWhnzRktqgPPG/l+/gyPiNjDjhKRLcpxfGEDWOMmNwweuK15KeuL3suRd44yvkxWRCLRUQi/nFXgR6UekI8FD9Lmoaf5Tpia8ePiFOsFRyTqTzJcbL6pikgFWax4D+a7ho/ZuCY833hNslbLFx002vG0fdfFElsTRVASDPCex21EOySbYGTr+bI+1T6YqYg9M2Eztm3E/rf/u1Y0F4C1K0u/r2yhot2gUiVi0CBpanmYuEUzsl0h9w3AHf5vdpxjUuj9lt+34+k9UX8VbKT08P30PoP</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMP/nyBGYMhHvdhoSLadPkpSPkNSi1ZceSDcmvv5KJCRCS0juTGaL1avfs7tGRLhhKYsv1GIOck5Qq/qin/nQiMNuOGWkhoJbmWIatdSOnpRnQibrhImqhZqgqPmMF+JRxRHlPtQzT1kxLszpz03It07XsRstp3qvKd8iZCC1cGoaqbJKYMrdK21OLnLopYoS5FCXAXI7dwJtcucLTRTUmtX+xRVklzPsrzjNX13EjBAxxjBs4TfQL/cDnImRuQJYU8SKHl5wh66kve9frdWNtN9J8qVuGYehGVxc+ISPLz2r/U70ZQp9G6XY9RDSlBKOYPCMJagJ8lYaKFy/TnPBV8k5oUzcNGVqDDdaw6dDPqv6aoEJ3ZqQDkDlDGlshsw42gwhyoBiUbzO/p34+b4LbvfMcURalecKO1n8GCWgJcZpBqLG6shrd+RFPtKt/Adj1KY4LRkq4ljTJEAamTHOIyOaKMEG+kCnV+JUNE3+kZhngPxnLhb6PVUDXT3RnRJbA+P+Z2f68tlG+o7iAfvv5WvRuZU/ovzQI9fvuZtLBX58G68m3XgVh33kLajful/UxWXfcetl04z1MydMXVNIyy3+Z/oPdXE2jR2jfLfg/1/Hkx+wunj9aZfsyfZ5v7Jsy29zZFiJ+wnO4elqZrcXqSzwZre6C60/hbZ7+aM6z0SK6DezhZJ0u/wqGt9Mbtijvnx+vxwvDmM1CKIwWCacxzkajvwXj7rNg3f4aTayl+SuZ3T7Y1ir48oltwpkzhSuUTDuJ5xv+8lvvtab9Gg6NtSQExeIBMK+Xkh7+SBmLeSH+sbxICwm1qHJ1M6lRjAPlal/uktLiFkKASOiKYW7XY9MzjI4zalld23ZMYzjoepb4r+t0zHHX69QatEVxBHGY0ojIXFJlt/z5GCBOXAY0hFwr0wKvgKkfRBwhjhSfzsThSCmDeSpUfDB22o7jND1rNG7ag+agO253vEvPdgbdS8MRWnyd8ht6k3sRh/xQwZsHCj4DTDICUuYlz5kgOuOiJY+oLHhsNkrUoFCIiyCXWuxaTqepM5JkMUjAepKGRQyNbJVVDdLZ9tfSEGaVdXY5r87fu+Udf6s7IXxCIh2YrGUAYppw4ioy60LeL7izX3Ad3itCIo+ZaCvPCd4iOfz0yhZJkx1VREU/h8FPs8a9cz97+9ud+geg9ON+7BKFJdlLW9+p4poQItKvp/mIGo+NoiyLan5tKZC5CK8LnTT1AHAhVO5pnv4Cqu9C6GddMjvUR5l39kN8BV/RgCMOiWCbUi3PeGEEwOQLwxenZXPu8+Ugpegbhw0/ZRvG4iEiEX/4VsEuln7CPBU/6zR/LfxUrL08ok7xrOCELuVKXidP75ACpyIsEfqX5vvBTwU4lfzQuGvyDgsXbFoUHN7/okhh66kI47Sg3B+plWFfbCuc/CkD99XpTZhK0F9u6A1794b+MbkKhOwlSN35kt87a6SiCwZVPgQqLD11Ix6cIjld7on7C8B9fXdGXWNsNIe/0/fDSvpvzG8tez09Pg/9/wA=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUz6WvQOkAM9iqp1dABd/u+eLEdIFom9YmRfTX36RQBEQP5844g9ludp99ybPbZiiJLa/HGOScpFQJg476aLjOJMItU3tyGpbmGPWm5pqWrWFouWbk2LYBlqqEjBUQUsYR5R3VMkxbMy3Ncm9My7NMz3JrDdP6rSp3kDNhWqjUDFVZJDFlXum2oxY59VLECPMoSoB5HHvj3qDvCU0PVZjUbnuJsnSYd2ecZ56u41oEGOIY13Ca6G19S6cdMW9MphTxIoeVz4h11NXdt7e32ptdS/OpbhmGoRstXehEjEyP1e5RdRmikE7S5dlHNKUEo5h8IAlqAHyWRkovnqY54bPkG9OmbhrStAYLrGHToceq/umgRHegpS2QOUMamyGzMjaCCeRAMSi3o7CjHh9WweXdmxxRNknzhO2c/w4S0DnEaQaRxqrIKnSHW9yTrm4bsBdSHBeMzGEo2yRDGJhylcOELPqEieaLmFKWX1kw8UeqLgP8N2Vp65tYBXR9T3YCMgXG/0/NNuu1tHKH4gK6SRZcZg/EwdfXpBic/uq753T+kt9fmKedEsKm8hLUutyr826zrntrdcnX/+1/OJf3k5w2TxsPg8Ftcn0eEejbwJEd8rkzejYyfEZ/jxoXs5MHo0/TX433fxjV2cxq3aN33m8a2dThFy9H9/5tyPxb/Ny4mnzkPpzhpv96O6jbi/j6zo6ueoO7+P626d+ELplZ48XFKD0Z3A97Ty+Twfud2RjGD3fm6EV3Ztfjo7jRTIaF+/CUuMPzwq2P2XXnM6bNGLaFFSWMi6dnwLw6yvYIA+VM1Avxn+lFSkikTUpVL5McxThQrnblLUktXiEIiESeKOby7Dg9IzCDoGG1bNsxDf+k1bPEfy3HNc9aPbfioCWKHYh+SidE+pIsu+yfnwHixGNAI8i1eVrgGTD1B4sB4kgJ6Ug8jpQyuEkFi5tO77TuWoER+K7tuw3HMlp+LzgzbccKGo1TVRmm/JJe5r0Jh3ybwetbDD4CTDICkuZlnzPR6IyLlLyiecFjszZHNQqFGAS55GLPcty6zkiSxSAB60kaFTHUsllWJkhny19LQ5iV0tHpTfn+vg1v91uVCaETEanAZCwnIKoJe0aRWQXyfcDuZsCV+V4hHol4ZiKtPCd4iWT702e3yDZZt4qI6NEfP5oV7rX6wde/3tR/AKXv5mPtKJqTDbfVTBVjQpBIt6rmK6q91or5vCjr15QEmQvzuuBJUx8DLgTLvd+kL0D1tQn9oCGzRr3jeS3fxlfwGR1zxCER3aaUxwM2jDEwuWGE4rUsDl1ftlyKvHFY8H0yPxaLiET8466CPSz1hPhK/LylefRZrj22NvyIOMVawQmdypMcJ+/fNAVOhVki+C/NN43vM7DP+bZwneQ1Fi666ang8P0XRRJbR0UYpwXlYaCWgk2yLXHy9wy8T6UvZkpCX03oBft2Qj8M+mNBewlS17rkz8oaKdsFgyoXgRJLR12IhVM4p9MNcl8B3OL3oGWcGXX/T/y+HUn3i/irZCOnu++h+x8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0721241388233284647</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0721241388233284647</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0721191388233279074</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0721221388233282373</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0721241388233284647</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1E90967C62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>02A0084D62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>54A0D1DD62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffd6501d-b35a-4c45-b645-262fe9a8d8c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="e8c4f5d0-a98e-4c90-b279-e18eab3eb574"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="79295ab9-f4a8-41c4-8989-57e269153436"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>F7A0A60F62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9676100F7D3C71E0401F0A059979D6:6ABB0335"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0721351388233295645</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>37A02EEE62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:37A02EEE62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:37A02EEE62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F7A0A60F62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EBA09BEF62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3EA0D38072933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F7A0A60F62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EBA09BEF62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:3EA0D38072933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnjGxfjCcw4YAgNlwRoT5KXjiKvQa0tE0sGwq+vZGIChKT0zGSGaL3a/faib/eSoTiyXI8xSDlJqNJrN9SfBg7tcg07mmmaSCs7oaXVwbI0CB2nApUQoGKpSo+xDHqUcUR5Q7UM09ZMS7OcqWm5lunaRqnmlB9V5QekTJgWKiVDVdZxRJmbu22oWUrdBDHCXIpiYC7H7sQb9F2h6aICk9q83KLMHabNOecLV9dxKQAMUYRLOIn1S/1A5zJg7oTMKOJZCq8+A9ZQX++uVqvSyi4l6Uy3DMPQjboudAJGZl/V5pfiMgQ9GibbcwvRhBKMIrJBEtQA+DwJFC+aJSnh8/gD06ZuGtK0BmusYbNMv6r6m4Mc3ZmWDkCmDGlsjszC2BhCSIFiUL6Pew3163kV3N6dpoiyMEljdnT+N0hAlxAlCwg0VkRWoDvf4ol0NS8Buz2Ko4yRJQxlmywQBqbcphCSdZ8w0XwBU/LyK2sm/kjRZYD/pSyX+j5WAV0/kZ02mQHj/6dm+/XaWvmBogya9W48cgisWqxj9sLlYBP1nzbXaXXyYDRyCPvKW1C7cr+ej5t111uvlzwM36aeeetc3Qc+3PDqrX57d+P4D/545HdSNuz2RVofuvHwvl9d/R4PfvS7pj2fpyO7ezEcPq0ffXtDu9f247D1JcHxwOtaF+XF8m7O5qs1bB4m98Eqsb3BxfXN8/ebPvY3Nyz6b7joVgY35kUny8i31uZh83KVeL8qwxXLsrtMr9xOv/ijwffuMrpOnkN98zgKJ3O/8RbTfgyHwoISJtnTL8C8OMr26LWVjqgX4p/Ti5SQQAtzVXchOYpxoFxtyluSWtxMEBAJXFHM7blT8wyvanSqVt22y6bRuqp7lvivXnbMTt1zCg7aojiC2EpoSKQvybLb/vkcII5dBjSAVFsmGZ4DUz+x2EYcKT06Fo8joQymiWDxmleza57Vdspt3zZrXqXcFpgtq1KtXllG2VSVYcJHdJR6IYf0kMErBww+BkwWBCTNyz5notEZFyl5RsuMR2ZpiUoUMjEIUsnFrlV2Kjoj8SICCViPkyCLoLSYL/IE6Wz7a2kIs1w69qf5+/swvONvRSaETkCkApOxXIGoJpwYRVYRyMcBO/sBF+a9LCDymYm08pTgLZLDT2/dIttk1yoiop+tyU+zwL1TP/v6+5v6J6D043zsHAVLsue2mKliTAgSaRbVfEal51K2XGZ5/WqSIFNhXhc8aeoTwJlguZdp8huovjOhnzVkdqiPPO/kh/gyPqcTjjjEotuU/HjGhjEBJjeMnngt63PXlwOXIm8c1vyUrBWJRUQi/nRXwS6WekJ8K35WSRq8leuErT0/Ik6xVnBCZ/Ikx8nLB02BE2GWCP5L0n3jpwyccn4o3CV5h4WLbnrKOHz8RZHE1lARxklGea+t5oJ9ss1x8pcFuG9K78zkhP46odfswwl9P+hPBO3FSN3pkr8rayRvFwyqXARyLA11LRZO4ZzO9sj9FeA+vwu2NCzf9//G74eRNN+J30v2cnr8Hpp/AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnjGxfjCcw4YAgNlwRoT5KXjiKvQa0tE0sGwq+vZGIChKT0zGSGaL3a/faib/eSoTiyXI8xSDlJqNJrN9SfBg7tcg07mmmaSCs7oaXVwbI0CB2nApUQoGKpSo+xDHqUcUR5Q7UM09ZMS7OcqWm5lunaRqnmlB9V5QekTJgWKiVDVdZxRJmbu22oWUrdBDHCXIpiYC7H7sQb9F2h6aICk9q83KLMHabNOecLV9dxKQAMUYRLOIn1S/1A5zJg7oTMKOJZCq8+A9ZQX++uVqvSyi4l6Uy3DMPQjboudAJGZl/V5pfiMgQ9GibbcwvRhBKMIrJBEtQA+DwJFC+aJSnh8/gD06ZuGtK0BmusYbNMv6r6m4Mc3ZmWDkCmDGlsjszC2BhCSIFiUL6Pew3163kV3N6dpoiyMEljdnT+N0hAlxAlCwg0VkRWoDvf4ol0NS8Buz2Ko4yRJQxlmywQBqbcphCSdZ8w0XwBU/LyK2sm/kjRZYD/pSyX+j5WAV0/kZ02mQHj/6dm+/XaWvmBogya9W48cgisWqxj9sLlYBP1nzbXaXXyYDRyCPvKW1C7cr+ej5t111uvlzwM36aeeetc3Qc+3PDqrX57d+P4D/545HdSNuz2RVofuvHwvl9d/R4PfvS7pj2fpyO7ezEcPq0ffXtDu9f247D1JcHxwOtaF+XF8m7O5qs1bB4m98Eqsb3BxfXN8/ebPvY3Nyz6b7joVgY35kUny8i31uZh83KVeL8qwxXLsrtMr9xOv/ijwffuMrpOnkN98zgKJ3O/8RbTfgyHwoISJtnTL8C8OMr26LWVjqgX4p/Ti5SQQAtzVXchOYpxoFxtyluSWtxMEBAJXFHM7blT8wyvanSqVt22y6bRuqp7lvivXnbMTt1zCg7aojiC2EpoSKQvybLb/vkcII5dBjSAVFsmGZ4DUz+x2EYcKT06Fo8joQymiWDxmleza57Vdspt3zZrXqXcFpgtq1KtXllG2VSVYcJHdJR6IYf0kMErBww+BkwWBCTNyz5notEZFyl5RsuMR2ZpiUoUMjEIUsnFrlV2Kjoj8SICCViPkyCLoLSYL/IE6Wz7a2kIs1w69qf5+/swvONvRSaETkCkApOxXIGoJpwYRVYRyMcBO/sBF+a9LCDymYm08pTgLZLDT2/dIttk1yoiop+tyU+zwL1TP/v6+5v6J6D043zsHAVLsue2mKliTAgSaRbVfEal51K2XGZ5/WqSIFNhXhc8aeoTwJlguZdp8huovjOhnzVkdqiPPO/kh/gyPqcTjjjEotuU/HjGhjEBJjeMnngt63PXlwOXIm8c1vyUrBWJRUQi/nRXwS6WekJ8K35WSRq8leuErT0/Ik6xVnBCZ/Ikx8nLB02BE2GWCP5L0n3jpwyccn4o3CV5h4WLbnrKOHz8RZHE1lARxklGea+t5oJ9ss1x8pcFuG9K78zkhP46odfswwl9P+hPBO3FSN3pkr8rayRvFwyqXARyLA11LRZO4ZzO9sj9FeA+vwu2NCzf9//G74eRNN+J30v2cnr8Hpp/AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+JKEH73V6Ti41bIVQgpoSpAWKNcXGBd9cUaJgOMJpOYmQT015+ZQBAQXfZUWYXT6en++jJf9yUFUWg4LqUoZTgmkt9pyE+WFZiwbkHF0Ke2YtlQU4A+sxQDVe1pvWraU8uUJZ/SDPmEMkBYQzY03VR0QzHsiW44hu6YVuXiovYoS3copdw0V6losrSKQkKdwm1DzlLixIBi6hAQIeow6Izdfs/hmg4oMcnNyzXKwmHaXDCWOKoKKwGCKAxhBcaReqnu6VwG1BnjOQEsS9HGZ0Ab8ubucrmsLM1KnM5VQ9M0VaurXCegeH4uN8/KyyjwySxen9uAxARDEOJ3IED1EVvEgeSG8zjFbBF9YVpXdU2YVtAKKlC3yLmsfjgo0J1oaQ9kSoFCF0AvjY3QDKWIQCT9HvkN+fy0Cq7vTlJA6CxOI3pw/jdIiOQojBMUKLSMrER3usUj6WpeIuj4BIYZxTkaiDZJAERUuk3RDK96mPLmC6hUlF9aUf6Hyy5D8F/KcqnuYuXQ1SPZ6eA5ouz/1Gy3XmsrdyDMUJP0Z4ObWhjmj39y01Zf2csjCB87Pnn2GgWEXeU1qG25N+fDZt321uZSr2fkrYfQutfevF/j58SMVubdZDpdghs6iVrv7e5LKxuqwHzo1OpXuD8wL/y6behB/9YdTNIQPt9fD3x0G0X53dmsfbuoayBd/XxMJv0/4YikaRVkAbvzbiZ9Ymat/Ef/qjd8aN23rt4HweTX/NmIVGZ795mV69fAM27ozdzyh7+TM8uMTPUqoD+ve8Pn4H7843re+IhpN4Z9YUkJ42z6jCArj6I9/I7U5fUC7Ht6ERIcKLNC1UkER1GGCJOb4pagFifjBIQDhxdzffZarlZved2qUTdNS9farbpr8P/qlq13665dctAaxQHEdkxmWPgSLLvun+8BwsihiAQoVfI4gwtE5W8sdgADkk9G/HHEhKJJzFm86nF07VrVdWt1zei6Xc80dJefzG613anZsjSI2ZAMU3fGULrP4Bd7DD5CECcYCZoXfU55o1PGU/IK8oyFeiUHFYIyPghSwcWOYdkXKsVREiIBWI3iIAtRJVkkRYJUuv41FABpIR15k+L9fRne4bcyE1wnwEKBilhaiFcTHRlFRhnI1wHbuwGX5t0swOKZ8bSyFMM1kv1PH90i2mTbKjyip/b4SS9xb9VPvv75pvoNKPUwH1tHQY533JYzlY8JTiLNspqvoPJayfI8K+pXEwSZcvMq50ldHSOYcZZ7m8QviKhbE+pJQ2aL+sDzVr6PL2MLMmaAoYh3m1QcT9gwxoiKDcPnr2V16vqy55LnjaEVOyZrh3wREYi/3VWgA4UeF9/yn2WcBh/lOmJrxw+Pk68VDJO5OIlx8vZFU8CYm8Wc/+J01/gxA8ec7wu3Sd5iYbybphlDX3+RBLE1ZABhnBHmd+RCsEu2BU72liDnQ+mTmYLQNxN6Rb+c0Pf93pjTXgTkrS7+u7KCi3aBSBaLQIGlIa/4wsmdk/kOuW8A7vK7WXM1w/O8v/H7fiTNT+LPkp2cHr6H5n8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZvU+I+EH7vp+j0XjrQfyBtR5ipBc6Keh7gjecbJ6QLxGvTmqSIfvpfUiwCosf9ZpzBbDe7z/7Js3vKUZrYfsA5MEEyqkXdtv7QnLix12xYNWxZZq0xhWbN80yn5kwazkls2a4zmehaxHkBEeUCUdHWbdNyapZds92xZfu25Ttu3fW8e137BYxL01KlburaMk0o90u3bb1g1M8QJ9ynKAXuC+yPgqtLX2r6qMKkd05XKEuHrDMXIvcNA9djwJAkuI6z1Dg1tnROY+6PyIwiUTB48xnztv529/n5uf7s1DM2M2zTNA3TM6ROzMnsm945qi5DHNFptjqHiGaUYJSQV6RAXYGYZ7EWJLOMETFPPzFtGZapTNdgiWU2G/Sbbrw7KNEdaGkLJOOoxufIqowNYQoMKAbtdhi19W+HVXB1d8wQ5dOMpXzn/G+QgC4gyXKIa7yKrEJ3uMU96eqcAvYjipOCkwVcqzbJEQau3TCYkuUl4bL5Yq6V5deWXP6RqssA/0tZTo1NrBK6sSc7XTIDLv5PzTbrtbLyCyUFdIY3MHBtPPFugwL9RmHDvSTsgl08xlm7hLCpvAK1LvfbebdZ1731dgkeL4/vWji6O8bkHrsNCEnxeJ6lkZk/XXy/EeMhPk+fWvnMSgqCfyd331nev5hMWkb48hqR3jxqzr3z9GJ2XgyO5mbxasPi53x0E74cn5kMD6hjTwdN7xbug+4lO+GOFb44ERssmDf4yY3kCd//YWGYuI3H2O15t9/HIWsOzNv5UfZ8jWaL/Jg8DtBPfvXaP+Ht95g2Y9gWVpQwKiaPgEV1VO0RdbW+rBcSX9OLkpC4Ni1V/VxxFBdAhd5RtxS1+IUkIBL7spirs9MLzK7jmi3bc5yGZYZnXmDL/7yGa/W9wK04aIViB2KY0SlRvhTLrvrna4A49TnQGFhtkRV4Dlz/wmIXCaRFdCgfR0Y5jDPJ4ie9puWGTeekf2Y1bMsL+o5ldq1+0Gr13EbL0bXrTPygP1gwFcC2Gby5xeBDwCQnoGhe9TmXjc6FTMkTWhQiseoLVKdQyEHAFBf7dsNtGpykeQIKsJFmcZFAPZ/nZYIMvvq1awjzUjrsjcv392l4u9+qTEidmCgFrmI5A1lN2DOK7CqQzwN2NwOuzAdFTNQzk2kVjOAVku1P792i2mTdKjKih3D0YFW41+oHX/940/gClLGbj7WjeEE23FYzVY4JSSKdqppPqP5ULxaLoqxfSxEkk+YNyZOWMQJcSJZ7GWd/gBprE8ZBQ2aNesfzWr6NrxBzOhJIQCq7TSuPB2wYI+Bqw4jka1keur5suZR5E7AU+2RhIhcRhfjLXQX7WOlJ8Y38ec5Y/F6uPbY2/Mg45VohCJ2pkxonL580Bc6kWSL5L2ObxvcZ2Od8W7hO8hqLkN00KQR8/kVTxNbWEcZZQUXU1UvBJtmWOMVLDv670gczJaG/Tegl/3RC311djiTtpUhf65K/K9dI2S4YdLUIlFja+lIunNI5nW2Q+xvALX5vBabd6/VO/sLv25F0Pog/SjZyuvseOv8B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0721351388233295645</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0721351388233295645</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0721291388233289537</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0721331388233293176</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0721351388233295645</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>08A0B60F62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FBA09BEF62933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>4EA0D38072933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79295ab9-f4a8-41c4-8989-57e269153436</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="78b70e0b-ec96-483b-a6c9-fd08c067e2c9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="9c363c58-f36e-42c5-912b-cb76ac4c2db9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E1B08F8172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9676100FC43C71E0401F0A059979D6:962DC24E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0721481388233308136</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>21B0F67172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:21B0F67172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:21B0F67172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E1B08F8172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>D5B0B8C272933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C8B03F8372933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E1B08F8172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:D5B0B8C272933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:C8B03F8372933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqdWlTK6UdYIZScFDk+FpQxxsnpgEiJalNCnh+/UmKRUDwcN4ZZzDbze6zH3l26xzOE9tvcY4zQRjVemFDf8E1YLmXMTAcWIWG8xpXDe/Vdg3rFWM3fo0d17V0rcd5jnuUC0hFQ7ctcGEA27BrQ2D7NvAdUKlW3Wdde8AZl6alSkXeWs0Tyv3CbUPPM+ozyAn3KZxj7gvkR63bvi81fVhi0pv1NcrCYdacCpH6pokqMUY4SVAFsblZN3d06jH3IzKhUOQZ/vQZ84b+eXe5XFaWFxWWTUzbsizT8kypE3MyOdebZ+VlHPfomK3PbUgZJQgm5DdUoG6xmLJYayUTlhExnR8xDUxgKdMGXiEDAYee6+aXgwLdiZZ2QGYcGnwKQWnsHo9xhinC2ui+19DPT6vg+u4wg5SPWTbne+d/g4TpAicsxbHBy8hKdKdbPJCuZh0jv0dRknOywAPVJilEmGt3GR6TVZ9w2Xwx14ryaysu/0jZZRj9S1nq5jZWCd08kJ2QTDAX/6dm2/VaW3mASY6bzyMejyYzr2/PnNF74E7x8uka8JaXTxoFhG3lNahNuT/P+8266a3PS9dhkj+zR9ibuTmLP4C7vAIdd/TxFrg1slpEZhJF6U23P4j+c9pjUb0eWtPxQxrSAD29r5jVBVf2OA+92Hp4OnPs1luvHd2QGfeqg8k4/T2+t29Bhz0/zoKAdwfdR8QuP4Lk6s6pDtLRww0ZkqVtOv3O8C6JrkferfeU8EE4mrXPGLiJrOBxdmUu49u3VZS0l42vmLZj2BWWlBDlr28YifKo2qMXal1ZLyh+phclIbExLlT9VHEUF5gKvaluKWrxc0lAJPZlMdfnDgisWrcGXNu7uHCA1Q68li3/85wa6HqtWslBaxR7ENuMjonypVh23T8/A0Rzn2Ma48xYsBxNMdd/sBhCAbUevZePg1GOh0yyeOfSBu2wU7OdMAgD0AkugNcNJfRqzXW8Tk3XBkz8or+y1ljgbJfBL3cY/B4jkhKsaF71OZeNzoVMyTtc5CIBlQWsUJzLQZApLvZtp3ZpcjJPE6wAm3MW5wmupNO0SJDJ17+2AREvpPedYfH+joa3/63MhNSJiVLgKpYAy2riA6PoogzkeMC17YBL8608JuqZybSKjKA1kt1PX92i2mTTKjKil3b0AkrcG/WTr3+/af4AytzPx8ZRvCBbbsuZKseEJJFmWc13WHmv5ItFXtTPVQSZSfOm5ElgRhjlkuU+hmyGqbkxYZ40ZDao9zxv5Lv4cjGlkYACz2W3acXxhA0jwlxtGD35Wlanri87LmXeBF6JQ7J2IhcRhfjHXQX5SOlJ8Z38WbIs/irXAVtbfmSccq0QhE7USY2TjyNNgZg0SyT/sWzb+CEDh5zvCjdJ3mARsptec4GPf9EUsTV0iBDLqeiFeiHYJtsCp/hIsf+l9M1MQeifE3rFj07op9t+JGlvDvWNLvm7skGKdkFYV4tAgaWhr+TCKZ3TyRa5fwLc5ndb8nu36v6V33cjaX4Tf5ds5XT/PTT/AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqdWlTK6UdYIZScFDk+FpQxxsnpgEiJalNCnh+/UmKRUDwcN4ZZzDbze6zH3l26xzOE9tvcY4zQRjVemFDf8E1YLmXMTAcWIWG8xpXDe/Vdg3rFWM3fo0d17V0rcd5jnuUC0hFQ7ctcGEA27BrQ2D7NvAdUKlW3Wdde8AZl6alSkXeWs0Tyv3CbUPPM+ozyAn3KZxj7gvkR63bvi81fVhi0pv1NcrCYdacCpH6pokqMUY4SVAFsblZN3d06jH3IzKhUOQZ/vQZ84b+eXe5XFaWFxWWTUzbsizT8kypE3MyOdebZ+VlHPfomK3PbUgZJQgm5DdUoG6xmLJYayUTlhExnR8xDUxgKdMGXiEDAYee6+aXgwLdiZZ2QGYcGnwKQWnsHo9xhinC2ui+19DPT6vg+u4wg5SPWTbne+d/g4TpAicsxbHBy8hKdKdbPJCuZh0jv0dRknOywAPVJilEmGt3GR6TVZ9w2Xwx14ryaysu/0jZZRj9S1nq5jZWCd08kJ2QTDAX/6dm2/VaW3mASY6bzyMejyYzr2/PnNF74E7x8uka8JaXTxoFhG3lNahNuT/P+8266a3PS9dhkj+zR9ibuTmLP4C7vAIdd/TxFrg1slpEZhJF6U23P4j+c9pjUb0eWtPxQxrSAD29r5jVBVf2OA+92Hp4OnPs1luvHd2QGfeqg8k4/T2+t29Bhz0/zoKAdwfdR8QuP4Lk6s6pDtLRww0ZkqVtOv3O8C6JrkferfeU8EE4mrXPGLiJrOBxdmUu49u3VZS0l42vmLZj2BWWlBDlr28YifKo2qMXal1ZLyh+phclIbExLlT9VHEUF5gKvaluKWrxc0lAJPZlMdfnDgisWrcGXNu7uHCA1Q68li3/85wa6HqtWslBaxR7ENuMjonypVh23T8/A0Rzn2Ma48xYsBxNMdd/sBhCAbUevZePg1GOh0yyeOfSBu2wU7OdMAgD0AkugNcNJfRqzXW8Tk3XBkz8or+y1ljgbJfBL3cY/B4jkhKsaF71OZeNzoVMyTtc5CIBlQWsUJzLQZApLvZtp3ZpcjJPE6wAm3MW5wmupNO0SJDJ17+2AREvpPedYfH+joa3/63MhNSJiVLgKpYAy2riA6PoogzkeMC17YBL8608JuqZybSKjKA1kt1PX92i2mTTKjKil3b0AkrcG/WTr3+/af4AytzPx8ZRvCBbbsuZKseEJJFmWc13WHmv5ItFXtTPVQSZSfOm5ElgRhjlkuU+hmyGqbkxYZ40ZDao9zxv5Lv4cjGlkYACz2W3acXxhA0jwlxtGD35Wlanri87LmXeBF6JQ7J2IhcRhfjHXQX5SOlJ8Z38WbIs/irXAVtbfmSccq0QhE7USY2TjyNNgZg0SyT/sWzb+CEDh5zvCjdJ3mARsptec4GPf9EUsTV0iBDLqeiFeiHYJtsCp/hIsf+l9M1MQeifE3rFj07op9t+JGlvDvWNLvm7skGKdkFYV4tAgaWhr+TCKZ3TyRa5fwLc5ndb8nu36v6V33cjaX4Tf5ds5XT/PTT/AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbdbuI8EL3fp4iyl5+CkwAlRAWJQOmm2z8B7bbcrIwzgGlwqO1A2qdfOzQUKO2yn1SJejKeOfPjM3Mq8Dx2/ZYQwCVNmBF2GubvGonGo3p9ZEGtClYFRtjC9VrNGpcdB6DqjQhxTCMUIoWQCYmZbJiu7ZQtx7Vcb+C4vuv4lVqp7thD07gHLpRppVKyTSObx0z4uduGmXLmJ1hQ4TM8B+FL4vdbV5e+0vRxgclsnq5R5g55cyrlwkeIlCIgEMekRJI5OkU7OqeR8Pt0wrBMObz5jETDfLu7Wq1Kq3Ip4RPk2raN7DpSOpGgk+9m81txGaKQjZP1uY1ZwijBMX3FGtQVyGkSGa14knAqp/NPTDvIsbVpCzJiEafCvpvo3UGO7khLOyC5wJaYYqcw1oMxcGAEjLte2DC/H1fB9d0Bx0yMEz4Xe+d/gwRsCXGygMgSRWQFuuMtHkhX8xSIHzISp4Iu4Vq3yQITEMYthzHNLqlQzRcJIy+/kQn1R4suA/IvZTlF21gVdHQgOx06ASH/T82267W2co/jFJqzs+H45DEOJrNZ9T82CH6R+5/xQ9jJppNGDmFbeQ1qU+63836zbnrr7dLVPLubPcwuwhbMOtOfVPavH89fUPu2GrInZ/h8hcplL7s7D9Gywy89ec3v42UVXno3w1d+vsArkK3hRfdsGDyWv8XgVSsYseGPYPb0mJ4sReU6C3n3h/uDl2nS6a/adPnale3z+HacXmXe7dloWJ3Zrw8/O7WTX+deeNOTrzfJ3YVz9w15/bg9ub785UjJMRlcDJ4a7zFtx7ArLCihn45mQGRx1O0RdoyuqheWX9OLltDIGueq/kJzlJDApNnUtzS1+KkiIBr5qpjrc6ca2IHXdmtuvVyuOHY7qLdc9V+94jndessrOGiNYg9iO2Fjqn1pll33z9cAydwXwCLg1jJJyRSE+YXFDpbYCFlPPY6ECRgkisW7nnNWq7tBcOYG9knVa7Wck2478ALPrdU65bZpXCfyht3w1lgC32Xw6g6D94DQBQVN87rPhWp0IVVKnvEylbFTWuISg1QNAq652HcrXhUJOl/EoAGjeRKlMZQW00WeICTWv66FicilvbNB/v4+DW//W5EJpRNRrSB0LAGoasKBUVQuAvk8YG874MJ8K42ofmYqrZJTskay++m9W3SbbFpFRfS73f/tFLg36kdf/3gTfQEK7edj4yha0i23xUxVY0KRSLOo5jMuPZfS5TLN61fTBMmVeaR40kF9IKliuZdB8gQMbUygo4bMBvWe5418F18qp6wvsYS56jYjPx6xYfRB6A0jVK8lO3Z92XGp8iYhk4dk7VgtIhrxl7sK8YnWU+Jb9bNKePRergO2tvyoONVaISmb6JMeJy+fNAVJlFmq+C/h28YPGTjkfFe4SfIGiyJgOkolfP7F0MTWMDEhScpk2DFzwTbZ5jjlywL8d6UPZnJCf5vQmfh0Qj9cXfYV7c2xudGlf1e2aN4uBEy9CORYGmamFk7lnE22yP0N4Da/u05gd09qzt/4fTeS5gfxR8lWTvffQ/MP</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxWcC5CLAIlL0UGU0gKnp+1LZRwneDdxIHaA9uu3HQgFCt3sI1Winoxn1ly8ZmoMxpHpNRnDKScJVXqduvpm+Xg6DUxXg3rV18oOsjQn0KFmGeUqtJxppWpbqtJjLMM9yjikvK6aumFphqmZzsQwPdPwKnrJtSuvqvKEUyZMC5WSrirrOKLMy93W1SylXgIZYR6FMWYeR964ObjzhKYHC0xqo7ZBmTtMGzPO5x4AqORjhKMIlVASgxo40Kn5zBuTkEKepXjr02d1dXt3tVqVVlYpSUNg6roOdBcIHZ+R8FptXBWXsd+jQbI5tyFNKEEwIp9QghpgPkt8pRmFSUr4LD5j2gCGLk1reI00ZJTptQq+HOToLrR0ADJlUGMzaBTGRjjAKaYIK/+OenX1+rIKbu5OUkhZkKQxOzr/HSRMlzhK5tjXWBFZge5yiyfS1ahh5PUoijJGlvhetskcIsyUhxQHZH1HmGg+nyl5+ZU1E3+k6DKM/qYsNbCPVUAHJ7LTISFm/P/UbL9eGytPMMpw459P/eO9O57pi877w7RrAMonw9fKjdsO6zmEfeUNqF25t+fjZt311vbSOqvQDoqdpWk3rVXfnczCV2TM+uP/oofO0K6mi26T2SNAkmBttO5u7+HcdMjgHuBHKyrfDafhzeym/xh/juLO1XTp3zwvhs+my0O0sow+LT9B0lsFfuuGxx9JU38ZtXT7pQqAW1m/hGZnMuhH84lvOo+3s2GvEr90+qtB+1dYXV29Tl7pYzAJ586Dvl7A4JOt6l8x7cdwKCwoYZxNf2HEi6Nsj15H6Yp6Qf4zvUgJ8bUgV/XmkqMYx5SrDXlLUouXCQIivieKuTm3nZZudR3LNl3LKht6u+U2TfGfW3aMrtt0Cg7aoDiC2E5oQKQvybKb/vkZIIo9hqmPU22ZZGiGmfqDxQ7kUOnRkXgcCWV4kggWLzdtu3Kru1Wj22k7etdudVuG6ZpOWS/rTqWiKvcJH9Jh2gw4Tg8ZvHLA4COMyJxgSfOyz5lodMZFShZwmfHIKC1hieJMDIJUcrFnlp0KYCSeR1gCBnHiZxEuzWfzPEGAbX5NDSKWS0e3k/z9nQ3v+FuRCaHjE6nAZCwtLKqJT4yichHI+YCd/YAL883MJ/KZibTylKANksNPX90i22TXKiKit/b4zShw79Qvvv79JvgBFDjOx86RvyR7bouZKsaEIJFGUc0FLC1K2XKZ5fWzJUGmwjwQPGmAMUaZYLmPSfKOKdiZABcNmR3qI887+SG+jM/omEOOY9FtSn68YMMYYyY3jJ54LetL15cDlyJvHK/5KVk7EouIRPzjroI8JPWE+EH8rJLU/yrXCVt7fkScYq3ghIbyJMfJx5mmQIkwSwT/Jem+8VMGTjk/FO6SvMPCRTdNM47Pf1EksdVViFCSUd7rqLlgn2xznPxjjr0vpW9mckLfTug1Ozuhnwd3Y0F7MVR3uuTPyhrJ2wVhVS4COZa6uhYLp3BOwz1y3wLc53fTaOndqm38id8PI2l8E3+X7OX0+D00fgM=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0721481388233308136</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0721481388233308136</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0721391388233299982</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0721441388233304969</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0721481388233308136</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F1B08F8172933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5B0C8C272933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>D8B03F8372933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c363c58-f36e-42c5-912b-cb76ac4c2db9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="7b67ffd0-01bc-47b6-b0c3-6d1db593cd55"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="7d8d8a02-ce41-406b-a2f8-af524af3ade0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>7CB0829472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173B6AF9775E0401F0A07995A24:B8D948EE"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072201388233320012</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>BBB0BD6472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:BBB0BD6472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:BBB0BD6472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>7CB0829472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>60C052A572933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">53C0867672933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:7CB0829472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:60C052A572933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:53C0867672933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn9/GmlJYKpSPMQFHfeioK6vn65SamC422CSQpIH/9mxSLgOhx74wzmO1m99kfeXaPBcpSN+gIAVwSRo2o1zJ/O1Wn1oyRazWfnKbl1eHJQlWnbtV8t1b3G43YcTzTiITIIaJCIipbpqvuWI5ruf6t4wauExzVKnW//mga98CFMq1UKlXTWGQpFUHhtmXmnAYMCSICijIQgcTBsHN5ESjNAJWYzPbxCmXhkLcTKSeBbeNKDBjSFFcwy+xje0vnOBbBkIwpkjmHN5+xaJlvd+fzeWVeqzA+tt1qtWpXm7bSiQUZfzfb38rLEEd0xFbnEFFGCUYpWSIN6hJkwmKjk44ZJzLJPjHt2E5Vm7ZggS3sePS7ab87KNAdaGkLJBfIEglySmMDGAEHisG4G0Qt8/thFVzdveWIihHjmdg5/x0koDNI2QRiS5SRlegOt7gnXe1jwEFEcZoLMoMr3SYThEEY1xxGZHFBhGq+WBhF+Y2FUH+k7DLAf1OWY3sTq4Ju78lOj4xByP9Ts816razcozSH9vUsPOs+L6/vf94lNu7LqScW7PJmTF5Yq4CwqbwCtS7323m3Wde99Xbp5eHxh1xe5ff/8nx0dIOWEN81fk3mjWX+0ImTE3/w+Igvzl+WVf9henPeeLh8mjqDu+j0n6QD/Hy6mCP/5NzF16Ow/21ycv8zImyQ8Fnfi3+dnP+4Df0zOug5EvPlw+vVRRINa951NDyi81d6+nTm392fh8+uO31JX1nt+WzcH6LseXzn1r/h/ov3Y+4m8UXnl8czNH2+bL3HtBnDtrCkhGH+9AxYlkfdHlHPOFX1QvJretESElujQjWYaI4SEqg02/qWppYgVwRE4kAVc3VuhN2q7za9htus1TynGnabHVf91/R857TZ8UsOWqHYgRgyOiLal2bZVf98DRBngQAaA7dmLMcJCPMLiz0kkRHRgXocjAq4ZYrF/WbTUxi9Thj2nI5f0yj9Wuh7bq/ueX7NNK6Y7NM+74wk8G0GP9pi8AFgMiGgaV73uVCNLqRKyRTNcpk6lRmqUMjVIOCaiwPX849sQbJJChqwnbE4T6EySSZFgmyx+nUthEUhHZzcFu/v0/B2v5WZUDox0QpCx9IFVU3YM4q8MpDPA/Y3Ay7Nd/KY6Gem0io5wSsk25/eu0W3ybpVVES/w+Fvp8S9Vj/4+seb9heg7N18rB3FM7LhtpypakwoEmmX1ZyiyrSSz2Z5Ub+GJkiuzNuKJx17CDhXLPd6y16A2msT9kFDZo16x/Navo0vlwkdSiQhU91mFMcDNowhCL1hROq1LA5dX7ZcqrxJWMh9sjBVi4hG/OWuggOs9ZT4Wv3MGY/fy7XH1oYfFadaKyShY33S4+T1k6bATJkliv8Y3zS+z8A+59vCdZLXWKTqpqdcwudfDE1sLRNhzHIqo55ZCDbJtsApXycQvCt9MFMQ+tuEXohPJ/TD5cVQ0V6GzLUu+bOyRYp2wWDqRaDA0jIXauFUzul4g9zfAG7ye7fbrXYVN/6J37cjaX8Qf5Rs5HT3PbT/Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn9/GmlJYKpSPMQFHfeioK6vn65SamC422CSQpIH/9mxSLgOhx74wzmO1m99kfeXaPBcpSN+gIAVwSRo2o1zJ/O1Wn1oyRazWfnKbl1eHJQlWnbtV8t1b3G43YcTzTiITIIaJCIipbpqvuWI5ruf6t4wauExzVKnW//mga98CFMq1UKlXTWGQpFUHhtmXmnAYMCSICijIQgcTBsHN5ESjNAJWYzPbxCmXhkLcTKSeBbeNKDBjSFFcwy+xje0vnOBbBkIwpkjmHN5+xaJlvd+fzeWVeqzA+tt1qtWpXm7bSiQUZfzfb38rLEEd0xFbnEFFGCUYpWSIN6hJkwmKjk44ZJzLJPjHt2E5Vm7ZggS3sePS7ab87KNAdaGkLJBfIEglySmMDGAEHisG4G0Qt8/thFVzdveWIihHjmdg5/x0koDNI2QRiS5SRlegOt7gnXe1jwEFEcZoLMoMr3SYThEEY1xxGZHFBhGq+WBhF+Y2FUH+k7DLAf1OWY3sTq4Ju78lOj4xByP9Ts816razcozSH9vUsPOs+L6/vf94lNu7LqScW7PJmTF5Yq4CwqbwCtS7323m3Wde99Xbp5eHxh1xe5ff/8nx0dIOWEN81fk3mjWX+0ImTE3/w+Igvzl+WVf9henPeeLh8mjqDu+j0n6QD/Hy6mCP/5NzF16Ow/21ycv8zImyQ8Fnfi3+dnP+4Df0zOug5EvPlw+vVRRINa951NDyi81d6+nTm392fh8+uO31JX1nt+WzcH6LseXzn1r/h/ov3Y+4m8UXnl8czNH2+bL3HtBnDtrCkhGH+9AxYlkfdHlHPOFX1QvJretESElujQjWYaI4SEqg02/qWppYgVwRE4kAVc3VuhN2q7za9htus1TynGnabHVf91/R857TZ8UsOWqHYgRgyOiLal2bZVf98DRBngQAaA7dmLMcJCPMLiz0kkRHRgXocjAq4ZYrF/WbTUxi9Thj2nI5f0yj9Wuh7bq/ueX7NNK6Y7NM+74wk8G0GP9pi8AFgMiGgaV73uVCNLqRKyRTNcpk6lRmqUMjVIOCaiwPX849sQbJJChqwnbE4T6EySSZFgmyx+nUthEUhHZzcFu/v0/B2v5WZUDox0QpCx9IFVU3YM4q8MpDPA/Y3Ay7Nd/KY6Gem0io5wSsk25/eu0W3ybpVVES/w+Fvp8S9Vj/4+seb9heg7N18rB3FM7LhtpypakwoEmmX1ZyiyrSSz2Z5Ub+GJkiuzNuKJx17CDhXLPd6y16A2msT9kFDZo16x/Navo0vlwkdSiQhU91mFMcDNowhCL1hROq1LA5dX7ZcqrxJWMh9sjBVi4hG/OWuggOs9ZT4Wv3MGY/fy7XH1oYfFadaKyShY33S4+T1k6bATJkliv8Y3zS+z8A+59vCdZLXWKTqpqdcwudfDE1sLRNhzHIqo55ZCDbJtsApXycQvCt9MFMQ+tuEXohPJ/TD5cVQ0V6GzLUu+bOyRYp2wWDqRaDA0jIXauFUzul4g9zfAG7ye7fbrXYVN/6J37cjaX8Qf5Rs5HT3PbT/Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj07pBVrajjDDTUDxBnh5/eKENECkTWmTAPrrT1IsAqKH8844g9ludp+95Nk9pyAKLb9GKUoZjonSbVbUVzgyRrbhAW3smFAr2dDTALSLWtmxnZFbNm0L2qrSpZSjLqEMEFZRLcMsaqalWe7QtHzL9G2vUHaMF1V5RCkVpoVKwVCVVRQS6mduKypPiR8DiqlPQISoz6A/qF33fKHpgxyTWj1fo8wcptUpY3Nf12EhQBCFISzAONLP9R2d84D6AzwhgPEUffoMaEX9vLtcLgvLYiFOJ7plGIZueLrQCSienKrVk/wyCrpkHK/PDUBigiEI8QeQoK4Rm8aBUgsncYrZNPrBtKmbhjStoRXUoFkip6r+5SBDd6SlHZApBRqdAjM31kdjlCICkfLQ71bU0+MquL47TAGh4ziN6N753yAhskBhPEeBRvPIcnTHWzyQruo5gn6XwJBTvEA3sk3mACKq3KVojFc9TEXzBVTJyq+sqPjDeZch+C9lOde3sQro+oHsNPEEUfZ/arZdr7WVRxByVC3Sx4/0Krnq1Bp61LhqL0cXHy/Ae+dXrUoGYVt5DWpT7s/zfrNueuvzUrLqDHsX73eg3TaS5wZIxrO6ya/+40n6eENeaO/Sardt4yI+A/c3DnXuLjv3cRQuA+feTUbthMFym3FqtSaPycnwTP+YzGAHJXePK+8G9C/ZqgyMxfXi3mHInDnG+MF6Kj7FM3qmD/kLt2esdtOBfa/10QBd73r8NComy8Dt8tuTZKS3vOmz8VZ+mL2VO53ehVH5imk7hl1hTgkDPnpDkOVH2R7dpnIh6gXY7/QiJTjQxpmqP5ccRRkiTK3KW5JafC4ICAe+KOb67BgNw7ZqdtnyisWSaTTqXs0S/3kl17zwam7OQWsUexAbMRlj6Uuy7Lp/fgcII58iEqBUW8QcThFVf7HYBAwoXdIXjyMmFA1jweKO0XQc1zJbXqvoupZltbyy6zWbbtlwiy1LcPFNzG7JbVobM5TuMri9w+B9BPEcI0nzss+paHTKREoSsOAsNAsLUCCIi0GQSi72rZJr6xRH8xBJwHoUBzxEhfl0niVIp+tfS1ASzaT91jB7fz+Gt/8tz4TQCbBUoDKWOhLVRAdGUSkP5OeA3e2Ac/M1HmD5zERaWYrhGsnup69ukW2yaRUR0Wtj8GrmuDfqR1//flP/BZS+n4+No2CBt9zmM1WMCUEi1byaCSgkBb5Y8Kx+ZUmQqTCvC5409QGCXLDc+zCeIaJvTOhHDZkN6j3PG/kuPs6mZMAAQ5HoNiU7HrFhDBCVG0ZXvJbVsevLjkuRN4ZW7JCsEYpFRCL+dVeBPpR6QnwnfpZxGnyV64CtLT8iTrFWMEwm8iTHyfsPTQFjYRYL/ovTbeOHDBxyvivcJHmDhYluGnGGfv6iSGKrqADCmBPWbaqZYJtsM5zsfY78L6VvZjJC/5zQK/rjhH6+7g0E7UVA3ejivytrOGsXiFS5CGRYKupKLJzCOZlskfsnwG1+r9frRr3plP7G77uRVL+Jv0u2crr/Hqp/AA==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQj3cQiKLIqDMq9pS+WvV62n7p5ISo6YFASVD0198ExarVHs+d6YzNstl99iXPboPBMABOmzGccBJRxXOb6lvZmlQwspE2sYGvVSZVX4OGMdHsSrUKgGXUTMtXFY+xFHuUcUh5UwWGWdZMoAF7ZAIHAMcAJateflWVMU6YMC1USoaqZGFAmZO7bappQp0IMsIcCkPMHI6cYfv+zhGaDiwwqa3GGmXuMGnNOI8dXUclHyMcBKiEolBv6Hs6DZ85QzKlkKcJ3vj0WVPd3F0sFqVFuRQlUx0YhqEbdV3o+IxML9XWRXEZ+x6dROtzF9KIEgQDsoIS1D3ms8hX2sE0SgifhSdMm7ppSNMazpCGzAq9VPVPBzm6My3tgUwY1NgMmoWxAZ7gBFOElX8HXlO9PK+C67ujBFI2iZKQHZz/DhKmcxxEMfY1VkRWoDvf4pF0tRoYOR5FQcrIHD/INokhwkzpJ3hCsjvCRPP5TMnLr2RM/JGiyzD6m7I09F2sArp+JDsumWLG/0/Nduu1tjKGQYpbv/pm31uVs2nAf1SqPetmtOyZPYtX/N/NHMKu8hrUttyb82Gzbntrc8nv3zy8IO+FXXuG8f5PPImqg5sFf189DpP2E5iOB/7w+r2/vAWP1/c/Pe/ZAnrc76UD+/UB0nF1sOq7ndVyAbLnx4tODUQufO13s86oShKzN4hmP+MYlgFY8NGTfu8aCKBs/EJGWeguXpE/ng76D1djN6slVf/1/flu3J2trrttcHtxA+3bcLYcPg38u276Y9yptpufMe3GsC8sKGGY/nrHiBdH2R6eq1yJekH+Pb1ICfG1Sa7qxJKjGMeUqy15S1KLkwoCIr4jirk+W+WuYVdr1Rqol8sV0+h26m0g/qtXbPOq3rYLDlqjOIDYjeiESF+SZdf98z1AFDoMUx8n2jxK0Qwz9RuLLuRQ8ehAPI6IMjyKBIsbdhsAt3NluWW7bZlXwOj1eqbVK9vlnmt2XVV5iPgjfUzaE46TfQa39hh8gBGJCZY0L/uciUZnXKTkA85THpilOSxRnIpBkEgudkDFtnRGwjjAErAeRn4a4FI8i/ME6Wz9CzSIWC4d9Eb5+zsZ3uG3IhNCxydSgclYOlhUE38ZRaZjFYGcDtjeDbgw3059Ip+ZSCtPCFoj2f/02S2yTbatIiJ66w7fzAL3Vv3s619v6t+A0g/zsXXkz8mO22KmijEhSKRVVPMDlj5K6Xye5vWrSYJMhHld8KSpDzFKBcstR9FvTPWtCf2sIbNFfeB5K9/Hl/IZHXLIcSi6TcmPZ2wYQ8zkhuGJ15Kdu77suRR54zjjx2TdQCwiEvG3uwpykNQT4r74WUTJZ+DHbO34EXGKtYITOpUnOU6WJ5oCRcIsEfwXJbvGjxk45nxfuE3yFgsX3fQr5fj0F0USW1OFCEUp5Z4kECHYJdscJ1/G2PlU+mImJ/TNhM7YyQn9fH83FLQXQnWrS/6srJG8XRBW5SKQY2mqmVg4hXM63SH3DcBdfu90OkbHrVb+xO/7kbS+iL9KdnJ6+B5a/wE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072201388233320012</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072201388233320012</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0721521388233312298</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0721561388233316642</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072201388233320012</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>8CB0929472933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>70C052A572933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>63C0867672933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d8d8a02-ce41-406b-a2f8-af524af3ade0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="1026bc6c-d6c5-4106-83b1-4fde62cd231b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1fdbc8c4-ad48-432a-89cf-62c0ba30db83"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>07C03B8772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED264F23FC94E0401F0A05991653:1606C56A"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072281388233328063</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>46C0C07772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:46C0C07772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:46C0C07772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>07C03B8772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FAC0196872933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:07C03B8772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FAC0196872933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1XIhVBCVJBSLqt0aUuBbem+VK4zAbeJTWMHaH/9sUNDgV6WPVKkxJPxzDcXf55TjtLE8QPOIROEUS3sNPV7rxa7nld3DIiqYLjg1I1GteYZNVT3HAdFMYptXQs5zyGkXCAqmrpj2VXDdgzHG9uO7zi+VavU6t4fXbuBjEvTUqVi6doqTSj3C7dNPc+ozxAn3KcoBe4L7I+Ci74vNX1UYtJbp2uUhcOsNRNi7psmrkSAIUlwBbPUPDV3dE4j7o/IlCKRZ/DmM+JN/W3vcrmsLKsVlk1Nx7Is02qYUifiZHqst47KzRCFNGbrdRtRRglGCXlFCtQFiBmLtCCZsoyIWfqFadu0LWXagBU2sO3SY918d1CgO9DSDsiMI4PPkF0aG0IMGVAM2u9h2NSPD6vgeu84Q5THLEv53vrfIAFdQMLmEBm8jKxEd7jFT9LVOgXshxQnOScLuFRtMkcYuDbIICarPuGy+SKuFeXXVlw+pOwywP9SllNzG6uEbn6SnQ6ZAhf/p2bb9VpbuUFJDq3ZaGXeeGn3aTIl7vD65ppYbrsHaYyXzQLCtvIa1Kbcb+v9Zt301tumQZL0PXo7ob9fV/Txx89u8AutJnV6S1/NeDg+ee7ddEfzwSS6nELKGmNkXae2BeyuOxucW/aAP9y+Ti08hF/O4KjLFnF91E/QY29wJ5wnMK9uM/ts2BmGnYl1cTcOXusiCK/7nbvp5dWNO+j+7JtPeXCeBTPmoPCJ2XkfTs4fOGZHJ42z8/PB3eOPPv5zV0XLq3nQfI9pO4ZdYUkJo/zhEbAol6o9wo7Wk/VC4nt6URISGXGh6s8VR3EBVOgttUtRi59LAiKRL4u5Xlv1tlU98+p1p1GturbVPmsEjvxquJ7dawReyUFrFHsQ24zGRPlSLLvun+8B4tTnQCPIjAXL8Qy4/o3FDhJIC+lQHg5GOYyZZPGe05NPUO31qtZZ22s37CA46biB27CctmtXde2SiSt6lQWxgGyXwWs7DD4ETOYEFM2rPuey0bmQKXlGi1wkdmWBKhRyeRFkiot9x/VqJifpPAEF2ExZlCdQmc/mRYJMvn47BsK8kA674+L8fRne/r8yE1InIkqBq1jOQFYTPlxFtl8rA/k6YG874NJ8kEdEHTOZVpERvEay++u9W1SbbFpFRnTfHt3bJe6N+sHbP+40vwFl7udj4yhakC235Z0qrwlJIq2yms+o8lzJF4u8qF9dEWQmzZuSJ21zBDiXLPcyZk9AzY0J86BLZoN6z/NGvosvFzM6EkhAKrtNK5YHTBgj4GrCCOVpWR06vuy4lHkTsBKfydqJHEQU4m9nFexjpSfFA/lasix6L9cntrb8yDjlWCEInaqVuk5evmgKzKRZIvmPZdvGPzPwmfNd4SbJGyxCdtNDLuDrP5oitqaOMGY5FWFHLwTbZFvgFC9z8N+VPpgpCP3thl7xL2/oyUV/JGkvRfpGl/xd2SBFu2DQ1SBQYGnqKzlwSud0ukXubwC3+d09aVttq/5Xft+NpPVB/FGyldP989D6Dw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1XIhVBCVJBSLqt0aUuBbem+VK4zAbeJTWMHaH/9sUNDgV6WPVKkxJPxzDcXf55TjtLE8QPOIROEUS3sNPV7rxa7nld3DIiqYLjg1I1GteYZNVT3HAdFMYptXQs5zyGkXCAqmrpj2VXDdgzHG9uO7zi+VavU6t4fXbuBjEvTUqVi6doqTSj3C7dNPc+ozxAn3KcoBe4L7I+Ci74vNX1UYtJbp2uUhcOsNRNi7psmrkSAIUlwBbPUPDV3dE4j7o/IlCKRZ/DmM+JN/W3vcrmsLKsVlk1Nx7Is02qYUifiZHqst47KzRCFNGbrdRtRRglGCXlFCtQFiBmLtCCZsoyIWfqFadu0LWXagBU2sO3SY918d1CgO9DSDsiMI4PPkF0aG0IMGVAM2u9h2NSPD6vgeu84Q5THLEv53vrfIAFdQMLmEBm8jKxEd7jFT9LVOgXshxQnOScLuFRtMkcYuDbIICarPuGy+SKuFeXXVlw+pOwywP9SllNzG6uEbn6SnQ6ZAhf/p2bb9VpbuUFJDq3ZaGXeeGn3aTIl7vD65ppYbrsHaYyXzQLCtvIa1Kbcb+v9Zt301tumQZL0PXo7ob9fV/Txx89u8AutJnV6S1/NeDg+ee7ddEfzwSS6nELKGmNkXae2BeyuOxucW/aAP9y+Ti08hF/O4KjLFnF91E/QY29wJ5wnMK9uM/ts2BmGnYl1cTcOXusiCK/7nbvp5dWNO+j+7JtPeXCeBTPmoPCJ2XkfTs4fOGZHJ42z8/PB3eOPPv5zV0XLq3nQfI9pO4ZdYUkJo/zhEbAol6o9wo7Wk/VC4nt6URISGXGh6s8VR3EBVOgttUtRi59LAiKRL4u5Xlv1tlU98+p1p1GturbVPmsEjvxquJ7dawReyUFrFHsQ24zGRPlSLLvun+8B4tTnQCPIjAXL8Qy4/o3FDhJIC+lQHg5GOYyZZPGe05NPUO31qtZZ22s37CA46biB27CctmtXde2SiSt6lQWxgGyXwWs7DD4ETOYEFM2rPuey0bmQKXlGi1wkdmWBKhRyeRFkiot9x/VqJifpPAEF2ExZlCdQmc/mRYJMvn47BsK8kA674+L8fRne/r8yE1InIkqBq1jOQFYTPlxFtl8rA/k6YG874NJ8kEdEHTOZVpERvEay++u9W1SbbFpFRnTfHt3bJe6N+sHbP+40vwFl7udj4yhakC235Z0qrwlJIq2yms+o8lzJF4u8qF9dEWQmzZuSJ21zBDiXLPcyZk9AzY0J86BLZoN6z/NGvosvFzM6EkhAKrtNK5YHTBgj4GrCCOVpWR06vuy4lHkTsBKfydqJHEQU4m9nFexjpSfFA/lasix6L9cntrb8yDjlWCEInaqVuk5evmgKzKRZIvmPZdvGPzPwmfNd4SbJGyxCdtNDLuDrP5oitqaOMGY5FWFHLwTbZFvgFC9z8N+VPpgpCP3thl7xL2/oyUV/JGkvRfpGl/xd2SBFu2DQ1SBQYGnqKzlwSud0ukXubwC3+d09aVttq/5Xft+NpPVB/FGyldP989D6Dw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj3dKX6jQdoCZAjqnvl9ARb+cickC0TbFJgX019+kUARED+fOOIPZbnaffcmz2+AoiZ0g5BwyQVOmRd2m/htDFSzv2TGIS2qG6zp1w3c810CYkLpNLOIiT9ciznOIGBeIiabuWHbVsB3D8Qa2EzhOYNsV+8R90rV7yLg0LVUqlq4tkpjxoHDb1POMBSnilAcMJcADgYN+eHUZSM0AlZj0VmOJsnCYtSZCTAPTxBUCGOIYV3CamA1zS6dBeNCnY4ZEnsHKJ+FNfXV3Pp9X5tVKmo1Nx7Is0/JNqUM4HR/rraPyMpCIjdLluYNYyihGMf1ACtQViElKtDAepxkVk+Qb07ZpW8q0AQtsYNtlx7r56aBAd6ClLZAZRwafILs01oMRZMAwaHe9qKkfH1bB5d1BhhgfpVnCd85/BwnYDOJ0CsTgZWQlusMt7klXqwE4iBiOc05ncK3aZIowcO02gxFdXFIum49wrSi/tuDyj5ZdBvhvytIwN7FK6Oae7HTpGLj4PzXbrNfSyj2Kc2jdYP+8fzZiH5O7u5PXX2n1MnkctE2HxI/NAsKm8hLUutyr826zrntrdak/7N6NTiPbQvhe3Fqz16uh+/zaHsz92Xja/Rgsxt7w5fypF17HnfZtm/D8mT+dw8Pb2/iCpE8z/6X9uFjU28QRD0f5O/ZuQ6tKxDA7j8XHwx1cwDB8SWpPzsU/GeQ3/85f6fkiHoprxzPJFfJ73vDJ/oWe3z/i2I3qD8jP+3Rwat0encWX2SS97JlkHtE7z7T6YfMzps0YtoUlJfTz5xfAojyq9oi62pmsFxI/04uSUGKMCtVgqjiKC2BCb6lbilqCXBIQJYEs5vJ8FnYs2695dcevVl3b6rT90JH/+a5nn/mhV3LQEsUOxE7KRlT5Uiy77J+fAeIk4MAIZMYszfEEuP6DxS4SSItYTz6OlHEYpJLF6zU/rIXhqXdq+451ap3Y9llodWv2Sbfj1/22rl2n4obdZOFIQLbN4CdbDN4DTKcUFM2rPuey0bmQKXlDs1zEdmWGKgxyOQgyxcWB43onJqfJNAYF2ExSksdQmU6mRYJMvvx1JBvxQto7HRTv79vwdr+VmZA6hCoFrmJpg6wm7BlFVhnI9wF7mwGX5sOcUPXMZFpFRvESyfanz25RbbJuFRnR707/t13iXqsffP3rTfMHUOZuPtaOyIxuuC1nqhwTkkRaZTXfUOWtks9meVG/uiLITJo3JU/aZh9wLlnufZC+AjPXJsyDhswa9Y7ntXwbXy4mrC+QgER2m1YcD9gw+sDVhhHJ17I4dH3ZcinzJmAh9sk6sVxEFOIfdxUcYKUnxbfyZ55m5LNce2xt+JFxyrVCUDZWJzVO3r9pCpxKs1TyX5ptGt9nYJ/zbeE6yWssQnbTcy7g+y+aIramjjBOcyairl4INsm2wCnepxB8Kn0xUxD6akIv+LcTenh12Ze0lyB9rUv/rGzQol0w6GoRKLA09YVcOKVzNt4g9xXATX53ax2rY9Xrf+L37UhaX8RfJRs53X0Prf8A</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072281388233328063</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072281388233328063</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072241388233324521</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072281388233328063</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>17C03B8772933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0BC0296872933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fdbc8c4-ad48-432a-89cf-62c0ba30db83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="721a9832-d890-4eaf-ae35-7fa0e3462a9f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="e0085640-07c5-423b-875d-7c40049ad8c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>AEC03CA972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9736041AA21EE5E0401F0A059945A9:4ADDB1B7"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0722201388233340099</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>EDC0726972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EDC0726972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:EDC0726972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>AEC03CA972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>92D0A6CA72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A4D0895B72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:AEC03CA972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:92D0A6CA72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:A4D0895B72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6o8EL7vr2DoZQf5EAUZdUZF3zq11aO2Pe1NJ4aoaSEoCYj99SdBsWq1x/POOEKWze6zH3myVQoC33AalKKI4ZBIXbcmv1WsiW5YU1sxoWXyP2gpE6RrStkuGUUdTpFpGrLUpTRGXUIZIKwmG5peVHRDMeyxbjiG4eilgmGWXmXpCUWUm+YqBU2W0sAn1Mnc1uQ4Ik4IKKYOAQGiDoPOqHHfc7imA3JMcr26QZk5jOpzxhaOqsKChyDyfViAYaBW1QOdqkedEZ4RwOIIbX16tCZv965Wq8KqWAijmWpomqZqFZXreBTPruX6Vb4ZeV0yDTfrFiAhwRD4+BMIUPeIzUNPavizMMJsHpwxrau6JkwrKIUK1E1yLatfDjJ0F1o6ABlRoNA50HNjQzRFESIQSY/Dbk2+vqyCm73jCBA6DaOAHq3/DRIiCfLDBfIUmkeWo7vc4ol01asIOl0C/ZjiBD2INlkAiKg0iNAUpz1MefN5VMrKL6WU/3DeZQj+S1mq6j5WDl09kR0XzxBl/6dm+/XaWHkCfozqnuv+F9ws18tOMV6On1vW7fzu8TNOtbuPWgZhX3kDalfu7fq4WXe9td308vAcz4pUf6fpzdJ6GXQaflpaDVoDbTm6HWuz2/adNzfTj8GqmUyTX9arTYNkagaDhzuz/8o6/c+m6g6bq5ePLrsyvWTZv+mnr9gufr63F/dGyHoLw+o1fs/KXSudzTT/3ptMOuawFZKwoz3a6bT/qb4/wsdxpN8lS7ezfi6On0fs6apcsSf6/HkN537yC7zHeq9d+4ppP4ZDYU4Jo3jyjiDLl6I9uq7U4fUC7Gd6ERLsKdNM1VkIjqIMESbXxS5BLU7MCQh7Di/mZt1ot7Riq1GxjEqxaOpaq1lpGPytYtp6p9Kwcw7aoDiCyHMxxcKXYNlN//wMEAYORcRDkZKEMZwjKv9g0QUMSF0y5IcjJBSNQ87ixabrlm29Ui61zJbets2GwVdt17KLJc10m7L0ELI+6UeNKUPRIYOXDhh8iCBeYCRoXvQ55Y1OGU/JEiQx8/VCAgoExfwiiAQXO4Zpl1SKg4WPBGA1CL3YR4XFfJElSKWbp6EASDPpsD3Ozt/Z8I6/5ZngOh4WClTE0kS8mujEVaTlgZwP2N4PODffiD0sjhlPK4sw3CA5/PTVLaJNdq3CI3prjd70HPdO/eLt33eqP4BSj/Oxc+QleM9tfqfya4KTSD2v5hIUloU4SeKsfpYgyIibVzlP6uoIwZiz3HocfiCi7kyoF10yO9RHnnfyQ3wxm5MRAwwFvNukbHnBhDFCVEwYXX5a0kvHlwOXPG8MpeyUrOXzQUQg/nFWgQ4Uelw84I9VGHlf5Tpha88Pj5OPFQyTmViJ62R9pilgyM1izn9htG/8lIFTzg+FuyTvsDDeTZOYofNfJEFsNRlAGMaEdV05E+yTbYaTrRfI+VL6ZiYj9O0NndKzN/Tv+96I014A5J0u/ruygrN2gUgWg0CGpSanfODkzslsj9y3APf5ve22NMso/5XfDyOpfxN/l+zl9Pg81P8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc6o8EL7vr2DoZQf5EAUZdUZF3zq11aO2Pe1NJ4aoaSEoCYj99SdBsWq1x/POOEKWze6zH3myVQoC33AalKKI4ZBIXbcmv1WsiW5YU1sxoWXyP2gpE6RrStkuGUUdTpFpGrLUpTRGXUIZIKwmG5peVHRDMeyxbjiG4eilgmGWXmXpCUWUm+YqBU2W0sAn1Mnc1uQ4Ik4IKKYOAQGiDoPOqHHfc7imA3JMcr26QZk5jOpzxhaOqsKChyDyfViAYaBW1QOdqkedEZ4RwOIIbX16tCZv965Wq8KqWAijmWpomqZqFZXreBTPruX6Vb4ZeV0yDTfrFiAhwRD4+BMIUPeIzUNPavizMMJsHpwxrau6JkwrKIUK1E1yLatfDjJ0F1o6ABlRoNA50HNjQzRFESIQSY/Dbk2+vqyCm73jCBA6DaOAHq3/DRIiCfLDBfIUmkeWo7vc4ol01asIOl0C/ZjiBD2INlkAiKg0iNAUpz1MefN5VMrKL6WU/3DeZQj+S1mq6j5WDl09kR0XzxBl/6dm+/XaWHkCfozqnuv+F9ws18tOMV6On1vW7fzu8TNOtbuPWgZhX3kDalfu7fq4WXe9td308vAcz4pUf6fpzdJ6GXQaflpaDVoDbTm6HWuz2/adNzfTj8GqmUyTX9arTYNkagaDhzuz/8o6/c+m6g6bq5ePLrsyvWTZv+mnr9gufr63F/dGyHoLw+o1fs/KXSudzTT/3ptMOuawFZKwoz3a6bT/qb4/wsdxpN8lS7ezfi6On0fs6apcsSf6/HkN537yC7zHeq9d+4ppP4ZDYU4Jo3jyjiDLl6I9uq7U4fUC7Gd6ERLsKdNM1VkIjqIMESbXxS5BLU7MCQh7Di/mZt1ot7Riq1GxjEqxaOpaq1lpGPytYtp6p9Kwcw7aoDiCyHMxxcKXYNlN//wMEAYORcRDkZKEMZwjKv9g0QUMSF0y5IcjJBSNQ87ixabrlm29Ui61zJbets2GwVdt17KLJc10m7L0ELI+6UeNKUPRIYOXDhh8iCBeYCRoXvQ55Y1OGU/JEiQx8/VCAgoExfwiiAQXO4Zpl1SKg4WPBGA1CL3YR4XFfJElSKWbp6EASDPpsD3Ozt/Z8I6/5ZngOh4WClTE0kS8mujEVaTlgZwP2N4PODffiD0sjhlPK4sw3CA5/PTVLaJNdq3CI3prjd70HPdO/eLt33eqP4BSj/Oxc+QleM9tfqfya4KTSD2v5hIUloU4SeKsfpYgyIibVzlP6uoIwZiz3HocfiCi7kyoF10yO9RHnnfyQ3wxm5MRAwwFvNukbHnBhDFCVEwYXX5a0kvHlwOXPG8MpeyUrOXzQUQg/nFWgQ4Uelw84I9VGHlf5Tpha88Pj5OPFQyTmViJ62R9pilgyM1izn9htG/8lIFTzg+FuyTvsDDeTZOYofNfJEFsNRlAGMaEdV05E+yTbYaTrRfI+VL6ZiYj9O0NndKzN/Tv+96I014A5J0u/ruygrN2gUgWg0CGpSanfODkzslsj9y3APf5ve22NMso/5XfDyOpfxN/l+zl9Pg81P8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4z8Y3LrYnMGMgdHwCSQqEtHnpCHkBtbZsLBmc/vpKJiZASErPTGaI1qvdby/6dq8YiiPL8xmDjJOEKkG/rf5wARq25WDNMbCr1a3FXHNNCzTbXriLebOJ7FZDVQLGcggo44jytmoZpq2ZlmY5U9PyLMsznZprmE+qMoOMCdNCpWaoShFHlHml27aaZ9RLECPMoygG5nHsTfzR0BOaHqowqZ2rHcrSYdZZcZ56uo5rIWCIIlzDSaxf6Uc6VyHzJmRJEc8zePEZsrb6cne73da2di3JlrplGIZuuLrQCRlZflY7n6rLEAZ0kezOPUQTSjCKyG8kQY2Ar5JQ8aNlkhG+it8xbeqmIU1rUGANm3X6WdVfHZToLrR0BDJjSGMrZFbGxrCADCgG5WEctNXPl1Vwd3eaIcoWSRazk/O/QQK6gShJIdRYFVmF7nKLZ9LVuQLsBRRHOSMbuJVtkiIMTLnPYEGKIWGi+UKmlOVXCib+SNVlgP+lLFf6IVYBXT+TnT5ZAuP/p2aH9dpZmaEoh04Rb372Oe5mM8sZWGvU2Pj5/WOxGQ6SdgnhUHkHal/ul/Nps+576+XSzH7kycP6BmAczb7+HtXnT1NjOBlNzS/XdXjM7x9sq7nqg7m9sdIRH9bn675Ofoe3zzzzzRFrdBdZnLDCjG/wp6eW82RHKzvqFrfufHgD7Ofj83btfkP3DyhaDvx0NkHdO1j8N3pIg7TBn5rhd6P1jXwfdafFr8ClX9eNu8AZTpPxJ/MLtmfL2QSvR/c+pWlrXm+/xnQYw7GwooRJPv8JmFdH2R5BXxmIeiH+Mb1ICQm1RanqpZKjGAfK1Y68JanFywUBkdATxdydXatv+M2e37Jc266bRq/r+pb4z6075sD1nYqDdihOIPYSuiDSl2TZXf98DBDHHgMaQqZtkhyvgKkfWOwjjpSAjsXjSCiDaSJYvGla3Z7fG9T9Xte37Wvjunfdte1By3H73Z7jqsptwu/oXeYvOGTHDN44YvAxYJISkDQv+5yJRmdcpGSNNjmPzNoG1SjkYhBkkos9q+40dEbiNAIJWI+TMI+glq7SMkE62/1aGsKslI6vp+X7eze8029VJoROSKQCk7F0QVQTzowiowrk/YCdw4Ar834eEvnMRFp5RvAOyfGn126RbbJvFRHRj97kh1nh3qtffP3tTf0DUPppPvaOwg05cFvNVDEmBIl0qmquUW1dyzebvKxfSxJkJszrgidNfQI4Fyz3PE1+AdX3JvSLhswe9YnnvfwYX85XdMIRh1h0m1IeL9gwJsDkhhGI11Jcur4cuRR541Dwc7JeJBYRifjDXQV7WOoJ8b342SZZ+FquM7YO/Ig4xVrBCV3Kkxwnz+80BU6EWSL4L8kOjZ8zcM75sXCf5D0WLrppnnN4/4siia2tIoyTnPKgr5aCQ7ItcfLnFLxXpTdmSkJ/mdAFe3dCfxsNJ4L2YqTudcnflTVStgsGVS4CJZa2WoiFUzinywNyfwF4yO/X/Z7Rspru3/j9OJLOG/FbyUFOT99D5w8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc6I8FL7vr2DYy3eQj6ICU51R0V22tduK7XZ604nhoNliQBLU7q/fBItVa7vuO8MM5HByznM+8uRcMDRPLK/DGOScpFQJ/Jb65Nh2A8w61iYmmJrtQF1zGm5dM5qRbZoRjuLYVZWAsQICyjiivKVahnmumZZmOWPT8iz51Bq2+6gq95AzYVqo1AxVWc8TyrzSbUstcuqliBHmUTQH5nHshZ3hlSc0PVRhUtsXG5Slw7w94zzzdB3XIsCQJLiG07l+oe/pXETMC8mUIl7k8OozYi31de9qtaqtzmtpPtUtwzB0w9WFTsTI9IvaPqs2QxTQON2se4imlGCUkN9IghoCn6WR0kmmaU74bP6BaVM3DWlagzXWsGnTL6r+5qBEd6KlPZA5QxqbIbMyNoIYcqAYlLtR0FK/nFbBzd5xjiiL03zODtb/BgnoEpI0g0hjVWQVutMtHklX+wKwF1CcFIws4Vq2SYYwMOUmh5isrwgTzRcxpSy/smbiIVWXAf6Xslzou1gFdP1IdnwyBcb/T81267Wxco+SAtp3oe2e/1yYi2+/p2gw+l2/vR3rfriKM7tVQthV3oDalvt1fdis29563dTtrHrdu8dxxCaz5u0sdrr1S3OafV82vmaPN9006C4em9m1MWsg31+4tk8uh07Rfx6M1pbRNOA5vP/631UxXN/MjbMizp5X+uh++H1tTsaD8VcTTX/G8YPx0nGCQZME7mMjv7/5FTr97kuGR8/Xy4froP89ebgcFj8y30gC1/WzbNpM2NnjajL1v00uXxhfX95e363Cfustpt0Y9oUVJYTF5BdgXi1lewS+MhD1QvxzepESEmlxqeplkqMYB8rVttwlqcUrBAGRyBPF3Kw7tm84br3btNzzc9s0el23Y4kv13bMgdtxKg7aoDiA2EtpTKQvybKb/vkcIJ57DGgEubZMCzwDpn5i0UccKQEdicORUgbjVLC42fHrPbtu2N1B3zC7RrPTMAaNQb9br/dFjX1VuU75D/oj78Qc8n0Gr+8x+AgwyQhImpd9zkSjMy5SskDLgidmbYlqFApxEeSSiz3Lduo6I/MsAQlYn6dRkUAtm2VlgnS2eVsawqyUjvrj8vx9GN7hvyoTQiciUoHJWLogqglHriKzCuTjgJ3dgCvznSIi8piJtPKc4A2S/V9v3SLbZNsqIqKnXvhkVri36idvf79T/wSUfpiPraNoSXbcVnequCYEibSrai5QbVErlsuirF9TEmQuzOuCJ009BFwIlnsZp89A9a0J/aRLZov6wPNWvo+v4DMacsRhLrpNKZcnTBghMDlhBOK0rE8dX/ZcirxxWPNjsl4iBhGJ+NNZBXtY6gnxjXit0jx6K9cRWzt+RJxirOCETuVKXicvHzQFToVZIvgvzXeNHzNwzPm+cJvkLRYuumlScPj4jyKJraUijNOC8kASiBDskm2Jk79k4L0pvTNTEvrrDb1mH97QD8OrUNDeHKlbXfJ3ZY2U7YJBlYNAiaWlrsXAKZzT6Q65vwLc5fe+3zOaVsP9G7/vR9J+J34v2cnp4Xlo/wE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0722201388233340099</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0722201388233340099</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0722131388233333196</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0722171388233337601</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0722201388233340099</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>BEC03CA972933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>A2D0A6CA72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>B4D0895B72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e0085640-07c5-423b-875d-7c40049ad8c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="febf05ef-9914-4914-9bc4-55827b992059"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="42f893fc-3d6b-4c51-9918-4391022565dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>58D0D34C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE967610108C3C71E0401F0A059979D6:94EE60CE"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0722301388233350690</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>97D0782C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:97D0782C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:97D0782C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>58D0D34C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4CD08C5D72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5ED095FD72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:58D0D34C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4CD08C5D72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:5ED095FD72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4j2eMLWPAeAIzBofUOZCkXNKWl44iL6BiZGLJQPrrj2QwAUJSemY8Y2u92v32ok97xfEitj2fc0gFTZgWBg39Z80pW1G9Sgy7CshwADmGGyHXALsMT8gBp46QroWcZxAyLjATDd22UNlAtmG7Q2R7tnwqJVR1x7r2CCmXpqVKydK1zSJm3MvdNvQsZV6COeUewwvgniDewO91Panp4QKT3rzaoswdps2ZEEvPNEkpAgJxTEokWZhX5pHOVcS9AZ0yLLIUdj4j3tB3e9frdWldLiXp1LQtyzKtuil1Ik6nn/Xmp2IzRCGbJNt1G7OEUYJj+hsrUD0QsyTS/HiapFTMFu+YRiaylGkDNsQgyGGfdfPVQY7uQktHIFOODT7DqDDWhwmkwAhoo37Y0D9fVsHt3mGKGZ8k6YKfrP8OErAVxMkSIoMXkRXoLrd4Jl3NKyBeyEiccbqCO9UmS0yAaw8pTOimS7lsvohrefm1DZcPLboMyN+U5co8xCqhm2eyE9ApcPF/anZYr62VRxxn0Ix/zNdZNSCx2+Vd1L4etO8Gw38n2U3PbeQQDpW3oPbl3q1Pm3XfW7tNt5jOZteVbJ59qbvW4zC8u5slDozJP4ver01tQn/P+3g1HD9+p8NZt2a/ON2b0VeepSgY9LvITjH+NnbCTS8tW5/izti8HifR6FGg+q1vz1ffH5a9SNzedFJ31GuNAtP/Zb6U19C7jlf2PBTO8mlQ6dfGc/qFPX+zK6vR1zWu/vBb1id062dlv9W5t29uZnMrXo944zWmwxiOhQUlDLKnX0BEsVTtEQZaR9YLi4/pRUloZExyVW+pOIoLYEJvql2KWrxMEhCNPFnM7briBlZQdto1u14uO8hqt+q+Lb/qjos6dd8tOGiL4gRiO2ETqnwplt32z8cAycLjwCJIjVWSkRlw/QOLARZYC1lfHo6EcRgmksXdqt2xruvtFgp82wqqlXarYtXajuNW6zW/4+vaXSLu2X3qTwSkxwxeOWLwPhC6pKBoXvU5l43OhUzJM15lIkalFS4xyORFkCou9mzHrZicLpYxKMDmIomyGErL2TJPkMm3b9vAhOfS/vUwP3/vhnf6r8iE1ImoUuAqlhbIasKZqwgVgbwfsHsYcGHezyKqjplMq0gp2SI5/vXaLapN9q0iI/rZHvxEBe69+sXb3+40PwBlnuZj7yha0QO3xZ0qrwlJIs2ims+49FzKVqssr19NEWQqzZuSJ5E5AJJJlnsZJnNg5t6EedEls0d94nkvP8aXiRkbCCxgIbtNy5cXTBgD4GrCCOVp2Vw6vhy5lHkTsBHnZO1YDiIK8YezCvGI0pPiB/laJ2n0Wq4ztg78yDjlWCEom6qVuk5e3mkKkkizVPJfkh4aP2fgnPNj4T7JeyxCdtNTJuD9P5oitoaOCUkyJsJAzwWHZJvjFC9L8F6V3pjJCX13Q2/4uzf09153IGlvgfW9Lv2zskHzdiGgq0Egx9LQN3LglM7Z9IDcdwAP+b1eC6yaa/+R348jab4Rv5Uc5PT0PDT/Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4j2eMLWPAeAIzBofUOZCkXNKWl44iL6BiZGLJQPrrj2QwAUJSemY8Y2u92v32ok97xfEitj2fc0gFTZgWBg39Z80pW1G9Sgy7CshwADmGGyHXALsMT8gBp46QroWcZxAyLjATDd22UNlAtmG7Q2R7tnwqJVR1x7r2CCmXpqVKydK1zSJm3MvdNvQsZV6COeUewwvgniDewO91Panp4QKT3rzaoswdps2ZEEvPNEkpAgJxTEokWZhX5pHOVcS9AZ0yLLIUdj4j3tB3e9frdWldLiXp1LQtyzKtuil1Ik6nn/Xmp2IzRCGbJNt1G7OEUYJj+hsrUD0QsyTS/HiapFTMFu+YRiaylGkDNsQgyGGfdfPVQY7uQktHIFOODT7DqDDWhwmkwAhoo37Y0D9fVsHt3mGKGZ8k6YKfrP8OErAVxMkSIoMXkRXoLrd4Jl3NKyBeyEiccbqCO9UmS0yAaw8pTOimS7lsvohrefm1DZcPLboMyN+U5co8xCqhm2eyE9ApcPF/anZYr62VRxxn0Ix/zNdZNSCx2+Vd1L4etO8Gw38n2U3PbeQQDpW3oPbl3q1Pm3XfW7tNt5jOZteVbJ59qbvW4zC8u5slDozJP4ver01tQn/P+3g1HD9+p8NZt2a/ON2b0VeepSgY9LvITjH+NnbCTS8tW5/izti8HifR6FGg+q1vz1ffH5a9SNzedFJ31GuNAtP/Zb6U19C7jlf2PBTO8mlQ6dfGc/qFPX+zK6vR1zWu/vBb1id062dlv9W5t29uZnMrXo944zWmwxiOhQUlDLKnX0BEsVTtEQZaR9YLi4/pRUloZExyVW+pOIoLYEJvql2KWrxMEhCNPFnM7briBlZQdto1u14uO8hqt+q+Lb/qjos6dd8tOGiL4gRiO2ETqnwplt32z8cAycLjwCJIjVWSkRlw/QOLARZYC1lfHo6EcRgmksXdqt2xruvtFgp82wqqlXarYtXajuNW6zW/4+vaXSLu2X3qTwSkxwxeOWLwPhC6pKBoXvU5l43OhUzJM15lIkalFS4xyORFkCou9mzHrZicLpYxKMDmIomyGErL2TJPkMm3b9vAhOfS/vUwP3/vhnf6r8iE1ImoUuAqlhbIasKZqwgVgbwfsHsYcGHezyKqjplMq0gp2SI5/vXaLapN9q0iI/rZHvxEBe69+sXb3+40PwBlnuZj7yha0QO3xZ0qrwlJIs2ims+49FzKVqssr19NEWQqzZuSJ5E5AJJJlnsZJnNg5t6EedEls0d94nkvP8aXiRkbCCxgIbtNy5cXTBgD4GrCCOVp2Vw6vhy5lHkTsBHnZO1YDiIK8YezCvGI0pPiB/laJ2n0Wq4ztg78yDjlWCEom6qVuk5e3mkKkkizVPJfkh4aP2fgnPNj4T7JeyxCdtNTJuD9P5oitoaOCUkyJsJAzwWHZJvjFC9L8F6V3pjJCX13Q2/4uzf09153IGlvgfW9Lv2zskHzdiGgq0Egx9LQN3LglM7Z9IDcdwAP+b1eC6yaa/+R348jab4Rv5Uc5PT0PDT/Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZb+I6FH6fXxGlj1XIQmgWFSQg7R3uAJ1CF9qXyjgH8Exi09gB2l9/7dBQoLTDXClS4pOzfGfxZ59zlCZO2OQcMkEY1TpRXX9yncAJJsGZ4Y5rY8MNfN8I4ioyqt4EV8cWsl3L0rUO5zl0KBeIirruWHbVsB3D8W9sJ3TkE1Rc137UtTvIuHQtVSrSapUmlIdF2LqeZzRkiBMeUpQCDwUOh81eN5SaISox6Y3zNcoiYNaYCTEPTRNXYsCQJLiCWWqemzs65zEPh2RKkcgzeIsZ87r+ZrtcLivLaoVlU9OxLMu0AlPqxJxMT/TGt9IY4g6dsPW6jSijBKOEvCIFqgdixmKtmUxZRsQs/cS1bdqWcm3AChvYdumJbr4HKNAd6WkHZMaRwWfILp0NYAIZUAza7aBT10+O6+Da9iZDlE9YlvK99d9BArqAhM0hNniZWYnueI8HytU4Bxx2KE5yThbQV2MyRxi49jODCVl1CZfDF3OtaL+24vIh5ZQB/pu2nJvbWCV080B1IjIFLv5Pz7b7tfZyh5IcGpe3/4xadOwMqoxP4drDxHoZLO5rVtCsFxC2ldegNu1+W+8P62a23oy+s+7gwQriuNtaTG5a94/XnH0f3V1lOLoeDbMLp4cf++g1HV+hS2aejqr+VYKbqfPqmaOhe/bvLHl+eBQz6+qSkG8Dv9WlfTi1bt3+/er2tZZkOe/N2/PUW7WX1zC9d/Ln6sPwNWK9H9Fo2F0MGJxdvDqrO/zind77d7+W6HF1apn+5NvjD8/vpQlrj367s/7kV3/I6+85beewKywpYZiPfwEW5VKNRyfSLmW/kPiaXpSExMakUA3niqO4ACr0hrJS1BLmkoBIHMpmrtduO7L8di3ynKBadW2r3QqajvwKXN++DJp+yUFrFHsQ24xOiIqlWHY9P18DxGnIgcaQGQuW4xlw/QuPERJI69CB3ByMcrhhksWbrZZ3FjluqxlEVs05c85898Jpuk7bc2teu6VrfSau6FXWnAjIdhm8tsPgA8BkTkDRvJpzLgedC1mSZ7TIRWJXFqhCIZcHQaa4OHRcv2Zyks4TUIDNlMV5ApX5bF4UyOTrt2MgzAvp4OKm2H+fprf/r6yE1ImJUuAqlxbIbsKBo8guE/k8YX874dJ9M4+J2mayrCIjeI1k99f7tKgx2YyKzOipPXyyS9wb9aPNP1qaX4Ay9+uxCRQvyFbY8kyVx4QkkUbZzWdUea7ki0Ve9M9TBJlJ96bkSdscAs4ly73csN9AzY0L86hDZoN6L/JGvosvFzM6FEhAKqdNK5ZH3DCGwNUNoyN3y+rY68tOSFk3AStxSNZO5EVEIf7yroJDrPSk+Kd8LVkWv7frgK+tODJPea0QhE7VSh0nL58MBWbSLZH8x7Jt54ccHAq+K9wUeYNFyGka5wI+/6MpYqvrCGOWU9GJ9EKwTbYFTvEyh/Bd6YObgtDfTugV//SEHvW6Q0l7KdI3uuTPygYpxgWDri4CBZa6vpIXThmcTrfI/Q3gNr8HXmR5vqTHP/D7biaND+KPkq2a7u+Hxn8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbdcto8EL3PU3jcy4zxLxg8gRmwSUoHkgZImvamo8gLKLUlsGQgefpPMjEBQlL6zWSGaL3aPfujs3vBUZo4QZtzyARhVOtFTf23Z/t1bLmW8Qh2w/CQWzPqrvVoAMSe73nYQU5V13qc59CjXCAqmrpj2a5hO4ZTH9tO4DiB61ZqvvtL1+4h49K0VKlYurZOE8qDwm1TzzMaMMQJDyhKgQcCB6P2oB9IzQCVmPTWxQZl4TBrzYSYB6aJKzFgSBJcwSw1L8w9nYuYByMypUjkGbz6jHlTf727Wq0qK7fCsqnpWJZlWg1T6sScTL/orbPyMsQ9OmGbc4goowSjhLwgBWoAYsZirZ1MWUbELP3AtG3aljJtwBob2PboF918c1CgO9HSHsiMI4PPkF0aG8IEMqAYtLthr6l/Oa2Cm7vjDFE+YVnKD87/BgnoEhI2h9jgZWQlutMtHklX6wJw0KM4yTlZwrVqkznCwLXvGUzIuk+4bL6Ya0X5tTWXf6TsMsD/UpYLcxerhG4eyU5EpsDF/6nZbr02Vu5RkkPLcz1RuxrUsEtryernrReN++6N/XLvd5sFhF3lDahtuV/Ph8267a3XS+HTrDNah4vz+9XPBX360RmEoek/oUZt+mvw7ADMFtfhiJzf3A7614s7ztl94/vL0HeeU/Y063eGv+L+avCTTb7OF2erb/RxTOJu/NV1hI/qnc64l47CpHHNrl9Q9HDuz27ZeHj356lzPyR2fgk3P/rDsArkW9rGk6vqGD+Mspfw7oHEZ/Xb5wi60ejHwxW2r4ar82zQfItpN4Z9YUkJo/zxCbAoj6o9epF2KeuFxOf0oiQkNiaFajBXHMUFUKG31C1FLUEuCYjEgSzm5lztRlajehn5TsN1PdsKO422I/9reHX7stGulxy0QXEAMWR0QpQvxbKb/vkcIE4DDjSGzFiyHM+A659YjJBAWo8O5eNglMOYSRZvd52w2wg7Vtdrh2G7Y9eiru92HNurdu12dKlr10zc0JusPRGQ7TN4dY/Bh4DJnICiedXnXDY6FzIlC7TMRWJXlqhCIZeDIFNcHDhevWpyks4TUIDNlMV5ApX5bF4kyOSbX8dAmBfSYXdcvL8Pwzv8VmZC6sREKXAVSwdkNeHIKHLKQD4OuL4bcGm+ncdEPTOZVpERvEGy/+mtW1SbbFtFRvQ7HP22S9xb9ZOvv79pfgLKPMzH1lG8JDtuy5kqx4QkkVZZzQWqLCr5cpkX9fMVQWbSvCl50jZHgHPJcs9j9geouTVhnjRktqgPPG/l+/hyMaMjgQSkstu04njChjECrjaMnnwt61PXlz2XMm8C1uKYLEzkIqIQf7qr4AArPSn+Ln9WLIvfynXE1o4fGadcKwShU3VS4+T5g6bATJolkv9Ytmv8mIFjzveF2yRvsQjZTY+5gI+/aIrYmjrCmOVU9CK9EOySbYFTPM8heFN6Z6Yg9NcJveYfTuiHQX8kaS9F+laX/F3ZIEW7YNDVIlBgaepruXBK53S6Q+6vAHf5veFHll93wr/x+34krXfi95KdnB6+h9Z/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0722301388233350690</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0722301388233350690</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0722231388233343837</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0722281388233348303</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0722301388233350690</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>68D0D34C72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5CD09C5D72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>6ED095FD72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42f893fc-3d6b-4c51-9918-4391022565dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="69c9f9e7-7e4e-44cf-892c-71f196fcf25d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="596fac05-9dc7-4f02-8dec-12ddbfc18cbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>02E053FE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96761010D63C71E0401F0A059979D6:C9B1E030"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0722401388233360403</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>41E0A7DE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:41E0A7DE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:41E0A7DE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02E053FE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F5E084DF72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">08E0E35082933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02E053FE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F5E084DF72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:08E0E35082933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH49CLgRIooIEAXpStdtya7t9qVxnAHcTG2KH0v31xw4NBUq77JEQiSfjmW8u/jxnHKWJE7Q5h0wQRrWo29Qfqw5yG7W6Z1QBu4ZblX/IRU+G5Thoip8sVJvGuhZxnkNEuUBUNHXHsquG7RiON7adwHGCar3iNNwHXbuFjEvTUqVi6do6TSgPCrdNPc9owBAnPKAoBR4IHIzaV5eB1AxQiUlvnW1QFg6z1lyIRWCauBIDhiTBFcxS88zc0zmLeTAiM4pEnsGbz5g39be9Ly8vlZdqhWUz07Esy7R8U+rEnMy+661v5WaIIzplm3WIKKMEo4T8RgrUFYg5i7V2MmMZEfP0E9O2aVvKtAFrbGDbpd91891Bge5ES3sgM44MPkd2aWwIU8iAYtAmw6ipfz+tgpu94wxRPmVZyg/WfwcJ6AoStoDY4GVkJbrTLR5JV+sMcBBRnOScrOCHapMFwsC1mwymZH1JuGy+mGtF+bU1lz9SdhngvynLmbmLVUI3j2SnS2bAxf+p2W69NlZuUZJDi40v03Xv4ub6Ys67+DU+H026y2cnHvu4WUDYVd6A2pb7bX3YrNveetsUXrgD+yG6nQyuvfNxhMRgNfxZe5iMZvcDu5/e5g/4leAOdBM3XA683sQ79/l4nsPdlDWeXlbsx8q76MyupvFw9q2e55MOi83n3zdXkP+6/rcxtq/nw/79upaaYbiK3Tx8vW9kfu/5V7aOMj+K6+OfnKy589B76g8mS3J+5486HccLv1m+nQ0W43/E0jdDu9G5q7vN95h2Y9gXlpQwyp+eAYtyqdoj6mp9WS8kvqYXJSGxMS1Ug4XiKC6ACr2ldilqCXJJQCQOZDE3a8vpWbVqv9dw/GrVta2w47cd+ea7nt33217JQRsUBxBDRqdE+VIsu+mfrwHiNOBAY8iMFcvxHLj+hcUuEkiL6FAeDkY5jJlkccvuWp1G2+v1257d63TrtXq12g97fr8bWr3Q1bUfTFzT66w9FZDtM3htj8GHgMmCgKJ51edcNjoXMiVLtMpFYldWqEIhlxdBprg4cFyvZnKSLhJQgM2UxXkClcV8USTI5JunYyDMC+mwNy7O36fhHX4rMyF1YqIUuIqlA7KacOQqcspAPg/Y2w24NN/OY6KOmUyryAjeINn/9N4tqk22rSIjegxHj3aJe6t+8vaPO80vQJmH+dg6ildkx215p8prQpJIq6zmElWWlXy1yov6NRRBZtK8KXnSNkeAc8lyr2P2C6i5NWGedMlsUR943sr38eViTkcCCUhlt2nF8oQJYwRcTRiRPC3rU8eXPZcybwLW4pgsTOQgohB/OavgACs9Kb6RjxeWvQd+zNaOHxmnHCsEoTO1UtfJ6ydNgZk0SyT/sWzX+DEDx5zvC7dJ3mIRspuecgGff9EUsTV1hDHLqYi6eiHYJdsCp3hdQPCu9MFMQehvN/Saf3pD319djiTtpUjf6pI/KxukaBcMuhoECixNfS0HTumcznbI/Q3gLr+7ds9qN7p/5Pf9SFofxB8lOzk9PA+t/wA=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH49CLgRIooIEAXpStdtya7t9qVxnAHcTG2KH0v31xw4NBUq77JEQiSfjmW8u/jxnHKWJE7Q5h0wQRrWo29Qfqw5yG7W6Z1QBu4ZblX/IRU+G5Thoip8sVJvGuhZxnkNEuUBUNHXHsquG7RiON7adwHGCar3iNNwHXbuFjEvTUqVi6do6TSgPCrdNPc9owBAnPKAoBR4IHIzaV5eB1AxQiUlvnW1QFg6z1lyIRWCauBIDhiTBFcxS88zc0zmLeTAiM4pEnsGbz5g39be9Ly8vlZdqhWUz07Esy7R8U+rEnMy+661v5WaIIzplm3WIKKMEo4T8RgrUFYg5i7V2MmMZEfP0E9O2aVvKtAFrbGDbpd91891Bge5ES3sgM44MPkd2aWwIU8iAYtAmw6ipfz+tgpu94wxRPmVZyg/WfwcJ6AoStoDY4GVkJbrTLR5JV+sMcBBRnOScrOCHapMFwsC1mwymZH1JuGy+mGtF+bU1lz9SdhngvynLmbmLVUI3j2SnS2bAxf+p2W69NlZuUZJDi40v03Xv4ub6Ys67+DU+H026y2cnHvu4WUDYVd6A2pb7bX3YrNveetsUXrgD+yG6nQyuvfNxhMRgNfxZe5iMZvcDu5/e5g/4leAOdBM3XA683sQ79/l4nsPdlDWeXlbsx8q76MyupvFw9q2e55MOi83n3zdXkP+6/rcxtq/nw/79upaaYbiK3Tx8vW9kfu/5V7aOMj+K6+OfnKy589B76g8mS3J+5486HccLv1m+nQ0W43/E0jdDu9G5q7vN95h2Y9gXlpQwyp+eAYtyqdoj6mp9WS8kvqYXJSGxMS1Ug4XiKC6ACr2ldilqCXJJQCQOZDE3a8vpWbVqv9dw/GrVta2w47cd+ea7nt33217JQRsUBxBDRqdE+VIsu+mfrwHiNOBAY8iMFcvxHLj+hcUuEkiL6FAeDkY5jJlkccvuWp1G2+v1257d63TrtXq12g97fr8bWr3Q1bUfTFzT66w9FZDtM3htj8GHgMmCgKJ51edcNjoXMiVLtMpFYldWqEIhlxdBprg4cFyvZnKSLhJQgM2UxXkClcV8USTI5JunYyDMC+mwNy7O36fhHX4rMyF1YqIUuIqlA7KacOQqcspAPg/Y2w24NN/OY6KOmUyryAjeINn/9N4tqk22rSIjegxHj3aJe6t+8vaPO80vQJmH+dg6ildkx215p8prQpJIq6zmElWWlXy1yov6NRRBZtK8KXnSNkeAc8lyr2P2C6i5NWGedMlsUR943sr38eViTkcCCUhlt2nF8oQJYwRcTRiRPC3rU8eXPZcybwLW4pgsTOQgohB/OavgACs9Kb6RjxeWvQd+zNaOHxmnHCsEoTO1UtfJ6ydNgZk0SyT/sWzX+DEDx5zvC7dJ3mIRspuecgGff9EUsTV1hDHLqYi6eiHYJdsCp3hdQPCu9MFMQehvN/Saf3pD319djiTtpUjf6pI/KxukaBcMuhoECixNfS0HTumcznbI/Q3gLr+7ds9qN7p/5Pf9SFofxB8lOzk9PA+t/wA=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jz4DtCczw2dKGkGLKLXnpqPIa1GKJWLIh99dfycQECEnpnckM0Xq1e3b36EjXHKUrJ2xzDpkgjGrDXlP/gVw7trHnG1BvWIZnu2AEVmAbCEO9Lr+gGCe6NuQ8hyHlAlHR1B3Ldg3bMRx/ajuh44RuUPMs717XZpBxGVq61Cxd26YrysMybVPPMxoyxAkPKUqBhwKHUXt0E0rPEFWY9Nb1DmWZMGsthViHpolrMWBYrXANs9S8No98rmMeRmRBkcgzeMoZ86b+tHez2dQ2bo1lC9OxLMu0AlP6xJws3uutd9VmiIc0Ybt1F1FGCUYr8i9SoEYglizW2qsFy4hYpq+Etk3bUqEN2GID2x59r5vPCUp0F0Y6AplxZPAlsqtgE0ggA4pB+zYZNvX3l01wt3eaIcoTlqX8ZP13kIAWsGJriA1eVVahuzzimXa1rgGHQ4pXOScF3CqarGUVXLvLICHbG8Il+WKulePXtlz+kYplgP9mLNfmIVYJ3TzTnR5ZABf/Z2aH89pFmaFVDq37STSZ/07ycXE/+Tq15jxieXc7tpZ335olhEPnHaj9uJ/Wp2Tdc+tp0yjCfMN7n6ZzjGYuG6/Bzn59mad3v53IFu58Rqzx2Jy67mS9ycdfN/3pqPFr+/Ax9Wf2h3EBWxLdfb8vtsH97cd3X26Cwq1Dd5wnJvO/Qn+4iN2Pn0Ymnec39m32qfcPG31uJClbzIuBQIMPHU6w+DZrTNHnDwnKiR2w78vOOPeSd3V/9vAziMi9v0hFJ78KbnnzuabDGo6NlSRE+c9fgEW1VPQY9rSBnBcSb8uLspDYSErXcK00igugQm+pXUpawlwKEIlDOczdenDVt3yvN2g4get6ttXtBG1H/hd4vj0I2n6lQTsUJxC7jCZE5VIqu+PP2wBxGnKgMWRGwXK8BK6/EbGHBNKGdCIPB6McpkyqeKPT8X1v4A6cftvyG1eO6/XqjlMPuna74QyudO2WiTEdZ+1EQHas4FdHCj4BTNYElMwrnnNJdC5kSx5QkYuVXStQjUIuL4JMaXHoeP6VyUm6XoECbKYszldQWy/XZYNMvvt1pBrx0jrpT8vz92p5p9+qTkifmCgHrmrpgJwmnLmKnKqQ1wv2DwuuwrfzmKhjJtsqMsnhEsnxp2e2KJrsqSIr+tGNftgV7r37xdtf7jTfAGWe9mOfKC7IQdrqTpXXhBSRVjXNB1R7qOVFkZfzayiBzGR4U+qkbUaAc6lyj1P2G6i5D2FedMnsUZ9k3tuP8eViSSOBBKSSbVq5vOCFEQFXL4yhPC3bS58vRyll3wRsxTlbdyUfIgrxm28VHGLlJ8138mfDsvh5XGdiHeSRdcpnhSB0oVbqOnl8hRSYybBE6h/LDoOfC3Au+bFx3+Q9FiHZ9DMX8PoXTQlbU0cYs5yKYU8vDYdiW+IUj2sIn51ehCkF/emG3vJXb+jvo5tIyl6K9L0v+bOzQUq6YNDVQ6DE0tS38sEpk9PFgbg/ATzUd8/uW+1Gr/8nfT+upPXC/NJy0NPT89D6Dw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU6s6EP7ur2Dw4x0KhL7B2M5gWxXfbevL8YsTw9LmHghIQq3++ptQqW2tnp4740zNstl9dvfJkxxwnMTI8zmHXNCUaUG/oz81UQgIuchwoqhh1O1m03jGDTAiN7Idq/XsEFzXtYDzAgLGBWaioyPLdgwbGag9tpGHkFd3apbbftS1O8i5DC1dapauzZOYca9M29GLnHkp5pR7DCfAPUG8kX9x7klPD1eY9O7BAmWZMO9Ohcg80yS1EAjEMamRNDEPzDWfg5B7IzphWBQ5fOQMeUf/2Pv6+lp7dWppPjGRZVmm5ZrSJ+R0sq9396rNEAYsShfrHmYpowTH9B0rUBcgpmmo+fEkzamYJt+Etk3bUqENmBOD2HW2r5ufCUp0O0ZaA5lzbPAptqtgQ4ggB0ZAux0GHX1/twku9o5zzHiU5gnfWP8dJGAziNMMQoNXlVXodo+4pV3dAyBewEhccDqDS0WTDBPg2nUOEZ2fUy7JF3KtHL825/KPViwD8jdjOTBXsUro5pbu9OkEuPg/M1ud1yLKHY4L6IbwePiQRmTkSlBsOj87b5m+e3Ij5r86JYRV5wWo5bg/1ptkXXLrY1PefH18gRP7yAof/onOsmN+CLfZ4GEIxJ7xm+z49/FjMx6SX1fzkF/35o4/cIKbu+fTOj9ttxvv5MxNoojcizQ/3rvrv93al1P3IS5yeuPajfz55h7NMreJJvwMYTec3beYObxMxpfnhPBgfHkFzav3t0lyG1xgdNT3YxmyiV7E8d7gBGUXYbsHw+nkpn/61hrcdj5rWq1h3VhJwqh4/heIqJaKHkFfO5LzwuJneVEWGhpR6eplSqO4ACb0rtqlpMUrpADR0JPDXKyt9sAaOA2rjVzHqdtW79D1kfzPrbftI9dvVxq0QLEBsZeyiKpcSmUX/PkZIEk8DiyE3JilBZkC13+I2McCawEbysORMg7jVKl4C9UHzmGr2Wv1jnr+kdNw/IbTbCK/gfzDuqtrl6m4Yle5HwnI1xW8sabgkic0o6BkXvGcS6JzIVvygmeFiO3aDNcYFPIiyJUWe6jebpicJlkMCrCZpGERQy2bZmWDTL74RQYmvLQOB+Py/H1b3ua3qhPSJ6TKgataDkFOE7ZcRU5VyPcFt1cLrsL7RUjVMZNtFTklCyTrnz7ZomiypIqs6Kk3erIr3Ev3nbd/3Wn+AMrc7McyUTijK2mrO1VeE1JEutU0X3DtpVbMZkU5v5YSyFyGN6VO2uYIiDzp4m2c/gZmLkOYO10yS9QbmZf2dXyFmLKRwAISyTatXO7wwhgBVy+MQJ6W+a7Pl7WUsm8C5mKbrRfLh4hC/ONbhXhE+Unztfx5TfPwc1xbYq3kkXXKZ4WgbKJW6jp5+4YUJJVhqdS/NF8Nvi3AtuTrxmWTl1iEZNNzIeD7L5oSto6OCUkLJoK+XhpWxbbEKd4y8D6dvoQpBf3jhp7zb2/oh4vzkZS9BOtLX/pnZ4OWdCGgq4dAiaWjz+WDUyZnkxVx/wC4qu91e2D5rf6g9Qd9X6+k+8X81bLS083z0P0P</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0722401388233360403</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0722401388233360403</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0722341388233354829</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0722381388233358414</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0722401388233360403</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>12E053FE72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>06E094DF72933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>18E0F35082933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>596fac05-9dc7-4f02-8dec-12ddbfc18cbf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="95740421-8d55-4c01-8457-8c42c934ad02"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="55441df8-53cf-49ee-8a25-b9a697f36b35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>BBE0DB4182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED26501CFC94E0401F0A05991653:1D21914B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0722511388233371281</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>FAE04E2182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FAE04E2182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:FAE04E2182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>BBE0DB4182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>AFE0CB4282933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F1F09EF282933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:BBE0DB4182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:AFE0CB4282933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F1F09EF282933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbdUuJMEL33KVLZy62QH0IMKaEqElgRECHq+u2NNU4aGDeZYGYC6NPvTDAIiC77VVmF0+npPv0zp/uMoSS2PJ8xyDhJqdINGurDqeOatltHmlMzbc2OwNHq2HQ1AzsIkHOKHQOrSpexHLqUcUR5Q7UMs6qZlma5N6blWZZn1yqnlvNLVe4gY8K0UKkYqrJKYsq8wm1DzTPqpYgR5lGUAPM49kJ/0PeEpodKTGrzbI2ycJg1Z5zPPV3HlQgwxDGu4DTRz/QdnbOIeSGZUsTzDN58Rqyhvt1dLpeVZbWSZlPdMgxDN+q60IkYmX5TmyflZYi6dJKuzy1EU0owiskrkqAGwGdppPjxNM0InyWfmDZ105CmNVhhDZs2/abq7w4KdEda2gGZMaSxGTJLY2OYQAYUg3I77jbUb8dVcH33JkOUTdIsYXvnf4MEdAFxOodIY2VkJbrjLR5IV/MMsNelOM4ZWcCVbJM5wsCU6wwmZNUnTDRfxJSi/MqKiT9SdhngfynLmb6NVUDXD2QnIFNg/P/UbLteayt3KM6hmTuTiwuc6sNlvUOSOGwb9zCuPt9dhnajgLCtvAa1Kffbeb9ZN731dinQLxb4euROqqPXl2GvmgzuZ/3kqvs0/p73Rj1rdMkeQWdmr3//lC3a/62cmwtiX35H03gVvTwOwmlt/DTlaEXc9kky7fV+XkbmbVJz2a+eE6IX+vt2YWA4dfs/Ot/RxVPo++YyyR9R9GM0mrbAvb2Mfl61zwfPd930eoTbw8B5jH/U7ZPr135wm43ZxeqpN3aH7v1w0HiPaTuGXWFJCWH++ASYl0fZHt1A6Yh6If41vUgJibRJoerNJUcxDpSrTXlLUouXCwIikSeKuT6fn7eN4Nw2Xaterdqm0Tqv+5b4r267ZqfuuyUHrVHsQWyldEKkL8my6/75GiBOPAY0gkxbpDmeAVO/sBggjpQuHYvHkVIGN6lgcb/u++3A6QSB0w6CjlXt1B2jZddrtlmtmTVTVa5SPqTDzJ9wyHYZvLbD4GPAZE5A0rzscyYanXGRkme0yHlsVhaoQiEXgyCTXOxZtlvTGUnmMUjAepJGeQyV+WxeJEhn619LQ5gV0nH7pnh/n4a3/63MhNCJiFRgMpZzENWEA6OoWgbyecDudsCleT+PiHxmIq08I3iNZPfTe7fINtm0iojooRU+mCXujfrR1z/e1L8Ape/nY+MoWpAtt+VMFWNCkEizrOYzqjxX8sUiL+p3KgkyE+Z1wZOmHgLOBcu93KS/geobE/pRQ2aDes/zRr6LL+czGnLEIRHdphTHIzaMEJjcMLritayOXV92XIq8cVjxQ7JWLBYRifjLXQV7WOoJ8bX4WaZZ9F6uA7a2/Ig4xVrBCZ3KkxwnL580BU6FWSL4L822jR8ycMj5rnCT5A0WLrrpMefw+RdFEltDRRinOeXdQC0E22Rb4OQvc/DelT6YKQj9bUKv2KcT+n7QDwXtJUjd6JK/K2ukaBcMqlwECiwNdSUWTuGcTrfI/Q3gNr93/LZht62/8vtuJM0P4o+SrZzuv4fmHw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbdUuJMEL33KVLZy62QH0IMKaEqElgRECHq+u2NNU4aGDeZYGYC6NPvTDAIiC77VVmF0+npPv0zp/uMoSS2PJ8xyDhJqdINGurDqeOatltHmlMzbc2OwNHq2HQ1AzsIkHOKHQOrSpexHLqUcUR5Q7UMs6qZlma5N6blWZZn1yqnlvNLVe4gY8K0UKkYqrJKYsq8wm1DzTPqpYgR5lGUAPM49kJ/0PeEpodKTGrzbI2ycJg1Z5zPPV3HlQgwxDGu4DTRz/QdnbOIeSGZUsTzDN58Rqyhvt1dLpeVZbWSZlPdMgxDN+q60IkYmX5TmyflZYi6dJKuzy1EU0owiskrkqAGwGdppPjxNM0InyWfmDZ105CmNVhhDZs2/abq7w4KdEda2gGZMaSxGTJLY2OYQAYUg3I77jbUb8dVcH33JkOUTdIsYXvnf4MEdAFxOodIY2VkJbrjLR5IV/MMsNelOM4ZWcCVbJM5wsCU6wwmZNUnTDRfxJSi/MqKiT9SdhngfynLmb6NVUDXD2QnIFNg/P/UbLteayt3KM6hmTuTiwuc6sNlvUOSOGwb9zCuPt9dhnajgLCtvAa1Kffbeb9ZN731dinQLxb4euROqqPXl2GvmgzuZ/3kqvs0/p73Rj1rdMkeQWdmr3//lC3a/62cmwtiX35H03gVvTwOwmlt/DTlaEXc9kky7fV+XkbmbVJz2a+eE6IX+vt2YWA4dfs/Ot/RxVPo++YyyR9R9GM0mrbAvb2Mfl61zwfPd930eoTbw8B5jH/U7ZPr135wm43ZxeqpN3aH7v1w0HiPaTuGXWFJCWH++ASYl0fZHt1A6Yh6If41vUgJibRJoerNJUcxDpSrTXlLUouXCwIikSeKuT6fn7eN4Nw2Xaterdqm0Tqv+5b4r267ZqfuuyUHrVHsQWyldEKkL8my6/75GiBOPAY0gkxbpDmeAVO/sBggjpQuHYvHkVIGN6lgcb/u++3A6QSB0w6CjlXt1B2jZddrtlmtmTVTVa5SPqTDzJ9wyHYZvLbD4GPAZE5A0rzscyYanXGRkme0yHlsVhaoQiEXgyCTXOxZtlvTGUnmMUjAepJGeQyV+WxeJEhn619LQ5gV0nH7pnh/n4a3/63MhNCJiFRgMpZzENWEA6OoWgbyecDudsCleT+PiHxmIq08I3iNZPfTe7fINtm0iojooRU+mCXujfrR1z/e1L8Ape/nY+MoWpAtt+VMFWNCkEizrOYzqjxX8sUiL+p3KgkyE+Z1wZOmHgLOBcu93KS/geobE/pRQ2aDes/zRr6LL+czGnLEIRHdphTHIzaMEJjcMLritayOXV92XIq8cVjxQ7JWLBYRifjLXQV7WOoJ8bX4WaZZ9F6uA7a2/Ig4xVrBCZ3KkxwnL580BU6FWSL4L822jR8ycMj5rnCT5A0WLrrpMefw+RdFEltDRRinOeXdQC0E22Rb4OQvc/DelT6YKQj9bUKv2KcT+n7QDwXtJUjd6JK/K2ukaBcMqlwECiwNdSUWTuGcTrfI/Q3gNr93/LZht62/8vtuJM0P4o+SrZzuv4fmHw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrc6o8EP7eX8HQj2eQi4jAVGeolx5a7UWs054vnTRETQsBSUDbX/8mWKxa2+N5Z5iBLJvdZy95smcUxJHhepSijOGESH63JT+B6bMT2hApEIaWYprQUp4d21Qcu960NANa2tSSJZ/SHPmEMkBYSzY0va7ohmLYY91wDcM1nVqjafyRpQnKKDfNVWqaLK3iiFC3dNuS84y4CaCYugTEiLoMuoE3HLhc0wUVJrl9tkZZOszac8ZSV1VhLUQQRRGswSRWz9QdnbOQugGeEcDyDH34DGlL/ti7XC5ry3otyWaqoWmaqjkq1wkpnp3K7ZNqMwp9Mk3W6w4gCcEQRPgdCFBDxOZJKHnRLMkwm8ffmNZVXROmFbSCCtRNciqrnw5KdEda2gGZUaDQOdArYyM0RRkiEEn3I78lnx5XwfXecQYInSZZTPfW/wYJkQJFSYpChVaRVeiOt3ggXe0zBF2fwCinuEDXok1SABGVbjM0xasBprz5QiqV5ZdWlD+46jIE/6UsZ+o2Vg5dPZCdLp4hyv5PzbbrtbYyAVGO2o3rOnocTwP7+XUMB4bVnOoRTC/u/fteq4SwrbwGtSn3x3q/WTe99bFpDmZXhu2pSfNuMbGusUmW4UX6SO3JwHc6y+I2HfYC593q6/Y8nlsXfi+56NObxArCl8kAWpfWaGX/vsW/ivnohEb1l6uGdV28W28mIoPG7LU+sFQ/eP798ApiZ7qamZ1Ldeldp7Nfq8IeDK2bwrxKJ/HDMOgtrvIhuf3jO+bVw+XdSX1xlxqzwcXj7fskXjRublavrc+YtmPYFVaUEOTPLwiyainaw+9KfV4vwH6mFyHBoTItVd1UcBRliDC5LXYJanFzTkA4dHkx12uv39M656ZhG069bur82/EM/uWYtt53PLvioDWKPYidhEyx8CVYdt0/PwOEsUsRCVGmFEkO54jKP1jsAgYkn4z44UgIReOEs3ij0expHj/wdVNrnHf7ZrdnnDf7/abnOH2935el64TdkJvMmzKU7TJ4Y4fBRwjiFCNB86LPKW90ynhKFqDIWaTXClAjKOcXQSa42DVMu6FSHKcREoDVOAnzCNXSeVomSKXrt6EASEvpqDcuz9+34e3/qzLBdUIsFKiI5RzxaqIDV1G9CuT7gO3tgCvzXh5iccx4WlmG4RrJ7q/PbhFtsmkVHtFTJ3jSK9wb9aO3f92p/gBK3c/HxlFY4C231Z3KrwlOIu2qmgtQW9TyosjL+jUFQWbcvMp5UlcDBHPOcm/j5BURdWNCPeqS2aDe87yR7+LL2ZwEDDAU826TyuURE0aAqJgwfH5aVseOLzsued4YWrFDsk7EBxGB+MdZBbpQ6HHxLX8tkyz8LNcBW1t+eJx8rGCYzMRKXCdv3zQFTLhZzPkvybaNHzJwyPmucJPkDRbGu+k5Z+j7P5IgtpYMIExywvyuXAq2ybbEyd5S5H4qfTFTEvrHDb2i397QD8NBwGkvBvJGF/9dWcFlu0Aki0GgxNKSV3zg5M7JbIvcPwBu83vf62lmz9D/xu+7kbS/iL9KtnK6fx7a/wE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pC622HWEGeTm3CuoBVLxfnJguEGlTbNKC/vqbFIuA6OHcGWcw283usy95ds8ZiiPLbzAGKScJVYJWTX0CbFru+PRMGyMXabZl2Jpbhao29tD4zEFVx3VPVSVgLIOAMo4or6mWYVY109Isd2havmX5jlOxHOtfVbmHlAnTQqViqMoyjijzC7c1NUupnyBGmE9RDMzn2B80el1faPqoxKTWz1coC4dpfcr53Nd1XAkBQxThCk5i/Vzf0jkPmT8gE4p4lsKHz5DV1I+7i8WisqhWknSiW4Zh6IanC52QkcmxWj8qL0MY0HGyOjcRTSjBKCLvSILqAZ8modKIJklK+DT+xrSpm4Y0rcESa9i06bGqfzoo0B1oaQtkypDGpsgsjfVhDClQDMpdP6ipx4dVcHV3mCLKxkkas53z30ECmkOUzCHUWBlZie5wi3vSVT8H7AcURxkjOVzLNpkjDEy5TWFMll3CRPOFTCnKryyZ+CNllwH+m7Kc65tYBXR9T3ZaZAKM/5+abdZrZeUeRRnUu6MQvUSzx66r37w/O++cDLNpu4NfG79rBYRN5RWodbk/zrvNuu6tj0u3N/yfx95vbPf6Z+4s7lIXXjL9l311t3i/y+76Lc+ZpLPcfrh8vBjEmX4/HfWitxs2MKfN0SgZPf9aDi9neb64PFse9YN3794KL6+i09ntC72eTHIHty+t9gkkcctdnMXVwah3dzWKb3+FJ+zteuI+znodx+pkV22nc/FwRR68YXN2O7vrHuUmnBj5NAhevceHJBw/Do3aZ0ybMWwLS0oYZM8vgHl5lO0RtJSOqBfiP9OLlJBQGxeq/lxyFONAuVqXtyS1+JkgIBL6opirc8fsGF67Y7mWV63aptG88BqW+M+zXbPjNdySg1YodiA2Ezom0pdk2VX//AwQxz4DGkKq5UmGp8DUHyy2EEdKQPvicSSUwTARLN6x207L6rQM1zjtNJvmxUXbdW3LbDQ9t+1ZbVW5TvgNvUkbYw7pNoM7WwzeB0zmBCTNyz5notEZFyl5RXnGI7OSowqFTAyCVHKxb9muozMSzyOQgPU4CbMIKvPpvEiQzla/loYwK6T99rB4f9+Gt/utzITQCYlUYDKWCxDVhD2jyC4D+T5gdzPg0nwjC4l8ZiKtPCV4hWT702e3yDZZt4qI6Kk5eDJL3Gv1g69/van/AErfzcfaUZiTDbflTBVjQpBIvazmK6q8VrI8z4r6nUmCTIV5XfCkqQ8AZ4Ll3obJDKi+NqEfNGTWqHc8r+Xb+DI+pQOOOMSi25TieMCGMQAmN4xAvJbloevLlkuRNw5Lvk/WjMQiIhH/uKtgH0s9Ib4VP4skDT/LtcfWhh8Rp1grOKETeZLj5O2bpsCJMEsE/yXppvF9BvY53xauk7zGwkU3PWccvv+iSGKrqQjjJKM8aKmFYJNsC5z8bQ7+p9IXMwWhf0zoJft2Qo963YGgvRipa13yZ2WNFO2CQZWLQIGlpi7Fwimc08kGuX8A3OL3Rtuw25b5J37fjqT+RfxVspHT3fdQ/w8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0722511388233371281</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0722511388233371281</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0722441388233364359</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0722481388233368438</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0722511388233371281</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>CBE0EB4182933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>BFE0CB4282933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>02F09EF282933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55441df8-53cf-49ee-8a25-b9a697f36b35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="110cf0b5-e134-4e41-9962-f8092b34a3ab"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ad9564f3-b00a-43c7-bb1b-30aea8c3ac43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A5F0F03482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173B7B19775E0401F0A07995A24:9281D80D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072321388233382771</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E4F0CE1482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E4F0CE1482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E4F0CE1482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>A5F0F03482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>99F0D70582933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EBF010D582933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:A5F0F03482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:99F0D70582933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:EBF010D582933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqpVP6QVHaAWYqiHIU9QCinhsnpAtE2wSbFJBf/yaFIiB6OO+MM5jtZvfZjzy7FY7iyPEDziERhFGt1ajqL54dup6FXAOFaGi4btkxBvjMMWwndLHjlKHslXStxXkKLcoFoqKqO5ZdlAqGU+7Zju84fums4J6W/uhaHxIuTUuVgqVr8zii3M/cVvU0oT5DnHCfohi4L7DfDdo3vtT0UY5Jr1WWKDOHSW0sxMQ3TVwIAUMU4QJmsVkxt3QqIfe7ZESRSBNY+Qx5VV/dnc1mhVmxwJKR6ViWZVqeKXVCTkbHeu0ovwxhiw7Z8lxHlFGCUUQWSIFqgxizUAuiEUuIGMffmLZN21KmDZhjA9suPdbNTwcZugMtbYFMODL4GNm5sQ4MIQGKQXvotKr68WEVXN7tJYjyIUtivnP+N0hApxCxCYQGzyPL0R1ucU+6ahXAfoviKOVkCreqTSYIA9fuExiS+Q3hsvlCrmXl1+Zc/pG8ywD/S1kq5iZWCd3ck50GGQEX/6dmm/VaWumjKIVamw5+QzAm5iASz8liwJl7H1+NSzczq5pB2FReglqXe3XebdZ1b60usbJInuC+xET5NjTb58lw+PB75NK74UM7Iq23UeoJZNvO86Dx1H3rPV6Pm/fO1fSyE0ftfumpM4Bp50866H1c9OwjfPk+cxqoc7Loe+wkuF7YY7G4vR7XP3rtOe/0SDeJxOL1+Z33+0ERnwxeg/azFY2CxwaadG7Y8+W87/66mz6Gjauj58WwHT9675PFq/MW3J3GzKp+xrQZw7Ywp4RuOngFLPKjao9WQ2vKeiHxM70oCQmNYabqTxRHcQFU6DV1S1GLn0oCIqEvi7k8B6Wm1bSK8jF5xaJrW/VzL3Dkf55btpteUM45aIliB2Kd0SFRvhTLLvvnZ4A49jnQEBJjylI8Bq7/YLGBBNJatCMfB6Mcekyy+KltF73g3LlonJ2delajWbTOXMdtFpvF0/PiRUPXbpm4o3dJMBSQbDN4aYvBO4DJhICiedXnXDY6FzIl72iaisguTFGBQioHQaK42HfccsnkJJ5EoACbMQvTCAqT8SRLkMmXv46BMM+knYte9v6+DW/3W54JqRMSpcBVLOcgqwl7RpGbB/J9wOXNgHPzQRoS9cxkWkVC8BLJ9qfPblFtsm4VGdFLvfti57jX6gdf/3rT/AGUuZuPtaNwSjbc5jNVjglJIrW8mu+o8F5Ip9M0q9+ZIshEmjclT9pmF3AqWe6jx96AmmsT5kFDZo16x/Navo0vFWPaFUhALLtNy44HbBhd4GrDaMnXMj90fdlyKfMmYC72yeqRXEQU4h93FexjpSfF9/JnxpLws1x7bG34kXHKtUIQOlInNU4+vmkKzKRZIvmPJZvG9xnY53xbuE7yGouQ3TRIBXz/RVPEVtURxiyloqUIRAo2yTbDKT4m4H8qfTGTEfpqQs/5txP6qX3TlbQXI32tS/6ubJCsXTDoahHIsFT1uVw4pXM62iD3FcBNfr9wm1b9wv4rv29HUvsi/irZyOnue6j9Bw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqpVP6QVHaAWYqiHIU9QCinhsnpAtE2wSbFJBf/yaFIiB6OO+MM5jtZvfZjzy7FY7iyPEDziERhFGt1ajqL54dup6FXAOFaGi4btkxBvjMMWwndLHjlKHslXStxXkKLcoFoqKqO5ZdlAqGU+7Zju84fums4J6W/uhaHxIuTUuVgqVr8zii3M/cVvU0oT5DnHCfohi4L7DfDdo3vtT0UY5Jr1WWKDOHSW0sxMQ3TVwIAUMU4QJmsVkxt3QqIfe7ZESRSBNY+Qx5VV/dnc1mhVmxwJKR6ViWZVqeKXVCTkbHeu0ovwxhiw7Z8lxHlFGCUUQWSIFqgxizUAuiEUuIGMffmLZN21KmDZhjA9suPdbNTwcZugMtbYFMODL4GNm5sQ4MIQGKQXvotKr68WEVXN7tJYjyIUtivnP+N0hApxCxCYQGzyPL0R1ucU+6ahXAfoviKOVkCreqTSYIA9fuExiS+Q3hsvlCrmXl1+Zc/pG8ywD/S1kq5iZWCd3ck50GGQEX/6dmm/VaWumjKIVamw5+QzAm5iASz8liwJl7H1+NSzczq5pB2FReglqXe3XebdZ1b60usbJInuC+xET5NjTb58lw+PB75NK74UM7Iq23UeoJZNvO86Dx1H3rPV6Pm/fO1fSyE0ftfumpM4Bp50866H1c9OwjfPk+cxqoc7Loe+wkuF7YY7G4vR7XP3rtOe/0SDeJxOL1+Z33+0ERnwxeg/azFY2CxwaadG7Y8+W87/66mz6Gjauj58WwHT9675PFq/MW3J3GzKp+xrQZw7Ywp4RuOngFLPKjao9WQ2vKeiHxM70oCQmNYabqTxRHcQFU6DV1S1GLn0oCIqEvi7k8B6Wm1bSK8jF5xaJrW/VzL3Dkf55btpteUM45aIliB2Kd0SFRvhTLLvvnZ4A49jnQEBJjylI8Bq7/YLGBBNJatCMfB6Mcekyy+KltF73g3LlonJ2delajWbTOXMdtFpvF0/PiRUPXbpm4o3dJMBSQbDN4aYvBO4DJhICiedXnXDY6FzIl72iaisguTFGBQioHQaK42HfccsnkJJ5EoACbMQvTCAqT8SRLkMmXv46BMM+knYte9v6+DW/3W54JqRMSpcBVLOcgqwl7RpGbB/J9wOXNgHPzQRoS9cxkWkVC8BLJ9qfPblFtsm4VGdFLvfti57jX6gdf/3rT/AGUuZuPtaNwSjbc5jNVjglJIrW8mu+o8F5Ip9M0q9+ZIshEmjclT9pmF3AqWe6jx96AmmsT5kFDZo16x/Navo0vFWPaFUhALLtNy44HbBhd4GrDaMnXMj90fdlyKfMmYC72yeqRXEQU4h93FexjpSfF9/JnxpLws1x7bG34kXHKtUIQOlInNU4+vmkKzKRZIvmPJZvG9xnY53xbuE7yGouQ3TRIBXz/RVPEVtURxiyloqUIRAo2yTbDKT4m4H8qfTGTEfpqQs/5txP6qX3TlbQXI32tS/6ubJCsXTDoahHIsFT1uVw4pXM62iD3FcBNfr9wm1b9wv4rv29HUvsi/irZyOnue6j9Bw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxkj2xhqewIzJoYcmqThcEnavnQUeQ2iRjaWDCS//kgmJkAupWcmM0Tr1e63F3275xwvEtsPOIdc0JRp/bCl//JI7HqeCwY0mqbhNEjTcOu2Y2Boxk49jpv12NG1PucF9BkXmImWbptW3bBsw3bHlu3bdd+0apbl/tS1O8i5NC1VaqaubRYJ437ptqUXOfNTzCn3GV4A9wXxR8HNtS81fVxh0tvnW5Slw7w9EyLzESK1CAgkCamRdIHO0YHOecT9EZ0yLIocnn1GvKU/312v17V1vZbmU2SbpolMD0mdiNPpZ739qboMUZ/F6fZ8gVnKKMEJfcIK1A2IWRppQTJNcypmi3dMW8gylWkDNsQglsM+6+jFQYnuREsHIHOODT7DVmVsCDHkwAhok2G/pX8+rYLbu+McMx6n+YIfnf8OErAVJGkGkcGryCp0p1t8I13tcyB+n5Gk4HQF31SbZJgA1wY5xHRzTblsvohrZfm1DZd/tOoyIH9TlnO0j1VCR29kJ6RT4OL/1Gy/XlsrdzgpoB3ditXcope9tduLmv9I0Rx13N80dG9aJYR95S2oXbmfz8fNuuut50t4OET34WSAHs96fG5nnWwYosH4bsw7q1X04/IB5cl6/NTxsjl279d8ZQ1GMOGDs/vLb5bo/mje/zvt9pt3STPGn2bj627+HZKrydU0tJ66eOBNrpOrJHtMh+v7ILilT54bBnOve9VIlqwwF7G5ur1q9uMrxw0H3fEZXV6mXwe3CD18WjbzBvo5EbPl2aBRBPP6xGm9xLQfw6GwooRR8TAHIqqjao9+qPVkvbD4mF6UhEZGXKr6meIoLoAJva1uKWrxC0lANPJlMbdnz+uZ4Rez4dpeve5Y5kXHC2z5n+e4Vs8L3IqDtiiOIF6kLKbKl2LZbf98DJAsfA4sgtxYpQWZAdc/sBhigbU+G8rHkTIO41SyeLMe2E5ghZ3AaXqm49Qbna4TfrGC0LVcr1vXtW+puGW3eRALyA8ZvHHA4EMgNKOgaF71OZeNzoVMyRKvCpFYtRWuMSjkIMgVF/u24zYQp4ssAQUYLdKoSKCWzbIyQYhvf20DE15Kh91x+f7eDe/4W5UJqRNRpcBVLB2Q1YRXo8j2G1Ug7wfs7gdcmQ+KiKpnJtMqckq2SA4/vXSLapNdq8iIfl2MflkV7p36yddf30QfgELH+dg5ilZ0z201U+WYkCTSrqq5xLVlrVitirJ+XxRB5tI8kjxpoRGQQrLc4zj9DQztTKCThswO9ZHnnfwQXyFmbCSwgIXsNq08nrBhjICrDaMvX8vm1PXlwKXMm4CNeEt2kchFRCH+cFchPlF6UjyQP+s0j17K9YatPT8yTrlWCMqm6qTGyeM7TUFSaZZK/kvzfeNvGXjL+aFwl+QdFiG76aEQ8P4XTRFbS8eEpAUT/VAvBftkW+IUjxn4L0qvzJSE/jyhN/zdCf395nokaW+B9Z0u/bOyQct2IaCrRaDE0tI3cuGUztl0j9yfAe7ze9fpmRddy/kTvx9G0n4lfi3Zy+nxe2j/Bw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pK1I6wgwWPNYjipRzvNcvTkwDRNsEkhSLv/4mhSLgy+HcGWcw283usy95ds84yFIn6HCOmMCUaFG3pT86Sb3+ZFt1w7OShuHVG67hN6Bj+IljgWZ9DH3P0bWI8xxFhAtAREt3LNs1bMdw/JHtBI4bWKe1U8d90LXfiHFpWqrULF0rspTwoHTb0nNGAgo45gEBGeKBgEHc6V8HUjMAFSa9fbZCWTpk7akQs8A0YS1BEKUprEGamWfmjs5ZwoMYTwgQOUNrnwlv6eu7r6+vtVe3RtnEdCzLMq2mKXUSjifHevuouoySiIzp6hwCQgmGIMVvQIHqIzGlidZJJ5RhMc2+MG2btqVMG6iABrQ9cqyb7w5KdAda2gHJODD4FNiVsSEaI4YIRNqvYdTSjw+r4OruiAHCx5RlfO/8d5AQWaCUzlBi8CqyCt3hFj9JV/sMwSAiMM05XqAb1SYzABHXBgyNcXGNuWy+hGtl+bWCyz9cdRmCf1OWM3Mbq4RufpKdLp4gLv5PzbbrtbLyG6Q5auN+42He+xk3+5cvp2RuzvEkjMyTuxcQtUoI28orUJtyr8/7zbrprfWlgXczH2fT+MojJz86Phs8FMPmM8DxMGWQOuBuHgp8InB8eX7jPQ/Ev/Xlz2YDTpa/nkiG3Bszmr2NXrt0Hgl4dP6WnAzjERnd95m4CpeEnzSK7v1y2UtmZHwziH44ox6/emAealDQnzSWD95tSK3oJH6+txvDbmEV7q2w7u4FO6p3Hq6bt2bvYuRP6NPl6XPht95j2o5hV1hRQpw/PSMoqqNqj6irXch6AfE9vSgJToxxqRrMFEdxgYjQ2+qWopYglwSEk0AWc3XunV9YttWt+07TdT3bCs+bHUf+1/R8+6LZ8SsOWqHYgxhSMsbKl2LZVf98DxBmAUckQcxY0BxOEde/sdgFAmgRGcrHQQlHIypZ3L9wbbvhO/Vm6Pc6vtUNHavpe6eN0A1d1znVtRsqbskt64wFYrsMXt9h8CGCeIaRonnV51w2OhcyJXOwyEVq1xagRlAuBwFTXBw4nl83Oc5mKVKAzYwmeYpqs+msTJDJV7+OASAvpcPeqHx/X4a3/63KhNRJsFLgKpZzJKuJPowiJ6hXgXwdsL8dcGW+kydYPTOZVsEwXCHZ/fTeLapNNq0iI3oM40e7wr1RP/j6x5vmN6DM/XxsHCULvOW2mqlyTEgSaVfVnIPavJYvFnlZv4YiSCbNm5InbTNGMJcstxzRF0TMjQnzoCGzQb3neSPfxZeLKYkFECiT3aaVxwM2jBhxtWFE8rUUh64vOy5l3gQqxGeyMJWLiEL87a4CA6j0pHggf14pS97L9YmtLT8yTrlWCEwm6qTGyfKLpoBUmsWS/yjbNv6Zgc+c7wo3Sd5gEbKbnnKBvv6iKWJr6QBCmhMRdfVSsE22JU6xnKHgXemDmZLQ1xO64F9O6H/617GkvQzoG138Z2UDl+0Cka4WgRJLSy/kwimdk8kWua8B7vC7d2GFPdv7E7/vRtL+IP4o2crp/nto/wc=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072321388233382771</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072321388233382771</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0722561388233376337</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0722591388233379731</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072321388233382771</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>B5F0013482933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>A9F0D70582933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>FBF010D582933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad9564f3-b00a-43c7-bb1b-30aea8c3ac43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="cf17c7cf-04a3-4cee-b875-e4d896be5b68"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="46657672-b144-410a-a5b4-3bf4351c8c5a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>9FF0361782933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE967610118C3C71E0401F0A059979D6:4F882D0B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0723141388233394740</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>DEF0DBE682933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:DEF0DBE682933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:DEF0DBE682933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>9FF0361782933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>8301450882933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">760194B882933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:9FF0361782933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:8301450882933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:760194B882933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnjCw5gT2DGwdCShiSHW3vy0lHltVFjJGLJBvLrj2RiAuRSemYyQ7Re7X570bd7wdEidfyAc8gEYVQbhG39p9ewrJbXsA0cu47hWvXI8JpObFjNuoPsZqMFTaRrA85zGFAuEBVt3bHsumE7htOa2I7v1H3Lq5179Xtdm0HGpWmpUrN0bb1IKfdLt209z6jPECfcp2gB3BfYHwfDa19q+qjCpHcutihLh1lnLsTSN01ciwBDmuIaZgvzwjzQuYi4PyYJRSLP4NlnxNv6893ValVb1WssS0zHsizT8kypE3GSfNY7n6rLEA1ozLbnLqKMEoxS8oQUqCGIOYu0IE1YRsR88Y5p27QtZdqANTaw7dLPuvnioER3oqUDkBlHBp8juzI2ghgyoBi06WjQ1j+fVsHt3UmGKI9ZtuBH57+DBLSAlC0hMngVWYXudItvpKtzAdgfUJzmnBRwo9pkiTBw7S6DmKyvCZfNF3GtLL+25vKPVF0G+G/KcmHuY5XQzTeyE5IEuPg/Nduv19bKDKU5dIJJEa4HaHjbiH70Z42IREny5arbS77wdglhX3kLalfu5/Nxs+566/lSMu+HyyDF365y3E+8pmuPnK9PeS//nl3RgN0Vt8Xo0XXuGbopRgl6ZN+v5/ky7s9Ww6cz935C+O/8aXr9wKa9b5+8p83sVxjeNkI3niUP86IxHd5AOPjnLOs+rhis3OV0k8XjS/g+OIvuSDCfxfTfVo+4Q7SYxvWn2RTfd/HkKxqhT72Nu2k43ij/iq/uzngYfntov8S0H8OhsKKEcf7rN2BRHVV7DEKtL+uFxMf0oiQkMuJS1V8qjuICqNA76paiFj+XBEQiXxZze/b6favesJstx6vXXdvqXnqBI//z3Jbd94JWxUFbFEcQu4zGRPlSLLvtn48B4oXPgUaQGQXL8Ry4/oHFEAmkDehIPg5GOUyYZHGr3vecRrdlW4F1Hlr1c6dpuV5w2fL6Qb8ZtnTtholbepsFsYDskMHPDxh8BJgsCSiaV33OZaNzIVPyiIpcpHatQDUKuRwEmeJi33Fb5yYni2UKCrC5YFGeQm05X5YJMvn21zEQ5qV01JuU7+/d8I6/VZmQOhFRClzFcgmymvBqFDn+eRXI+wG39gOuzAd5RNQzk2kVGcFbJIefXrpFtcmuVWREP7vjn3aFe6d+8vXXN80PQJnH+dg5igqy57aaqXJMSBLpVNV8RLXHWl4UeVm/piLITJo3JU/a5hhwLlluM2EPQM2dCfOkIbNDfeR5Jz/El4s5HQskYCG7TSuPJ2wYY+BqwxjI17I+dX05cCnzJmAt3pJ1U7mIKMQf7irYx0pPiu/kz4pl0Uu53rC150fGKdcKQWiiTmqcbN5pCsykWSL5j2X7xt8y8JbzQ+EuyTssQnbTr1zA+180RWxtHWHMcioGoV4K9sm2xCk2S/BflF6ZKQn9eUKv+bsT+sfweixpb4H0nS75s7JBynbBoKtFoMTS1tdy4ZTOabJH7s8A9/k97PWt8LLX+BO/H0bSeSV+LdnL6fF76PwH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnjCw5gT2DGwdCShiSHW3vy0lHltVFjJGLJBvLrj2RiAuRSemYyQ7Re7X570bd7wdEidfyAc8gEYVQbhG39p9ewrJbXsA0cu47hWvXI8JpObFjNuoPsZqMFTaRrA85zGFAuEBVt3bHsumE7htOa2I7v1H3Lq5179Xtdm0HGpWmpUrN0bb1IKfdLt209z6jPECfcp2gB3BfYHwfDa19q+qjCpHcutihLh1lnLsTSN01ciwBDmuIaZgvzwjzQuYi4PyYJRSLP4NlnxNv6893ValVb1WssS0zHsizT8kypE3GSfNY7n6rLEA1ozLbnLqKMEoxS8oQUqCGIOYu0IE1YRsR88Y5p27QtZdqANTaw7dLPuvnioER3oqUDkBlHBp8juzI2ghgyoBi06WjQ1j+fVsHt3UmGKI9ZtuBH57+DBLSAlC0hMngVWYXudItvpKtzAdgfUJzmnBRwo9pkiTBw7S6DmKyvCZfNF3GtLL+25vKPVF0G+G/KcmHuY5XQzTeyE5IEuPg/Nduv19bKDKU5dIJJEa4HaHjbiH70Z42IREny5arbS77wdglhX3kLalfu5/Nxs+566/lSMu+HyyDF365y3E+8pmuPnK9PeS//nl3RgN0Vt8Xo0XXuGbopRgl6ZN+v5/ky7s9Ww6cz935C+O/8aXr9wKa9b5+8p83sVxjeNkI3niUP86IxHd5AOPjnLOs+rhis3OV0k8XjS/g+OIvuSDCfxfTfVo+4Q7SYxvWn2RTfd/HkKxqhT72Nu2k43ij/iq/uzngYfntov8S0H8OhsKKEcf7rN2BRHVV7DEKtL+uFxMf0oiQkMuJS1V8qjuICqNA76paiFj+XBEQiXxZze/b6favesJstx6vXXdvqXnqBI//z3Jbd94JWxUFbFEcQu4zGRPlSLLvtn48B4oXPgUaQGQXL8Ry4/oHFEAmkDehIPg5GOUyYZHGr3vecRrdlW4F1Hlr1c6dpuV5w2fL6Qb8ZtnTtholbepsFsYDskMHPDxh8BJgsCSiaV33OZaNzIVPyiIpcpHatQDUKuRwEmeJi33Fb5yYni2UKCrC5YFGeQm05X5YJMvn21zEQ5qV01JuU7+/d8I6/VZmQOhFRClzFcgmymvBqFDn+eRXI+wG39gOuzAd5RNQzk2kVGcFbJIefXrpFtcmuVWREP7vjn3aFe6d+8vXXN80PQJnH+dg5igqy57aaqXJMSBLpVNV8RLXHWl4UeVm/piLITJo3JU/a5hhwLlluM2EPQM2dCfOkIbNDfeR5Jz/El4s5HQskYCG7TSuPJ2wYY+BqwxjI17I+dX05cCnzJmAt3pJ1U7mIKMQf7irYx0pPiu/kz4pl0Uu53rC150fGKdcKQWiiTmqcbN5pCsykWSL5j2X7xt8y8JbzQ+EuyTssQnbTr1zA+180RWxtHWHMcioGoV4K9sm2xCk2S/BflF6ZKQn9eUKv+bsT+sfweixpb4H0nS75s7JBynbBoKtFoMTS1tdy4ZTOabJH7s8A9/k97PWt8LLX+BO/H0bSeSV+LdnL6fF76PwH</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkCiRRQaIBdjlbegHa0/alMo4BbxM7xA4Efv2xQ0OB0i57pErUk/HMNxd/M5cMxJHltxhDKceUKL12Q32FnmN6VbOqoZrpaU7d9TTPAKYGJqFhGHXXRGOoKj3GMtQjjAPCG6plmLZmWprljkzLt2zfdCp23X5RlUeUMmFaqFQMVcnjiDC/cNtQs5T4FDDMfAJixHwO/WGrf+0LTR+UmNTm5QZl4TBtzjhPfF2HlRBBFEWwAmmsX+p7Opch84d4SgDPUvTuM2QN9f3ucrmsLO0KTae6JSLSDU8XOiHD03O1eVZeRmGPTOjmHABCCYYgwmsgQfURn9FQaUVTmmI+i78wbeqmIU1rKIcaNB1yruofDgp0J1raA5kyoLEZMEtjAzRBKSIQKQ+DXkM9P62Cm7ujFBA2oWnMDs5/BwmRBYpogkKNlZGV6E63eCRdzUsE/R6BUcbwAt3INkkAREy5S9EE59eYieYLmVKUX8mZ+MNllyH4N2W51HexCuj6key08RQx/n9qtluvjZVHEGWo+TztXw2TH47T8da0F7jAXnWsyHL4y1ujgLCrvAG1Lff7+bBZt731fml93c9f6Dpzon/X1Y7xz+B5/owv7pPRzTR8ZON6/sQvqDPv5J739jb5ZdnjlwDMn37GF+vOPOYB7YPkmSUD3ajFZ924+2jdvtAxf171Jqt595dRX7lza/7T6XcWyzFaefZvlOThndOvJZ3rBzK4v9XtwcXgkY3IDyu4e4haXdeGCX4+669I/S34vVjc9+v5iIbuoNP4iGk3hn1hSQnDbPwbQV4eZXv02kpX1Avw7+lFSnCoTQpVP5EcxTgiXG3KW5Ja/EwQEA59UczN2bUN06karmt5tu2YRnDltSzxn+e4ZtdruSUHbVAcQAwomWDpS7Lspn++BwhjnyESolRb0AzOEFO/sdgGHCg9MhCPgxKGRlSweOBYrWq15hlVN6gHVu3Kq7ndmud6Zrtl1totVbmh/Jbcpq0JR+k+g1f3GHyAIE4wkjQv+5yJRmdcpGQOFhmPzMoCVAjKxCBIJRf7luNWdYbjJEISsB7TMItQJZklRYJ0tvm1NABZIR10RsX7+zK8w29lJoROiKUCk7FcIVFNdGQUGWUgXwfs7gZcmm9lIZbPTKSVpxhukOx/+ugW2SbbVhERvQbDV7PEvVU/+frnm/o3oPTDfGwdhQu847acqWJMCBJpltWcg8q8ki0WWVG/uiTIVJjXBU+a+hDBTLDcakTfENG3JvSThswW9YHnrXwfX8ZnZMgBR7HoNqU4nrBhDBGTG0ZPvJb81PVlz6XIG0c5PyYLIrGISMTf7irQh1JPiO/Ez5Km4Ue5jtja8SPiFGsFx2QqT3KcrL5oCkiFWSz4j6a7xo8ZOOZ8X7hN8hYLF900zjj6+osiia2hAghpRnivrRaCXbItcPJVgvwPpU9mCkJ/n9A5+3JCP/Wvh4L2YqBudfGflTVctAtEqlwECiwNNRcLp3BOpjvk/g5wl9/bna7RvurU/sTv+5E0P4k/S3Zyevgemv8B</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fX4HSx1XIBWguAiQIcA5boC3Q7rYvlXEGcDdxQuxw6a8/diAUKO2yR6pEPRnPfHPxN1NlKAxMt8EYJJxEtNBt1ZQXHUrlSmliqyVwHLXsA1ZtE0zVAdPykW7phq8rhS5jKXQp44jymmLqRkk1TNW0x4bpmiXXsIp62XpWCo+QMGFaqBTFrXUYUOZmbmtKmlA3Qowwl6IQmMuxO2r0e67QdFGOSalXtygzh0l9znnsahouClwQBLiIo1Crakc6VZ+5IzKjiKcJ7Hz6rKbs7q5Wq+KqVIySmWbquq7pjiZ0fEZmV0r9W34Z/C6dRtuzh2hECUYBeUMSVB/4PPILjWAWJYTPw09MG5qhS9MqrLGKjTK9UrR3Bxm6Cy0dgUwYUtkcGbmxIUwhAYqh8DDs1pSryyq4vTtOEGXTKAnZyfnvIAFdQhDF4KssjyxHd7nFM+mqVwG7XYqDlJElDGSbxAgDK9wlMCXrHmGi+XxWyMpfWDPxR/IuA/w3Zalqh1gFdO1MdlpkBoz/n5od1mtr5REFKdQT7eY5nQw0B92bC6f/vTEx+FInsKB6LYNwqLwFtS/37nzarPve2l3q+8bAnOhvg4Y9bS9X4/KP6+Ew3PQCkj7b06AHN3PnlQT3U7pJ7ccBCn7exrcP3Ez00V37ureMyGsLja1/npDe+uaX9dGDEzpP3u/bhEz6pjb7Hg2Cx9HdG4XN/U3A/+17g4pjXY/biybtEP+ZmU9807MeHitWO97Q7mrNDG/uLLxvP35a2sTCcXPz67416i3f3hq195gOYzgW5pQwSievgHl+lO3RbRU6ol6If00vUkJ8dZqpurHkKMaBcqUub0lqcVNBQMR3RTG3Z+taN5xy07ZNp1QqG7rXdBqm+M8p20bHadg5B21RnED0Ijol0pdk2W3/fA0Qhy4D6kOiLqMUz4EpX1hsIY4KXToUjyOiDMaRYPGG4TW9TsNxSmWz47Wanm2ZzbbRLlV0vWmUBBcPIn5Lb5PGlENyzOCVIwYfAiYxAUnzss+ZaHTGRUoWaJnywCguUZFCKgZBIrnYNct2RWMkjAOQgLUw8tMAivE8zhKkse2vqSLMMumwPc7e36fhnX7LMyF0fCIVmIylCaKacGYU6XkgnwdsHwacm2+kPpHPTKSVJwRvkRx/eu8W2Sb7VhERvXijFyPHvVe/+PrHm9oXoLTTfOwd+Uty4DafqWJMCBKp59VcoOKimC6XaVY/SxJkIsxrgicNbQQ4FSy3GUe/gWp7E9pFQ2aP+sTzXn6ML+VzOuKIQyi6rZAdL9gwRsDkhtEVr2V96fpy5FLkjcOan5N5gVhEJOIvdxXsYqknxHfiZxUl/nu5ztg68CPiFGsFJ3QmT3KcbD5pChwJs0TwX5QcGj9n4JzzY+E+yXssXHTTJOXw+ZeCJLaagjCOUsq7LSUTHJJthpNvYnDflT6YyQh9N6HX7NMJ/avfGwnaC5Gy1yV/VlZJ1i4YFLkIZFhqylosnMI5nR2Q+w7gIb+32h291Wxf/4nfjyOpfxB/lBzk9PQ91P8D</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0723141388233394740</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0723141388233394740</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072381388233388107</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0723111388233391972</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0723141388233394740</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>AFF0361782933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>9301450882933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>860194B882933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46657672-b144-410a-a5b4-3bf4351c8c5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="192e0d44-14f0-408b-a092-20d51ed7572e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="68af19d4-89b5-4957-a183-0373044c00a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>2A01298982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96761011D33C71E0401F0A059979D6:2F435B9C"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0723241388233404702</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>6901AC6982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:6901AC6982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:6901AC6982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>2A01298982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1E014E4A82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0111772B82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:2A01298982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1E014E4A82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:0111772B82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF5KQRAUp0FLYZVsEdLenLyvXHsBt4tDYAdpff+zQUKC0yzlSJerJeOabi7+ZM47SxIliziEXNGNa/7yp/3FJ3fdg2jBCsFzDnVqhEZKpZ4QeActpWB72Al3rc15An3GBmGjqjmXXDdsxnGBiO5FTj+ywZvvOna79gpxL01KlZunaOk0Yj0q3Tb3IWZQhTnnEUAo8Ejgaxz8HkdSMUIVJb51tUJYO89ZciEVkmrhGAEOS4BrOUvPM3NM5Izwa0xlDosjh1SfhTf317mq1qq3qtSyfmY5lWaYVmlKHcDr7qre+VJeB9Nk025w7iGWMYpTQF6RA/QQxz4gWJ7Msp2KefmDaNm1LmTZgjQ1su+yrbr45KNGdaGkPZM6RwefIroyNYAo5MAzazajf1L+eVsHN3UmOGJ9mecoPzv8NErAlJNkCiMGryCp0p1s8kq7WGeCoz3BScLqEK9UmC4SBa8McpnQ9oFw2H+FaWX5tzeUfrboM8H8py5m5i1VCN49k55zOgIv/U7Pdem2s/EJJAS0U1ovHf/we+d4liyfurtOX22BIyHzcb5YQdpU3oLblfj0fNuu2t14vDbw76tS94EdByIPoTXzbH93feWJxs7yrD+k3cu9eI+w/vlx5vy+8WLSL3vfLh07mTFeNPr59uKu7w3n6OLh1Gp0vo96PibBcdtsrrn4N2sWENfAPxq3s7iXr+s8CgpEXs4dLWzzTm4vuIxoNB6z+2+5e3n8bjmMcXD0vr/1u+5s/f/lyPbvMZuPkOzJ7Bbc7q8feTfMtpt0Y9oUVJYyL+wfAojqq9uifa11ZLyQ+pxclocSYlqrRQnEUF8CE3lK3FLVEhSQgSiJZzM3ZiS3bCYMwcMJ63bWtTjuMHflf6AZ2N4yDioM2KA4gdjI2pcqXYtlN/3wOEKcRB0YgN5ZZgefA9U8sniOBtD4byceRMQ6TTLG43ehaba/T9S/idtfz2qHnnzt117Fc76IbuLp2lYlrdp3HUwH5PoN7eww+AkwXFBTNqz7nstG5kCl5QstCJHZtiWoMCjkIcsXFkeMGnslpukhAATbTjBQJ1BbzRZkgk29+HQNhXkpHF5Py/X0Y3uG3KhNSh1ClwFUsbZDVhCOjyKoC+TjgYDfgynxcEKqemUyryCneINn/9NYtqk22rSIj+tMZ/7Er3Fv1k6+/v2l+Aso8zMfWEVnSHbfVTJVjQpJIq6rmE6o91Yrlsijr11AEmUvzpuRJ2xwDLiTLPU+yR2Dm1oR50pDZoj7wvJXv4yvEnI0FEpDKbtPK4wkbxhi42jD68rWsT11f9lzKvAlYi2OyTiIXEYX4010FR1jpSfFQ/qyynLyV64itHT8yTrlWCMpm6qTGyfMHTYEzaZZK/svyXePHDBxzvi/cJnmLRchuui8EfPxFU8TW1BHGWcFE/1wvBbtkW+IUzwuI3pTemSkJ/XVCr/mHE/r252AsaS9F+laX/l3ZoGW7YNDVIlBiaepruXBK52y2Q+6vAHf53Q8tO+74f+X3/Uha78TvJTs5PXwPrX8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF5KQRAUp0FLYZVsEdLenLyvXHsBt4tDYAdpff+zQUKC0yzlSJerJeOabi7+ZM47SxIliziEXNGNa/7yp/3FJ3fdg2jBCsFzDnVqhEZKpZ4QeActpWB72Al3rc15An3GBmGjqjmXXDdsxnGBiO5FTj+ywZvvOna79gpxL01KlZunaOk0Yj0q3Tb3IWZQhTnnEUAo8Ejgaxz8HkdSMUIVJb51tUJYO89ZciEVkmrhGAEOS4BrOUvPM3NM5Izwa0xlDosjh1SfhTf317mq1qq3qtSyfmY5lWaYVmlKHcDr7qre+VJeB9Nk025w7iGWMYpTQF6RA/QQxz4gWJ7Msp2KefmDaNm1LmTZgjQ1su+yrbr45KNGdaGkPZM6RwefIroyNYAo5MAzazajf1L+eVsHN3UmOGJ9mecoPzv8NErAlJNkCiMGryCp0p1s8kq7WGeCoz3BScLqEK9UmC4SBa8McpnQ9oFw2H+FaWX5tzeUfrboM8H8py5m5i1VCN49k55zOgIv/U7Pdem2s/EJJAS0U1ovHf/we+d4liyfurtOX22BIyHzcb5YQdpU3oLblfj0fNuu2t14vDbw76tS94EdByIPoTXzbH93feWJxs7yrD+k3cu9eI+w/vlx5vy+8WLSL3vfLh07mTFeNPr59uKu7w3n6OLh1Gp0vo96PibBcdtsrrn4N2sWENfAPxq3s7iXr+s8CgpEXs4dLWzzTm4vuIxoNB6z+2+5e3n8bjmMcXD0vr/1u+5s/f/lyPbvMZuPkOzJ7Bbc7q8feTfMtpt0Y9oUVJYyL+wfAojqq9uifa11ZLyQ+pxclocSYlqrRQnEUF8CE3lK3FLVEhSQgSiJZzM3ZiS3bCYMwcMJ63bWtTjuMHflf6AZ2N4yDioM2KA4gdjI2pcqXYtlN/3wOEKcRB0YgN5ZZgefA9U8sniOBtD4byceRMQ6TTLG43ehaba/T9S/idtfz2qHnnzt117Fc76IbuLp2lYlrdp3HUwH5PoN7eww+AkwXFBTNqz7nstG5kCl5QstCJHZtiWoMCjkIcsXFkeMGnslpukhAATbTjBQJ1BbzRZkgk29+HQNhXkpHF5Py/X0Y3uG3KhNSh1ClwFUsbZDVhCOjyKoC+TjgYDfgynxcEKqemUyryCneINn/9NYtqk22rSIj+tMZ/7Er3Fv1k6+/v2l+Aso8zMfWEVnSHbfVTJVjQpJIq6rmE6o91Yrlsijr11AEmUvzpuRJ2xwDLiTLPU+yR2Dm1oR50pDZoj7wvJXv4yvEnI0FEpDKbtPK4wkbxhi42jD68rWsT11f9lzKvAlYi2OyTiIXEYX4010FR1jpSfFQ/qyynLyV64itHT8yTrlWCMpm6qTGyfMHTYEzaZZK/svyXePHDBxzvi/cJnmLRchuui8EfPxFU8TW1BHGWcFE/1wvBbtkW+IUzwuI3pTemSkJ/XVCr/mHE/r252AsaS9F+laX/l3ZoGW7YNDVIlBiaepruXBK52y2Q+6vAHf53Q8tO+74f+X3/Uha78TvJTs5PXwPrX8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tq45mS3ri0I8xwc+8qKgrHw/bFiWmAaJuWJIXqr99JsQiIbvaZcQazurLWty751jrjMI5sv805ZoIkVAt6Tf3xyXPCqme7Rr3uNgy3WnsynuoNz4A1z7Vrjm1hx9W1gPMMB5QLSEVTt03LMSzbsBtjy/Ztx7fdimO6D7p2jxmXpqVKxdS1PI4o9wu3TT1j1E8gJ9ynMMbcF8gfta8GvtT0YYlJb52tURYOWWsuROoDgCohRjiKUAUlMTgDOzpnIfdHZEahyBh+9xnypv5+d7VaVVZOJWEzYJumCUwPSJ2Qk9mp3jopL+MwoNNkfe5CmlCCYETeoAJ1hcU8CbV2NEsYEfP4C9MWsExl2sA5MpDl0lMdfDgo0B1paQck49Dgc2iVxu7wFDNMEdb+vQua+ulxFVzfHTNI+TRhMd87/x0kTJc4SlIcGryMrER3vMUD6WqdYeQHFEUZJ0t8rdokhQhzbcjwlOQDwmXzhVwryq/lXP6Rsssw+puynIFtrBI6OJCdHplhLv5PzbbrtbZyD6MMt36li/xlOXh48cAw/tmr1fLzy5s8caOL22YBYVt5DWpT7vfzfrNueuv90sTkN4k3BtMwCB/Y1Bl2qoNx/GPCBsFz6NbA4CWssssqQQ+L4Ws2GKeDaNKYtOfPZnVF8piu3vjt4seM4AyCkzc2mcavk3pyU70+/zHMo+EFH4n2cMG6F0Fcv/XmYNKYzim4zV+C6D7FXWfWTTtX/13y2eyGx/bFJGEp4eDq5+rklf56Fg9P8059POe9a8f7Z9X8iGk7hl1hSQmj7OkZI1EeVXsEPe1c1guK7+lFSUhoTAtVP1UcxQWmQm+pW4pa/EwSEAl9Wcz12eqbltt32w3bcxzXMrsdr23L/zy3YZ177UbJQWsUexC7CZ0S5Uux7Lp/vgeIYp9jGmJmLJMMzTHXv7HYgwJqAb2TjyOhHI8TyeJe3alXrY7VPzfbVbPm9M16v+s1vOq5afa9WkfXrhNxQ29Yeyow22Xw6g6D32FEUoIVzas+57LRuZApWcBlJiKrsoQVijM5CJjiYnmvUQWcxGmEFWAQJ2EW4Uo6T4sEAb7+tQ2IeCG964+L9/dlePvfykxInZAoBa5i6WBZTXxgFFllIF8H3NgOuDTfzkKinplMq2AErZHsfvroFtUmm1aRET12R49WiXujfvT1zzfBN6DAfj42jsIl2XJbzlQ5JiSJtMpqLmBlUcmWy6yoX10RJJPmgeRJC4wwyiTLvY6TF0zBxgQ4ashsUO953sh38WViTkcCChzLbtOK4xEbxghztWEE8rXkx64vOy5l3gTOxSFZN5KLiEL87a6CfKT0pHgof1YJCz/KdcDWlh8Zp1wrBKEzdVLj5PWLpkCJNEsk/yVs2/ghA4ec7wo3Sd5gEbKbnjKBv/6iKWJr6hChJKMi6OmFYJtsC5ziNcX+h9InMwWhv0/onH85oSdXg5GkvRjqG13yZ2WDFO2CsK4WgQJLU8/lwimd09kWub8D3Ob3mmda7W7N+xO/70bS+iT+LNnK6f57aP0G</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4j2eMr4DxBGbMrXEDaQOUk/alo8hrrGBkY8mG5Ncf2cQECEnpmckM0Xq1++1F3+4VQ6vIcFzGIOUkppLXb8u/bd3SsAkNBdlaU7HqDUNBZtBQGoFh6w0zAM1qypLHWAYeZRxR3pYNTTcV3VAMe6YbjmE6hl2r2+YvWZpDyoRpoVLTZGm7iihzSrdtOUupEyNGmEPRCpjDsTN1xyNHaDqowiR3rnYoS4dpJ+Q8cVQV13zAEEW4huOVeqUe6Vz5zJmSBUU8S+HFp8/a8svdzWZT25i1OF2ohqZpqtZShY7PyOKz3PlUXQbfo0G8O/cQjSnBKCLPqAA1Bh7GvuRGizglPFy9Y1pXda0wrcAWK1i36GdZfXVQorvQ0hHIlCGFhUivjE0ggBQoBunHxGvLny+r4O7uLEWUBXG6Yifnv4MENIcoTsBXWBVZhe5yi2fS1bkC7HgURxkjOdwWbZIgDEz6nkJAtiPCRPP5TCrLL22Z+CNVlwH+m7JcqYdYBXT1THb6ZAGM/5+aHdZrZ2WOogw6z+svyyUfj6f5Uxp+maOwt2DZ2p9sG+N2CeFQeQdqX+6X82mz7nvr5VJO9cfg0QOcN+Mbf8mzr/k/8/nPr3F9kn7zh7c/Nw/a7bW5BW/TuI6e2L2ruWn00I/v7vvTX7NksEyeh/Vcbd19sT7lZkiT63D4Y7Fxg/zf1Jt3w958+Hh7kyy/j91s3N0a9vPPheY9gxGCNvLv1mp0PQA/ozCbd4PF6Hnpkrq2Hbc+3dH7H9ZoFNAbd60uPe1+HbdfYzqM4VhYUcI0e3gEzKtj0R5eXxqKeiH+Mb0UEuIrQanqJAVHMQ6Uy53iVkEtTiYIiPiOKOburOm63mwaXdtomaala71uyzXEfy3L1oct1644aIfiBGIvpgEpfBUsu+ufjwHilcOA+pAqeZzhEJj8gcU+4kjy6EQ8jpgymMWCxQdms2FZrbphDuoDoz/sG9ag7vY0u2V3u6ZlyNJtzL/Rb6kbcEiPGbx+xOATwCQhUNB80edMNDrjIiVrlGc80ms5qlHIxCBICy52DMuuq4yskggKwOoq9rMIakmYlAlS2e5XUBJmpXQymJXv793wTr9VmRA6PikUWBFLF0Q14cwo0qtA3g/YPgy4Mu9mPimemUgrTwneITn+9NotRZvsW0VE9Ls3/a1XuPfqF19/e1P9AJR6mo+9Iz8nB26rmSrGhCCRTlXNNaqta1meZ2X9mgVBpsK8KnhSV6eAM8FyT7N4CVTdm1AvGjJ71Cee9/JjfBkP6ZQjDivRbVJ5vGDDmAIrNgxPvJbtpevLkUuRNw5bfk7Wi8QiUiD+cFfBDi70hPi7+NnEqf9arjO2DvyIOMVawQldFKdinDy90xQ4FmaJ4L84PTR+zsA558fCfZL3WLjopoeMw/tfpILY2jLCOM4o9/pyKTgk2xInf0rAeVV6Y6Yk9JcJvWXvTuj78WgqaG+F5L0u+bOyQsp2wSAXi0CJpS1vxcIpnNPFAbm/ADzk90ZL091eo/Unfj+OpPNG/FZykNPT99D5Dw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0723241388233404702</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0723241388233404702</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0723181388233398238</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0723211388233401342</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0723241388233404702</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>3A01298982933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>2E014E4A82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>1111772B82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>68af19d4-89b5-4957-a183-0373044c00a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="757ade0b-6900-4632-9017-6e1d59129c31"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="cd9476db-73d1-40a6-9f55-84a7d899ccce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>B4119D5C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96761012293C71E0401F0A059979D6:646AC061"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0723331388233413499</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>F3116F3C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F3116F3C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F3116F3C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>B4119D5C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>A811C64D82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:B4119D5C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:A811C64D82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSxypkYU0ESGGrOKdroIv6UhlnAJ8mDrUdtl9/7dBQoLSHc6VK1JPxzDeLv5k6R3HkeD7nwARJqNbvNPTXCqrZ9rgWGtURwkapMgJjVBuNDHkqlZ2wUnRqrq71OU+hT7lAVDR0x7KLhu0YTm1oO55T9Ip2wam6L7r2CIxL01KlYOnaMo4o9zK3DT1l1EsQJ9yjKAbuCewN/OsrT2p6KMekN+sblJlD1pwKMfNMExdCwBBFuICT2Kybezr1kHsDMqFIpAw+fIa8oX/cXSwWhUWxkLCJ6ViWZVquKXVCTibnevMsvwxhn46TzbmNaEIJRhFZIwXqGsQ0CTU/miSMiGn8jWnbtC1l2oAlNrBdoue6+ekgQ3eipT2QjCODT5GdGwtgDAwoBu0h6Df089MquLk7ZIjyccJifnD+N0hA5xAlMwgNnkeWozvd4pF0NeuAvT7FUcrJHG5Um8wQBq7dMRiT5RXhsvlCrmXl15Zc/pG8ywD/S1nq5i5WCd08kp0OmQAX/6dmu/XaWHlEUQrNl/ewN1tYM8DrFS2Vnhm/6Q7Xq+du4DcyCLvKG1Dbcn+cD5t121sfl27oNAjCzgpH/nxx36lePAbV3zNecWF0M6/cXT6h1q/bl6D6hOlokBbTbi/oVsZs5Ubh0wj+tKYsLv9ywvE18MoZq9mTlhU/3vPK85N1ebEOHvgtxqEft0bt+8u507+7pTTBVesN/ca929LVfe9p8L4IWtHdS2v1EAXp3cP92n2+6P86m2J/dLlevj2taaViXTHfXzQ+Y9qNYV+YU8IgHf0BLPKjao9+R+vJeiHxM70oCQmNcabqzRRHcQFU6E11S1GLl0oCIqEni7k5t0q27XbK7ZrjFosl22q3XN+R/7mlmt1z/VrOQRsUBxDbCR0T5Uux7KZ/fgaIY48DDYEZ8yTFU+D6DxY7SCCtTwP5OBLKYZhIFu+2fNe1qm63YnXbVrvoFl2/6tbKrlPtlKrlkq7dJOKW3jJ/LIDtM3h5j8EDwGRGQNG86nMuG50LmZJ3NE9FZBfmqEAhlYOAKS72nFKtbHISzyJQgM04CdMICrPpLEuQyTe/joEwz6RBd5i9v2/DO/yWZ0LqhEQpcBVLC2Q14cgocvJAvg+4thtwbt5PQ6KemUyrYARvkOx/+uwW1SbbVpERvbYHr3aOe6t+8vWvN80fQJmH+dg6Cudkx20+U+WYkCTSzKv5jgrvhXQ+T7P6VRVBMmnelDxpmwPAqWS51TB5A2puTZgnDZkt6gPPW/k+vlRM6UAgAbHsNi07nrBhDICrDaMvX8vy1PVlz6XMm4ClOCZrR3IRUYh/3FWwh5WeFN/Jn0XCws9yHbG140fGKdcKQehEndQ4WX3TFDiRZonkv4TtGj9m4JjzfeE2yVssQnbTKBXw/RdNEVtDRxgnKRX9jp4Jdsk2wylWM/A+lb6YyQj9Y0Iv+bcT+vn6aiBpL0b6Vpf8XdkgWbtg0NUikGFp6Eu5cErndLJD7h8Ad/m9V7TtSq/4V37fj6T5RfxVspPTw/fQ/A8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSxypkYU0ESGGrOKdroIv6UhlnAJ8mDrUdtl9/7dBQoLSHc6VK1JPxzDeLv5k6R3HkeD7nwARJqNbvNPTXCqrZ9rgWGtURwkapMgJjVBuNDHkqlZ2wUnRqrq71OU+hT7lAVDR0x7KLhu0YTm1oO55T9Ip2wam6L7r2CIxL01KlYOnaMo4o9zK3DT1l1EsQJ9yjKAbuCewN/OsrT2p6KMekN+sblJlD1pwKMfNMExdCwBBFuICT2Kybezr1kHsDMqFIpAw+fIa8oX/cXSwWhUWxkLCJ6ViWZVquKXVCTibnevMsvwxhn46TzbmNaEIJRhFZIwXqGsQ0CTU/miSMiGn8jWnbtC1l2oAlNrBdoue6+ekgQ3eipT2QjCODT5GdGwtgDAwoBu0h6Df089MquLk7ZIjyccJifnD+N0hA5xAlMwgNnkeWozvd4pF0NeuAvT7FUcrJHG5Um8wQBq7dMRiT5RXhsvlCrmXl15Zc/pG8ywD/S1nq5i5WCd08kp0OmQAX/6dmu/XaWHlEUQrNl/ewN1tYM8DrFS2Vnhm/6Q7Xq+du4DcyCLvKG1Dbcn+cD5t121sfl27oNAjCzgpH/nxx36lePAbV3zNecWF0M6/cXT6h1q/bl6D6hOlokBbTbi/oVsZs5Ubh0wj+tKYsLv9ywvE18MoZq9mTlhU/3vPK85N1ebEOHvgtxqEft0bt+8u507+7pTTBVesN/ca929LVfe9p8L4IWtHdS2v1EAXp3cP92n2+6P86m2J/dLlevj2taaViXTHfXzQ+Y9qNYV+YU8IgHf0BLPKjao9+R+vJeiHxM70oCQmNcabqzRRHcQFU6E11S1GLl0oCIqEni7k5t0q27XbK7ZrjFosl22q3XN+R/7mlmt1z/VrOQRsUBxDbCR0T5Uux7KZ/fgaIY48DDYEZ8yTFU+D6DxY7SCCtTwP5OBLKYZhIFu+2fNe1qm63YnXbVrvoFl2/6tbKrlPtlKrlkq7dJOKW3jJ/LIDtM3h5j8EDwGRGQNG86nMuG50LmZJ3NE9FZBfmqEAhlYOAKS72nFKtbHISzyJQgM04CdMICrPpLEuQyTe/joEwz6RBd5i9v2/DO/yWZ0LqhEQpcBVLC2Q14cgocvJAvg+4thtwbt5PQ6KemUyrYARvkOx/+uwW1SbbVpERvbYHr3aOe6t+8vWvN80fQJmH+dg6Cudkx20+U+WYkCTSzKv5jgrvhXQ+T7P6VRVBMmnelDxpmwPAqWS51TB5A2puTZgnDZkt6gPPW/k+vlRM6UAgAbHsNi07nrBhDICrDaMvX8vy1PVlz6XMm4ClOCZrR3IRUYh/3FWwh5WeFN/Jn0XCws9yHbG140fGKdcKQehEndQ4WX3TFDiRZonkv4TtGj9m4JjzfeE2yVssQnbTKBXw/RdNEVtDRxgnKRX9jp4Jdsk2wylWM/A+lb6YyQj9Y0Iv+bcT+vn6aiBpL0b6Vpf8XdkgWbtg0NUikGFp6Eu5cErndLJD7h8Ad/m9V7TtSq/4V37fj6T5RfxVspPTw/fQ/A8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQG9eoIKUEzkkF3S6h3T3nZeU6A7hNHLCdQPvrjx0aCpR22SNVop6MZ765+Ju55ChNHM/nHJggGdXCoKv/enBarQ5GjoFixzLqYNvGA8KOYXcaLew4GM+wo2sh5zmElAtERVd3LNs1bMdw2lPb8RzXc5u1VsP6V9fugXFpWqrULF3bpAnlXum2q+eMehnihHsUpcA9gb3IH488qemhCpPeu9yiLB2y3kKIpWeauBYDhiTBNZyl5qV5oHMZcy8ic4pEzuDVZ8y7+uvd9XpdW7u1jM1Nx7Is0+qYUifmZP5V732pLkMc0lm2PfcRzSjBKCEvSIEag1hkseYn84wRsUg/MG2btqVMG7DBBrbr9Ktuvjko0Z1p6QAk48jgC2RXxiYwAwYUg3Y3Cbv61/MquL07ZYjyWcZSfnT+M0hAC0iyJcQGryKr0J1v8US6epeAvZDiJOekgBvVJkuEgWu3DGZkMyJcNl/MtbL82obLP1J1GeA/KculuY9VQjdPZCcgc+Di/9Rsv15bK/coyaG3iOOXcHiBFmT9nQEebNjdz2DkLEd80C0h7CtvQe3K/Xo+btZdb71eKjbh83h21WA/bujF+Aa51j94FN8u28H8b3/RXFrr1fAiD142dNq+v2jdXke2WXz33e8MXzvtx4m7adDVfcbGMBVfnjtPUZ25Iug37tIrlw75j9Ws2fTF0Lngg5fEus4iRON/gzAdjteth6fi7imfR39lTvHYfJi4g5vRQEBn8u16+PJlFrR88lgs8lXS9n+4UdrIum8x7cdwKKwoIcofHgGL6qjaIwy0oawXEp/Ti5KQ2JiVqt5ScRQXQIXeU7cUtXi5JCASe7KY27Pftu1+sx60nY7r1m2rf9XxHflfp962hx2/XXHQFsURxH5GZ0T5Uiy77Z/PAeLU40BjYEaR5XgBXP/EYoAE0kI6kY8joxymmWTxth9YwZXftDqtuuUMA7fpdgb1RuvKbtWdRsvXtZtMfKPfmD8TwA4ZvHHA4BPAZElA0bzqcy4bnQuZkhUqcpHYtQLVKORyEDDFxZ5TbzdMTtJlAgqwmWZxnkBtuViWCTL59leSE+aldDKYlu/vw/COv1WZkDoxUQpcxXIFsppwYhQ5VSAfB9zeD7gy7+cxUc9MplUwgrdIDj+9dYtqk12ryIh+9aNfdoV7p3729fc3zU9Amcf52DmKC7LntpqpckxIEulV1Vyh2qqWF0Ve1q+lCJJJ86bkSduMAOeS5Z6n2RNQc2fCPGvI7FAfed7JD/HlYkEjgQSkstu08njGhhEBVxtGKF/L5tz15cClzJuAjTgl6ydyEVGIP91VsIeVnhTfyp91xuK3cp2wtedHxinXCkHoXJ3UOHn+oClwJs0SyX8Z2zd+ysAp54fCXZJ3WITspodcwMdfNEVsXR1hnOVUhIFeCvbJtsQpnpfgvSm9M1MS+uuE3vAPJ/TP8SiStJcifadLfq9skLJdMOhqESixdPWNXDilczrfI/dXgPv8PnRtuzl0+7/j98NIeu/E7yV7OT1+D73/AA==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0723331388233413499</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0723331388233413499</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0723291388233409713</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0723331388233413499</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>C4119D5C82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>B811C64D82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd9476db-73d1-40a6-9f55-84a7d899ccce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="b228d550-0627-4181-a846-9706cac6958f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="87669356-477d-4a9b-9ebe-1a16efa90ad6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5C112A5E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE967610128E3C71E0401F0A059979D6:AFDA7F18"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0723441388233424413</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9B11673E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9B11673E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9B11673E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5C112A5E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4021B85F82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">522148FF82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5C112A5E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4021B85F82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:522148FF82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn99Ep/QVCO8JMAXmvjugdPzzPLzch3UK0TWqTIvrXX1IsAqLHvTPOYLab3Wd3nzzJGUdp4vgB55ALwqgW9tv67zhq1FszmBkz26obdRs3jBmysOE04uas3phZYJ/qWsh5ASHlAlHR1h3Ldg3bMZzWxHZ8x/Vdr+Za7p2u3UDOZWjpUrN0bZUmlPtl2rZe5NRniBPuU5QC9wX2x8Hw0peePqow6Z2zNcoyYd5ZCJH5polrEWBIElzDLDXPzB2fs4j7YzKnSBQ5vOaMeFt/3fv09FR7cmssn5uOZVmm5ZnSJ+Jk/lXvfKk2QxTSmK3XPUQZJRgl5AUpUEMQCxZpQTJnORGL9IPQtmlbKrQBK2xgu06/6uZbghLdkZF2QOYcGXyB7CrYCGLIgWLQpqOwrX89boLrvZMcUR6zPOV763+DBHQJCcsgMnhVWYXu+IgH2tU5A+yHFCcFJ0u4UjTJEAaufc8hJqtLwiX5Iq6V49dWXP6RimWA/2UsZ+Y2VgndPNCdPpkDF/9nZtvzWke5QUkBHSsgLxcuGY2bd4PwZIgj8YzvnKeTX9+tdglh23kNajPu1/U+WTfcet0UW83GyHTGjjf/9tiNZiy5DlqsyB9+LqzRDenFbPjzIryA8OZnNPiRh+O6N8OTq8nJA/3VvL+5aF1fu1fp9N71pvAlvMWC/+DpZdZwlxdD/uv2dPFs3cdeETsnaDCN7GmT/fctXWWDu4Szh+YzWjSGyxe7GU7nppkFfXyT3bLcDJfdLwkuPNI7H+ZXt/HpKs7uV9P2W03bNewaK0kYF7N7wKJaKnqEfW0g54XE5/KiLCQy4tLVz5RGcQFU6B21S0mLX0gBIpEvh7leN3q27QSN85bjuW7dtnpdL3Dkf169ZQ+8oFVp0BrFHsQeozFRuZTKrvnzOUCc+hxoBLmxZAVeANc/idhHAmkhHcnDwSiHCZMq7tqtljPou92ga5273XOnWz/1unXJ/oEVnA+kgl8xcU2v8yAWkO8qeGNHwUeASUZAybziOZdE50K25BEtC5HYtSWqUSjkRZArLfadeqthcpJmCSjAZsqiIoFatsjKBpl8/esYCPPSOjqflOfvw/L2v1WdkD4RUQ5c1dIFOU04cBU5VSEfF9zaLrgKHxQRUcdMtlXkBK+R7H56Y4uiyYYqsqLfvfFvu8K9cT96+/ud5iegzP1+bBJFS7KVtrpT5TUhRaRTTfMR1R5rxXJZlPNrKoHMZXhT6qRtjgEXUuWeJ+wBqLkJYR51yWxQ72Xe2HfxFWJBxwIJSCXbtHJ5xAtjDFy9MEJ5WlbHPl92Usq+CViJQ7ZeIh8iCvGnbxXsY+Unzd/lzxPLo7dxHYi1lUfWKZ8VgtC5Wqnr5PkDUmAmwxKpfyzfDn4owKHku8ZNkzdYhGTTrBDw8RdNCVtbRxizgoqwr5eGbbEtcYrnDPw3p3dhSkF/vaFX/MMb+nZ4OZaylyJ940v+7myQki4YdPUQKLG09ZV8cMrkdL4l7q8At/Xd69r2adP9q77vVtJ5Z35v2erp/nno/AE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn99Ep/QVCO8JMAXmvjugdPzzPLzch3UK0TWqTIvrXX1IsAqLHvTPOYLab3Wd3nzzJGUdp4vgB55ALwqgW9tv67zhq1FszmBkz26obdRs3jBmysOE04uas3phZYJ/qWsh5ASHlAlHR1h3Ldg3bMZzWxHZ8x/Vdr+Za7p2u3UDOZWjpUrN0bZUmlPtl2rZe5NRniBPuU5QC9wX2x8Hw0peePqow6Z2zNcoyYd5ZCJH5polrEWBIElzDLDXPzB2fs4j7YzKnSBQ5vOaMeFt/3fv09FR7cmssn5uOZVmm5ZnSJ+Jk/lXvfKk2QxTSmK3XPUQZJRgl5AUpUEMQCxZpQTJnORGL9IPQtmlbKrQBK2xgu06/6uZbghLdkZF2QOYcGXyB7CrYCGLIgWLQpqOwrX89boLrvZMcUR6zPOV763+DBHQJCcsgMnhVWYXu+IgH2tU5A+yHFCcFJ0u4UjTJEAaufc8hJqtLwiX5Iq6V49dWXP6RimWA/2UsZ+Y2VgndPNCdPpkDF/9nZtvzWke5QUkBHSsgLxcuGY2bd4PwZIgj8YzvnKeTX9+tdglh23kNajPu1/U+WTfcet0UW83GyHTGjjf/9tiNZiy5DlqsyB9+LqzRDenFbPjzIryA8OZnNPiRh+O6N8OTq8nJA/3VvL+5aF1fu1fp9N71pvAlvMWC/+DpZdZwlxdD/uv2dPFs3cdeETsnaDCN7GmT/fctXWWDu4Szh+YzWjSGyxe7GU7nppkFfXyT3bLcDJfdLwkuPNI7H+ZXt/HpKs7uV9P2W03bNewaK0kYF7N7wKJaKnqEfW0g54XE5/KiLCQy4tLVz5RGcQFU6B21S0mLX0gBIpEvh7leN3q27QSN85bjuW7dtnpdL3Dkf169ZQ+8oFVp0BrFHsQeozFRuZTKrvnzOUCc+hxoBLmxZAVeANc/idhHAmkhHcnDwSiHCZMq7tqtljPou92ga5273XOnWz/1unXJ/oEVnA+kgl8xcU2v8yAWkO8qeGNHwUeASUZAybziOZdE50K25BEtC5HYtSWqUSjkRZArLfadeqthcpJmCSjAZsqiIoFatsjKBpl8/esYCPPSOjqflOfvw/L2v1WdkD4RUQ5c1dIFOU04cBU5VSEfF9zaLrgKHxQRUcdMtlXkBK+R7H56Y4uiyYYqsqLfvfFvu8K9cT96+/ud5iegzP1+bBJFS7KVtrpT5TUhRaRTTfMR1R5rxXJZlPNrKoHMZXhT6qRtjgEXUuWeJ+wBqLkJYR51yWxQ72Xe2HfxFWJBxwIJSCXbtHJ5xAtjDFy9MEJ5WlbHPl92Usq+CViJQ7ZeIh8iCvGnbxXsY+Unzd/lzxPLo7dxHYi1lUfWKZ8VgtC5Wqnr5PkDUmAmwxKpfyzfDn4owKHku8ZNkzdYhGTTrBDw8RdNCVtbRxizgoqwr5eGbbEtcYrnDPw3p3dhSkF/vaFX/MMb+nZ4OZaylyJ940v+7myQki4YdPUQKLG09ZV8cMrkdL4l7q8At/Xd69r2adP9q77vVtJ5Z35v2erp/nno/AE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3TqpVPatEVKR5jh87WuoEtR171xQhog2ibYpID8+k2KRUB02XfGGczpyTnP+chzzgWHSWz7Dc5xKgijWtCu6U/eyAKjCHsGAGBsuNVzYHgucI2xi0b2KPLKI2+kawHnGQ4oF5CKmm5bwDGAbdjeENi+7fiuXap61m9du8cpl6alSsnStWUSU+7nbmt6llKfQU64T2GCuS+QHzZ6177U9GGBSa9frFHmDtP6VIiZb5qoFGGE4xiVEEvMC3NH5yLifkgmFIosxe8+I17T3+8uFovSwimxdGLalmWZVtWUOhEnk1O9flJcxlFAx2x9bkHKKEEwJiuoQPWwmLJIa8QTlhIxTb4wDUxgKdMGXiIDAZee6uaHgxzdkZZ2QKYcGnwKQWFsgMc4xRRh7W4Q1PTT4yq4vjtMIeVjliZ87/xvkDCd45jNcGTwIrIC3fEWD6SrfoGRH1AUZ5zMcV+1yQwizLXbFI/J8ppw2XwR1/Lya0su/0jRZRj9S1kuzG2sErp5IDttMsFc/J+abddrbeUexhmuQxsRuBp5P0Jvfv18fnbTW1zePTfSNvNqOYRt5TWoTbnfz/vNuumt90tBb2Q9BhUaQXb1Hx30o6z60u63WvFPOgx/Z1feVfPsnJZn3o3J2nerQfRWoXeX5dGM3zutTgctz/qX1fFquHJo7+RHxe7ed34Our/69PF88LqKk043Q/TBe3EfLieMh0H5ZjHsJ9PGY1PYWf+hN4wbTEQY0Og+xGPvEoyqt/O021+dvKC+HTqr8Z07eSTgwQ4Zq33EtB3DrrCghDAbPWMkiqNqj6CtdWW9oPieXpSERMY4V/VniqO4wFTodXVLUYufSQIikS+LuT67lg2aXrnr2VXHcYHValYbtvyv6nqgW214BQetUexBbDE6JsqXYtl1/3wPECU+xzTCqTFnGZpirn9jsQ0F1AI6kI+DUY6HTLJ4xfM6nVbFdbtWu1UtO90ycL1GuwLajtV0ui1d6zNxQ2/SxljgdJfByzsMPsCIzAhWNK/6nMtG57Ke6BXOMxGD0hyWKM7kIEgVF/u265VNTpJZjBVgM2FRFuPSbDrLE2Ty9a9tQMRz6aAzzN/fl+HtfysyIXUiohS4iqWJZTXxgVHkFIF8HbC3HXBhvpFFRD0zmVaRErRGsvvpo1tUm2xaRUb01AqfQIF7o3709c83zW9Amfv52DiK5mTLbTFT5ZiQJFIvqvkKS6+lbD7P8vpVFEGm0rwpeRKYIUaZZLm3IXvB1NyYMI8aMhvUe5438l18mZjSUECBE9ltWn48YsMIMVcbRiBfy/LY9WXHpcybwEtxSNaK5SKiEH+7qyAfKT0pvpU/C5ZGH+U6YGvLj4xTrhWC0Ik6qXHy9kVTICbNEsl/LN02fsjAIee7wk2SN1iE7KZRJvDXXzRFbDUdIsQyKoK2ngu2yTbHKd5m2P9Q+mQmJ/T3Cb3kX07oX73rUNJeAvWNLvm7skHydkFYV4tAjqWmL+XCKZ3TyRa5vwPc5vdqE4DzitP5G7/vRlL/JP4s2crp/nuo/wE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj05p0xYoHWEGinhQUAS8HL84IQ0QT5tgk3Lx179JsQiIHs474wxmu9l99pJn95zDOLL9Ouc4EYRRrd2s6i+ODYvAQSVj5JUtw3XGFQNWwMjwwlKx4oFwVLZLutbmPMVtygWkoqrbFnAMYBu2NwS2bzu+Wy6U3OKzrj3ghEvTUqVg6doyjij3M7dVPU2ozyAn3KcwxtwXyB/Uux1favowx6TXztcoM4dJbSrEzDdNVAgxwlGECojF5rm5o3Mecn9AJhSKNMEfPkNe1T/uLhaLwsIpsGRi2pZlmVbFlDohJ5NTvXaSX8Zhm47Z+hxAyihBMCLvUIHqYjFloVaPJiwhYhp/YxqYwFKmDbxEBgIuPdXNTwcZuiMt7YBMODT4FILcWB+PcYIpwtp9v13VT4+r4PruMIGUj1kS873zv0HCdI4jNsOhwfPIcnTHWzyQrto5Rn6boijlZI5vVJvMIMJc6yV4TJYdwmXzhVzLyq8tufwjeZdh9C9lOTe3sUro5oHsNMkEc/F/arZdr7WVBxiluHZ2u4jGT4+iFMbkttjtBJcI8at32r7rVjMI28prUJtyf5z3m3XTWx+XcO/ut/DKz+D+bJSIXh0Eb4PV5StjbtTq0Gl/zDru+yp2O5H72+Ftbg1Xcb/rNMPgmhfNX7QL0PKi+Y4qT5XWyWrGWgNkvg1GgXXDwfhx2GOd5vKa91zzsovKd/PF9HrZW91Fyz8hv6pfvI4W/aR78/hod4UTDa3Gn6ezS+99PsJXJ3R2Ef8CD6M35xJM7yvPvNutfsa0HcOuMKeEQTp6xUjkR9Ue7abWkvWC4md6URISGuNM1Z8pjuICU6HX1C1FLX4qCYiEvizm+ly0beB6rZZnVxzHBVbQqNRt+V/F9UCrUvdyDlqj2IMYMDomypdi2XX//AwQxT7HNMSJMWcpmmKu/2CxCQXU2rQvHwejHA+ZZPEiCAJg2ZbnNEAjcILAc+plu+WUGyXHtRuert0wcUtvk/pY4GSXwYs7DN7HiMwIVjSv+pzLRudCpuQNzlMRgcIcFihO5SBIFBf7tusVTU7iWYQVYDNmYRrhwmw6yxJk8vWvbUDEM2n/Ypi9v2/D2/+WZ0LqhEQpcBVLA8tq4gOjyMkD+T5gbzvg3Hw9DYl6ZjKtIiFojWT302e3qDbZtIqM6CUYvIAc90b96Otfb5o/gDL387FxFM7Jltt8psoxIUmkllfzDRbeCul8nmb1KyuCTKR5U/IkMAcYpZLlVkP2B1NzY8I8ashsUO953sh38aViSgcCChzLbtOy4xEbxgBztWG05WtZHru+7LiUeRN4KQ7JgkguIgrxj7sK8pHSk+Ke/FmwJPws1wFbW35knHKtEIRO1EmNk9U3TYGYNEsk/7Fk2/ghA4ec7wo3Sd5gEbKbRqnA33/RFLFVdYgQS6loN/VMsE22GU6xmmH/U+mLmYzQPyb0kn87oZ+6nYGkvRjqG13yd2WDZO2CsK4WgQxLVV/KhVM6p5Mtcv8AuM3vlQYApbJz8Td+342k9kX8VbKV0/33UPsP</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0723441388233424413</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0723441388233424413</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0723371388233417790</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0723411388233421909</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0723441388233424413</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6C113A5E82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5021B85F82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>622158FF82933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>87669356-477d-4a9b-9ebe-1a16efa90ad6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="9a530dbd-2f4e-4849-93e7-64ca90685d83"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="73c33b2b-95a5-4c51-870a-db9638c2048a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>06218C1192933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED2651AAFC94E0401F0A05991653:689C3666"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0723551388233435972</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>4521BFE092933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:4521BFE092933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:4521BFE092933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>06218C1192933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F921D00292933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C2188C292933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:06218C1192933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F921D00292933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:0C2188C292933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQCwFCVJC4ttltd1ugl+1LZZyBuA02jR0I/fXHDg0FSrvskSpRT8Yz31z8zZxyNIsdv8U5JIIwqgXdhv44rrqVmjuuG3ZoVQy36tUN5IBrOJ47KU9qYbkysXUt4DyFgHKBqGjojmWXDduROiPb8Z2yX7FKrld90LVbSLg0LVVKlq5ls5hyP3fb0NOE+gxxwn2KZsB9gf1h6/LCl5o+KjDpzdM1ytxh0oyEmPumiUshYIhjXMJsZp6aOzqnIfeHZEqRSBN48xnyhv52d7lclpblEkumpmNZlmnVTakTcjI90ZvfissQBnTC1ucOoowSjGLyihSoSxARC7VWPGUJEdHsE9O2aVvKtAEZNrDt0hPdfHeQozvS0g7IhCODR8gujA1gAglQDNrNIGjoJ8dVcH13lCDKJyyZ8b3zv0ECuoCYzSE0eBFZge54iwfS1TwF7AcUxyknC/il2mSOMHDtKoEJyS4Il80Xci0vv5Zx+UeKLgP8L2U5NbexSujmgex0yRS4+D81267X2sotilNoZs4qW9VXd4Onq4E5Dsbu6i5KUYzPz3qNHMK28hrUptxv5/1m3fTW26XknLI29EmIezcX19eXbfFn8fC98xDf3/yICY3REs36I7dPun9eny9u7irX5kUytKIXccmev3eqFYK90Fzi5ZLRb2fXFrjzVhBx+095/H0aZHeD+98P11E5uur3zjt34gye7j3SrVoPLfcVT8n94NePUZbe1UbLMH3xbl7jUedn9yz6Mf7Wq6xuI7jMaj/TcdK9HrCx1XiPaTuGXWFBCcN0/ARYFEfVHkFX68t6IfE1vSgJCY1JrurPFUdxAVToTXVLUYufSgIioS+LuT5bVcf2OrZdd+rlsmtbnXa95cj/6q5n9+str+CgNYo9iB1GJ0T5Uiy77p+vAeKZz4GGkBgLluIIuP6FxS4SSAvoQD4ORjmMmGTxeqfWqlZqntOr1r2O2y6X6zXbddtWtex0qz3J4L+Y+E1/J62JgGSXwSs7DD4ATOYEFM2rPuey0bmQKXlBi1TEdmmBShRSOQgSxcW+43oVk5PZPAYF2JyxMI2hNI/meYJMvv51DIR5Lh30Rvn7+zS8/W9FJqROSJQCV7G0QVYTDowitwjk84C97YAL8600JOqZybSKhOA1kt1P792i2mTTKjKix87w0S5wb9SPvv7xpvkFKHM/HxtH4YJsuS1mqhwTkkSaRTVfUOmllC4WaV6/miLIRJo3JU/a5hBwKlluNWLPQM2NCfOoIbNBved5I9/Fl4qIDgUSMJPdpuXHIzaMIXC1YQTytWTHri87LmXeBGTikKwTy0VEIf5yV8E+VnpSfCV/liwJ38t1wNaWHxmnXCsEoVN1UuNk9UlTYCbNEsl/LNk2fsjAIee7wk2SN1iE7KZxKuDzL5oitoaOMGYpFUFXzwXbZJvjFKs5+O9KH8zkhP42oTP+6YS+v7wYStqbIX2jS/6ubJC8XTDoahHIsTT0TC6c0jmdbpH7G8Btfncrjt3u96y/8ftuJM0P4o+SrZzuv4fmfw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQCwFCVJC4ttltd1ugl+1LZZyBuA02jR0I/fXHDg0FSrvskSpRT8Yz31z8zZxyNIsdv8U5JIIwqgXdhv44rrqVmjuuG3ZoVQy36tUN5IBrOJ47KU9qYbkysXUt4DyFgHKBqGjojmWXDduROiPb8Z2yX7FKrld90LVbSLg0LVVKlq5ls5hyP3fb0NOE+gxxwn2KZsB9gf1h6/LCl5o+KjDpzdM1ytxh0oyEmPumiUshYIhjXMJsZp6aOzqnIfeHZEqRSBN48xnyhv52d7lclpblEkumpmNZlmnVTakTcjI90ZvfissQBnTC1ucOoowSjGLyihSoSxARC7VWPGUJEdHsE9O2aVvKtAEZNrDt0hPdfHeQozvS0g7IhCODR8gujA1gAglQDNrNIGjoJ8dVcH13lCDKJyyZ8b3zv0ECuoCYzSE0eBFZge54iwfS1TwF7AcUxyknC/il2mSOMHDtKoEJyS4Il80Xci0vv5Zx+UeKLgP8L2U5NbexSujmgex0yRS4+D81267X2sotilNoZs4qW9VXd4Onq4E5Dsbu6i5KUYzPz3qNHMK28hrUptxv5/1m3fTW26XknLI29EmIezcX19eXbfFn8fC98xDf3/yICY3REs36I7dPun9eny9u7irX5kUytKIXccmev3eqFYK90Fzi5ZLRb2fXFrjzVhBx+095/H0aZHeD+98P11E5uur3zjt34gye7j3SrVoPLfcVT8n94NePUZbe1UbLMH3xbl7jUedn9yz6Mf7Wq6xuI7jMaj/TcdK9HrCx1XiPaTuGXWFBCcN0/ARYFEfVHkFX68t6IfE1vSgJCY1JrurPFUdxAVToTXVLUYufSgIioS+LuT5bVcf2OrZdd+rlsmtbnXa95cj/6q5n9+str+CgNYo9iB1GJ0T5Uiy77p+vAeKZz4GGkBgLluIIuP6FxS4SSAvoQD4ORjmMmGTxeqfWqlZqntOr1r2O2y6X6zXbddtWtex0qz3J4L+Y+E1/J62JgGSXwSs7DD4ATOYEFM2rPuey0bmQKXlBi1TEdmmBShRSOQgSxcW+43oVk5PZPAYF2JyxMI2hNI/meYJMvv51DIR5Lh30Rvn7+zS8/W9FJqROSJQCV7G0QVYTDowitwjk84C97YAL8600JOqZybSKhOA1kt1P792i2mTTKjKix87w0S5wb9SPvv7xpvkFKHM/HxtH4YJsuS1mqhwTkkSaRTVfUOmllC4WaV6/miLIRJo3JU/a5hBwKlluNWLPQM2NCfOoIbNBved5I9/Fl4qIDgUSMJPdpuXHIzaMIXC1YQTytWTHri87LmXeBGTikKwTy0VEIf5yV8E+VnpSfCV/liwJ38t1wNaWHxmnXCsEoVN1UuNk9UlTYCbNEsl/LNk2fsjAIee7wk2SN1iE7KZxKuDzL5oitoaOMGYpFUFXzwXbZJvjFKs5+O9KH8zkhP42oTP+6YS+v7wYStqbIX2jS/6ubJC8XTDoahHIsTT0TC6c0jmdbpH7G8Btfncrjt3u96y/8ftuJM0P4o+SrZzuv4fmfw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcuI4EH3PV7icxynjGwTsClRxSwYGCIGQ3eQlpcgNKNgySDKX+fqVTEyAkAyzFFWgduv06YuPdM1RFDp+lXNggsRUazXK+otXugqCwtg1rLxdMPIuFA0UADbAcsclZ4zdkmXrWovzBFqUC0RFWXcs2zVsx3BKD7bjO65fyOeKV+6zrj0C4xJauuQsXVtHIeV+GrasJ4z6MeKE+xRFwH2B/WG12/Glp48yTnrlessyDcgqUyHmvmninKQEYYhzOI7Ma/PA5zrg/pBMKBIJg/eYAS/r73tXq1Vu5eZiNjEdy7JMyzOlT8DJ5FKvXGSbIWjRcbxd1xGNKcEoJL+RItUFMY0DrRpOYkbENPoC2jZtS0EbsMYGtvP0Ujc/AqTszkQ6IMk4MvgU2RnYAMbAgGLQRoNWWb88r4PbvQ8MUT6OWcSP1n9HCegSwngOgcGzzDJ25yOeKFflGrDfojhMOFlCT43JHGHgWp/BmKw7hMvhC7iWtl9bc/kl2ZQB/pu2XJv7XCV180R1GmQCXPyfnu33a4vyiMIEKti7c383qqjj/izcdmKMFsXBjK7m97+a5ZTCvvOW1K7d7+vjYd3N1vumZddezatWsJlhaNcXXRwtou6G1aC26ZsFq50w4m3W/ecZflsv76/o88ztvZpJmyYju+SNbset3nO/0xk9srl3gRb55g/T6o8evSQOrPjqzWr3b3/2h+7zoFcYNNa/Jq8/2eto8+QNn6Nm/jVp34N4Y4ubzgxuHwb2U9uCH8tJ45/u00W1PuPN0WZm9YJ2zXHHb6P78kdO+zkcGjNJGCavb4BFtlTj0WpoN7JfSHwvL8pCAmOcuvpzpVFcABV6Re1S0uInUoBI4Mtmbtc3nmM3LMvxHM9187ZVr3lVR/7z8iX7xquWMg3asjiiWI/pmKhYSmW38/M9QRz5HGgAzFjGCZ4C179BbCCBtBYdyJcjphweYqniVqNpWc1qw63ZNa9ebMhPsX5VLZaK9VrTyZd0rReLO3rHqmMB7FDBCwcKPgBM5gSUzKs553LQuZAlWaBlIkI7t0Q5Cok8CJjSYl9iF0xOonkIirAZxUESQm4+nacFMvn21zEQ5ql10HxI378v0zt+llVC+gREOXCVSw1kN+HEUZTPEvk64dJ+whl8NQmIes1kWQUjeMvk8NHHtKgx2Y2KzOilPnyxM94797O3f95pfkPKPK7HLlCwJHthszNVHhNSRCpZNxcot8gly2WS9q+oBJJJeFPqpG0OAUuBEJuHeAbU3EGYZx0yO9ZHkXf2Q36JmNKhQAIiOW1aujzjhjEErm4YLfm2rM+9vhyElHUTsBanbPVQXkQU42/vKtjHyk+a+/JnFbPgo10nsPbiyDzltUIQOlErdZxsvhgKHEtYIvUvZvvgpwBOBT807oq84yLkNL0mAr5+oilhK+sI4zihotXQU8O+2KY8xWYO/ofTJ5hU0N9P6DX/8oT+t9sZStmLkL7zJX92Nkg6Lhh0dRFIuZT1tbxwyuB0sifu7wT39T1fcOzaTdP6k74fZlL5ZP5s2avp8ftQ+Q8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU9s6EH7vr/C4jx3Ht6SxPSQzuYIpUMABSl86Ql4nAlsOkuyk/fVHcnBIQqDpmWEmaL3a/faib/eIoyx1gh7nwATJqRYOO/qvpNlu+diLDXBx22j6LjZQGzcNhK3Ea3t+4lmJroWcFxBSLhAVHd2xbNewHcPxJrYTOG7Q8htu2/+pa7fAuDQtVRqWri2zlPKgctvRC0aDHHHCA4oy4IHAQdQ7PwukZoBqTHr3aIWycsi6MyHmgWniRgwY0hQ3cJ6ZR+aWzlHMg4hMKRIFgxefMe/oL3cXi0Vj4TZyNjUdy7JMyzelTszJ9LPe/VRfhjikSb46DxDNKcEoJX+QAnUOYpbHWi+d5oyIWfaOadu0LWXagCU2sN2kn3Xz1UGF7kBLWyAZRwafIbs2dg0JMKAYtJvrsKN/PqyCq7sThihPcpbxnfO/QQJaQprPITZ4HVmN7nCLe9LVPQIchBSnBSclXKg2mSMMXLtkkJDlGeGy+WKuVeXXllz+kbrLAP9LWY7MTawSurknO0MyBS7+T80267WycovSArpTx7scsNC27rPF0vfP+XDixNc3d0/xqFNB2FRegVqX++W826zr3nq51EOnZ09JGE5o+758XuTF8ja+O7kni/TqJro7Ca+ip3v7Llvc+RZLvn7r43jsfknG7WU7jqblZNIaO4+zq+j4OHH/fLp4yPP49Ny5md5M7ehb2iezyzJLvjy0yp8RvoCz9OS8eUvK4+FojI/9H17WfHp0MWNu+tUZsfHJ7dVj/yk5c3vH8GlpixN/6HM4tRj+ltARXnReY9qMYVtYU0JUPDwCFvVRtUc41MayXkh8TC9KQmIjqVSDueIoLoAKvatuKWoJCklAJA5kMVdna+DYnjdwfMd33aZtDfp+z5H/+U3PHvs9r+agFYodiIOcJkT5Uiy76p+PAeIs4EBjYEaZF3gGXP/A4hAJpIX0Wj6OnHKY5JLFvda46fl2c9C3h7bbHo5HY9d27K89z/Xao6Gvaxe5+E6/s14igG0zeGuLwa8BkzkBRfOqz7lsdC5kSp5RWYjUbpSoQaGQg4ApLg6cptcyOcnmKSjAZpbHRQqN+WxeJcjkq19HshGvpNejSfX+3g1v91udCakTE6XAVSx9kNWEPaOoWQfyfsDeZsC1+V4RE/XMZFoFI3iFZPvTa7eoNlm3iozo1yD6Zde41+oHX3970/wAlLmbj7WjuCQbbuuZKseEJJFuXc1n1HhuFGVZVPVrK4Jk0rwpedI2I8CFZLnfk/wJqLk2YR40ZNaodzyv5dv4CjGjkUACMtltWnU8YMOIgKsNI5SvZXno+rLlUuZNwFLskw1SuYgoxB/uKjjASk+KL+XPImfxa7n22NrwI+OUa4UgdKpOapz8fqcpcC7NEsl/Ods0vs/APufbwnWS11iE7KaHQsD7XzRFbB0dYZwXVIRDvRJskm2FU/yeQ/Cq9MZMRegvE3rJ353QP87PIkl7GdLXuuTvygap2gWDrhaBCktHX8qFUzqn0w1yfwG4ye/NlmP3xyPrb/y+HUn3jfitZCOnu++h+x8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0723551388233435972</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0723551388233435972</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0723491388233429109</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0723521388233432811</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0723551388233435972</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>16219C1192933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0A21E00292933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>1C2198C292933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>73c33b2b-95a5-4c51-870a-db9638c2048a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="6ceabf55-1e65-455c-85d0-ffa8f7e43fdb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="5aacb852-19bb-45fe-b048-8d350af8d6dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>BF219FE392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173B90D9775E0401F0A07995A24:D657B1EC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072491388233449583</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>FE21E6C392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FE21E6C392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:FE21E6C392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>BF219FE392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>A331607592933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B531671692933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:BF219FE392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:A331607592933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:B531671692933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH4+Cc6FAooIEBHTSLdAFitq+VMYZwLvBobGT0P76Y4eGAr0se6RK1JPxzDcXfzOXHK8j22tzDomgMdMCv6k/zoldr+MaMeoLixhVbC0M13Xmhk2I23DJvLGo1XUt4DyFgHGBmWjqtmk5hmUbdmNq2Z5d9UynYtWtB12bQcKlaalSMXVtu44Y9wq3TT1NmBdjTrnH8Bq4J4g3aQ+uPanp4RKT3rrcoSwcJq2VEBsPIVIJgUAUkQqJ1+gSHelchtyb0CXDIk3g1WfIm/rr3TzPK7lTiZMlsk3TRKaLpE7I6fK73vpWXoYwYIt4d+5iFjNKcERfsAI1ALGKQ60dLeOEitX6E9MWskxl2oAtMYhVZd919OagQHempSOQCccGX2GrNDaGBSTACGi346Cpfz+vgru70wQzvoiTNT85/x0kYBlE8QZCg5eRlejOt/hBulqXQLyAkSjlNIOhapMNJsC1mwQWdHtNuWy+kGtF+bUtl3+07DIgf1OWS3SIVUJHH2THp0vg4v/U7LBeOyszHKXQcmled9FsNPodIZ5vB2l0c0/mnedp2msWEA6Vd6D25X49nzbrvrdeLz1czVK7xpZ1RtEgNX/5jZ/+NJ8u7qsrMmxfm+E4Ria3/v2NatFma2Uvs+ENvsNbfP901b8YXjiL+uSiNnoSIzv4lv/I6Ritbq5n+bh3y7LZy+CGB7P4Pr+/AjqtPf38SUl7w/08y66q03/iYJRhtrk12V3oXwu4/TV4SfzhXb6dOd/mDyzJ8kF9uIa2SXs/+tag+RbTYQzHwpISJun8FxBRHlV7BL7Wl/XC4mt6URIaGotC1dsojuICmNBb6paiFi+VBERDTxZzd+70bcvt9xzXdh2napndjtu25X9utWH13Xaj5KAdihOI3ZgtqPKlWHbXP18DJGuPAwshMbI4JSvg+hcWfSywFrCxfBwx4zCNJYv3nUbH7zccv9qwe516r+PY3U7V6terfdv3O66uDWMxYqOkvRCQHDP4xRGDj4HQDQVF86rPuWx0LmRKnnCWisiqZLjCIJWDIFFcLK82LhCn600ECjBax2EaQWWz2hQJQnz3axuY8EI67k2L9/dpeKffykxInZAqBa5i6YCsJrwbRY53UQbyecCNw4BL8+00pOqZybSKhJIdkuNPb92i2mTfKjKix+7k0Spx79XPvv7+JvoCFDrNx95RmNEDt+VMlWNCkkirrOYTrjxV0ixLi/rVFUEm0jySPGmhCZBUstzzNP4NDO1NoLOGzB71iee9/BhfKlZsIrCAtew2rTiesWFMgKsNI5CvZXvu+nLkUuZNwFZ8JOtGchFRiL/cVYhHlJ4U38ifPE7Ct3J9YOvAj4xTrhWCsqU6qXHy/ElTkFiapZL/4uTQ+EcGPnJ+LNwneY9FyG6apwI+/6IpYmvqmJA4ZSLw9UJwSLYFTvG8Ae9N6Z2ZgtBfJ/SWfzqh7wbXE0l7a6zvdemflQ1atAsBXS0CBZamvpULp3TOlgfk/grwkN/7Pdvq1bp/5PfjSFrvxO8lBzk9fQ+t/wA=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH4+Cc6FAooIEBHTSLdAFitq+VMYZwLvBobGT0P76Y4eGAr0se6RK1JPxzDcXfzOXHK8j22tzDomgMdMCv6k/zoldr+MaMeoLixhVbC0M13Xmhk2I23DJvLGo1XUt4DyFgHGBmWjqtmk5hmUbdmNq2Z5d9UynYtWtB12bQcKlaalSMXVtu44Y9wq3TT1NmBdjTrnH8Bq4J4g3aQ+uPanp4RKT3rrcoSwcJq2VEBsPIVIJgUAUkQqJ1+gSHelchtyb0CXDIk3g1WfIm/rr3TzPK7lTiZMlsk3TRKaLpE7I6fK73vpWXoYwYIt4d+5iFjNKcERfsAI1ALGKQ60dLeOEitX6E9MWskxl2oAtMYhVZd919OagQHempSOQCccGX2GrNDaGBSTACGi346Cpfz+vgru70wQzvoiTNT85/x0kYBlE8QZCg5eRlejOt/hBulqXQLyAkSjlNIOhapMNJsC1mwQWdHtNuWy+kGtF+bUtl3+07DIgf1OWS3SIVUJHH2THp0vg4v/U7LBeOyszHKXQcmled9FsNPodIZ5vB2l0c0/mnedp2msWEA6Vd6D25X49nzbrvrdeLz1czVK7xpZ1RtEgNX/5jZ/+NJ8u7qsrMmxfm+E4Ria3/v2NatFma2Uvs+ENvsNbfP901b8YXjiL+uSiNnoSIzv4lv/I6Ritbq5n+bh3y7LZy+CGB7P4Pr+/AjqtPf38SUl7w/08y66q03/iYJRhtrk12V3oXwu4/TV4SfzhXb6dOd/mDyzJ8kF9uIa2SXs/+tag+RbTYQzHwpISJun8FxBRHlV7BL7Wl/XC4mt6URIaGotC1dsojuICmNBb6paiFi+VBERDTxZzd+70bcvt9xzXdh2napndjtu25X9utWH13Xaj5KAdihOI3ZgtqPKlWHbXP18DJGuPAwshMbI4JSvg+hcWfSywFrCxfBwx4zCNJYv3nUbH7zccv9qwe516r+PY3U7V6terfdv3O66uDWMxYqOkvRCQHDP4xRGDj4HQDQVF86rPuWx0LmRKnnCWisiqZLjCIJWDIFFcLK82LhCn600ECjBax2EaQWWz2hQJQnz3axuY8EI67k2L9/dpeKffykxInZAqBa5i6YCsJrwbRY53UQbyecCNw4BL8+00pOqZybSKhJIdkuNPb92i2mTfKjKix+7k0Spx79XPvv7+JvoCFDrNx95RmNEDt+VMlWNCkkirrOYTrjxV0ixLi/rVFUEm0jySPGmhCZBUstzzNP4NDO1NoLOGzB71iee9/BhfKlZsIrCAtew2rTiesWFMgKsNI5CvZXvu+nLkUuZNwFZ8JOtGchFRiL/cVYhHlJ4U38ifPE7Ct3J9YOvAj4xTrhWCsqU6qXHy/ElTkFiapZL/4uTQ+EcGPnJ+LNwneY9FyG6apwI+/6IpYmvqmJA4ZSLw9UJwSLYFTvG8Ae9N6Z2ZgtBfJ/SWfzqh7wbXE0l7a6zvdemflQ1atAsBXS0CBZamvpULp3TOlgfk/grwkN/7Pdvq1bp/5PfjSFrvxO8lBzk9fQ+t/wA=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkQrgkKkhpgNP0tJTl0t3uS2WcAQzBobHDpb/+2KGhQEuXPVIl6sl45puZz599zdA8slyPMUg4iakSNGrqy6hkFSsGGmoVp+poNmBHGw4tQ6tWwSiHBowqEKpKwFgKAWUcUV5TLcMsaqalWdW+abmW7RrVQtFyfqvKEyRMhBYuBUNV1vOIMjdLW1PThLoxYoS5FM2BuRy7Pe/h3hWeLsoxqfXrLcosYVKfcL5wdR0XQsAQRbiA47l+rR/4XIfM7ZExRTxN4D1nyGrq+97ValVYFQtxMtYtwzB0w9GFT8jI+FKtX+SbIQzoKN6ufURjSjCKyBuSoB6AT+JQ8aJxnBA+mZ8IbeqmIUNrsMYaNm16qeofCTJ0Z0Y6AJkwpLEJMvNgXRhBAhSDMugGNfXyvAlu9/YTRNkoTubsaP13kIAuIYoXEGosryxHd37EL9pVvwbsBhRHKSNLaEuaLBAGpnQSGJH1PWGCfCFTsvErayb+SM4ywH8zlmt9H6uArn/RnQYZA+P/Z2b789pGeUJRCvWNV16szE5n0Lb15x9gC5pVQu7HSdWuZRD2nbegduN+Xx+Tdcet903e1XRj3oyGoc2DaXC7vsekfPvGvOnvtTNAP8fgd57vwE+Wo+H4n+Kv/vPNZtq87zp8Sq96A+RHiC6g0u/ezXpvF50heCa2W04U99Z3SWu2bjefbb21LLffeu3ZT3vGV80WCczpj5n5ar/5q26f4se726dB2awMnFW/8m8z1a+Gz7Puhff8MGt4j/TqFT0u7265/mTXPmrar+HQmEtCLx1OAfN8KekRNJSWmBfi38uLtJBQG2Wu7kJqFONAuVqXu6S0uKkQIBK6YpjbtVcsmmWjUnIsp1i0TcO/cTxL/OfYVbPleNVcg7YojiD6MR0RmUuq7JY/3wPEc5cBDSHRlnGKJ8DUbyI2EEdKQLvicMSUQT8WKm6UG6WybTimY5XMht9selXfFqYb36mWvPKNqrRj/kgfE2/EITlU8NKBgncBkwUBKfOS50wQnXHRkle0THlkFpaoQCEVF0EitVhsrZZ0RuaLCCRgfR6HaQSFxWSRNUhn219LQ5hl1m6zn52/k+Udf8s7IXxCIh2YrOUGxDTh01VUdEt5IacLru4XnIf30pDIYybayhOCt0gOP32wRdJkRxVR0YvfezFz3Dv3s7d/3ql/A0o/7scuUbgke2nzO1VcE0JE6vk0X1HhtZAul2k2v4oUyESE14VOmnoPcCpUbtOPZ0D1XQj9rEtmh/oo885+iC/lE9rjiMNcsE3Jlme8MHrA5AsjEKdlfe7z5SCl6BuHNf/KJsSPMYn427cKdrH0E+aO+FnFyUfhX8XayyPqFM8KTuhYruR1sjlBChyLsEToX5zsB/8qwFfJD427Ju+wcMGmYcrh9BdFCltNRRjHKeVBQ80M+2Kb4eSbBbgfTp/CZIL+fkOv2ckb+tfDfU/I3hypO1/yZ2eNZHTBoMqHQIalpq7Fg1Mkp+M9cX8HuK/vraZlNst+8U/6flhJ/ZP5s2Wvp8fnof4f</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+I8FP6+v6JTPzqlTVuQdoQZKKKsd1G8fNkJ6QHitmlpUsD99W9SLAKiy74zzmBOz+U5lzwnxxzHke23OIdM0IRpvU5D/1VDnjvExDPIkGDDDdGRMbTcuoHAGo5qyMI1h+haj/MceowLzERDty3kGMg27Po9sn3b9ZFTqdroRdcGkHHpWqpULF1bxBHjfhG2oecZ8xPMKfcZjoH7gvj91uWFLzV9XGLSm8dLlEXArDkRIvVNk1RCIBBFpEKS2Dw2N3SOQ+736ZhhkWfwHjPkDf3ddj6fV+ZOJcnGpm1Zlml5ptQJOR0f6M0fpTGEPTZKlucAs4RRgiP6BytQlyAmSai1onGSUTGJv3CNTGQp1wYsiEGQyw508yNAgW5PTxsgM44NPsGodHYHI8iAEdAe7noN/WC/Di5t7zPM+CjJYr51/jdIwGYQJSmEBi8zK9Ht73FHuZrHQPweI1HO6Qyu1JikmADXbjIY0cUF5XL4Qq4V7dcWXP7RcsqA/Etbjs11rBK6uaM6HToGLv5Pz9b7tfQywFEOzQvaJ140cdPZSzbNb1xiiTsgJDlpzRsFhHXlJahVu9/P28O6mq13o97bPbeeTNN6dh/GNy9WELCr58eBaR/+nh56kw77fX7K549T1H7q5nEny66r6eMNDZzT+fnTWT7403nwJoDp+E/Afgzz/PUM17yTq17onD1fPpzysBO8oOrl9OR1EN/iKLCyID3rPKJpOriNJy/R+LV/mE/5YXIG2eI6PCTn7u3NaXLn/XCA/vTs55p3ZAWxczq4rvPGR07rOWwKS0ro58NXIKI8qvHodbSu7BcW39OLktDQGBWqfqo4igtgQm8qK0Utfi4JiIa+bOby3K46qHaEap7tOY6LrKDttWz5n+fWUddr1UsOWqLYghgkbERVLMWyy/n5HiCJfQ4shMyYJTmZANe/8djBAms9dicvR8I43CeSxZFb63asbrvd9pDlefWg5nq223I8z6063brk4qtEXLPrrDUSkG0yeHWDweU80pSConk151wOOheyJFM8y0WEKjNcYZDLRZApLpam9arJaZxGoACbcRLmEVTSSVoUyOTLX9vAhBfSu5P74v59md72t7ISUiekSoGrXNoguwk7VpFVJvJ1wvX1hEv3rTyk6prJsoqMkiWSzU8f06LGZDUqMqNfQf8XKnGv1Pc2/2xpfgPK3K7HKlA4o2thy50q14QkkWbZzSmuTCv5bJYX/TtSBJlJ96bkSWT2geSS5d7uk9/AzJULc68ls0K9FXkl38SXiwnrCywgltOmFcc9Xhh94OqF0ZO3ZbHv82UjpKybgIXYJQsi+RBRiL99qxCfKD0pvpE/8yQLP9q1w9daHJmnfFYIysbqpNbJ2xdDQRLplkr+S7J157sc7Aq+KVwVeYVFyGka5gK+/qIpYmvoWC6nnIleRy8E62Rb4BRvKfgfSp/cFIT+vqEX/MsN/XR50Ze0F2N9pUv/rmzQYlwI6OohUGBp6Av54JTB2XiN3N8BrvN798RGJ7XA+Ru/b2bS/CT+LFmr6fZ9aP4H</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072491388233449583</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072491388233449583</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072401388233440682</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072461388233446911</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072491388233449583</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>CF219FE392933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>B331707592933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>C531671692933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5aacb852-19bb-45fe-b048-8d350af8d6dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true" id="80127eb6-235b-41a3-9ffe-398ee10fec48"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="0895f2bd-0a35-44c0-838c-74e69db91bdd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>6931B75792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED265233FC94E0401F0A05991653:F8E957C9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0724181388233458360</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>A831083792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:A831083792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:A831083792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>6931B75792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>5D31483892933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:6931B75792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:5D31483892933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrU+I8FP6+v6JTP+6UXiiXdoSZgrBbBUVQ190vOzE9lLBtWpuUi7/+TYpFQHTZd8YZzOm5POeS5+ScoTiyXI8xyDhJqOJftNTf9RoCHGBHa9bqTc12bEtrIgg0u/aEpmbdeGraWFV8xnLwKeOI8pZqGWZVMy3Nat6ZlmvZrlmvGA3nl6o8QMaEa6FSMVRlFUeUuUXYlppn1E0QI8ylKAbmcuxOvOHAFZouKjGp7fMNyiJg1p5xnrq6jisBYIgiXMFJrJ/rezrnAXMnJKSI5xm8xgxYS321XS6XlWW1kmShbhmGoRuOLnQCRsIztf2lNIbAp9Nkc+4imlCCUURekAQ1BD5LAsWLwiQjfBZ/4NrUTUO61mCFNWza9EzV3wIU6E70tAcyY0hjM2SWzsYwhQwoBuV+7LfUs9M6uLG9yxBl0ySL2cH53yABXUCUpCIGKzMr0Z3u8Ui52ueAXZ/iKGdkAddyTFKEgSmjDKZkNSBMDF/AlKL9yoqJP1JOGeB/acu5votVQNePVOeChMD4/+nZbr82Xh5QlEO7H+UoHMY1K/+Fr0aP14O1+eC9fPfHZNkqIOwqb0Bt2/16PhzW7Wy9GvEeHq2yiNyPGj8mE2fd8UfBfDFJ42h2Nb1NF7OUf/156/ghacALLAfr2+xxOPj66A3j+svs+xNfzW/6w2nYv/0RfqnnN33P5Ok97o+GCZ5kPyJiXN7bncfu2H+cDh++rVl6CcOh3dDZze3KnM3rlw7umPP5y314cfXzz3U4fs4e8XzR/dK5Wt2Munf5cDno/RkDnn5jrbecdnPYF5aUMMmf5oB5eZTj4V8ofdEvxD+nFykhgTYtVN1UchTjQLnallaSWtxcEBAJXNHMzbnuVM1Oo9ZwLKdatU2j23E8S/zn2E2z73jNkoM2KA4gdhM6JTKWZNnN/HwOEMcuAxpApi2SHM+AqZ94vEAcKT4di8uRUAZ3iWBxr9fo2XbP7Nl103FsU1z7ntexjF7DsGy71lOV64Tf0JvMm3LI9hm8tsfgojEkJSBpXs45E4POuCjJM1rkPDIrC1ShkItFkEkuFqbNms5InEYgAetxEuQRVNJZWhRIZ5tfS0OYFdJx7664fx+md/itrITQCYhUYDKXDohuwpFVZJSJfJxwczfh0r2XB0ReM1FWnhG8QbL/6W1a5JhsR0Vk9Ls7+W2WuLfqJ5u/t9Q/AaUf1mMbKFiQnbDlThVrQpBIu+zmM6o8V/LFIi/615AEmQn3uuBJU58AzgXLre+SP0D1rQv9pCWzRX0QeSvfx5fzGZ1wxCEW06YUxxNeGBNg8oXhi9uyOvX5shdS1I3Dih+TdSPxEJGIP32rYBdLPSEeiZ9lkgVv7TriayeOyFM8KzihoTzJdbL+YChwItwSwX9Jtuv8mINjwfeF2yJvsXAxTU85h4+/KJLYWirCOMkp9y/UQrBLtgVOvk7BfVN656Yg9NcNvWIfbmixgSaC9mKkbnXJ35U1UowLBlU+BAosLXUlHpwiOA13yP0V4C6/e82qaTSrf+X3/Uza78TvJTs1PbwP7f8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU+I8FP6+v6JTP+6UXiiXdoSZgrBbBUVQ190vOzE9lLBtWpuUi7/+TYpFQHTZd8YZzOm5POeS5+ScoTiyXI8xyDhJqOJftNTf9RoCHGBHa9bqTc12bEtrIgg0u/aEpmbdeGraWFV8xnLwKeOI8pZqGWZVMy3Nat6ZlmvZrlmvGA3nl6o8QMaEa6FSMVRlFUeUuUXYlppn1E0QI8ylKAbmcuxOvOHAFZouKjGp7fMNyiJg1p5xnrq6jisBYIgiXMFJrJ/rezrnAXMnJKSI5xm8xgxYS321XS6XlWW1kmShbhmGoRuOLnQCRsIztf2lNIbAp9Nkc+4imlCCUURekAQ1BD5LAsWLwiQjfBZ/4NrUTUO61mCFNWza9EzV3wIU6E70tAcyY0hjM2SWzsYwhQwoBuV+7LfUs9M6uLG9yxBl0ySL2cH53yABXUCUpCIGKzMr0Z3u8Ui52ueAXZ/iKGdkAddyTFKEgSmjDKZkNSBMDF/AlKL9yoqJP1JOGeB/acu5votVQNePVOeChMD4/+nZbr82Xh5QlEO7H+UoHMY1K/+Fr0aP14O1+eC9fPfHZNkqIOwqb0Bt2/16PhzW7Wy9GvEeHq2yiNyPGj8mE2fd8UfBfDFJ42h2Nb1NF7OUf/156/ghacALLAfr2+xxOPj66A3j+svs+xNfzW/6w2nYv/0RfqnnN33P5Ok97o+GCZ5kPyJiXN7bncfu2H+cDh++rVl6CcOh3dDZze3KnM3rlw7umPP5y314cfXzz3U4fs4e8XzR/dK5Wt2Munf5cDno/RkDnn5jrbecdnPYF5aUMMmf5oB5eZTj4V8ofdEvxD+nFykhgTYtVN1UchTjQLnallaSWtxcEBAJXNHMzbnuVM1Oo9ZwLKdatU2j23E8S/zn2E2z73jNkoM2KA4gdhM6JTKWZNnN/HwOEMcuAxpApi2SHM+AqZ94vEAcKT4di8uRUAZ3iWBxr9fo2XbP7Nl103FsU1z7ntexjF7DsGy71lOV64Tf0JvMm3LI9hm8tsfgojEkJSBpXs45E4POuCjJM1rkPDIrC1ShkItFkEkuFqbNms5InEYgAetxEuQRVNJZWhRIZ5tfS0OYFdJx7664fx+md/itrITQCYhUYDKXDohuwpFVZJSJfJxwczfh0r2XB0ReM1FWnhG8QbL/6W1a5JhsR0Vk9Ls7+W2WuLfqJ5u/t9Q/AaUf1mMbKFiQnbDlThVrQpBIu+zmM6o8V/LFIi/615AEmQn3uuBJU58AzgXLre+SP0D1rQv9pCWzRX0QeSvfx5fzGZ1wxCEW06YUxxNeGBNg8oXhi9uyOvX5shdS1I3Dih+TdSPxEJGIP32rYBdLPSEeiZ9lkgVv7TriayeOyFM8KzihoTzJdbL+YChwItwSwX9Jtuv8mINjwfeF2yJvsXAxTU85h4+/KJLYWirCOMkp9y/UQrBLtgVOvk7BfVN656Yg9NcNvWIfbmixgSaC9mKkbnXJ35U1UowLBlU+BAosLXUlHpwiOA13yP0V4C6/e82qaTSrf+X3/Uza78TvJTs1PbwP7f8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbdcto8EL3vU3jcy47xDzbYnsCMA0k/NyHtQNrS3HSEvICCLRtLNpCnr2RiAoSk9JvJDNF6tXv2R2f3gqEktvyAMcg5SakS9jvqb9yKrOZk2tKMVjTRbOxNNM8z25oxMRBMLQ9cK1KVkLECQso4oryjWobZ1ExLs9x70/It27fMhuc5D6ryA3ImTAuVhqEq6ySmzK/cdtQip36KGGE+RQkwn2N/FAxufaHpoxqT2r3Yoqwc5t0555mv67gRAYY4xg2cJvqFfqBzETF/RGYU8SKHZ58R66jPd1erVWPVbKT5TLcMw9ANTxc6ESOzj2r3Q30ZopBO0+25h2hKCUYxeUIS1AD4PI2UIJ6lOeHz5A3Tpm4a0rQGa6xh06YfVf3FQYXuTEsHIHOGNDZHZm1sCFPIgWJQvg/DjvrxvApu797niLJpmifs6PxvkICWEKcZRBqrI6vRnW/xRLq6F4D9kOK4YKSEO9kmGcLAlG85TMn6ljDRfBFTqvIrayb+SN1lgP+lLBf6PlYBXT+RnT6ZAeP/p2b79dpa+YHiArqLPLX5rHSywTIqrjm4y9avYrxJZtmiU0HYV96C2pX7+XzcrLveer40uFkMVovPT0H4yRwYV6vvi8es13LCTw8T3L4MshUe2zdpCTfm1y+2VyJ0PxoPFl77y431Y4VHfaP3afzYvlx7GTM+jIs02gxv54GzevJsZ8yu0PLX+I4/jVx9PVwZD8ty/YRMd7xa3l62wvbPn03EW0//TVAvxJvm40ZvtTK2vE2i6fjD5WcvmpYpfH/A+MYOf7USt/MS034Mh8KaEkbF5BEwr4+yPcK+ci3qhfj79CIlJNKmlaqfSY5iHChXu/KWpBa/EAREIl8Uc3t2+k3TdpuuZ3nNpm0avUsvsMR/nu2a117g1hy0RXEEsZfSKZG+JMtu++d9gDjxGdAIcq1MCzwHpr5jsY84UkI6FI8jpQzuU8Hi1/3A9HqO03OumoFrenbLaNuO0Q76fadnmFeqcpfyr/RrHkw55IcM7hww+BAwyQhImpd9zkSjMy5SskRlwWOzUaIGhUIMglxysbjqOjojSRaDBKwnaVTE0MjmWZUgnW1/LQ1hVkmHV/fV+3szvONvdSaETkSkApOxXIKoJpwYRWYdyNsBu/sB1+aDIiLymYm08pzgLZLDTy/dIttk1yoiot+90W+zxr1TP/v665v6O6D043zsHEUl2XNbz1QxJgSJdOtqLlFj2SjKsqjq15YEmQvzuuBJUx8BLgTLbe7TBVB9Z0I/a8jsUB953skP8RV8TkcccUhEtynV8YwNYwRMbhiheC3rc9eXA5cibxzW/JSsF4tFRCJ+d1fBPpZ6QvxN/KzS/CXwU7b2/Ig4xVrBCZ3JkxwnmzeaAqfCLBH8l+b7xk8ZOOX8ULhL8g4LF900KTi8/UWRxNZREcZpQXnYVyvBPtlWOPkmA/9F6ZWZitCfJ/SavTmhx4PbkaC9BKk7XfJ3ZY1U7YJBlYtAhaWjrsXCKZzT2R65PwPc5/fAbZqG22z/jd8PI+m+Er+W7OX0+D10/wA=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0724181388233458360</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0724181388233458360</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724141388233454727</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724181388233458360</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>7931C75792933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>6D31483892933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0895f2bd-0a35-44c0-838c-74e69db91bdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true" id="6909612e-90b1-4aee-a70a-a171be8d97ff"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="d924c32c-e95e-4528-8737-d35b32d12b8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>0141036992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9736041D681EE5E0401F0A059945A9:81FF6B90"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0724281388233468387</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>4041764992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:4041764992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:4041764992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0141036992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F4417EAA92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0141036992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F4417EAA92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oUDpCDNQ1N0RFQEd9MUJ6QKibQpNysVff5JCERDd7DPTmTar6/KtS77kkqEotNwGY5BwElPFb9XUt6JZGVWNsqFZ9rCo2bZT0VBlaGlQxpXisBw4YICq+Iyl4FPGEeU11TLMomZamuX0Tcu1bPEUiqb9qirPkDDhWqgUDFVZRiFlbha2pqYJdWPECHMpioC5HLu9xl3bFZouyjGp9cs1yixgUp9wPnV1HRcCwBCGuIDjSL/U93QuA+b2yJginiawiRmwmrqxXSwWhUWxECdj3TIMQzequtAJGBmfq/Wz3BgCn47i9dpDNKYEo5B8IgnqDvgkDpRGOI4TwifRD65N3TSkaw2WWMOmTc9V/StAhu5ET3sgE4Y0NkFm7qwLI0iAYlCeun5NPT+tg2vbfoIoG8VJxA7W/wYJ6BzCeAqBxvLMcnSnezxSrvolYNenOEwZmcO9HJMpwsCUTgIjsmwTJoYvYErWfmXJxEPyKQP8L2251HexCuj6keq0yBgY/z892+3X2sszClOoT6/u5y2H0sprO/HiPz6rIPvFKt132riWQdhVXoPatnuzPhzW7WxtjNLe4CP9iG5u8GwYPN6g0upq9f7I6L3tP/BS49NvPbQ7Q9uwutd+OIimLzBeWRT/6fAbm7fZ62jW/3x3/Gr3mr+cDYzKRRIhD81u0U3n/cpbDBD1Hr3nsrPsm4PRhff66dw2oj+Tx9nt9R2uWp+DovfOmxerUuf21Vig0Wvw+BR03tnkrMebevKSpDgejO+oWVw9P9W+ctrNYV+YU0IvHb4D5vlSjoffUq5FvxD/nV6khATaKFN1p5KjGAfK1bq0ktTipoKASOCKZq7XhmmbRrFcrVrVYlF8es1qwxJfVdsxr6sNJ+egNYoDiF5MR0TGkiy7np/fAeLIZUADSLR5nOIJMPUXjy3EkeLTrtgcMWXQjwWLe03LcZrlK4HYLFW8xnWlWbJsxzYF2kapaKrKfcwf6EPSGHFI9hm8tMfgXcBkSkDSvJxzJgadcVGSGZqnPDQLc1SgkIqDIJFcLOycks5INA1BAtajOEhDKEwn06xAOlu/LQ1hlkm7V/1s//2Y3uG/vBJCJyBSgclcmiC6CUeOIjNP5OeEnd2Ec/eNNCBym4my8oTgNZL9X1/TIsdkOyoiozev92bmuLfqJ5t/t9R/AaUf1mMbKJiTnbD5mSqOCUEi9bybM1SYFdL5PM36V5EEmQj3uuBJU+8BTgXLrfrxB1B960I/6ZDZoj6IvJXv40v5hPY44hCJaVOy5Qk3jB4wecPwxW5Znnp92Qsp6sZhyY/JvFBcRCTiX+8q2MVST4g74rWIk+CrXUd87cQReYprBSd0LFfyOFn9MBQ4Fm6J4L842XV+zMGx4PvCbZG3WLiYpmHK4ec/iiS2moowjlPK/ZaaCXbJNsPJV1Nwv5S+uckIfXNCL9mPJ/Tgrt0TtBchdatL/q6skWxcsLifCv0MS01digunCE7HO+S+AbjL77Zhm5Wy/Vd+38+k/k38XbJT08P9UP8P</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oUDpCDNQ1N0RFQEd9MUJ6QKibQpNysVff5JCERDd7DPTmTar6/KtS77kkqEotNwGY5BwElPFb9XUt6JZGVWNsqFZ9rCo2bZT0VBlaGlQxpXisBw4YICq+Iyl4FPGEeU11TLMomZamuX0Tcu1bPEUiqb9qirPkDDhWqgUDFVZRiFlbha2pqYJdWPECHMpioC5HLu9xl3bFZouyjGp9cs1yixgUp9wPnV1HRcCwBCGuIDjSL/U93QuA+b2yJginiawiRmwmrqxXSwWhUWxECdj3TIMQzequtAJGBmfq/Wz3BgCn47i9dpDNKYEo5B8IgnqDvgkDpRGOI4TwifRD65N3TSkaw2WWMOmTc9V/StAhu5ET3sgE4Y0NkFm7qwLI0iAYlCeun5NPT+tg2vbfoIoG8VJxA7W/wYJ6BzCeAqBxvLMcnSnezxSrvolYNenOEwZmcO9HJMpwsCUTgIjsmwTJoYvYErWfmXJxEPyKQP8L2251HexCuj6keq0yBgY/z892+3X2sszClOoT6/u5y2H0sprO/HiPz6rIPvFKt132riWQdhVXoPatnuzPhzW7WxtjNLe4CP9iG5u8GwYPN6g0upq9f7I6L3tP/BS49NvPbQ7Q9uwutd+OIimLzBeWRT/6fAbm7fZ62jW/3x3/Gr3mr+cDYzKRRIhD81u0U3n/cpbDBD1Hr3nsrPsm4PRhff66dw2oj+Tx9nt9R2uWp+DovfOmxerUuf21Vig0Wvw+BR03tnkrMebevKSpDgejO+oWVw9P9W+ctrNYV+YU0IvHb4D5vlSjoffUq5FvxD/nV6khATaKFN1p5KjGAfK1bq0ktTipoKASOCKZq7XhmmbRrFcrVrVYlF8es1qwxJfVdsxr6sNJ+egNYoDiF5MR0TGkiy7np/fAeLIZUADSLR5nOIJMPUXjy3EkeLTrtgcMWXQjwWLe03LcZrlK4HYLFW8xnWlWbJsxzYF2kapaKrKfcwf6EPSGHFI9hm8tMfgXcBkSkDSvJxzJgadcVGSGZqnPDQLc1SgkIqDIJFcLOycks5INA1BAtajOEhDKEwn06xAOlu/LQ1hlkm7V/1s//2Y3uG/vBJCJyBSgclcmiC6CUeOIjNP5OeEnd2Ec/eNNCBym4my8oTgNZL9X1/TIsdkOyoiozev92bmuLfqJ5t/t9R/AaUf1mMbKJiTnbD5mSqOCUEi9bybM1SYFdL5PM36V5EEmQj3uuBJU+8BTgXLrfrxB1B960I/6ZDZoj6IvJXv40v5hPY44hCJaVOy5Qk3jB4wecPwxW5Znnp92Qsp6sZhyY/JvFBcRCTiX+8q2MVST4g74rWIk+CrXUd87cQReYprBSd0LFfyOFn9MBQ4Fm6J4L842XV+zMGx4PvCbZG3WLiYpmHK4ec/iiS2moowjlPK/ZaaCXbJNsPJV1Nwv5S+uckIfXNCL9mPJ/Tgrt0TtBchdatL/q6skWxcsLifCv0MS01digunCE7HO+S+AbjL77Zhm5Wy/Vd+38+k/k38XbJT08P9UP8P</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIhXBJVJBS0ku2pVsB29OzLyvjDODdxAm2w6W//tihoUBplz1SJerJeOabi7+ZC47SxPEDzoEJklEtCjv6z3G71cZxAwy76XmG27Rsw3PcsdGq2xhNWs1G7DR0LeK8gIhygajo6I5l1w3bMZz2yHZ8x/XrVs3z7B+69gSMS9NSpWbp2ipNKPdLtx29YNTPECfcpygF7gvsD4P+vS81fVRh0rsXG5SlQ9adCZH7polrMWBIElzDWWpemHs6FzH3h2RKkSgYvPqMeUd/vbtcLmvLei1jU9OxLMu0PFPqxJxMz/Tul+oyxBGdZJtzD9GMEowS8oIUqD6IWRZrQTLNGBGz9APTtmlbyrQBK2xg26VnuvnmoER3oqU9kIwjg8+QXRkbwAQYUAza90HU0c9Oq+Dm7oghyicZS/nB+e8gAV1AkuUQG7yKrEJ3usUj6epeAPYjipOCkwU8qDbJEQauPTKYkNU94bL5Yq6V5ddWXP6RqssA/01ZLsxdrBK6eSQ7IZkCF/+nZrv12lh5QkkB3bs4WNfPe2n0YornX5cobySD1txbPdxlnRLCrvIG1Lbcr+fDZt321uslYCzHaTscm9fwPEvvC2uJzhfplP+gd8V6uTx/ur8dLZ/6vTx8noQv/w7cq/b8+03j6TF0X9J89BD1ksugbpLwafBlysbJomWzf/pQL57Zc7Je46j/OLtJx7fsNn/4NUrnFj63bx6+R3fnvcfFOoxWV+GLRXjDHt/dM9P52ryxm/X8d/Fl8Dte9POoMW8WU5oWP27NoPMW024M+8KKEobF+BdgUR1Ve0Shdi3rhcTn9KIkJDYmpaqfK47iAqjQu+qWoha/kAREYl8Wc3O+dl27dRUEnuPV665t9S69wJH/eW7bvvaCdsVBGxQHEHsZnRDlS7Hspn8+B4hTnwONgRmLrMAz4PonFkMkkBbRgXwcGeUwyiSLO41LCdVxrtuNS8sLm73gKmhL9A3XubZaYVvXHjLxjX5jwUQA22fwxh6DDwCTnICiedXnXDY6FzIlc7QoRGLXFqhGoZCDgCkullfbDZOTNE9AATbTLC4SqOWzvEyQyTe/joEwL6WDq1H5/j4M7/BblQmpExOlwFUslyCrCUdGkVMF8nHA7d2AK/NBERP1zGRaBSN4g2T/01u3qDbZtoqM6Gdv+NOucG/VT77+/qb5CSjzMB9bR/GC7LitZqocE5JEulU156g2rxWLRVHWr6UIkknzpuRJ2xwCLiTLrUfZb6Dm1oR50pDZoj7wvJXv4yvEjA4FEpDKbtPK4wkbxhC42jAi+VpWp64vey5l3gSsxDFZL5GLiEL86a6Cfaz0pPhR/iwzFr+V64itHT8yTrlWCEKn6qTGyfqDpsCZNEsk/2Vs1/gxA8ec7wu3Sd5iEbKbxoWAj79oitg6OsI4K6iIQr0U7JJtiVOsc/DflN6ZKQn9dUKv+IcT+rl/P5S0lyJ9q0v+rGyQsl0w6GoRKLF09JVcOKVzOt0h91eAu/zuWpLfm673J37fj6T7TvxespPTw/fQ/Q8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0724281388233468387</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0724281388233468387</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724231388233463159</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724281388233468387</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1141136992933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>05418EAA92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d924c32c-e95e-4528-8737-d35b32d12b8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true" id="cbc3011c-708c-4e9a-913b-7b90181996b9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="eb76437e-3e7b-489b-9b17-6d5d3e9e20f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A8417E8B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173B9859775E0401F0A07995A24:4047C360"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0724341388233474819</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E741E87B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E741E87B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E741E87B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>A8417E8B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>9C41BD3C92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:A8417E8B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:9C41BD3C92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4CYFcVJACpLvs0ou49fKyMo4DbhOHxg7Q/vpjh4YChS57pErUk/HMNxd/M5cMJrHp+YzhjJOUKt1OQ/0zMfSa4UBXq9YsrFkhMjV3YoZaaE5CV7eqNRNGqtJlLMddyjikvKGaulHVDFMznaFheqblVasVvWY/qcoYZ0yYFioVXVVWSUyZV7htqHlGvRQywjwKE8w8jryBf93zhKYHS0xq83KNsnCYNWeczz0AUCXECMcxqqA0AZdgR+cyZN6ATCnkeYY/fIasoX7cXS6XlWW1kmZTYOq6DnQXCJ2Qkem52jwrL+OwS6N0fW5DmlKCYEzeoQR1jfksDRU/nqYZ4bPkiGkDGLo0reEV0pBh0XMVfDoo0J1oaQdkxqDGZtAojfVxhDNMEVZG/W5DPT+tguu7wwxSFqVZwvbO/wYJ0wWO0zkONVZGVqI73eKBdDUvMfK6FMU5Iwt8I9tkDhFmyl2GI7LqESaaL2RKUX5lxcQfKbsMo38pyyXYxiqggwPZ6ZApZvz/1Gy7XmsrYxjnuJn1Hnx/5dwyGCcPjh+0f0erm5xM2sugUUDYVl6D2pT747zfrJve+rgUWf3nN8NeglrrftK7GnWH04uHi/FtNKSR+QQ4fVzaTz9A+PPZfxrMb0hneM8eH8Avf7mI8htXnw6WPB0+zKML3z9bPaWRXr+nOLgZ87DeGruv7461mP186dXveyavE2M2eQ9+jSPzjo869auRdTECfi17SWp99mLfX9eo/wMhtx8sztr23ePLyMfjPg364+eLaXfU+IxpO4ZdYUkJg3zyjBEvj7I9uh3lStQL8u/pRUpIqEWFqjeXHMU4plxtyluSWrxcEBAJPVHM9dl3LMMOnJZrutWqZejtluub4j/Xcowr13dKDlqj2IPYTmlEpC/Jsuv++R4gSjyGaYgzbZHmaIaZ+o3FDuRQ6dK+eBwpZXiYChY3/Xa9Zbkt1w7qnSBo207ryq7XrkzHrhl+x1aVm5Tf0tvMjzjOdhm8tsPgfYzInGBJ87LPmWh0xkVKXuEi57FRWcAKxbkYBJnkYnHVqQFGknmMJWCQpGEe48p8Ni8SBNj619QgYoW0HwyL93c0vP1vZSaETkikApOxtLCoJj4wiswykOMBO9sBl+b9PCTymYm08oygNZLdT5/dIttk0yoioj/twR+jxL1RP/n615vgG1BgPx8bR+GCbLktZ6oYE4JEmmU1X2HltZIvFnlRP1sSZCbMA8GTBhhglAuWexumL5iCjQlw0pDZoN7zvJHv4sv5jA445DgR3aYUxxM2jAFmcsPoiteyOnV92XEp8sbxih+StWOxiEjE3+4qyENST4jvxM8yzcLPch2wteVHxCnWCk7oVJ7kOHk70hQoFWaJ4L802zZ+yMAh57vCTZI3WLjopknO8fEviiS2hgoRSnPKux21EGyTbYGTv82x96n0xUxB6B8TesWOTuiH695A0F4C1Y0u+buyRop2QViVi0CBpaGuxMIpnNPpFrl/ANzm98C2jMCx/8rvu5E0v4i/SrZyuv8emv8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4CYFcVJACpLvs0ou49fKyMo4DbhOHxg7Q/vpjh4YChS57pErUk/HMNxd/M5cMJrHp+YzhjJOUKt1OQ/0zMfSa4UBXq9YsrFkhMjV3YoZaaE5CV7eqNRNGqtJlLMddyjikvKGaulHVDFMznaFheqblVasVvWY/qcoYZ0yYFioVXVVWSUyZV7htqHlGvRQywjwKE8w8jryBf93zhKYHS0xq83KNsnCYNWeczz0AUCXECMcxqqA0AZdgR+cyZN6ATCnkeYY/fIasoX7cXS6XlWW1kmZTYOq6DnQXCJ2Qkem52jwrL+OwS6N0fW5DmlKCYEzeoQR1jfksDRU/nqYZ4bPkiGkDGLo0reEV0pBh0XMVfDoo0J1oaQdkxqDGZtAojfVxhDNMEVZG/W5DPT+tguu7wwxSFqVZwvbO/wYJ0wWO0zkONVZGVqI73eKBdDUvMfK6FMU5Iwt8I9tkDhFmyl2GI7LqESaaL2RKUX5lxcQfKbsMo38pyyXYxiqggwPZ6ZApZvz/1Gy7XmsrYxjnuJn1Hnx/5dwyGCcPjh+0f0erm5xM2sugUUDYVl6D2pT747zfrJve+rgUWf3nN8NeglrrftK7GnWH04uHi/FtNKSR+QQ4fVzaTz9A+PPZfxrMb0hneM8eH8Avf7mI8htXnw6WPB0+zKML3z9bPaWRXr+nOLgZ87DeGruv7461mP186dXveyavE2M2eQ9+jSPzjo869auRdTECfi17SWp99mLfX9eo/wMhtx8sztr23ePLyMfjPg364+eLaXfU+IxpO4ZdYUkJg3zyjBEvj7I9uh3lStQL8u/pRUpIqEWFqjeXHMU4plxtyluSWrxcEBAJPVHM9dl3LMMOnJZrutWqZejtluub4j/Xcowr13dKDlqj2IPYTmlEpC/Jsuv++R4gSjyGaYgzbZHmaIaZ+o3FDuRQ6dK+eBwpZXiYChY3/Xa9Zbkt1w7qnSBo207ryq7XrkzHrhl+x1aVm5Tf0tvMjzjOdhm8tsPgfYzInGBJ87LPmWh0xkVKXuEi57FRWcAKxbkYBJnkYnHVqQFGknmMJWCQpGEe48p8Ni8SBNj619QgYoW0HwyL93c0vP1vZSaETkikApOxtLCoJj4wiswykOMBO9sBl+b9PCTymYm08oygNZLdT5/dIttk0yoioj/twR+jxL1RP/n615vgG1BgPx8bR+GCbLktZ6oYE4JEmmU1X2HltZIvFnlRP1sSZCbMA8GTBhhglAuWexumL5iCjQlw0pDZoN7zvJHv4sv5jA445DgR3aYUxxM2jAFmcsPoiteyOnV92XEp8sbxih+StWOxiEjE3+4qyENST4jvxM8yzcLPch2wteVHxCnWCk7oVJ7kOHk70hQoFWaJ4L802zZ+yMAh57vCTZI3WLjopknO8fEviiS2hgoRSnPKux21EGyTbYGTv82x96n0xUxB6B8TesWOTuiH695A0F4C1Y0u+buyRop2QViVi0CBpaGuxMIpnNPpFrl/ANzm98C2jMCx/8rvu5E0v4i/SrZyuv8emv8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbdUuJMEL33KVLx0gr5RSAlVEGCa1ZFV9BVb6xh0sCsySRmJhB9+m8mGAREl/2qrMLp9HSf/pnTfcJQHFlulzHIOEmoEvht9alphvXjhoE0e2yD5liooY0t29Bwo143jebEwOO6qgSM5RBQxhHlbdUyTFszLc1qjkzLtRzXbtSO7fqjqtxBxoRpoVIzVKWII8rc0m1bzTPqJogR5lIUA3M5dofdywtXaLqowqR2TpYoS4dZZ8Z56uo6roWAIYpwDSexfqJv6JyEzB2SKUU8z+DdZ8ja6vvdxWJRW9i1JJvqlmEYutHShU7IyPRQ7RxUlyEM6CRZnj1EE0owisgbkqAugc+SUOlG0yQjfBZ/YdrUTUOa1qDAGjYdeqjqHw5KdHta2gCZMaSxGTIrYzcwgQwoBuX2Jmirh/tVcHl3lCHKJkkWs63zv0ECOocoSSHUWBVZhW5/izvS1TkB7AYURzkjcxjINkkRBqZcZzAhxQVhovlCppTlVwom/kjVZYD/pSwn+jpWAV3fkR2fTIHx/1Oz9XotrdyhKIfO9YP3Zt4Ho0ZhndPb8CgdcD6+fxwUf57bJYR15SWoVbnfz9vNuuqt90v96dko4MZlcRsvzLOfzgMe9N5On72789+Z8zj+cW8Yj475ejZ/mBX8rEWG88mQn5oPATxEtyP78s0cxD18i96G48eDvnHtjGdX5vkCX1zceq0U/7EHd+PeqxNfhOn8MYnuL9Mz56XLzv2kO3h7Jk6/T9jo5/zlV8MxvKNnSMLnX5kf+42D6Lz4Eb8c1R9+XaHp7+t0+nPa/ohpPYZNYUUJw3z8BzCvjrI9Al85FfVC/Ht6kRISapNS1U0lRzEOlKsdeUtSi5sLAiKhK4q5PLc8x+z5tteyWrbtmIbXa3Ut8V/LaZqnrW6z4qAlii2IXkInRPqSLLvsn+8B4thlQEPItHmS4xkw9RuLPuJICeiNeBwJZTBKBIv3/Va/d2qZfb/nicQfm7bfteqW0/I83zvuWqoySPgVvcq6Ew7ZJoPXNxj8BjBJCUial33ORKMzLlLyguY5j8zaHNUo5GIQZJKLxdVmXWckTiOQgPU4CfMIauksLROks+WvpSHMSulNf1S+vy/D2/5WZULohEQqMBlLD0Q1YccosqpAvg64uR5wZb6bh0Q+M5FWnhG8RLL56aNbZJusWkVE9OQNn8wK90p97+ufb+rfgNK387FyFM7JmttqpooxIUikU1XzBdVeavl8npf1a0iCzIR5XfCkqQ8B54LlXkfJM1B9ZULfa8isUG95Xsk38eV8RocccYhFtynlcY8NYwhMbhiBeC3FvuvLhkuRNw4F3yXzIrGISMTf7irYxVJPiK/FzyLJwo9y7bC15kfEKdYKTuhUnuQ4ef2iKXAizBLBf0m2bnyXgV3ON4WrJK+wcNFN45zD118USWxtFWGc5JQHvloK1sm2xMlfU3A/lD6ZKQn9fUIX7MsJfX95MRS0FyN1pUv+rqyRsl0wqHIRKLG01UIsnMI5na6R+zvAdX7vNxyz32z0/sbvm5F0Pok/S9Zyuv0eOv8B</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0724341388233474819</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0724341388233474819</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724311388233471971</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724341388233474819</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>B8417E8B92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>AC41BD3C92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb76437e-3e7b-489b-9b17-6d5d3e9e20f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true" id="73e3dd9e-be40-4e6a-891f-3208b256974d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="c1188f0f-8aca-4d6c-a1d6-9512a9f20737"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9736041D9F1EE5E0401F0A059945A9:BBE33E11"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0724411388233481741</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>8F41941D92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:8F41941D92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:8F41941D92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>4051452D92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>345161FD92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:4051452D92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:345161FD92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbvb9o8EP6+vyJKP6KQxIS3SVSQKNCODtoKWNfxZTLOBbwmDo0dCP3rZ4eGAqUde6VK1Jfz3XM//NxdcBxHyG9xDqmgCdN6nYb+CzAChwS2gcLQMRyEPANjEhr1EE1dF9sYeVNd63GeQY9xgZlo6Miya4aNDOSObeQjx6951bpdm+jaA6RcmpYqVUvX8jhi3C/cNvQsZX6COeU+wzFwXxB/1Br0fanp4xKT3rzYoCwcps25EAvfNEk1AAJRRKokic0Lc0/nIuD+iM4YFlkKrz4D3tBf765Wq+qqVk3SmYksyzItz5Q6AaezM735pbwMQY+FyebcxixhlOCIvmAFagBingRaK5olKRXz+APTtmlbyrQBOTGI7bAz3XxzUKA70dIeyJRjg8+xXRobQggpMALa92GvoZ+dVsHN3XGKGQ+TNOYH53+DBGwJUbKAwOBlZCW60y0eSVfzAojfYyTKOF3CrWqTBSbAtfsUQpr3KZfNF3CtKL+Wc/lHyy4D8i9luTB3sUro5pHsdOgMuPg/Ndut18bKA44yaArv8s7zRuPcO+/ejq0gXC3pU2UR3f7gjQLCrvIG1Lbcr+fDZt321uul7hLf/+xb9vkEBhPUF8m4JipxZfi1/d3qrMi31hOk9602XA9uX0Tlm+iGcWUaTNq4G6+Ga7BhgJ3ry5cpuY+ev7QWuftYqX9txeuewHwwuxHx5OHxv/HiB4/zvnvD15d5rdu5/vHbrNFrfnnH2Dp4yr38eVrvsidKKoMbM6rdOM7Vl6hmTeqPyV3sYPPh53I4+dltvMW0G8O+sKSEUTb9DUSUR9UevY52JeuFxef0oiQ0MMJC1V8ojuICmNCb6paiFj+TBEQDXxZzc3asuu3UUcdDXq3m2Fb70msh+Z/nuPaV13JLDtqgOIDYTlhIlS/Fspv++RwgiX0OLIDUWCYZmQPXP7HYwQJrPTaUjyNhHMaJZPFu10Idt+baXXRlOW2nXe+4bgvZzjlCbWS7unabiDt2l7ZCAek+g9f3GHwIhC4oKJpXfc5lo3MhU/KMl5mI7OoSVxlkchCkiovlVbduchovIlCAzTgJsgiqi/miSJDJN7/IwIQX0mF3XLy/D8M7/FZmQuoEVClwFcslyGrCkVGEykA+DtjdDbg038oCqp6ZTKtIKdkg2f/01i2qTbatIiP61R79skvcW/WTr7+/aX4CyjzMx9ZRsKQ7bsuZKseEJJFmWc1nXH2uZstlVtTvXBFkKs2bkidtcwQkkyy3HidPwMytCfOkIbNFfeB5K9/Hl4k5GwksIJbdphXHEzaMEXC1YfTka8lPXV/2XMq8CcjFMVk7kouIQvzprkJ8ovSk+F7+rJI0eCvXEVs7fmSccq0QlM3USY2T9QdNQRJplkr+S9Jd48cMHHO+L9wmeYtFyG6aZgI+/qIpYmvomJAkY6LX0QvBLtkWOMV6Af6b0jszBaG/TuicfzihHwf9kaS9GOtbXfp3ZYMW7UJAV4tAgaWh53LhlM7ZbIfcXwHu8rt75dieY/+V3/cjab4Tv5fs5PTwPTT/AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbvb9o8EP6+vyJKP6KQxIS3SVSQKNCODtoKWNfxZTLOBbwmDo0dCP3rZ4eGAqUde6VK1Jfz3XM//NxdcBxHyG9xDqmgCdN6nYb+CzAChwS2gcLQMRyEPANjEhr1EE1dF9sYeVNd63GeQY9xgZlo6Miya4aNDOSObeQjx6951bpdm+jaA6RcmpYqVUvX8jhi3C/cNvQsZX6COeU+wzFwXxB/1Br0fanp4xKT3rzYoCwcps25EAvfNEk1AAJRRKokic0Lc0/nIuD+iM4YFlkKrz4D3tBf765Wq+qqVk3SmYksyzItz5Q6AaezM735pbwMQY+FyebcxixhlOCIvmAFagBingRaK5olKRXz+APTtmlbyrQBOTGI7bAz3XxzUKA70dIeyJRjg8+xXRobQggpMALa92GvoZ+dVsHN3XGKGQ+TNOYH53+DBGwJUbKAwOBlZCW60y0eSVfzAojfYyTKOF3CrWqTBSbAtfsUQpr3KZfNF3CtKL+Wc/lHyy4D8i9luTB3sUro5pHsdOgMuPg/Ndut18bKA44yaArv8s7zRuPcO+/ejq0gXC3pU2UR3f7gjQLCrvIG1Lbcr+fDZt321uul7hLf/+xb9vkEBhPUF8m4JipxZfi1/d3qrMi31hOk9602XA9uX0Tlm+iGcWUaTNq4G6+Ga7BhgJ3ry5cpuY+ev7QWuftYqX9txeuewHwwuxHx5OHxv/HiB4/zvnvD15d5rdu5/vHbrNFrfnnH2Dp4yr38eVrvsidKKoMbM6rdOM7Vl6hmTeqPyV3sYPPh53I4+dltvMW0G8O+sKSEUTb9DUSUR9UevY52JeuFxef0oiQ0MMJC1V8ojuICmNCb6paiFj+TBEQDXxZzc3asuu3UUcdDXq3m2Fb70msh+Z/nuPaV13JLDtqgOIDYTlhIlS/Fspv++RwgiX0OLIDUWCYZmQPXP7HYwQJrPTaUjyNhHMaJZPFu10Idt+baXXRlOW2nXe+4bgvZzjlCbWS7unabiDt2l7ZCAek+g9f3GHwIhC4oKJpXfc5lo3MhU/KMl5mI7OoSVxlkchCkiovlVbduchovIlCAzTgJsgiqi/miSJDJN7/IwIQX0mF3XLy/D8M7/FZmQuoEVClwFcslyGrCkVGEykA+DtjdDbg038oCqp6ZTKtIKdkg2f/01i2qTbatIiP61R79skvcW/WTr7+/aX4CyjzMx9ZRsKQ7bsuZKseEJJFmWc1nXH2uZstlVtTvXBFkKs2bkidtcwQkkyy3HidPwMytCfOkIbNFfeB5K9/Hl4k5GwksIJbdphXHEzaMEXC1YfTka8lPXV/2XMq8CcjFMVk7kouIQvzprkJ8ovSk+F7+rJI0eCvXEVs7fmSccq0QlM3USY2T9QdNQRJplkr+S9Jd48cMHHO+L9wmeYtFyG6aZgI+/qIpYmvomJAkY6LX0QvBLtkWOMV6Af6b0jszBaG/TuicfzihHwf9kaS9GOtbXfp3ZYMW7UJAV4tAgaWh53LhlM7ZbIfcXwHu8rt75dieY/+V3/cjab4Tv5fs5PTwPTT/AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkCiRRQQq3JRK9AVu6famMY4LbYNPYAcqvP3YgFCjtskeqRD0Zz3xz8TdzzcAssfyAMZRyTIkStmrqC3ImE6fiOZpjWhXNKduG5lqWpxnlccWGrmtCY6wqIWMZCgnjgPCaahmmrZmWZrlD0/Itx3esklutPKvKI0qZMC1USoaqrGYJYX7utqZmKfEpYJj5BMwQ8zn0B8FNzxeaPigwqfXrDcrcYVqfcj73dR2WIgRRksASpDP9Wj/QuY6YP8AxATxL0dZnxGrq9u5yuSwt7RJNY90yDEM3PF3oRAzHl2r9oriMopBM6ObcBIQSDEGC10CCukF8SiMlSGKaYj6dfWPa1E1DmtbQCmrQdMilqn86yNGdaekAZMqAxqbALIz10QSliECk/O6HNfXyvApu7g5TQNiEpjN2dP43SIgsUELnKNJYEVmB7nyLJ9JVv0bQDwlMMoYX6Fa2yRxAxJT7FE3wqoeZaL6IKXn5lRUTf7joMgT/pSzX+j5WAV0/kZ0WjhHj/6dm+/XaWHkESYbq4zHrgrEX9Nc30y6pOga4fzajJ5SNYC2HsK+8AbUr9/Z83Ky73tpeGsV3AbxqNPt3/dd4RO6fZ9Xgd3oV3/QegBs1DJ3qdmr0mg37IfzoDYe0Peq8XQUYeN1b46GZvYZ2/E7DyePqNrz4s1reYUZ6+tBCf0bjytW4G05Z/BhThhr9btO2A9v+dd9cL/FtmHLi9ayb8GM0zJ5+TbsNm7Z7bLl+//W6WHeyC8so24N59e1u1GVB47bdWwe1z5j2YzgUFpQwyMavCPLiKNsjbCkdUS/Af6YXKcGRNslV/bnkKMYR4Wpd3pLU4meCgHDki2JuzrZTNitmp+VZnm07ptFseIEl/vMc1+x4gVtw0AbFEcQmJRMsfUmW3fTPzwDhzGeIRCjVFjSDU8TUHyy2AAdKSPricVDC0JAKFi+7rbbtlTutarXStOxOteq2Ha/dDtpuuVVud1TllvI7cpcGE47SQwYvHzB4H0E8x0jSvOxzJhqdcZGSd7DIeGKWFqBEUCYGQSq5WFx1yzrDs3mCJGB9RqMsQaX5dJ4nSGebX0sDkOXSfnuYv79vwzv+VmRC6ERYKjAZSwOJaqITo8guAvk+YHc/4MJ8kEVYPjORVp5iuEFy+OmzW2Sb7FpFRPTSHLyYBe6d+tnXv97UfwClH+dj5yha4D23xUwVY0KQSL2o5jsovZeyxSLL61eVBJkK87rgSVMfIJgJlvsY0jdE9J0J/awhs0N95HknP8SX8SkZcMDRTHSbkh/P2DAGiMkNIxSvZXXu+nLgUuSNoxU/JWsmYhGRiH/cVaAPpZ4Q34ufJU2jz3KdsLXnR8Qp1gqOSSxPcpx8fNMUkAqzWPAfTfeNnzJwyvmhcJfkHRYuummccfT9F0USW00FENKM8LCl5oJ9ss1x8o858j+VvpjJCX07oVfs2wn9dNMbCNqbAXWni/+urOG8XSBS5SKQY6mpK7FwCuck3iP3LcB9fnc7juk55l/5/TCS+hfxV8leTo/fQ/0/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0724411388233481741</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0724411388233481741</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724381388233478555</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724411388233481741</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>5051452D92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>445161FD92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1188f0f-8aca-4d6c-a1d6-9512a9f20737</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true" id="b10baad0-0fd8-47e8-864b-5a9eacfa771f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1fe27f9c-7781-4b22-859b-f91192d8f4bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173B9CA9775E0401F0A07995A24:F74D7A64"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0724471388233487899</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>8651478E92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:8651478E92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:8651478E92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>4751E3AE92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>3B51117F92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:4751E3AE92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:3B51117F92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIhQRCVJDCrRtKoQul3dOXldcZwCVxaOwAPb/+2KGhQGmXPVIl6sl45puLv5krhuLI8nzGIOUkoUrQrqu/poYLRsVxtWkZYc1Goa25djXUABCyEaqZLrZVJWAsg4Ayjiivq5ZhljXT0iz33rQ8y/Zsp1QxjCdVeYCUCdNCpWSoyiaOKPNyt3U1S6mXIEaYR1EMzOPYG/u3fU9oeqjApDautihzh2ljzvnS03VcCgFDFOESTmL9Sj/QuQqZNyYziniWwpvPkNXVt7vr9bq0LpeSdKZbhmHoRk0XOiEjswu18a24DGFAp8n23EI0oQSjiPyLJKhb4PMkVPxolqSEz+NPTJu6aUjTGmywhk2bXqj6u4Mc3ZmWDkCmDGlsjszC2AimkALFoExGQV29OK+C27v3KaJsmqQxOzr/HSSgK4iSJYQaKyIr0J1v8US6GleAvYDiKGNkBQPZJkuEgSl3KUzJpk+YaL6QKXn5lQ0Tf6ToMsB/U5YrfR+rgK6fyE6bzIDx/1Oz/XptrTygKIPGY2D0mqHfxdV2a8EGyJ1f+p2n2KXcqOcQ9pW3oHblfjsfN+uut94uDWa9H7ed6fAGTeiP9s/vdrpZhOZN/+fD4JneTMLL6h1dPMwmT/cj6lcqQXO1MLrlaL2cdfr9p+vrbtUe9abZhnWa198sNOkM3affzrSS9S4vg8nQvVk+Pj/if/zl4q71EljXQ2ZXMmwj+7nb/35dGyS032Hl1cP4EoZPvflNkE3Gg5ix+Nugj8j61XJub5Gud6rrrLeov8e0H8OhsKCEcfb7GTAvjrI9grbSFfVC/Gt6kRISatNc1VtKjmIcKFcb8pakFi8TBERCTxRze7arjtkp+52aVSuXbdNoNWu+Jf6r2a7ZrfluwUFbFEcQWwmdEulLsuy2f74GiGOPAQ0h1VZJhufA1C8sthFHSkBH4nEklMF9IljcdWqO67pVu9q1uxXbd9pOy+k2Td/w/WbHKqvKIOFDOkz9KYf0kMGdAwYfASZLApLmZZ8z0eiMi5S8oFXGI7O0QiUKmRgEqeRicdV1dEbiZQQSsB4nYRZBaTlf5gnS2fbX0hBmuXTUuc/f36fhHX8rMiF0QiIVmIylCaKacGIUlYtAPg/Y3Q+4MO9nIZHPTKSVpwRvkRx+eu8W2Sa7VhER/WqNf5kF7p362dc/3tS/AKUf52PnKFyRPbfFTBVjQpBIo6jmCyq9lLLVKsvrV5UEmQrzuuBJUx8DzgTLvd4nC6D6zoR+1pDZoT7yvJMf4sv4nI454hCLblPy4xkbxhiY3DAC8Vo2564vBy5F3jhs+ClZKxKLiET85a6CPSz1hPhO/KyTNHwv1wlbe35EnGKt4ITO5EmOk9dPmgInwiwR/Jek+8ZPGTjl/FC4S/IOCxfd9Dvj8PkXRRJbXUUYJxnlQVvNBftkm+Pkr0vw3pU+mMkJ/W1Cb9inE/rnbX8saC9G6k6X/FlZI3m7YFDlIpBjqasbsXAK53S2R+5vAPf53a04pl11/8jvh5E0Pog/SvZyevweGv8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIhQRCVJDCrRtKoQul3dOXldcZwCVxaOwAPb/+2KGhQGmXPVIl6sl45puLv5krhuLI8nzGIOUkoUrQrqu/poYLRsVxtWkZYc1Goa25djXUABCyEaqZLrZVJWAsg4Ayjiivq5ZhljXT0iz33rQ8y/Zsp1QxjCdVeYCUCdNCpWSoyiaOKPNyt3U1S6mXIEaYR1EMzOPYG/u3fU9oeqjApDautihzh2ljzvnS03VcCgFDFOESTmL9Sj/QuQqZNyYziniWwpvPkNXVt7vr9bq0LpeSdKZbhmHoRk0XOiEjswu18a24DGFAp8n23EI0oQSjiPyLJKhb4PMkVPxolqSEz+NPTJu6aUjTGmywhk2bXqj6u4Mc3ZmWDkCmDGlsjszC2AimkALFoExGQV29OK+C27v3KaJsmqQxOzr/HSSgK4iSJYQaKyIr0J1v8US6GleAvYDiKGNkBQPZJkuEgSl3KUzJpk+YaL6QKXn5lQ0Tf6ToMsB/U5YrfR+rgK6fyE6bzIDx/1Oz/XptrTygKIPGY2D0mqHfxdV2a8EGyJ1f+p2n2KXcqOcQ9pW3oHblfjsfN+uut94uDWa9H7ed6fAGTeiP9s/vdrpZhOZN/+fD4JneTMLL6h1dPMwmT/cj6lcqQXO1MLrlaL2cdfr9p+vrbtUe9abZhnWa198sNOkM3affzrSS9S4vg8nQvVk+Pj/if/zl4q71EljXQ2ZXMmwj+7nb/35dGyS032Hl1cP4EoZPvflNkE3Gg5ix+Nugj8j61XJub5Gud6rrrLeov8e0H8OhsKCEcfb7GTAvjrI9grbSFfVC/Gt6kRISatNc1VtKjmIcKFcb8pakFi8TBERCTxRze7arjtkp+52aVSuXbdNoNWu+Jf6r2a7ZrfluwUFbFEcQWwmdEulLsuy2f74GiGOPAQ0h1VZJhufA1C8sthFHSkBH4nEklMF9IljcdWqO67pVu9q1uxXbd9pOy+k2Td/w/WbHKqvKIOFDOkz9KYf0kMGdAwYfASZLApLmZZ8z0eiMi5S8oFXGI7O0QiUKmRgEqeRicdV1dEbiZQQSsB4nYRZBaTlf5gnS2fbX0hBmuXTUuc/f36fhHX8rMiF0QiIVmIylCaKacGIUlYtAPg/Y3Q+4MO9nIZHPTKSVpwRvkRx+eu8W2Sa7VhER/WqNf5kF7p362dc/3tS/AKUf52PnKFyRPbfFTBVjQpBIo6jmCyq9lLLVKsvrV5UEmQrzuuBJUx8DzgTLvd4nC6D6zoR+1pDZoT7yvJMf4sv4nI454hCLblPy4xkbxhiY3DAC8Vo2564vBy5F3jhs+ClZKxKLiET85a6CPSz1hPhO/KyTNHwv1wlbe35EnGKt4ITO5EmOk9dPmgInwiwR/Jek+8ZPGTjl/FC4S/IOCxfd9Dvj8PkXRRJbXUUYJxnlQVvNBftkm+Pkr0vw3pU+mMkJ/W1Cb9inE/rnbX8saC9G6k6X/FlZI3m7YFDlIpBjqasbsXAK53S2R+5vAPf53a04pl11/8jvh5E0Pog/SvZyevweGv8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZb+I6FH6fXxGlj1chKyREBYmtbdrSMgXKaF5GxjmAmcShscPSXz92aChQ2mGuBEp8cpbvLP7sS4biyPIbjEHKSUKVoF1Tf7nVCSojPNbGeOxqjgOGNkYV0NyqPalMUKVsoaqqBIxlEFDGEeU11TJMWzMtzfIGpuVbju94Jc92fqrKM6RMuBYqJUNV1nFEmZ+HralZSv0EMcJ8imJgPsd+v9G994WmjwpMav1yizIPmNZnnC98XcelEDBEES7hJNYv9QOdy5D5fTKliGcpvMUMWU19s12tVqWVXUrSqW4ZhqEbVV3ohIxML9T6t8IYwoBOku26hWhCCUYReUUSVBf4LAmVRjRNUsJn8SeuTd00pGsN1ljDpkMvVP09QI7uTE8HIFOGNDZDZuHsCSaQAsWgDJ+CmnpxXge3toMUUTZJ0pgdrf8NEtAlRMkCQo0VmRXozvd4olz1S8B+QHGUMbKEBzkmC4SBKb0UJmR9T5gYvpApefuVNRM/UkwZ4H9py6W+j1VA109Up02mwPj/6dl+v7ZenlGUQb0xHHcad9fzwY+7jWuMJy0cGg+32XrS7dZyCPvKW1C7dr+tj4d1N1tvRjfD14j1SQhO8zdlzrCzidGPhd265008W1r3o96oG7Tntw9sroc3Q84ff37f3PVWj2njetb6rzJebqYP4fNwE9mv38zV6OeDsUFZWX+seHP60m713F63Pb2f3bVHo+sGSfkmcJL+fNQzVyvHMeKOddd3nxY33HUzW5DBdBTHnZXOmt+6i+DWnn0fza20Un1m/cHdsPae034Oh8KCEvrZeA6YF0s5HkFbuRL9QvxrepESEmqTXNVfSI5iHChX69JKUoufCQIioS+auV3bzbJpmu5V1aratmMarWa1YYm3quOZV9WGV3DQFsURxFZCJ0TGkiy7nZ+vAeLYZ0BDSLVlkuEZMPULj23EkRLQJ7E5EspgkAgW77QrLbdZdq7Mjlc1XcerOG7Ta3nib9lXlYqqPCT8kYomTzikhwxePmDwJ8BkQUDSvJxzJgadcVGSF7TMeGSWlqhEIRMHQSq5WJh6ZZ2ReBGBBKzHSZhFUFrMFnmBdLZ9WhrCLJc+dQb5/vs0veNvRSWETkikApO5NEF0E04cRXaRyOcJe/sJF+4bWUjkNhNl5SnBWySHn96nRY7JblRERr9a/V9mgXunfrb5R0v9C1D6cT12gcIl2QtbnKnimBAkUi+6+YJKL6Vsuczy/rmSIFPhXhc8aep9wJlguc0g+Q1U37nQzzpkdqiPIu/kh/gyPqN9jjjEYtqUfHnGDaMPTN4wArFb1udeXw5CirpxWPNTslYkLiIS8Zd3FexjqSfEPfFYJWn43q4TvvbiiDzFtYITOpUreZxsPhkKnAi3RPBfku47P+XgVPBD4a7IOyxcTNM44/D5F0USW01FGCcZ5UFbzQX7ZJvj5JsF+O9KH9zkhP52Qq/Zpyf0j+59X9BejNSdLvm7skbyccGgyotAjqWmrsWFUwSn0z1yfwO4z+9epWw6rtf5G78fZlL/IP4o2avp8X6o/wE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0724471388233487899</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0724471388233487899</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724441388233484655</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724471388233487899</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>5751F3AE92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>4B51117F92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fe27f9c-7781-4b22-859b-f91192d8f4bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true" id="02e094af-568d-44ec-b459-18519a882ecc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1bafefa1-87f5-40e3-9884-86858efb9953"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE9736041DDD1EE5E0401F0A059945A9:2EE9D062"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0724531388233493663</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>8D51E0FF92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:8D51E0FF92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:8D51E0FF92933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>4E519400A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>326158D0A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:4E519400A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:326158D0A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrc6I6GP6+v4KhH3cwgGiBqc6gYpeztdvjpbcvOzFEzRYSSwLa/fUnwWLV2q57Zjpj8/JenveS580Fh2li+wHnOBOEUS3qtfSfM9ecQSueGfa0Xjcce+oZLoxdY2p606Zj1r2Gda5rEec5jigXkIqWbptW3bBsw3bHlu3bjt+wam6j+ahrtzjj0rVUqZm6tk4Tyv0ybEvPM+ozyAn3KUwx9wXyR8HgypeaPqww6e2LDcoyYNZeCLH0AUC1GCOcJKiGWAouwJ7ORcz9EZlTKPIMv8aMeUt/tV2tVrVVvcayObBN0wSmB6ROzMn8TG9/qYxxHNEZ25y7kDJKEEzIb6hADbBYsFgLkjnLiFikH7i2gGUq1wZeIwNZDj3TwVuAEt2JnvZAZhwafAGtytkQz3CGKcLaZBi19LPTOrixHWeQ8hnLUn5w/jtImBY4YUscG7zKrEJ3uscj5WpfYORHFCU5JwW+VmOyhAhz7SbDM7K+IlwOX8y1sv3amss/Uk0ZRn/Tlguwi1VCB0eq0yNzzMX/6dluvzZebmGS4/YLvLVZN/xuF2nTzYadKHh+BM/N4qtArRLCrvIG1Lbdr+fDYd3O1qvRoAjueg68m4dmf34fhNeDdP5gjh/H86e74P7u67fzhyCcWMVl1jmfWAHJhs3Lu6Lz0CPm7+ix9/i7NwR3jeKfJRHdL0+/SNhvQkCsy0dRLFbT7q/o/vqmkz+MUr4KRk9fv03YyHtxxuuUXGb2IL0J7ufP53DSnIYdArrf++7EvR7YnN5/uRp6jLoDkMEXe8iaq38nrPWW024O+8KKEkb59BdGojqq8Yh6Wl/2C4rP6UVJSGzMSlV/qTiKC0yF3lZWilr8XBIQiX3ZzM3ZCRuW55hmYHv1umOZ3Y4X2PI/z3Gtvhe4FQdtUBxA7DI6IyqWYtnN/HwOEKU+xzTGmVGwHC0w1z/x2IMCahEdysvBKMdjJlncCkMndL2g2++FZrMR1h3X7p97gem6gdfrOLp2zcQP+iMLZgJn+wze2GPwIUZkSbCieTXnXA46F7Ikz7DIRWLVClijOJeLIFNcLE3dBuAkXSZYAQYpi/ME15aLZVkgwDe/tgERL6XDcFzevw/TO/xWVULqxEQpcJVLB8tu4iOryKkS+Thhdzfhyn2Qx0RdM1lWkRG0QbL/6W1a1JhsR0Vm9LM7+mlVuLfqJ5u/twSfgAKH9dgGiguyE7baqXJNSBJpV918hrXnWl4Uedm/c0WQmXQPJE9aYIRRLlnuZcyeMAVbF+CkJbNFfRB5K9/Hl4sFHQkocCqnTSuPJ7wwRpirF0Ykb8v61OfLXkhZN4HX4pism8iHiEL86VsF+UjpSfGN/FmxLH5r1xFfO3FknvJZIQidq5NaJy8fDAVi0i2R/MeyXefHHBwLvi/cFnmLRchpmuYCf/xFU8TW0iFCLKci6umlYJdsS5ziZYn9N6V3bkpCf93Qa/7hhr4fXI0k7aVQ3+qSPysbpBwXhHX1ECixtPS1fHDK4HS+Q+6vAHf53e01LLkh+94f+H0/k/Y78XvJTk0P70P7Pw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrc6I6GP6+v4KhH3cwgGiBqc6gYpeztdvjpbcvOzFEzRYSSwLa/fUnwWLV2q57Zjpj8/JenveS580Fh2li+wHnOBOEUS3qtfSfM9ecQSueGfa0Xjcce+oZLoxdY2p606Zj1r2Gda5rEec5jigXkIqWbptW3bBsw3bHlu3bjt+wam6j+ahrtzjj0rVUqZm6tk4Tyv0ybEvPM+ozyAn3KUwx9wXyR8HgypeaPqww6e2LDcoyYNZeCLH0AUC1GCOcJKiGWAouwJ7ORcz9EZlTKPIMv8aMeUt/tV2tVrVVvcayObBN0wSmB6ROzMn8TG9/qYxxHNEZ25y7kDJKEEzIb6hADbBYsFgLkjnLiFikH7i2gGUq1wZeIwNZDj3TwVuAEt2JnvZAZhwafAGtytkQz3CGKcLaZBi19LPTOrixHWeQ8hnLUn5w/jtImBY4YUscG7zKrEJ3uscj5WpfYORHFCU5JwW+VmOyhAhz7SbDM7K+IlwOX8y1sv3amss/Uk0ZRn/Tlguwi1VCB0eq0yNzzMX/6dluvzZebmGS4/YLvLVZN/xuF2nTzYadKHh+BM/N4qtArRLCrvIG1Lbdr+fDYd3O1qvRoAjueg68m4dmf34fhNeDdP5gjh/H86e74P7u67fzhyCcWMVl1jmfWAHJhs3Lu6Lz0CPm7+ix9/i7NwR3jeKfJRHdL0+/SNhvQkCsy0dRLFbT7q/o/vqmkz+MUr4KRk9fv03YyHtxxuuUXGb2IL0J7ufP53DSnIYdArrf++7EvR7YnN5/uRp6jLoDkMEXe8iaq38nrPWW024O+8KKEkb59BdGojqq8Yh6Wl/2C4rP6UVJSGzMSlV/qTiKC0yF3lZWilr8XBIQiX3ZzM3ZCRuW55hmYHv1umOZ3Y4X2PI/z3Gtvhe4FQdtUBxA7DI6IyqWYtnN/HwOEKU+xzTGmVGwHC0w1z/x2IMCahEdysvBKMdjJlncCkMndL2g2++FZrMR1h3X7p97gem6gdfrOLp2zcQP+iMLZgJn+wze2GPwIUZkSbCieTXnXA46F7Ikz7DIRWLVClijOJeLIFNcLE3dBuAkXSZYAQYpi/ME15aLZVkgwDe/tgERL6XDcFzevw/TO/xWVULqxEQpcJVLB8tu4iOryKkS+Thhdzfhyn2Qx0RdM1lWkRG0QbL/6W1a1JhsR0Vm9LM7+mlVuLfqJ5u/twSfgAKH9dgGiguyE7baqXJNSBJpV918hrXnWl4Uedm/c0WQmXQPJE9aYIRRLlnuZcyeMAVbF+CkJbNFfRB5K9/Hl4sFHQkocCqnTSuPJ7wwRpirF0Ykb8v61OfLXkhZN4HX4pism8iHiEL86VsF+UjpSfGN/FmxLH5r1xFfO3FknvJZIQidq5NaJy8fDAVi0i2R/MeyXefHHBwLvi/cFnmLRchpmuYCf/xFU8TW0iFCLKci6umlYJdsS5ziZYn9N6V3bkpCf93Qa/7hhr4fXI0k7aVQ3+qSPysbpBwXhHX1ECixtPS1fHDK4HS+Q+6vAHf53e01LLkh+94f+H0/k/Y78XvJTk0P70P7Pw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4z8aWbQJ4AjPGhJZeSFMgaZOXjpAX0I2RwZIMya+/kokJEJLSO5MZovVq9+yHzu4lx4vEDULOIRM0ZUav0zR/ExcDRhhbVTIBy0cNbDUuJo7lV13sEOIQjKam0eNcQo9xgZlomq6DPAu5llsfIzdw/aDqVy5878E07iDjyrRSqTimsVkkjAeF26YpMxakmFMeMLwAHggSjMJBP1CaAS4xma3LLcrCYdaaC7EMbJtUYiCQJKRC0oV9aR/oXMY8GNEZw0Jm8OIz5k3z5e56va6svUqazWzXcRzbadhKJ+Z09tlsfSovQ9xj03R7jjBLGSU4oc9YgxqAmKexESazNKNivnjHNLKRo01bsCEWQT77bNqvDgp0Z1o6AJlxbPE5RqWxIUwhA0bAuB32mubn8yq4vTvOMOPTNFvwo/PfQQKWQ5IuIbZ4GVmJ7nyLJ9LVugQS9BhJJKc5XOs2WWIC3LjJYEo3fcpV88XcKMpvbLj6o2WXAfmbslza+1gVdPtEdjp0Blz8n5rt12tr5Q4nElrfHn907f54spJffjorMurUvefJzc+onQ6aBYR95S2oXblfzsfNuuutl0sRuktuo1k+WKN/+OPaqYmbB6jmN7PlHUNPWU32Z3TqX8Fs/Mt5HsVoXvvi5vNuBkltSoeueK5/w/nTsHafePITW7EwD5Ok8d1LontbfmEPD+M17v/or39mE5zeXUREPj+6Mm/Tb/3x7bgL19N6Mnq8Gjpu52Yl8+d1bZC3wZs9fqpHiU9+Ddx2dC9vv95Pv97y5mtM+zEcCktKGMnJv0BEedTt0esYXVUvLD6mFy2hsTUtVIOl5igugAmzpW9pagmkIiAaB6qY27PnXqBqveOEbsPzfORE7Uboqv8afh11G2G95KAtiiOIUcqmVPvSLLvtn48BkkXAgcWQWXkqyRy4+YHFDhbY6LGhehwp4zBOFYuHkeN1qihE3asaQg0/9GtReOG1L+rthuNVkWlcp+I7+56FUwHZIYNXDxh8CIQuKWia133OVaNzoVKywrkUCarkuMJAqkGQaS5WV+tVm9PFMgEN2F6ksUygspwviwTZfPvrWpjwQjq8Ghfv793wjr+VmVA6MdUKXMfSBlVNODGK/DKQ9wOu7wdcmg9lTPUzU2kVGSVbJIefXrtFt8muVVREv6PRb1Ti3qmfff3tTfsDUPZxPnaO4pzuuS1nqhoTikRaZTVXuLKqyDyXRf1qmiAzZd5WPInsERCpWO5pnD4Cs3cm7LOGzA71keed/BCfFHM2EljAQnWbURzP2DBGwPWG0VOvZXPu+nLgUuVNwEackkWJWkQ04g93FRIQrafEN+pnnWbxa7lO2Nrzo+JUa4WgbKZPepw8vdMUJFVmqeK/NNs3fsrAKeeHwl2Sd1iE6qaJFPD+F0MTW9PEhKSSiV7HLAT7ZFvgFE9LCF6V3pgpCP1lQm/4uxP616A/UrS3wOZOl/5Z2aJFuxAw9SJQYGmaG7VwKudstkfuLwD3+b2u2PLK6XYbf+D3w0hab8RvJXs5PX4Prf8A</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0724531388233493663</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0724531388233493663</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724501388233490250</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724531388233493663</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>5E51A400A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>426158D0A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1bafefa1-87f5-40e3-9884-86858efb9953</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true" id="2537f18c-1abc-465b-aa22-db08084629ad"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="56491c9a-a157-45c9-896c-631d06377629"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE967610143F3C71E0401F0A059979D6:30F062AB"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072511388233501253</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>8461B361A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:8461B361A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:8461B361A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>4561B471A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>3961F342A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4B6189B2A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:4561B471A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:3961F342A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4B6189B2A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxljfCEYT2CGW3LchqQBcmleOoq8gBpbIpIMTn59JRMTICSlZyYzROvV7rcXfbsnAqWJG7aFAC4Jo0bUa5q/Jk5w7Me4YflBHSy/inwL1eDBqtZc99itNY69AJlGJEQGERUSUdk03arjWY5rucHYcUPXD2v1iu807k3jBrhQppVKpWoaeZpQERZum2bGaciQICKkKAURShyO2oPzUGmGqMRktk5WKAuHvDWTch7aNq7EgCFJcAWz1D6xt3ROYhGOyJQimXF49RmLpvl6d7lcVpZehfGp7VarVbvasJVOLMj0q9n6Ul6GOKITtjp3EWWUYJSQF6RBDUDOWGy0kynjRM7SD0w7tlPVpi3IsYUdn3417TcHBboDLW2B5AJZYoac0tgQJsCBYjCuh1HT/HpYBVd3xxxRMWE8FTvnf4MEdAEJm0NsiTKyEt3hFvekq3UCOIwoTjJBFnCh22SOMAjjB4cJyc+JUM0XC6Mov5EL9UfKLgP8L2U5sTexKuj2nuz0yBSE/D8126zXysoNSjJo0eTi6NRZzl/6Tn9am4xH+dW9n1/lj3zQLCBsKq9Arcv9et5t1nVvvV66Ae9+hm877PvpfTrqXH334t9HLzd3j9/9587t9TkfxJ1Gr33l/3D7ybd+A9CQDX8+1o68swXr5m3+OOgfsV6QvAzOvvBgeZSMj6+XZ/nFRcbn0cOyvrh/uGDjn92n+OzSSf+b3uHOsPaSuNhzpstZcpPVq+NHDtdX+e9EXLLllIpv7SM+/BI9ZQ3Iksi/JRP322lan18332LajGFbWFLCKHv4DViWR90eUc84VfVC8nN60RISW5NCNZxrjhISqDRb+pamljBTBETiUBVzdfZrx07Hrzttt+F5vlPtdhptV/3X8APntNEOSg5aodiB2GV0QrQvzbKr/vkcIE5DATQGbi1YhmcgzE8s9pBERkSH6nEwKmDMFIsHXdfr1fxavdfrdIO+53WDuhe4Pc9xvHbPbZjGBZOX9JK3JxL4NoPXthh8CJjMCWia130uVKMLqVLyhBaZTJzKAlUoZGoQcM3F6mpQswVJ5wlowHbK4iyBynw2LxJki9WvayEsCumwPy7e34fh7X4rM6F0YqIVhI6lA6qasGcU+WUgHwccbAZcmm9nMdHPTKVVcoJXSLY/vXWLbpN1q6iIfnVHv5wS91r94Ovvb9qfgLJ387F2FC/IhttypqoxoUikVVbzCVWeKtlikRX1q2uC5Mq8rXjSsUeAM8Vyz2P2CNRem7APGjJr1Due1/JtfJmc0ZFEElLVbUZxPGDDGIHQG0akXkt+6Pqy5VLlTUIu98m6iVpENOJPdxUcYq2nxD/Uz5Lx+K1ce2xt+FFxqrVCEjrVJz1Onj9oCsyUWaL4j/FN4/sM7HO+LVwneY1Fqm56yCR8/MXQxNY0EcYsozLqmYVgk2wLnPJ5DuGb0jszBaG/TuhcfDih7wbnI0V7KTLXuuTvyhYp2gWDqReBAkvTzNXCqZzT6Qa5vwLc5PfAV/zuHf+V37cjab0Tv5ds5HT3PbT+AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxljfCEYT2CGW3LchqQBcmleOoq8gBpbIpIMTn59JRMTICSlZyYzROvV7rcXfbsnAqWJG7aFAC4Jo0bUa5q/Jk5w7Me4YflBHSy/inwL1eDBqtZc99itNY69AJlGJEQGERUSUdk03arjWY5rucHYcUPXD2v1iu807k3jBrhQppVKpWoaeZpQERZum2bGaciQICKkKAURShyO2oPzUGmGqMRktk5WKAuHvDWTch7aNq7EgCFJcAWz1D6xt3ROYhGOyJQimXF49RmLpvl6d7lcVpZehfGp7VarVbvasJVOLMj0q9n6Ul6GOKITtjp3EWWUYJSQF6RBDUDOWGy0kynjRM7SD0w7tlPVpi3IsYUdn3417TcHBboDLW2B5AJZYoac0tgQJsCBYjCuh1HT/HpYBVd3xxxRMWE8FTvnf4MEdAEJm0NsiTKyEt3hFvekq3UCOIwoTjJBFnCh22SOMAjjB4cJyc+JUM0XC6Mov5EL9UfKLgP8L2U5sTexKuj2nuz0yBSE/D8126zXysoNSjJo0eTi6NRZzl/6Tn9am4xH+dW9n1/lj3zQLCBsKq9Arcv9et5t1nVvvV66Ae9+hm877PvpfTrqXH334t9HLzd3j9/9587t9TkfxJ1Gr33l/3D7ybd+A9CQDX8+1o68swXr5m3+OOgfsV6QvAzOvvBgeZSMj6+XZ/nFRcbn0cOyvrh/uGDjn92n+OzSSf+b3uHOsPaSuNhzpstZcpPVq+NHDtdX+e9EXLLllIpv7SM+/BI9ZQ3Iksi/JRP322lan18332LajGFbWFLCKHv4DViWR90eUc84VfVC8nN60RISW5NCNZxrjhISqDRb+pamljBTBETiUBVzdfZrx07Hrzttt+F5vlPtdhptV/3X8APntNEOSg5aodiB2GV0QrQvzbKr/vkcIE5DATQGbi1YhmcgzE8s9pBERkSH6nEwKmDMFIsHXdfr1fxavdfrdIO+53WDuhe4Pc9xvHbPbZjGBZOX9JK3JxL4NoPXthh8CJjMCWia130uVKMLqVLyhBaZTJzKAlUoZGoQcM3F6mpQswVJ5wlowHbK4iyBynw2LxJki9WvayEsCumwPy7e34fh7X4rM6F0YqIVhI6lA6qasGcU+WUgHwccbAZcmm9nMdHPTKVVcoJXSLY/vXWLbpN1q6iIfnVHv5wS91r94Ovvb9qfgLJ387F2FC/IhttypqoxoUikVVbzCVWeKtlikRX1q2uC5Mq8rXjSsUeAM8Vyz2P2CNRem7APGjJr1Due1/JtfJmc0ZFEElLVbUZxPGDDGIHQG0akXkt+6Pqy5VLlTUIu98m6iVpENOJPdxUcYq2nxD/Uz5Lx+K1ce2xt+FFxqrVCEjrVJz1Onj9oCsyUWaL4j/FN4/sM7HO+LVwneY1Fqm56yCR8/MXQxNY0EcYsozLqmYVgk2wLnPJ5DuGb0jszBaG/TuhcfDih7wbnI0V7KTLXuuTvyhYp2gWDqReBAkvTzNXCqZzT6Qa5vwLc5PfAV/zuHf+V37cjab0Tv5ds5HT3PbT+AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj07phVvbEWZKEcUjHg6gol+ckKYQbVNIUqz++jcpFgHBw3lnnMFsN7vPXvLsnjMQR5brMYYoxwlRuu2G+gzMmhMadVuzkQW0il0NtUkNOJrjVCdhDdZDO3BUpctYirqEcUB4Q7UMs6yZlmbZI9NyraprGCXLKT+pyj2iTJgWKiVDVbI4IszN3TbUlBI3AQwzl4AYMZdDd+j1blyh6YICk9o8X6HMHdLmjPO5q+uwFCCIogiWYBLr5/qWznnA3CGeEsBTij59Bqyhft59e3srvZVLCZ3qlmEYuuHoQidgeHqqNk+KyyjokjBZnX1AEoIhiPAHkKB6iM+SQPGiaUIxn8UHTJu6aUjTGsqgBs0KOVX1Lwc5uiMtbYGkDGhsBszC2ACFiCICkXI36DbU0+MquLo7ooCwMKEx2zn/GyRElihK5ijQWBFZge54i3vS1TxH0O0SGKUML9GtbJM5gIgpfYpCnN1gJpovYEpefiVj4g8XXYbgv5TlXN/EKqDre7LTxlPE+P+p2Wa9VlbuQZSi5n2QDnu318k14clgcB04i3GSOdQw7+4aOYRN5RWodbk/z7vNuu6tz0sXj96HTUe117ta+njLl23zadovlx/GD+/ddnr1OPRZnPn9bJT9qjp/4ulF5cm/DMbDwdnrZHGmv9HIyvR2/eLjdtE5mV963IkMPHa8Me1cde1RWpsZ4eSVRJbTrgY9srQ58C/hx7zdf7isBcPJ+8v7i+58WDTwZ5fxoH5WyfpPYZA+nLTsBWv100vUu6qWqU498qfxFdNmDNvCghKG6eQFQV4cZXt020pH1Avwn+lFSnCghbmqO5ccxTgiXG3KW5Ja3FQQEA5cUczVuezUzE65YnmC18oV0/BbjmeJ/5yKbXYczy44aIViB6KfkBBLX5JlV/3zM0AYuwyRAFFtmaRwhpj6g8U24EDpkoF4HAlhaJQIFm+Zdt2rWC3f6LS8ltduOZ2qb/nWhe+Vq36rrCq3Cf9NflMv5IhuM3h1i8EHCOI5RpLmZZ8z0eiMi5QswDLlkVlaghJBqRgEVHKxawm+0RmO5xGSgPU4CdIIleazeZ4gna1+LQ1AlksHF6P8/R0Mb/dbkQmhE2CpwGQsLSSqib6NoopbLQI5HLC9GXBh3ksDLJ+ZSCunGK6QbH/66hbZJutWERE9+8Nns8C9Vj/6+veb+g+g9N18rB0FS7zhtpipYkwIEmkW1VyA0qKULpdpXr+6JEgqzOuCJ019iGAqWO59lLwioq9N6EcNmTXqHc9r+Ta+lM/IkAOOYtFtSn48YsMYIiY3jK54Ldmx68uWS5E3jjK+T+ZHYhGRiH/cVaALpZ4Q98XPW0KDr3LtsbXhR8Qp1gqOyVSe5Dh5P9AUMBFmseC/hG4a32dgn/Nt4TrJayxcdNMk5ejwF0USW0MFECYp4d22mgs2yTbHyd/nyP1S+mYmJ/TPCZ2xgxN63LsZCtqLgbrWxX9X1nDeLhCpchHIsTTUTCycwjmZbpD7J8BNfrcrNbNVrpl/4/ftSJrfxN8lGzndfQ/N/wA=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj1UITgKEqCAB3Uu6pfQQyvb0pXKdCZgmDsQOl/31xw4NBXpZ9kiVqCfjmW9mPn/2BcdJbHkdziETNGWaf9nSH90ngmxUrxnkKQwNx7FrxlMUNowaCm2nia1G3Y10zec8B59xgZlo6VYV2QayDMsdIcuzal7VqjgWetC1MWRchpYulaqurZOYca9I29LzjHkp5pR7DCfAPUG8oNO/9qSnh0tMevtii7JImLWnQsw90ySVEAjEMamQNDEvzAOfi5B7AZ0wLPIMXnKGvKW/7F2tVpWVXUmziWlVq1Wz2jSlT8jp5IvePis3Q+izKN2ue5iljBIc099YgeqDmKah1oknaUbFNPkgNDJRVYU2YE0Mghz2RTdfExToTox0ADLj2OBTjMpgQ4ggA0ZAuxv6Lf3LaRPc7h1lmPEozRJ+tP47SMCWEKdzCA1eVlaiOz3iO+1qXwDxfEbinNMl3CiazDEBrt1mENH1NeWSfCHXivFray7/aMkyIH8zlgtzH6uEbr7TnUs6AS7+z8z257WNMsZxDu270fnPq/Pxj/B5Zp1fj93NHRvYDHWgumoVEPadt6B2435ZH5N1x62XTXgw+HY/Ok/xfPXv96ETPNR+NXhvY4qk1ri3Iug/1+pd8tAPxjhF9oOf/OK39d7AuofBIO8nwwj3r27s+dhc/KBnA3ksN6TR451xuoouB7M8hmh8hb4+f00WT264CQIUofMZ/LxbMO788jtX67sr+I6HCfqNLPd2Zt9aPeY3YJGend8H9/Fs2AjocN6ccWwP/2m91rRfw6GxlIQgf5oBEeVS0cO/1L7JeWHxubwoCw2NqHD15kqjuAAm9LbapaTFy2WlNPTkMLdrp1tHbrNrdaymbTuo2us2O5b8r+m46Fuz45YatEVxBLGXsoiqXEplt/z5HCBJPA4shMxYpjmZAtc/iXiJBdZ8NpSHI2UcRqlU8S5yGjWJsN6ru7bbbTidetN1uqiKUN2yHVfXblIxYIOsEwnIDhW8dqDgQyB0TkHJvOI5l0TnQrZkgZe5iFFliSsMcnkRZEqLPctxayanyTwGBdhM0lBypDKfzosGmXz7axmY8MI6/Doqzt+H5R1/KzshfUKqHLiqpQtymvDmKnK8WlnIxwW7+wWX4Tt5SNUxk20VGSVbJIefXtmiaLKjiqzosRc8ohL3zv3k7W93mp+AMo/7sUsULule2vJOldeEFJF2Oc0Friwq+XKZF/NrKIHMZHhT6iQyAyC5VLnNKH0GZu5CmCddMjvUR5l39kN8uZiyQGABiWSbVixPeGEEwNULw5enZX3q8+UgpeybgLV4z9aL5UNEIf70rUI8ovyk+Vb+rNIsfB3XO7H28sg65bNCUDZRK3WdbD4gBUllWCr1L832g78X4L3kh8Zdk3dYhGTTUy7g4y+aEraWjglJcyb8S70w7IttgVNs5uC9Or0JUwj6yw295h/e0Pf960DKXoL1nS/9s7NBC7oQ0NVDoMDS0tfywSmTs8meuL8A3Nd316mjrl1Hf9L3w0rab8xvLXs9PT4P7f8A</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072511388233501253</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072511388233501253</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0724561388233496222</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0724591388233499460</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072511388233501253</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>5561C471A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>49610442A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>5B6199B2A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56491c9a-a157-45c9-896c-631d06377629</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true" id="55286ce4-495b-4543-b78b-c9680d7e9b6b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ecb894c9-ae61-472f-a249-99614f8686d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173BA929775E0401F0A07995A24:BD90B965"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072591388233509311</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9D618753A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9D618753A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9D618753A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5E612863A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>42716234A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">547119A4A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5E612863A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:42716234A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:547119A4A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQG5ckKkgJbLf0vkC7bV8q4wzEp4mTxg4N/fVrh4YCvSx7pErUk/HMNxd/M4cMJbHl+YxBzklKleGgqz4ge2ZbtgGaO511tGbYnmrTJjhau2U6Lp52UNvAqjJkrIAhZRxR3lUtw7Q109IsZ2JantXyjFbDdJx7VbmBnAnTQqVhqEqZxJR5lduuWuTUSxEjzKMoAeZx7I398zNPaHqoxqT2DlcoK4d5L+I883QdN0LAEMe4gdNEP9S3dA5D5o3JnCJe5PDqM2Rd9fXu8/Nz49lupPlctwzD0A1XFzohI/MDtfetvgzhkM7S1bmPaEoJRjF5QRLUOfAoDRU/nqc54VHyiWlTNw1pWoMSa9hs0gNVf3NQodvT0hbInCGNRcisjY1gBjlQDMr1aNhVD/ar4OruJEeUzdI8YTvnf4MEdAFxmkGosTqyGt3+Fj9IV+8QsDekOC4YWcCFbJMMYWDKVQ4zUp4RJpovZEpVfqVk4o/UXQb4X8pyqG9iFdD1D7IzIHNg/P/UbLNeKys3KC6gN0W/7yK9GePbJAgwWJPO9Pg4nsxvw7RbQdhUXoFal/v1vNus6956vQTzy6j4WS76k6dH+9epYcSXjyOfZsXSjvPHQXKzyI4LwO4guM0uyMvvq+n3sPze+XV2XYYnLIja98uf0cn4pbw7Cb5dJadZRtxpaJyQJJ+OwBrbJfx8SqPgWDeXRie4m7kODefk0inyi3knOj9vn9qZ34aLpT9fXvXHV35wT8fGvf/NerLzBZTp49mgP7k3Rh39uvsW02YM28KaEsbF9D/AvD7K9hgOlCNRL8S/phcpIaE2q1S9THIU40C52pO3JLV4hSAgEnqimKtz60fbtJy27VuubTdNox+4viX+c5uOeeT6Ts1BKxQ7EPspnRHpS7Lsqn++BogTjwENIdcWaYEjYOoXFgeII2VIR+JxpJTBJBUs7thB+8g+MlxXAPcHbtMNHNsIWm23aQeGFajKRcov6WXuzzjk2wze2mLwEWCSEZA0L/uciUZnXKTkCS0KHpuNBWpQKMQgyCUXe1bTaemMJFkMErCepGERQyOLsipBOlv9WhrCrJKOfkyq9/dpeLvf6kwInZBIBSZjCUBUE96NoqbXqgP5PGBnM+DavF+ERD4zkVaeE7xCsv3prVtkm6xbRUT00B8/mDXutfre19/f1L8Ape/mY+0oXJANt/VMFWNCkEivruYTajw1isWiqOrXkQSZC/O64ElTHwMuBMstJ+kjUH1tQt9ryKxR73hey7fxFTyiY444JKLblOq4x4YxBiY3jKF4LeW+68uWS5E3DiX/SNaPxSIiEX+5q2APSz0hvhI/z2kevpXrA1sbfkScYq3ghM7lSY6T5SdNgVNhlgj+S/NN4x8Z+Mj5tnCd5DUWLrppWnD4/Isiia2rIozTgvLhQK0Em2Rb4eTLDLw3pXdmKkJ/ndAl+3RC356fjQXtJUhd65K/K2ukahcMqlwEKixdtRQLp3BO5xvk/gpwk9/dQdt0Oq2/8vt2JL134veSjZzuvofeHw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQG5ckKkgJbLf0vkC7bV8q4wzEp4mTxg4N/fVrh4YCvSx7pErUk/HMNxd/M4cMJbHl+YxBzklKleGgqz4ge2ZbtgGaO511tGbYnmrTJjhau2U6Lp52UNvAqjJkrIAhZRxR3lUtw7Q109IsZ2JantXyjFbDdJx7VbmBnAnTQqVhqEqZxJR5lduuWuTUSxEjzKMoAeZx7I398zNPaHqoxqT2DlcoK4d5L+I883QdN0LAEMe4gdNEP9S3dA5D5o3JnCJe5PDqM2Rd9fXu8/Nz49lupPlctwzD0A1XFzohI/MDtfetvgzhkM7S1bmPaEoJRjF5QRLUOfAoDRU/nqc54VHyiWlTNw1pWoMSa9hs0gNVf3NQodvT0hbInCGNRcisjY1gBjlQDMr1aNhVD/ar4OruJEeUzdI8YTvnf4MEdAFxmkGosTqyGt3+Fj9IV+8QsDekOC4YWcCFbJMMYWDKVQ4zUp4RJpovZEpVfqVk4o/UXQb4X8pyqG9iFdD1D7IzIHNg/P/UbLNeKys3KC6gN0W/7yK9GePbJAgwWJPO9Pg4nsxvw7RbQdhUXoFal/v1vNus6956vQTzy6j4WS76k6dH+9epYcSXjyOfZsXSjvPHQXKzyI4LwO4guM0uyMvvq+n3sPze+XV2XYYnLIja98uf0cn4pbw7Cb5dJadZRtxpaJyQJJ+OwBrbJfx8SqPgWDeXRie4m7kODefk0inyi3knOj9vn9qZ34aLpT9fXvXHV35wT8fGvf/NerLzBZTp49mgP7k3Rh39uvsW02YM28KaEsbF9D/AvD7K9hgOlCNRL8S/phcpIaE2q1S9THIU40C52pO3JLV4hSAgEnqimKtz60fbtJy27VuubTdNox+4viX+c5uOeeT6Ts1BKxQ7EPspnRHpS7Lsqn++BogTjwENIdcWaYEjYOoXFgeII2VIR+JxpJTBJBUs7thB+8g+MlxXAPcHbtMNHNsIWm23aQeGFajKRcov6WXuzzjk2wze2mLwEWCSEZA0L/uciUZnXKTkCS0KHpuNBWpQKMQgyCUXe1bTaemMJFkMErCepGERQyOLsipBOlv9WhrCrJKOfkyq9/dpeLvf6kwInZBIBSZjCUBUE96NoqbXqgP5PGBnM+DavF+ERD4zkVaeE7xCsv3prVtkm6xbRUT00B8/mDXutfre19/f1L8Ape/mY+0oXJANt/VMFWNCkEivruYTajw1isWiqOrXkQSZC/O64ElTHwMuBMstJ+kjUH1tQt9ryKxR73hey7fxFTyiY444JKLblOq4x4YxBiY3jKF4LeW+68uWS5E3DiX/SNaPxSIiEX+5q2APSz0hvhI/z2kevpXrA1sbfkScYq3ghM7lSY6T5SdNgVNhlgj+S/NN4x8Z+Mj5tnCd5DUWLrppWnD4/Isiia2rIozTgvLhQK0Em2Rb4eTLDLw3pXdmKkJ/ndAl+3RC356fjQXtJUhd65K/K2ukahcMqlwEKixdtRQLp3BO5xvk/gpwk9/dQdt0Oq2/8vt2JL134veSjZzuvofeHw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIHZKoIHFpe9gt3ZZQ2t2XyjgOuCR2iB2g/fVrh4YCvSx7pErUk/HMNxd/M2cMpIkVtBlDOceUKP1eU32MbXNi2L6nNdxJQ3Mc09EmdQtqfuwjH1hgAjxLVfqMFahPGAeEN1XLMG3NtDTLG5lWYLmB4dUs3/itKmOUM2FaqNQMVVmnCWFB6bapFjkJKGCYBQSkiAUcBmF7cBUIzQBUmNTW2QZl6TBvzTjPAl2HtQhBlCSwBmmqn+l7OmcRC0I8JYAXOXr1GbGm+np3tVrVVnaN5lPdMgxDN3xd6EQMT0/U1rfqMor6JKabcxcQSjAECX4BEtQA8RmNlHYypTnms/QT06ZuGtK0htZQg6ZDTlT9zUGJ7khLeyBzBjQ2A2ZlbIhilCMCkXI37DfVk+MquLk7ygFhMc1TdnD+N0iILFFCMxRprIqsQne8xQ/S1TpDMOgTmBQML9G1bJMMQMSUmxzFeH2FmWi+iCll+ZU1E3+46jIE/6UsZ/ouVgFd/yA7PTxFjP+fmu3Wa2NlDJICtR6Kl8b04fRyPp96s98/6vxXmIHzBESDQbOEsKu8AbUt9+v5sFm3vfV6adRNF3Q9PP0Or+ltZtJsFU6GOrfDwkyujWj8kI6fxqDRfroEV4vu3Xw5Ng2bTe5ufad+MTVof3kzbiyyztXAqX+L50n63ACXSXrtLuiPxSQMjZeV6XeI9+TOYDzq8d5/89HIskkWeendYNaZDVed6NT+dWkvbu6Tc+8+dr67d8/16BuaL63pJFzFt3Qynd+DW7fffItpN4Z9YUUJYTF5QpBXR9ke/Z5yIeoF+Nf0IiU40uJSNcgkRzGOCFdb8paklqAQBISjQBRzc3ashlm3bKdt+bbtmEa347ct8Z/veOaF3/YqDtqgOIDYpSTG0pdk2U3/fA0QpgFDJEK5tqQFnCGmfmGxBzhQ+mQoHgclDI2oYPH2Rcfp2ka93vDP3Z55bhjdhuAE32q7Tte1XVW5pvwn+Zm3Y47yfQZ39xh8iCDOMJI0L/uciUZnXKRkAZYFT8zaEtQIKsQgyCUXB5bjuTrDaZYgCVhPaVQkqJbNsjJBOtv8WhqArJQOz0fl+/s0vMNvVSaEToSlApOxdJCoJno3ipzArQL5PGBvN+DKfLuIsHxmIq08x3CDZP/TW7fINtm2iojosRs+mhXurfrR19/f1L8ApR/mY+soWuIdt9VMFWNCkEirquYC1Ba1Yrksyvo1JEHmwrwueNLUQwQLwXLPIzpHRN+a0I8aMlvUB5638n18BZ+RkAOOUtFtSnk8YsMIEZMbRl+8lvWx68ueS5E3jtb8I1k3EYuIRPzlrgIDKPWE+Eb8rGgevZXrA1s7fkScYq3gmEzlSY6T50+aAlJhFgv+o/mu8Y8MfOR8X7hN8hYLF900KTj6/Isiia2pAghpQXi/p5aCXbItcfLnDAVvSu/MlIT+OqHX7NMJ/TC4CgXtpUDd6uK/K2u4bBeIVLkIlFia6losnMI5me6Q+yvAXX73e3XTa7j23/h9P5LWO/F7yU5OD99D6w8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4z8ZXbp7ADOHSkhst0CT0pSPkBdQYyZFkA/31RzIxAUJSemY8Y2u92v32ok97IdAy9sKWEMAlYdTodxrmrwgiHwV+YOFyvWKpj5pVBwRWrQ54Wnaj+jQqm0ZfiBT6VEhEZcP0HNe3XM/yamPXC71y6Dolt+L+NI174EKZViolxzTWy5iKMHfbMFNOQ4YEESFFSxChxOGodXsTKs0QFZjM5sUWZe6QNxdSJqFt41IEGOIYlzBb2hf2gc5FJMIRmVMkUw4vPiPRMF/2rlar0sovMT63PcdxbKduK51IkPlns/mp2AxRn87Ydt1GlFGCUUz+IA3qFuSCRUYrnjNO5GL5jmnXdh1t2oI1trAb0M+m/eogR3empQOQXCBLLJBbGBvCDDhQDMaPYb9hfj6vgtu9Y46omDG+FEfrf4MENIOYJRBZooisQHe+xRPpal4ADvsUx6kgGdzpNkkQBmF84zAj6xsiVPNFwsjLb6yFekjRZYD/pSwX9j5WBd0+kZ0OmYOQ/6dm+/XaWrlHcQrN0WzZ/3F/TWYuW5Ev/HH4vdJOq16vJrqNHMK+8hbUrtwv6+Nm3fXWy6aW7z6JoXx6im7Kdx3iRJNx+yGz4UfmT5Ph5OsXtpx+jbg3aW/syRi+TTf85vpr5+7LtOrPB1eD2cTn88z5Xb1aLz5dxcnPnp/WNvdDUp2xAR1nzPaq9ex5Ngjmt/Ydr9D591XX4y6vZhu2uIORv0YP0ZSMJ17yGPx+dK6TYTwM/rQ/lS+vHr73u/jGm0SjOXm4HASN15j2YzgUFpQwSqe/Actiqduj3zF6ql5IfkwvWkIia5arhonmKCGBSrOpd2lqCVNFQCQKVTG363JQdd16K2h5dd8PXKd9WW956qse1NxevVUrOGiL4ghim9EZ0b40y27752OAeBkKoBFwK2MpXoAwP7DYQRIZfTpUh4NRAWOmWPyy1+tWWo7vl72yU+253XY36PUuAxVF16u0q6Zxx+SADnhrJoEfMnj5gMGHgElCQNO87nOhGl1IlZJnlKUydksZKlFI1UXANReHXlAr24Iskxg0YHvJojSGUrJI8gTZYvv2LIRFLh12x/n5eze8439FJpRORLSC0LFcgqomnLiKnCKQ9wOu7QdcmG+lEdHHTKVVcoK3SA5/vXaLbpNdq6iIfrVHv9wC90797O1vd9ofgLKP87FzFGVkz21xp6prQpFIs6jmMyo9l9IsS/P6VTVBcmXeVjzp2iPAqWK5zZg9AbV3JuyzLpkd6iPPO/khvlQu6EgiCUvVbUa+PGPCGIHQE0ZfnZb1uePLgUuVNwlreUrWjtUgohF/OKvgEGs9Jf6mXivGo9dynbC150fFqcYKSehcr/R1snmnKTBTZoniP8b3jZ8ycMr5oXCX5B0Wqbppmkp4/4+hia1hIoxZSmW/Y+aCfbLNccpNAuGr0hszOaG/3NBr8e4N/Xh7M1K0t0TmTpf8XdkiebtgMPUgkGNpmGs1cCrndL5H7i8A9/m93qm4tWrZ/xu/H0bSfCN+K9nL6fF5aP4H</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072591388233509311</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072591388233509311</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072541388233504169</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072571388233507368</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072591388233509311</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6E612863A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>52717234A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>647119A4A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ecb894c9-ae61-472f-a249-99614f8686d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true" id="b84c42ac-dbb6-41bb-a56e-f99656cbf7bf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="afdda972-24e0-4276-b0d1-143c8ca932f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9736041E8E1EE5E0401F0A059945A9:511A0F17"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0725181388233518734</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>A671F235A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:A671F235A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:A671F235A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>6771AD45A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>5B71D866A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AD71F9F6A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:6771AD45A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:5B71D866A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:AD71F9F6A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb6M6EH7fX4HYx4hwbwA1kXJpVc626Sqk3W5fKteY4BywU2wS0l9/bFLSJE272SMhgYfxzDcXf55zBvLMCvqMoYJjSpRw1FWffNcxO8+mo8Ezy9McaJ5pHvLFV9zxHRcA34S2qoSMlSgkjAPCu6plmLZmWprlTU0rsNzAtNuWZz2qyj0qmDAtVNqGqlR5RlhQu+2qZUECChhmAQE5YgGHQdS/uQ6EZgAaTGrvfIOydlj0Us4Xga7DdowgyjLYhjTXz/U9nfOYBRGeEcDLAr35jFlXfdu7Wq3aK7tNi5luGYahG74udGKGZ9/V3rdmM4pDktDNeggIJRiCDL8CCeoG8ZTGSj+b0QLzNP/EtKmbhjStoQpq0HTId1V/d1CjO9HSHsiCAY2lwGyMTVCCCkQgUu4mYVf9floFN3unBSAsoUXODtZ/BwmRJcroAsUaayJr0J1u8Ui6eucIBiGBWcnwEo1lmywAREz5WaAEV9eYieaLmVKXX6mYeHDTZQj+TVnO9V2sArp+JDsjPEOM/5+a7dZrY+UeZCXqTfz1oxv9nq8iv7q3cT5xluWF3mrdwptuDWFXeQNqW+639WGzbnvrbdMd9Ybe1PaTYUXL64d7ZzKaX8Xrko4fFvwXsufGP+w3SBedyhkkcz28ujqz8mx9PR1cdVbTNG+tWvH9r6SqvMfoW2teTXjktwxspn1m30arF79/F2X3abGoLv3x8rG8if3LfPAjZOkqMWcXg6RVpNA1xpzSyTyij68XyIvuQvL8bfzLHV610Ev1Sr3sMVmP1xfd95h2Y9gXNpQQlc9zBHmzlO0RjpRLUS/Av6YXKcGxltSqwUJyFOOIcLUnd0lqCUpBQDgORDE367NOx+yPHLdv+bbtmMZw4Pct8eU7nnnp972GgzYoDiAOKUmw9CVZdtM/XwOEecAQiVGhLWkJU8TULyyOAAdKSCbicFDC0JQKFh95rjUYur4rmNm3nZHv20Pr0jNcx7c6g86ZqowpvyW3RT/hqNhncHePwScI4gVGkuZlnzPR6IyLlLyAZckzs70EbYJKcREUkosDy/FcneF8kSEJWM9pXGaovUgXdYJ0tnlbGoCslk4upvX5+zS8w39NJoROjKUCk7EMkKgmOnIVGU0gnwfs7QbcmO+XMZbHTKSVFxhukOz/eu8W2SbbVhERPQ2jJ7PBvVU/efvHnfoXoPTDfGwdxUu847a5U8U1IUik11TzBbRf2uVyWdb160iCLIR5XfCkqUcIloLl1lP6LyL61oR+0iWzRX3geSvfx1fylEQccJSLblPq5QkTRoSYnDBCcVqqU8eXPZcibxxV/JhsmIlBRCL+claBAZR6QvxTvFa0iN/LdcTWjh8RpxgrOCYzuZLXyfqTpoBUmMWC/2ixa/yYgWPO94XbJG+xcNFNzyVHn/9RJLF1VQAhLQkPR2ot2CXbGidfL1DwrvTBTE3obzd0xT69oR9uriNBezlQt7r4z8oartsFIlUOAjWWrlqJgVM4J7Mdcn8DuMvv/bOOeWnZf+T3/Uh6H8QfJTs5PTwPvf8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb6M6EH7fX4HYx4hwbwA1kXJpVc626Sqk3W5fKteY4BywU2wS0l9/bFLSJE272SMhgYfxzDcXf55zBvLMCvqMoYJjSpRw1FWffNcxO8+mo8Ezy9McaJ5pHvLFV9zxHRcA34S2qoSMlSgkjAPCu6plmLZmWprlTU0rsNzAtNuWZz2qyj0qmDAtVNqGqlR5RlhQu+2qZUECChhmAQE5YgGHQdS/uQ6EZgAaTGrvfIOydlj0Us4Xga7DdowgyjLYhjTXz/U9nfOYBRGeEcDLAr35jFlXfdu7Wq3aK7tNi5luGYahG74udGKGZ9/V3rdmM4pDktDNeggIJRiCDL8CCeoG8ZTGSj+b0QLzNP/EtKmbhjStoQpq0HTId1V/d1CjO9HSHsiCAY2lwGyMTVCCCkQgUu4mYVf9floFN3unBSAsoUXODtZ/BwmRJcroAsUaayJr0J1u8Ui6eucIBiGBWcnwEo1lmywAREz5WaAEV9eYieaLmVKXX6mYeHDTZQj+TVnO9V2sArp+JDsjPEOM/5+a7dZrY+UeZCXqTfz1oxv9nq8iv7q3cT5xluWF3mrdwptuDWFXeQNqW+639WGzbnvrbdMd9Ybe1PaTYUXL64d7ZzKaX8Xrko4fFvwXsufGP+w3SBedyhkkcz28ujqz8mx9PR1cdVbTNG+tWvH9r6SqvMfoW2teTXjktwxspn1m30arF79/F2X3abGoLv3x8rG8if3LfPAjZOkqMWcXg6RVpNA1xpzSyTyij68XyIvuQvL8bfzLHV610Ev1Sr3sMVmP1xfd95h2Y9gXNpQQlc9zBHmzlO0RjpRLUS/Av6YXKcGxltSqwUJyFOOIcLUnd0lqCUpBQDgORDE367NOx+yPHLdv+bbtmMZw4Pct8eU7nnnp972GgzYoDiAOKUmw9CVZdtM/XwOEecAQiVGhLWkJU8TULyyOAAdKSCbicFDC0JQKFh95rjUYur4rmNm3nZHv20Pr0jNcx7c6g86ZqowpvyW3RT/hqNhncHePwScI4gVGkuZlnzPR6IyLlLyAZckzs70EbYJKcREUkosDy/FcneF8kSEJWM9pXGaovUgXdYJ0tnlbGoCslk4upvX5+zS8w39NJoROjKUCk7EMkKgmOnIVGU0gnwfs7QbcmO+XMZbHTKSVFxhukOz/eu8W2SbbVhERPQ2jJ7PBvVU/efvHnfoXoPTDfGwdxUu847a5U8U1IUik11TzBbRf2uVyWdb160iCLIR5XfCkqUcIloLl1lP6LyL61oR+0iWzRX3geSvfx1fylEQccJSLblPq5QkTRoSYnDBCcVqqU8eXPZcibxxV/JhsmIlBRCL+claBAZR6QvxTvFa0iN/LdcTWjh8RpxgrOCYzuZLXyfqTpoBUmMWC/2ixa/yYgWPO94XbJG+xcNFNzyVHn/9RJLF1VQAhLQkPR2ot2CXbGidfL1DwrvTBTE3obzd0xT69oR9uriNBezlQt7r4z8oartsFIlUOAjWWrlqJgVM4J7Mdcn8DuMvv/bOOeWnZf+T3/Uh6H8QfJTs5PTwPvf8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrc6o8EP7eX8HQj+8ggsELU51BqR577E2tvXzppCFIWgxIgrdffxIUq9b2eN6Zztgsm91nL3l2LxichKbtMIYTTiKqdN26+lqCZWiUfaRBywMaADWgwZJlaQYA0DcA8syipSpdxlLcpYxDyuuqWTRKmmFqZnVomLZp2UalUK5WXlRlhBMmTAuVQlFVFpOQMjtzW1fThNoRZITZFE4wszmyB851zxaaNswxqY2LNcrMYdIIOI9tXUcFDyMchqiAool+oe/pXHjMHpAxhTxN8Manx+rq5u58Pi/MS4UoGetmsVjUizVd6HiMjM/Vxll+GXtd6kfrcwvSiBIEQ7KCEtQ15kHkKU44jhLCg8k3pg3dKErTGl4gDRmAnqv6p4MM3YmW9kAmDGosgEZurI99nGCKsPLQ79bV89MquL47TCBlfpRM2MH53yBhOsNhFGNPY3lkObrTLR5JV+MCI7tLUZgyMsM3sk1iiDBT7hLsk0WPMNF8HlOy8isLJv5I3mUY/UtZLvRdrAK6fiQ7Lhljxv9PzXbrtbYygmGKG8AJ/nvzV/GSXbplnSdBgC6rL7f9zrtTzyDsKq9Bbcu9OR8267a3NpfuVvy+83j5qzO7v6q41qR2BZ661mpUTsGqYxKn+uGbNTAf8JeH6QMajSqzahy8ly87H4A8PxmjxzcveLxBN07wdH/Wrfxe/ALLeDkOp3eDFW9Ow87qqjnDz8YSwA6Yd9zgeZjc9eDwvvoW8QV/6Vy9rHxQYw8vqPcc8F7Zmfd/+25NPwst5PBpCEqXV3r7fknao+f6Z0y7MewLc0oYpG/vGPH8KNuj6yptUS/If6YXKSGe5meqdiw5inFMudqQtyS12KkgIOLZopjrs9WsGG61XHbMWqkEjGKrWXNM8V8NVI12zanmHLRGcQCxFVGfSF+SZdf98zNANLEZph5OtFmUogAz9QeLLuRQ6dK+eBwRZXgYCRYHTWBaFQcA4BZrJaNUarsOaLbMptVuuUazpCo3Eb+lt4njc5zsM7i1x+B9jEhMsKR52edMNDrjIiVTOEt5aBRmsEBxKgZBIrnYNkHV0hmZxCGWgPVJ5KUhLsRBnCVIZ+tfU4OIZdL+5TB7f9+Gd/gtz4TQ8YhUYDKWJhbVxEdGUTEP5PuAq7sB5+ad1CPymYm08oSgNZL9T5/dIttk2yoiotfW4NXIcW/VT77+9ab+Ayj9MB9bR96M7LjNZ6oYE4JEGnk1p7AwLaSzWZrVryIJMhHmdcGThj7AKBUstxxGH5jqWxP6SUNmi/rA81a+jy/lAR1wyPFEdJuSHU/YMAaYyQ2jK17L4tT1Zc+lyBvHC35M1grFIiIR/7irIBtJPSG+Ez/zKPE+y3XE1o4fEadYKzihY3mS42T5TVOgSJglgv+iZNf4MQPHnO8Lt0neYuGim95Sjr//okhiq6sQoSilvOuqmWCXbDOcfBlj+1Ppi5mM0DcTesG+ndBP172BoL0JVLe65O/KGsnaBWFVLgIZlrq6EAuncE7HO+S+AbjL7065YrTNkvU3ft+PpPFF/FWyk9PD99D4Aw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+JKEH73V6Ti41bIDUhICVUB5BhX0BXkqC/WOGnCaDLBzITL/vozEwwCosueKqtwOj3dX1/m6z5jKIktz2cMMk5SqgTdpvpkN1xcnYQ1bVJFoFUbyNFQ3bU1qNZw3XLCeogMVQkYyyGgjCPKm6plmLZmWprljkzLs2qeZVQMu/6oKmPImDAtVCri1jKJKfMKt001z6iXIkaYR1ECzOPYG/r9K09oeqjEpLbO1igLh1lryvnM03VcCQFDHOMKThP9TN/ROQuZNyQRRTzP4N1nyJrq+93FYlFZ2JU0i3TLMAzdaOhCJ2QkOlVbJ+VlCAM6SdfnDqIpJRjF5DeSoPrAp2mo+HGUZoRPky9Mm7ppSNMaLLGGzSo9VfUPBwW6Iy3tgMwY0tgUmaWxW5hABhSDcncbNNXT4yq4vjvKEGWTNEvY3vnvIAGdQ5zOINRYGVmJ7niLB9LVOgPsBRTHOSNzGMg2mSEMTLnJYEKWV4SJ5guZUpRfWTLxR8ouA/w3ZTnTt7EK6PqB7HRJBIz/n5pt12ttZYziHFrn9w3L7L/cmSheDH79DB5+OrdXfoavuotmAWFbeQ1qU+73836zbnrr/dLzRe0h/fUYXeBle5i8XUapwYIHy7evX+2bx8tRxxiMX9B5f5Tns4Gbo3H43L2PxmA/tCmurpKLZzJo9++6L2Oan9BO5NyN3dd8vLr5J7gep9N8Ffc6gxs8aUT6D78dDcP6/Q/XX8HDYG4Ox29v13Nqxzh66D0O+s5gcuf2jMV0Af92TsLB3aVpDKmTTqGPnnOinzc/YtqOYVdYUsIwf34BzMujbI+gq/REvRD/nl6khITapFD1ZpKjGAfK1Za8JanFywUBkdATxVyf/a5j9hq9um81bLtqGp12w7fEf42qK+S+W3LQGsUexE5KJ0T6kiy77p/vAeLEY0BDyLR5muMpMPUbi13EkRLQW/E4UspglAoWd51626w7vt92G5Zd67Wd88a55fhOvV5vGLapKoOUX9PrzJ9wyHYZvLbD4LeAyYyApHnZ50w0OuMiJW9onvPYrMxRhUIuBkEmudizqm5NZySZxSAB60ka5jFUZtNZkSCdrX8tDWFWSG/PR8X7+zK8/W9lJoROSKQCk7G0QVQTDowiswzk64Dd7YBL834eEvnMRFp5RvAaye6nj26RbbJpFRHRU2f4ZJa4N+pHX/98U/8GlL6fj42jcE623JYzVYwJQSKtsppvqPJWyefzvKifIwkyE+Z1wZOmPgScC5ZbjdJXoPrGhH7UkNmg3vO8ke/iy/mUDjnikIhuU4rjERvGEJjcMALxWpbHri87LkXeOCz5IVknFouIRPztroI9LPWE+Eb8LNIs/CjXAVtbfkScYq3ghEbyJMfJ6oumwKkwSwT/pdm28UMGDjnfFW6SvMHCRTc95xy+/qJIYmuqCOM0pzzoqoVgm2wLnHw1A+9D6ZOZgtDfJ/SSfTmh7/tXQ0F7CVI3uuTPyhop2gWDKheBAktTXYqFUzin0Ra5vwPc4fe64HfBlH/i991IWp/EnyVbOd1/D63/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0725181388233518734</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0725181388233518734</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0725111388233511902</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0725161388233516359</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0725181388233518734</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>7771BD45A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>6B71D866A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>BD710AF6A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afdda972-24e0-4276-b0d1-143c8ca932f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true" id="beea9b80-daac-4c3f-87f0-2dab2a413362"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="88f49054-754c-4752-9b1a-9038714352dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE9736041EC81EE5E0401F0A059945A9:77B65544"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0725291388233529326</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>FF710397A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FF710397A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:FF710397A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>B08181B7A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>A481BD19A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F681BC89A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:B08181B7A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:A481BD19A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F681BC89A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn9/GmtGmBlo4wA1QUT0XB806/OCHdQrSktUkB/evfpFgERI97Z5gp2Wx2n/2RZ3PE8Sy2/TbnkAmaMK0fNPUHNHbcqhfVDcvFkVFFtYYxhnHdqI6RJ7fsmuVUda3PeQ59xgVmoqnbFnIMZBu2d4Ns3675tlOx6va9rt1CxqVpqVKxdG05ixn3C7dNPc+Yn2BOuc/wDLgviD9qX5z7UtPHJSa9dbRCWTjMWlMhUt80SSUEAnFMKiSZmUfmls5RyP0RnTAs8gzefIa8qb+dXSwWlYVTSbKJaVuWZVoNU+qEnE6+661v5WEI+yxKVusuZgmjBMf0FStQFyCmSai140mSUTGdfWIamchSpg1YEoOgKvuum+8OCnQHWtoCmXFs8ClGpbEhRJABI6D9Gvab+vfDKrg6e5NhxqMkm/Gd9b9BAjaHOEkhNHgZWYnucIt70tU6AuL3GYlzTudwqdokxQS4dpVBRJfnlMvmC7lWlF9bcvmjZZcB+ZeyHJmbWCV0c092AjoBLv5PzTbrtbJyi+McWr3G4BRdB/fBAlg6WQ4W8/ooTZ4e706OmwWETeUVqHW539a7zbrurbdD1ymqOelgQOfB9ajnchc7V/ePwTO9fRqc4vrlH6/92LtyL6OzGu/8JKP70wA7pnVLavPx5Y39FD26J+OTTiN5PaffWL3/ygK312lH0Wn1bvH71K0eg4nMHz+GHu60g+7J4NdkfvnKo/G5ffJjWLdwevUo6OCu+1JLs/FvN76/vYbfORp+ww0mQrt3xmadk8nPMxaEx833mDZj2BaWlDDKx49ARLlU7dEPtJ6sFxZf04uS0NCIClU/VRzFBTCht9QpRS1+LgmIhr4s5mrdsTzkoY7bthuOU0VWt9No2/Jfo+qhXqPtlRy0QrEDsZuwiCpfimVX/fM1QDLzObAQMmOe5GQKXP/CYoAF1vpsKC9HwjjcJJLFj10UoGqt7fYC27a8htXxvKDuOW7Pa9jHPUfXLhMxYIOsHQnIthm8tsXgQyA0paBoXvU5l43OhUzJM57nIkaVOa4wyOUgyBQX+3bVq5mcztIYFGBzloR5DJV0mhYJMvnqaxuY8EI6PL4p7t+n4e3ulZmQOiFVClzF0gFZTdgzilAZyOcBe5sBl+bbeUjVNZNpFRklKyTbW+/dotpk3Soyoofu6AGVuNfqBx//eNL8ApS5m4+1o3BON9yWM1WOCUkirbKaz7jyXMnn87yon6sIMpPm5aVGyBwBySXLvdwkT8DMtQnzoCGzRr3jeS3fxpeLKRsJLGAmu00rlge8MEbA1QujL2/L8tDny5ZLmTcBS7FP1o3lQ0Qh/vKtQnyi9KT4Sn4WSRa+l2uPrQ0/Mk75rBCUTdRKjZOXT5qCJNIslfyXZJvG9xnY53xbuE7yGouQ3TTOBXy+oylia+qYkCRnoh/ohWCTbAuc4iUF/13pg5mC0N8m9JJ/OqH/XJyPJO3NsL7WpX9XNmjRLgR09RAosDT1pXxwSudsskHubwA3+b3Xc5HlNP7K79uRtD6IP0o2crp7H1r/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn9/GmtGmBlo4wA1QUT0XB806/OCHdQrSktUkB/evfpFgERI97Z5gp2Wx2n/2RZ3PE8Sy2/TbnkAmaMK0fNPUHNHbcqhfVDcvFkVFFtYYxhnHdqI6RJ7fsmuVUda3PeQ59xgVmoqnbFnIMZBu2d4Ns3675tlOx6va9rt1CxqVpqVKxdG05ixn3C7dNPc+Yn2BOuc/wDLgviD9qX5z7UtPHJSa9dbRCWTjMWlMhUt80SSUEAnFMKiSZmUfmls5RyP0RnTAs8gzefIa8qb+dXSwWlYVTSbKJaVuWZVoNU+qEnE6+661v5WEI+yxKVusuZgmjBMf0FStQFyCmSai140mSUTGdfWIamchSpg1YEoOgKvuum+8OCnQHWtoCmXFs8ClGpbEhRJABI6D9Gvab+vfDKrg6e5NhxqMkm/Gd9b9BAjaHOEkhNHgZWYnucIt70tU6AuL3GYlzTudwqdokxQS4dpVBRJfnlMvmC7lWlF9bcvmjZZcB+ZeyHJmbWCV0c092AjoBLv5PzTbrtbJyi+McWr3G4BRdB/fBAlg6WQ4W8/ooTZ4e706OmwWETeUVqHW539a7zbrurbdD1ymqOelgQOfB9ajnchc7V/ePwTO9fRqc4vrlH6/92LtyL6OzGu/8JKP70wA7pnVLavPx5Y39FD26J+OTTiN5PaffWL3/ygK312lH0Wn1bvH71K0eg4nMHz+GHu60g+7J4NdkfvnKo/G5ffJjWLdwevUo6OCu+1JLs/FvN76/vYbfORp+ww0mQrt3xmadk8nPMxaEx833mDZj2BaWlDDKx49ARLlU7dEPtJ6sFxZf04uS0NCIClU/VRzFBTCht9QpRS1+LgmIhr4s5mrdsTzkoY7bthuOU0VWt9No2/Jfo+qhXqPtlRy0QrEDsZuwiCpfimVX/fM1QDLzObAQMmOe5GQKXP/CYoAF1vpsKC9HwjjcJJLFj10UoGqt7fYC27a8htXxvKDuOW7Pa9jHPUfXLhMxYIOsHQnIthm8tsXgQyA0paBoXvU5l43OhUzJM57nIkaVOa4wyOUgyBQX+3bVq5mcztIYFGBzloR5DJV0mhYJMvnqaxuY8EI6PL4p7t+n4e3ulZmQOiFVClzF0gFZTdgzilAZyOcBe5sBl+bbeUjVNZNpFRklKyTbW+/dotpk3Soyoofu6AGVuNfqBx//eNL8ApS5m4+1o3BON9yWM1WOCUkirbKaz7jyXMnn87yon6sIMpPm5aVGyBwBySXLvdwkT8DMtQnzoCGzRr3jeS3fxpeLKRsJLGAmu00rlge8MEbA1QujL2/L8tDny5ZLmTcBS7FP1o3lQ0Qh/vKtQnyi9KT4Sn4WSRa+l2uPrQ0/Mk75rBCUTdRKjZOXT5qCJNIslfyXZJvG9xnY53xbuE7yGouQ3TTOBXy+oylia+qYkCRnoh/ohWCTbAuc4iUF/13pg5mC0N8m9JJ/OqH/XJyPJO3NsL7WpX9XNmjRLgR09RAosDT1pXxwSudsskHubwA3+b3Xc5HlNP7K79uRtD6IP0o2crp7H1r/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj07pBYrQEWa4iAcF9QV0lC9OSLclnjbBJgX015+kWAQED+ed6Uyb7Wb32Uue7AVHceR4Dc4hEYRRrduu6S8WxhO3AmUDkO8bpYk7MSa46hqBHQRlxylaUPZ1rct5Cl3KBaKipjuWXTRsx3AqI9vxHNdzKoWSWxzr2iMkXJqWKgVL15ZxRLmXua3paUI9hjjhHkUxcE9gb9jo9zyp6aEck16/WKHMHCb1qRAzzzRxwQcMUYQLmMXmhbmlc+Fzb0hCikSawKdPn9f0z72LxaKwKBZYEpqOZVmmVTWljs9JeKrXT/LN4HdpwFbrFqKMEowi8oEUqD6IKfO1RhSyhIhpfMC0bdqWMm3AEhvYLtFT3fxykKE70tIWyIQjg0+RnRsbQAAJUAzaw6Bb00+Pq+Bq7yhBlAcsifnO+t8gAZ1DxGbgGzyPLEd3vMU96apfAPa6FEcpJ3O4VW0yQxi4dp9AQJY9wmXz+VzLyq8tuXxI3mWA/6UsF+YmVgnd3JOdNgmBi/9Ts816raw8oiiF+uvo3hoxXu0NQ+5O59BtlsJgEP+HIlbLIGwqr0Cty/253m3WdW99biL20931ODgLbm8uZ8+D5xAeewK1B9HHrX/dNF8X9pvjRLT4XC2HfTt1e8SdR8t2MnX77tljJRr9/vXRpP0rVIydkwc0FdXizdwP3Sf6gf3F9AxHVyEMMXaG5++/f02urI9m9WbORg/3w+dl2z8bU3bnP52NUf/cancrwY3VTsbp2+PiZDm+em3eJ2N6fVu5G03Cq8ll7SumzRi2hTklDNPJK2CRL1V7dNtaR9YLiZ/pRUmIbwSZqjdTHMUFUKHX1S5FLV4qCYj4nizmat0oVexm2642nGqxWLKtVlN+yq+qlHeqjUrOQSsUOxBbjAZE+VIsu+qfnwHi2ONAfUiMOUvxFLj+g8U2Ekjr0oE8HIxyGDHJ4pVSs9HoVC5tp+iUJdBy2+603Mal2+o4Lbdc0rVbJu7oXdIIBCTbDO5uMfgAMJkRUDSv+pzLRudCpuQNzVMR2YU5KlBI5UWQKC72nFLFNTmJZxEowGbM/DSCwmw6yxJk8tXbMRDmmXRwOcrO38Hwdv/lmZA6PlEKXMXSBFlN2HMV2XkghwOubAacm2+kPlHHTKZVJASvkGz/+uoW1SbrVpERvbSGL3aOe61+9PbvO80fQJm7+Vg78udkw21+p8prQpJIPa/mGyq8FdL5PM3qd64IMpHmTcmTtjkEnEqWex+x30DNtQnzqEtmjXrH81q+jS8VUzoUSEAsu03LlkdMGEPgasLoytOyPHZ82XIp8yZgKfbJWpEcRBTiH2cV7GGlJ8X38rVgyVfg+2xt+JFxyrFCEBqqlbpO3g80BWbSLJH8x5JN4/sM7HO+LVwneY1FyG6apAIO/9EUsdV0hDFLqei29UywSbYZTvE+A+9L6ZuZjNA/b+glP3hDP/V7Q0l7MdLXuuTvygbJ2gWDrgaBDEtNX8qBUzqn4Qa5fwLc5PdO59y2itXzv/H7diT1b+Lvko2c7p6H+h8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQjx0MICgy6oxvtJ5q21Hb3tMvnRii5AqBkmBtf/1NUKxa7fHcGWYgy2b32Zc82TqDUWi6LcZwyklMlX63ob7ODGdqY8vXkANtzTINpEETI82vTc2aDXW7bM1Upc9YhvuUcUh5QzV1o6wZpmY6E8N0Tdst6yXd0l9U5QmnTJgWKiVdVVZRSJmbu22oWUrdGDLCXAojzFyO3HFrOHCFpgsLTGqzvkaZO0ybAeeJCwAq+RjhMEQlFEegDvZ06j5zx2ROIc9SvPHps4a62fv+/l56L5fidA5MXdeBXgNCx2dkfqk2L4rN2O/TWbxedyCNKUEwJJ9QghpiHsS+0grncUp4EJ0wbQBDl6Y1vEIaMix6qYIvBzm6My3tgUwZ1FgAjcLYCM9wiinCyuOo31Avz6vgeu8khZTN4jRiB+u/g4TpEodxgn2NFZEV6M63eCRdzTpGbp+iMGNkie9kmyQQYaY8pHhGVgPCRPP5TMnLr6yYeEjRZRj9TVnqYBergA6OZKdL5pjx/1Oz3XqtrTzBMMNN53oFfsObxfy+HbU8Exi/qqQXvHhONGzkEHaV16C25d6sD5t121ubTcOwPZz2w1524weLYZfePU7DReU6Gk1vwgXpRAM6bhvw03mhT/ZVAl/M2Soc3M5slOjR03J0Na1k7ThAD14rQhe/P4KbJ8fu3tyk16PRx2OZs9ssGA6CqHIVLAceQHrvLkhiMHl+NjjqVfji9vmqM3+4tXshtHq/yvYta62GpJeAiypjxudynLZbb357mn5WskXjK6bdGPaFBSWMs+m/GPFiKduj31U8US/If6YXKSG+NstV3URyFOOYcrUpd0lqcTNBQMR3RTHXa6/iGO2OU2uZtXLZMvROW3yKr5rlGF6t5RQctEZxALET0xmRviTLrvvnZ4AochmmPk61ZZyhADP1B4tdyKHSpyNxOGLK8CQWLG6Y1ZZX82zPa1vtslOrWF612nVqlu112z2rrCp3Mb+n92lrxnG6z+D2HoOPMCIJwZLmZZ8z0eiMi5S8wWXGQ6O0hCWKM3ERpJKLXdNybMBIlIRYAgZR7GchLiVBkicIsPXb1CBiuXTUm+Tn72R4h/+KTAgdn0gFJmNpY1FNfOQqMotATgfs7AZcmG9lPpHHTKSVpwStkez/+uoW2SbbVhERvXbGr0aBe6t+9vbvO8EPoMBhPraO/CXZcVvcqeKaECTSLKr5BktvpWy5zPL6VSVBpsI8EDxpgDFGmWC5j0m8wBRsTYCzLpkt6gPPW/k+vowHdMwhx5HoNiVfnjFhjDGTE0ZfnJbVuePLnkuRN45X/JisE4pBRCL+cVZBLpJ6QvwgXu9x6n+V64itHT8iTjFWcELnciWvk48TTYFiYZYI/ovTXePHDBxzvi/cJnmLhYtummYcn/6jSGJrqBChOKO831VzwS7Z5jj5R4LdL6VvZnJC39zQK3byhv5nOBgL2ougutUlf1bWSN4uCKtyEMixNNSVGDiFczrfIfcNwD1+96qGXq5V/8Tv+5E0v4m/S3Zyengemv8B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0725291388233529326</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0725291388233529326</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0725211388233521565</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0725271388233527547</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0725291388233529326</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>C08181B7A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>B481BD19A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>0781BC89A2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88f49054-754c-4752-9b1a-9038714352dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true" id="9086d78f-0841-4647-beb5-638622ca6219"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="634d13ac-6760-46fd-bd1c-a401cbd6f484"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>0A81291AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE9736041EFC1EE5E0401F0A059945A9:22DCCE59"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0725371388233537108</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>4981B60AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:4981B60AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:4981B60AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0A81291AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FD811DCAA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4091487BA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0A81291AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FD811DCAA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4091487BA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj0xJLyClA8xwEU49oEjBV/3ixDRAtE2xSbn4609SKAKCh/POOIPZbnafveTZrTAYBqZTZwzHnERUcVtV9eXVNgslu4g1ZKGxVvAtS4OmXdQsiHTfh7ZesMaq4jKWYJcyDimvqqZuWJphaqY9NEzHLDqWmS8UzWdVecAxE6aFSl5XlWUYUOakbqtqElMngowwh8IQM4cjx6v3uo7QdGCGSa1V1ihTh3FtyvnMAQDlfYxwEKA8ikJQAXs6FZ85HplQyJMYb3z6rKpu7i4Wi/zCykfxBJi6rgO9DISOz8jkUq1dZJex79JxtD43IY0oQTAgn1CC6mE+jXylHkyimPBpeMK0AQxdmtbwEmnIKNBLFXw5SNGdaWkPZMygxqbQyIwN8BjHmCKsjAZuVb08r4Lru8MYUjaO4pAdnP8NEqZzHEQz7GssiyxDd77FI+mqVTByXIqChJE5vpVtMoMIM6Uf4zFZdgkTzeczJS2/smTij2RdhtG/lKUCdrEK6OBIdlpkghn/PzXbrdfaygMMElzLha1e8b+7ea8TPA54o5HQuydr9Qu837jVFMKu8hrUttyb82Gzbntrcym0Qc5q9O5vV+3m6KkT9udl//EhvppEbgRLz89eCfZ7uemgcZ8LaPDaxt3Pm85D6BXHMfTuZr9WV63fuafu6O19lFwYw8UntYjl39/M+6A10TveRztHmpOrx0YHXHuF5sPEfmq50/HtR6vpFwur6cIYone9EzxfFbts8Iv3J8Mc/Rzx0kX7+pndLkDndxc1Br3h9dvjqPoV024M+8KMErzk9Q0jnh1le7gtpS3qBfnP9CIlxNfGqaozkxzFOKZcrclbklqcRBAQ8R1RzPVZr9uGWTbqdbNsWQVDbzbKdVP8Vy7YRrtctzMOWqM4gNiM6JhIX5Jl1/3zM0AUOgxTH8faPErQFDP1B4styKHi0oF4HBFleBgJFrdt07Ytw2oXS+2S1SiXbN0QokaxcV0ybd1WlduI39G7uD7mON5n8OIegw8wIjOCJc3LPmei0RkXKfmA84QHRn4O8xQnYhDEkosds2AXASPhLMASMAgjPwlwfjadpQkCbP1rahCxVDq4Hqbv72R4h9+yTAgdn0gFJmNpYFFNfGQUmVkgpwO2dwPOzNcTn8hnJtLKY4LWSPY/fXWLbJNtq4iIXprei5Hh3qqfff37TfADKHCYj60jf0523GYzVYwJQSK1rJofMP+RT+bzJK1fSRJkLMwDwZMG8DBKBMuthtE7pmBrApw1ZLaoDzxv5fv4Ej6lHocch6LblPR4xobhYSY3DFe8luW568ueS5E3jpf8mKwZiEVEIv5xV0EOknpC3Bc/iyj2v8p1xNaOHxGnWCs4oRN5kuNkdaIpUCTMEsF/Ubxr/JiBY873hdskb7Fw0U2vCcenvyiS2KoqRChKKHdbairYJdsUJ1/NsPOl9M1MSuibCb1kJyf0Y6/rCdoLobrVJX9X1kjaLgirchFIsVTVpVg4hXM62SH3DcBdfi+UbaNxpf+V3/cjqX0Tf5fs5PTwPdT+AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj0xJLyClA8xwEU49oEjBV/3ixDRAtE2xSbn4609SKAKCh/POOIPZbnafveTZrTAYBqZTZwzHnERUcVtV9eXVNgslu4g1ZKGxVvAtS4OmXdQsiHTfh7ZesMaq4jKWYJcyDimvqqZuWJphaqY9NEzHLDqWmS8UzWdVecAxE6aFSl5XlWUYUOakbqtqElMngowwh8IQM4cjx6v3uo7QdGCGSa1V1ihTh3FtyvnMAQDlfYxwEKA8ikJQAXs6FZ85HplQyJMYb3z6rKpu7i4Wi/zCykfxBJi6rgO9DISOz8jkUq1dZJex79JxtD43IY0oQTAgn1CC6mE+jXylHkyimPBpeMK0AQxdmtbwEmnIKNBLFXw5SNGdaWkPZMygxqbQyIwN8BjHmCKsjAZuVb08r4Lru8MYUjaO4pAdnP8NEqZzHEQz7GssiyxDd77FI+mqVTByXIqChJE5vpVtMoMIM6Uf4zFZdgkTzeczJS2/smTij2RdhtG/lKUCdrEK6OBIdlpkghn/PzXbrdfaygMMElzLha1e8b+7ea8TPA54o5HQuydr9Qu837jVFMKu8hrUttyb82Gzbntrcym0Qc5q9O5vV+3m6KkT9udl//EhvppEbgRLz89eCfZ7uemgcZ8LaPDaxt3Pm85D6BXHMfTuZr9WV63fuafu6O19lFwYw8UntYjl39/M+6A10TveRztHmpOrx0YHXHuF5sPEfmq50/HtR6vpFwur6cIYone9EzxfFbts8Iv3J8Mc/Rzx0kX7+pndLkDndxc1Br3h9dvjqPoV024M+8KMErzk9Q0jnh1le7gtpS3qBfnP9CIlxNfGqaozkxzFOKZcrclbklqcRBAQ8R1RzPVZr9uGWTbqdbNsWQVDbzbKdVP8Vy7YRrtctzMOWqM4gNiM6JhIX5Jl1/3zM0AUOgxTH8faPErQFDP1B4styKHi0oF4HBFleBgJFrdt07Ytw2oXS+2S1SiXbN0QokaxcV0ybd1WlduI39G7uD7mON5n8OIegw8wIjOCJc3LPmei0RkXKfmA84QHRn4O8xQnYhDEkosds2AXASPhLMASMAgjPwlwfjadpQkCbP1rahCxVDq4Hqbv72R4h9+yTAgdn0gFJmNpYFFNfGQUmVkgpwO2dwPOzNcTn8hnJtLKY4LWSPY/fXWLbJNtq4iIXprei5Hh3qqfff37TfADKHCYj60jf0523GYzVYwJQSK1rJofMP+RT+bzJK1fSRJkLMwDwZMG8DBKBMuthtE7pmBrApw1ZLaoDzxv5fv4Ej6lHocch6LblPR4xobhYSY3DFe8luW568ueS5E3jpf8mKwZiEVEIv5xV0EOknpC3Bc/iyj2v8p1xNaOHxGnWCs4oRN5kuNkdaIpUCTMEsF/Ubxr/JiBY873hdskb7Fw0U2vCcenvyiS2KoqRChKKHdbairYJdsUJ1/NsPOl9M1MSuibCb1kJyf0Y6/rCdoLobrVJX9X1kjaLgirchFIsVTVpVg4hXM62SH3DcBdfi+UbaNxpf+V3/cjqX0Tf5fs5PTwPdT+AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbvU+I8EP5+f0Wn9/Gd0h/Q0naEmQLqIaJA0eP84sR0gXglrU2C6F9/abEIiB73zjiD2W52n9198iQnDC1iyw8Yg4yThCrdTkO9r9umU6sjQwPTi7SaUQXNg3pNmz5MbevBxp7lWKrSZUxAlzKOKG+olmFWNdPSLHdsWr5l+1W74tjVO1W5hYzJ0NKlYqjKahFT5hdpG6rIqJ8gRphP0QKYz7EfBv1LX3r6qMSkNk/WKIuEWXPOeerrOq5EgCGOcQUnC/1E3/E5iZgfkhlFXGTwljNiDfVt7/Pzc+W5WkmymW4ZhqEbni59IkZm39Xmt3IzRF06TdbrNqIJJRjF5BXloPrA50mkBPEsyQifLz4JbeqmkYfWYIU1bNbod1V/T1CgOzLSDsiMIY3NkVkGG8EUMqAYlJtRt6F+P26C673jDFE2TbIF21v/GySgS4iTFCKNlZWV6I6PeKBdzRPAfpfiWDCyhKucJinCwJRBBlOyuiRMki9iSjF+ZcXkHylZBvhfxnKib2OV0PUD3emQGTD+f2a2Pa91lFsUC2j2zGGGn9Ckky4tPupNstGtN+mx1FjeNAoI285rUJtxv633ybrh1tumO9ub1EPyY2r/fHnsmdcE6G11Uh9eTs5/hP8lw5+DnukNVq/cNvozMTm9EIaZojQaXrZ746dH+uwKMb9JnpzMGn87cweew8L6LyPo382Ww9/nQC6cC1arx8G13XbqF5eOiJ2bs/S3wUUYe9ZV5gjzetl+GHfPL/Bg8GLZxnl/aL0Y30T4o1f/JR7Pr674aXfYD19njfeatmvYNZaSEIqHR8C8XOb06HaUMzkvxL+Wl9xCIm1auPpprlGMA+VqM9+VS4svpACRyJfDXK/POq5pdtpBYHnVas002i0vsOR/Xs01z7zALTVojWIPYjuhU5LnylV2zZ+vAeKFz4BGkGnLROA5MPWLiB3EkdKlI3k4EspgnEgV91pBx3QDx3Vb7bbTMa1Tu+bWW07nrGV3WkFNVa4Sfk2vs2DKIdtVcHtHwUeASSpJw9c8Z5LojMuWPKGl4LFZWaIKBSEvgizXYt+qubbOyCKNIQesL5JIxFBJ52nRIJ2tfy0NYVZYR6fj4vx9Wt7+t7IT0iciuQPLa2mBnCYcuIqsspDPC3a3Cy7DByIi+TGTbeUZwWsku5/e2ZLTZEMVWdF9O7w3S9wb96O3f9ypfwFK3+/HJlG0JFtpyztVXhNSRJrlNJ9Q5akilktRzK+eC2Qmw+tSJ009BCykyr2Mk99A9U0I/ahLZoN6L/PGvotP8DkNOeKwkGxTiuURL4wQWP7C6MrTsjr2+bKTUvaNw4ofsrVj+RDJEX/5VsE+zv2keSB/npMseh/XgVhbeWSd8lnBCZ3lq/w6efmEFDiRYYnUvyTbDn4owKHku8ZNkzdYuGTTg+Dw+RclF7aGijBOBOXdjloYtsW2wMlfUvDfnT6EKQT97YZesU9v6En/MpSyt0Dqxpf83VkjBV0wqPlDoMDSUFfywSmT09mWuL8B3Nb3mueaLcf4q77vVtL8YP5o2erp/nlo/gE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc6JKEH3fX0GRxxTyIShQ0So0mpCPTaLGu8nL1mRodTYwIDMYs79+ZzAYNSbr3iqrcJqe7tPdhzNzwlASW37AGOScpFQJT1vqTw+ZXh3bE23iIFOz3WiiIccBzQAHIuw8NcEAVQkZKyCkjCPKW6plmHXNtDTLHZmWbzm+bdTqdfdRVcaQMxFauNQMVVkmMWV+mbalFjn1U8QI8ylKgPkc+8Pg+soXnj6qMKntkxXKMmHennGe+bqOaxFgiGNcw2min+hbPicR84dkShEvcnjLGbGW+rb35eWl9lKvpflUtwzD0A1PFz4RI9Mjtf2t2gxRSCfpat1FNKUEo5j8RhLUNfBZGilBPE1zwmfJJ6FN3TRkaA2WWMOmTY9U/T1Bie7ASFsgc4Y0NkNmFWwAE8iBYlDuB2FLPTpsgqu9oxxRNknzhO2s/w0S0AXEaQaRxqrKKnSHR9zTrvYJYD+kOC4YWcB3SZMMYWDKbQ4TsrwiTJAvYko5fmXJxI9ULAP8L2M50TexCuj6nu6ckikw/n9mtjmvVZQxigto93/nWfQruRzEfRw9IHTL+7PlPL9vOkarhLDpvAK1Hvfbepesa269bbo0x5aDL+t2EU2yNDLi5rjhDsbkjj+HxX0Yj/SZZzvzM9rt/brKZounx+P7/vNZJ2Ruc/jaCBrfXeP85jY5PgsX3y7G6QDY9Ollvni4CIb3/3WbXH+8uxjePo+LWRGT0Luzzwue6Kxxc63ny64XjQBY8HiePPzGhXXzOLW917uAzY6/PWRJr7c4uzJYr/4Dnd+djZ9b7zVt1rBtrCRhWDz9AsyrpaRHeKr0xbwQ/1pepIVE2qR09TOpUYwD5Wpb7pLS4hdCgEjki2Gu1rbhmbbb7ASWV6/bptHteIEl/nm2a/a9wK00aIViB2I3pRMic0mVXfHna4A48RnQCHJtkRZ4Bkz9IuIp4kgJqRhMllIGo1SoeKdumUa/Ue8JInYbPctpBl3P7Xe7Tr8RdE77qvI95Tf0Jg8mHPJtBXe2FHwAmGQEpMxLnjNBdMZFS+ZoUfDYrC1QjUIhDoJcarFv2a6jM5JkMUjAepJGRQy1bJaVDdLZ6mlpCLPSOuiNyu/v0/J231WdED4RkQ5M1tIBMU3YcxTVq0I+L9jdLLgKHxQRkZ+ZaCvPCV4h2X71zhZJkzVVREU/u8OfZoV77X7w9o879S9A6bv9WCeKFmQjbXWmimNCiEi7muYc1ea1YrEoyvk1pUDmIrwudNLUh4ALoXKvo/QZqL4OoR90yKxR72Re27fxFXxGhxxxSATblHJ5wA1jCEzeMELxtSwPvb5spRR947Dk+2zdWFxEJOIv7yrYx9JPmG/F4yXNo/dx7Ym1kUfUKa4VnNCpXMnj5PUTUuBUhCVC/9J8M/i+APuSbxvXTV5j4YJNTwWHz98oUthaKsI4LSgPT9XSsCm2JU7+moH/7vQhTCnobyf0kn16Qv+4vhoK2UuQuvYlf3fWSEkXLO6nwr/E0lKX4sIpktPphri/AdzSd881Ow0j+Ju+b1fS/mD+aNno6e730P4D</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0725371388233537108</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0725371388233537108</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0725311388233531560</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0725341388233534385</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0725371388233537108</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1A81291AA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0E811DCAA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>5091587BA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d13ac-6760-46fd-bd1c-a401cbd6f484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true" id="d8ee8935-e9d5-4d68-850b-0db5d57d79a3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="09a64e54-c4dc-4fd8-92e5-65091132ca14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>F391F87CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE96761015313C71E0401F0A059979D6:2ECB8296"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0725471388233547660</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3391CD5CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3391CD5CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3391CD5CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F391F87CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E7918F3DA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3A91480EA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F391F87CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E7918F3DA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:3A91480EA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbdcto8EL3vU3jcy47xL2B7AjPEDimZJG1wwpf2piPkNShgyVgykD59ZRMTICSl34xnbK1Xu2d/dLRnHKVzy+9xDrkgjCqDsKP+arotG1y7pTmohTUHt5GG2vLLczyv7bbG3nicqMqA8wIGlAtERUe1DNPWTEuz3HvT8q2m71iNpu39VJUR5FyalioNQ1XW6Zxyv3LbUYuc+gxxwn2KUuC+wH7Uu7n2paaPakxq92yDsnKYd6dCZL6u40YMGOZz3MAs1c/0PZ2zmPsRmVAkihxefMa8o77sXa1WjZXdYPlEtwzD0A1PlzoxJ5PPavdTvRniAU3YZh0gyijBaE5+oxLUDYgpi5XefMJyIqbpO6ZN3TRK0xqssYZNh35W9VcHFboTLe2BzDnS+BSZtbEhJJADxaA8DAcd9fNpFdzsvc8R5QnLU36w/jdIQJcwZxnEGq8jq9GdbvFIurpngP0BxfOCkyXclm2SIQxc+Z5DQtbXhMvmi7lSlV9Zc/mQussA/0tZzvRdrBK6fiQ7IZkAF/+nZrv12lgZoXkB3WztsXDm4esRDr9PsrazsvpT231k6KFTQdhV3oDalvtlfdis29562US82d2TSIzw9+wyeXxcOM0LMb4cXHxhDw9UD+hTO5pA1gq+RKNR+OXybtZfXK9z52dku1c9txCee2UuouQqHBrwyboBOyYGy6Lzy7H11UoCdn75I2/z4RQlmbsaZauHVjNC5+bT7dcJWLfpYu08rkfTRXq3+o8Cnv0w765TsZq2Zp+eR16yvL/wrmJv9Hj38+lrcdN5jWk3hn1hTQlRMX4CLOpl2R6DUOnLeiHxMb2UEhJrSaXqZyVHcQFUqN1yV0ktfiEJiMS+LOZm3bc9s++2g57l2bZjGsG517Pkl+e4Zt/ruTUHbVAcQAwYTUjpq2TZTf98DBCnPgcaQ64tWYGnwNUPLIZIIGVAh/JwMMrhnkkWd51WEISm27abZrt3YdhO370IjXazb3mBcW6pyi0T3+i3vJcIyPcZvLnH4EPAJCNQ0nzZ51w2OhcyJQu0LMTcbCxRg0IhL4K85GLfctymzkmazaEErKcsLubQyKZZlSCdb96WhjCvpMOL++r8vRve4b86E1InJqUCL2M5B1lNOHIV2XUg7wfs7gZcm+8VMSmPmUyryAneINn/9dotZZtsW0VG9CuIfpk17q36ydvf7tQ/AKUf5mPrKF6SHbf1nSqvCUki3bqaC9RYNIrlsqjq1y4JMpfmdcmTph4BLiTLPd+zGVB9a0I/6ZLZoj7wvJXv4yvElEYCCUhltynV8oQJIwJeThgDeVrWp44vey5l3gSsxTFZMJeDSIn4w1kF+7jUk+Lv8rViefxariO2dvzIOOVYIQidlKvyOnl+pykwk2aJ5D+W7xo/ZuCY833hNslbLEJ207gQ8P4fpSS2joowZgUVg1CtBLtkW+EUzxn4r0pvzFSE/nJDr/m7N/TjzXUkaS9F6laX/F1ZI1W7YFDLQaDC0lHXcuCUzulkh9xfAO7yuy35PQibf+X3/Ui6b8RvJTs5PTwP3T8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbdcto8EL3vU3jcy47xL2B7AjPEDimZJG1wwpf2piPkNShgyVgykD59ZRMTICSl34xnbK1Xu2d/dLRnHKVzy+9xDrkgjCqDsKP+arotG1y7pTmohTUHt5GG2vLLczyv7bbG3nicqMqA8wIGlAtERUe1DNPWTEuz3HvT8q2m71iNpu39VJUR5FyalioNQ1XW6Zxyv3LbUYuc+gxxwn2KUuC+wH7Uu7n2paaPakxq92yDsnKYd6dCZL6u40YMGOZz3MAs1c/0PZ2zmPsRmVAkihxefMa8o77sXa1WjZXdYPlEtwzD0A1PlzoxJ5PPavdTvRniAU3YZh0gyijBaE5+oxLUDYgpi5XefMJyIqbpO6ZN3TRK0xqssYZNh35W9VcHFboTLe2BzDnS+BSZtbEhJJADxaA8DAcd9fNpFdzsvc8R5QnLU36w/jdIQJcwZxnEGq8jq9GdbvFIurpngP0BxfOCkyXclm2SIQxc+Z5DQtbXhMvmi7lSlV9Zc/mQussA/0tZzvRdrBK6fiQ7IZkAF/+nZrv12lgZoXkB3WztsXDm4esRDr9PsrazsvpT231k6KFTQdhV3oDalvtlfdis29562US82d2TSIzw9+wyeXxcOM0LMb4cXHxhDw9UD+hTO5pA1gq+RKNR+OXybtZfXK9z52dku1c9txCee2UuouQqHBrwyboBOyYGy6Lzy7H11UoCdn75I2/z4RQlmbsaZauHVjNC5+bT7dcJWLfpYu08rkfTRXq3+o8Cnv0w765TsZq2Zp+eR16yvL/wrmJv9Hj38+lrcdN5jWk3hn1hTQlRMX4CLOpl2R6DUOnLeiHxMb2UEhJrSaXqZyVHcQFUqN1yV0ktfiEJiMS+LOZm3bc9s++2g57l2bZjGsG517Pkl+e4Zt/ruTUHbVAcQAwYTUjpq2TZTf98DBCnPgcaQ64tWYGnwNUPLIZIIGVAh/JwMMrhnkkWd51WEISm27abZrt3YdhO370IjXazb3mBcW6pyi0T3+i3vJcIyPcZvLnH4EPAJCNQ0nzZ51w2OhcyJQu0LMTcbCxRg0IhL4K85GLfctymzkmazaEErKcsLubQyKZZlSCdb96WhjCvpMOL++r8vRve4b86E1InJqUCL2M5B1lNOHIV2XUg7wfs7gZcm+8VMSmPmUyryAneINn/9dotZZtsW0VG9CuIfpk17q36ydvf7tQ/AKUf5mPrKF6SHbf1nSqvCUki3bqaC9RYNIrlsqjq1y4JMpfmdcmTph4BLiTLPd+zGVB9a0I/6ZLZoj7wvJXv4yvElEYCCUhltynV8oQJIwJeThgDeVrWp44vey5l3gSsxTFZMJeDSIn4w1kF+7jUk+Lv8rViefxariO2dvzIOOVYIQidlKvyOnl+pykwk2aJ5D+W7xo/ZuCY833hNslbLEJ207gQ8P4fpSS2joowZgUVg1CtBLtkW+EUzxn4r0pvzFSE/nJDr/m7N/TjzXUkaS9F6laX/F1ZI1W7YFDLQaDC0lHXcuCUzulkh9xfAO7yuy35PQibf+X3/Ui6b8RvJTs5PTwP3T8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkRi5EgJQS2LILbQ9Q2NOXyjgOuA0OjR0u/fXHDoQChS57pErUk/HMNxd/M1UKZrHh+ZSilOGESO2gJr8YY6NimbarlEPbVMpADxVga46ij8uuHTohciNXltqUZqhNKAOE1WRD001FNxTDHeiGZ1he2SpZtvssS0OUUm6aq5Q0WVrNYkK93G1NzlLiJYBi6hEwQ9Rj0Ov73Y7HNT1QYJLr1Q3K3GFanzI291QVlkIEURzDEkxmalU90KmG1OvjCQEsS9HWZ0hr8vbucrksLc1Skk5UQ9M0VauoXCekeHIt16+KyyhskyjZnBuAJARDEOMPIEB1EZsmoeTHkyTFbDo7Y1pXdU2YVtAKKlAvk2tZ/XSQo7vQ0gHIlAKFToFeGOuhCKWIQCQ99do1+fqyCm7uDlJAaJSkM3p0/jtIiCxQnMxRqNAisgLd5RZPpKteRdBrExhnFC/QvWiTOYCISo8pivCqgylvvpBKefmlFeV/uOgyBP+mLFV1HyuHrp7IToAniLL/U7P9em2sDEGcofp6tK7cvN78srrpay8yn9TKOGghx3jPtFoOYV95A2pX7u35uFl3vbW99A/4eI2776CV6YHWislP3R19tB4Gw2w0Uo0n12lGoePcuj+oGbEy1WjHGduPSY99LNyR/dBdvzkPMbtfRL8Wv6/KuHt347Tmlj2cOt3W/Ln7FNgD++2HMeuu/sVN0nHWdNJZ3i1+dsrJsKurjs1uA6Bmb/27VXPsDiqweWeNosdxeDX6MIg/f/J9ZxitJ8u7xrNf+4xpP4ZDYUEJ/Wz8iiArjqI92oHU4vUC7Ht6ERIcKlGu6s0FR1GGCJPr4pagFi/jBIRDjxdzc246Fd1tmYFvVEyzrGuN24pv8P8qZVdvVXy34KANiiOIjYREWPgSLLvpn+8BwplHEQlRqiySDE4Rlb+xGAAGpDbp8ceREIoGiWBxU7d1P3DcW19vWbbe0vymadlmwwr0W8fnDH6fsAfykPoRQ+khg1sHDN5DEM8xEjQv+pzyRqeMp+QdLDIW66UFKBGU8UGQCi72jLJrqRTP5jESgNVZEmYxKs2n8zxBKt38GgqANJf2moP8/Z0N7/hbkQmuE2KhQEUst4hXE50YRWYRyPmA3f2AC/N+FmLxzHhaWYrhBsnhp89uEW2yaxUe0Uuj/6IXuHfqF1//elP9BpR6nI+do3CB99wWM5WPCU4i9aKa76D0XsoWiyyvnyMIMuXmVc6TutpHMOMstx4kb4ioOxPqRUNmh/rI805+iC9jU9JngKEZ7zYpP16wYfQRFRtGm7+W1aXry4FLnjeGVuyUrBHzRUQg/nZXgR4Uelz8yH+WSRp+luuErT0/PE6+VjBMJuIkxsn6TFPAhJvFnP+SdN/4KQOnnB8Kd0neYWG8m8YZQ+e/SILYajKAMMkIawdyLtgn2xwnW8+R96n0xUxO6NsJvaJnJ/TvbqfPaW8G5J0u/rOygvN2gUgWi0COpSav+MLJnZPJHrlvAe7zu2lW9EZgNf7E74eR1L+Iv0r2cnr8Hur/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj05pU4q0HWEGwUs94AVQz8sXJ6QBgm2CSYrorz9JsQiIHs474wxmu9l99pJn90TANHHDhhCYS8KoEbVq5lM5wBjDimv5wHMtz6nE1hBWhxY49v3hsBoETgxNIxIiwxEVElJZM10HlC3gWq7fB27oVsKKUwLlysA0HjAXyrRSKTmmsUgTKsLcbc3MOA0ZFESEFKZYhBKFvUanHSrNEBaYzPrJEmXukNcnUs5C20alGCOcJKiEWGqf2Bs6J7EIe2RMocw4/vAZi5r5cff19bX0Wi4xPrZdx3FsJ7CVTizI+NCsHxSXcRzREVuem5AyShBMyDvUoDpYTlhsNJIx40RO0m9MAxs42rSFF8hCwKOHpv3pIEe3p6UNkFxAS0wgKIx18QhzTBE27rtRzTzcr4LLu30OqRgxnoqt879BwnSOEzbDsSWKyAp0+1vcka76CUZhRFGSCTLH17pNZhBhYdxyPCKLNhGq+WJh5OU3FkL9kaLLMPqXspzY61gVdHtHdlpkjIX8PzVbr9fSygNMMlwf3z1m96DNfYc70k+nzxfOtYw6t9OFqOUQ1pWXoFbl/jhvN+uqtz4uTePT4Gh61H5pjOSIR93HyJ68v0+QPO22zwaXneA5G5RZwKu9h5QE9Hh4dDGWUYstbjJ+nKHk/b/Fr/4s6ZxfDtsH5fnZ1S/1yHqNC/uu7bng/Ghx8XCZTqLngFGnyS+nje70+s5rxuDu9L5Ks/6gOx6cs2x6/rsDZlfX8eAquu7xi/ujg+7DxeNNb5rOeGtc5YNjYIvaZ0zrMWwKC0roZcMpRrI46vaIWsa5qheUP9OLlpDYGuWq4UxzlJCYSrOub2lqCTNFQCQOVTGX53IjAJ7vnDXcoFz2gNM8DRqu+i/wfHAeNPyCg5YotiA2GR0R7Uuz7LJ/fgaI0lBgGmNuzVmGJliYP1hsQQmNiHbV42BU4D5TLN4MGuUzUPU8VSPfL/uViucH1Qo4O3Z80HI907hm8obecNUVmG8yeGWDwbsYkRnBmuZ1nwvV6EKqlLzAeSYTUJrDEsWZGgRcc3Hoen7FFiSdJVgDtlMWZwkuzSazPEG2WP66FkQil3bP+vn7+za87W9FJpROTLSC0LGcYlVNvGMUeUUg3wfsrwdcmG9kMdHPTKVVcoKWSDY/fXaLbpNVq6iInpq9J1DgXqnvff3rTfsHUPZ2PlaO4jlZc1vMVDUmFInUi2q+wNJLKZvPs7x+VU2QXJm3FU8Cu4dRpljurc+eMbVXJuy9hswK9ZbnlXwTXyYntCehxKnqNiM/7rFh9LDQG0akXsti3/Vlw6XKm8QLuUvWTNQiohH/uKugEGk9Jb5VP6+Mx5/l2mFrzY+KU60VktCxPulx8vZNUyCmzBLFf4yvG99lYJfzTeEqySssUnXTMJP4+y+GJraaCRFiGVXzwcwF62Sb45RvMxx+Kn0xkxP6x4ReiG8n9O9Ou6doL4XmSpf8XdkiebsgbOpFIMdSMxdq4VTO6XiN3D8AbvB7OQDNVqX5N37fjKT+RfxVspbT7fdQ/wM=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0725471388233547660</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0725471388233547660</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0725411388233541257</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0725441388233544505</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0725471388233547660</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0491F87CA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F7919F3DA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>4A91480EA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>09a64e54-c4dc-4fd8-92e5-65091132ca14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true" id="66e47ede-a88e-4e3c-a6fd-b05d808fd6ea"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="55a68fd3-0b14-4715-839f-96ccd027cddb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>ED91BADEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE9736041F6A1EE5E0401F0A059945A9:9F1F44C5"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0725561388233556451</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>2D9196CEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:2D9196CEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:2D9196CEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>ED91BADEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>D1A192BFA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3A12330B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:ED91BADEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:D1A192BFA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E3A12330B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxwpy45JEgBSg0Jzetg3bds9LZZwB3E2cNHaA9tcfOxAKlHbZIyEST8Yz31z8eVoMxZHpeoxBxklCFb/fVp+xYTX1Oh5XxjXxV6tNxBuGccUZN+pYd2w7bJiq4jOWg08ZR5S3VVM3rIphVkx7ZJiuWXfrZtVo2P+qygNkTJgWKlVdVZZxRJlbuG2reUbdBDHCXIpiYC7HbuBdX7lC00UlJrXTWqEsHGadGeepq2m4GgKGKMJVnMRaS9vRaYXMDciUIp5nsPYZsra63rtYLKoLq5pkU83UdV3THU3ohIxMT9XOSbkZQp9OktW6h2hCCUYReUcS1DXwWRIqXjRNMsJn8RemDc3QpekKLHEFGzV6qmofDgp0R1raAZkxVGEzZJTG7mECGVAMys97v62eHlfB1d5RhiibJFnM9tZ/BwnoHKIkhbDCyshKdMdbPJCuTguw61Mc5YzM4Ua2SYowMOVHBhOyvCJMNF/IlKL8ypKJHym7DPDflKWlbWMV0LUD2emTKTD+f2q2Xa+VlQcU5dAJm3qvfxGc9Wq31t3N0x3/Pb4CQu4u36ftAsK28grUptzr9X6zbnprvWn4wi0zM9PG2LDmU2P8PqGv9iKa9QLv/Nfl4uIpmVrDa8+ohRfvzGZTEVtv9HY3ny3s5uDy6YxNbqLrwePVg5mGJ77n9R+z7Cf0w6E2XMSvpuU3uq/vk6CekiGOh2lw9utyOOkO65f8TDs77ybh2L5uvMynL+Nx11kE74+WdfZPfOGjk8Vw1E9t3anHsLwy4nB547c/YtqOYVdYUkKQj18A83Ip28PvKwNRL8S/pxcpIWFlUqi6qeQoxoFytSN3SWpxc0FAJHRFMVfr875jdL3+uWc6llUz9F7X8Uzx5tRsY+B4dslBKxR7EHsJnRDpS7Lsqn++B4hjlwENIavMkxzPgKnfWOwjjhSf3ovDkVAGo0SwuNVvDpyu0XAcu2va9ZrRaDSb4r3X0wfdgd1UlZuE39LbzJtwyHYZvL7D4PeASUpA0rzscyYanXGRklc0z3lkVOeoSiEXF0Emudg1a3ZdYyROI5CAtTgJ8wiq6SwtEqSx1dOsIMwK6f35qDh/X4a3/63MhNAJiVRgMpYuiGrCgauoVgbydcD2dsCleS8PiTxmIq08I3iFZPfTR7fINtm0iojouRc8GyXujfrR2z/v1L4Bpe3nY+MonJMtt+WdKq4JQSKdspqvqPpazefzvKhfUxJkJsxrgicNLQCcC5Z7GyW/gWobE9pRl8wG9Z7njXwXX85nNOCIQyy6TSmWR0wYATA5YfjitCyPHV92XIq8cVjyQ7JeJAYRifjbWQW7WOoJ8Q/xWCRZ+FGuA7a2/Ig4xVjBCZ3KlbxO3r5oCpwIs0TwX5JtGz9k4JDzXeEmyRssXHTTOOfw9RdFEltbRRgnOeV+Xy0E22Rb4ORvKbgfSp/MFIS+vqGX7Msb+un6KhC0FyN1o0v+rFwhRbtgUOUgUGBpq0sxcArndLpF7muA2/xuCn53Gr0/8vtuJJ1P4s+SrZzun4fOfw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxwpy45JEgBSg0Jzetg3bds9LZZwB3E2cNHaA9tcfOxAKlHbZIyEST8Yz31z8eVoMxZHpeoxBxklCFb/fVp+xYTX1Oh5XxjXxV6tNxBuGccUZN+pYd2w7bJiq4jOWg08ZR5S3VVM3rIphVkx7ZJiuWXfrZtVo2P+qygNkTJgWKlVdVZZxRJlbuG2reUbdBDHCXIpiYC7HbuBdX7lC00UlJrXTWqEsHGadGeepq2m4GgKGKMJVnMRaS9vRaYXMDciUIp5nsPYZsra63rtYLKoLq5pkU83UdV3THU3ohIxMT9XOSbkZQp9OktW6h2hCCUYReUcS1DXwWRIqXjRNMsJn8RemDc3QpekKLHEFGzV6qmofDgp0R1raAZkxVGEzZJTG7mECGVAMys97v62eHlfB1d5RhiibJFnM9tZ/BwnoHKIkhbDCyshKdMdbPJCuTguw61Mc5YzM4Ua2SYowMOVHBhOyvCJMNF/IlKL8ypKJHym7DPDflKWlbWMV0LUD2emTKTD+f2q2Xa+VlQcU5dAJm3qvfxGc9Wq31t3N0x3/Pb4CQu4u36ftAsK28grUptzr9X6zbnprvWn4wi0zM9PG2LDmU2P8PqGv9iKa9QLv/Nfl4uIpmVrDa8+ohRfvzGZTEVtv9HY3ny3s5uDy6YxNbqLrwePVg5mGJ77n9R+z7Cf0w6E2XMSvpuU3uq/vk6CekiGOh2lw9utyOOkO65f8TDs77ybh2L5uvMynL+Nx11kE74+WdfZPfOGjk8Vw1E9t3anHsLwy4nB547c/YtqOYVdYUkKQj18A83Ip28PvKwNRL8S/pxcpIWFlUqi6qeQoxoFytSN3SWpxc0FAJHRFMVfr875jdL3+uWc6llUz9F7X8Uzx5tRsY+B4dslBKxR7EHsJnRDpS7Lsqn++B4hjlwENIavMkxzPgKnfWOwjjhSf3ovDkVAGo0SwuNVvDpyu0XAcu2va9ZrRaDSb4r3X0wfdgd1UlZuE39LbzJtwyHYZvL7D4PeASUpA0rzscyYanXGRklc0z3lkVOeoSiEXF0Emudg1a3ZdYyROI5CAtTgJ8wiq6SwtEqSx1dOsIMwK6f35qDh/X4a3/63MhNAJiVRgMpYuiGrCgauoVgbydcD2dsCleS8PiTxmIq08I3iFZPfTR7fINtm0iojouRc8GyXujfrR2z/v1L4Bpe3nY+MonJMtt+WdKq4JQSKdspqvqPpazefzvKhfUxJkJsxrgicNLQCcC5Z7GyW/gWobE9pRl8wG9Z7njXwXX85nNOCIQyy6TSmWR0wYATA5YfjitCyPHV92XIq8cVjyQ7JeJAYRifjbWQW7WOoJ8Q/xWCRZ+FGuA7a2/Ig4xVjBCZ3KlbxO3r5oCpwIs0TwX5JtGz9k4JDzXeEmyRssXHTTOOfw9RdFEltbRRgnOeV+Xy0E22Rb4ORvKbgfSp/MFIS+vqGX7Msb+un6KhC0FyN1o0v+rFwhRbtgUOUgUGBpq0sxcArndLpF7muA2/xuCn53Gr0/8vtuJJ1P4s+SrZzun4fOfw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQCwSSqCARLmezpTfS06J9WbnOAG4TJ8QO0P76Y4eGAqVd9kiVqCfjmW8u/mbOGUpiy+syBjknKVWCflv9bTfNZst+nGouckFrOE1Dcxr1puYYqBXZDRtjw1CVgLECAso4orytWoZZ10xLs5w70/Is27PtWt0xfqnKPeRMmBYqNXFrncSUeaXbtlrk1EsRI8yjKAHmceyF3cuRJzQ9VGFSO+cblKXDvDPnPPN0HdciwBDHuIbTRD/X93TOI+aFZEYRL3J48xmxtvp2d7Va1Vb1WprPdMswDN1wdaETMTL7rna+VZchCug03Zx7iKaUYBSTVyRBXQKfp5HSjWdpTvg8+cS0qZuGNK3BGmvYbNDvqv7uoER3oqU9kDlDGpsjszI2hinkQDEo/46Dtvr9tApu7t7liLJpmifs4Px3kIAuIU4ziDRWRVahO93ikXR1zgF7AcVxwcgSrmSbZAgDU25ymJL1iDDRfBFTyvIrayb+SNVlgP+mLOf6LlYBXT+SnT6ZAeP/p2a79dpYuUdxAR1nii9+jf0sWD2sb80z3fzn9scguo6vJ6t2CWFXeQNqW+6382Gzbnvr7VLqZtlZq36nn8X3xmTePQueZwsUDk37ZhX05jmYze7jKHkZPr1e3F8unoNoMba5nz1P/NHTFfdHrxOzPvGX2KLBt4cn12yEE9T01/DaL1iwNMKLm/XsXn+G5OHRuIXRz8lPqEfZr4tBa7RI2GsUPwznz+HVS5TaP5Ng3gvHqR71fljffjwMrsZ+/YaSdWJZ5Nq5v22/x7Qbw76wooSweHwCzKujbI+grwxFvRD/ml6khETatFT1MslRjAPlakfektTiFYKASOSJYm7OfbNrupY/7Fpuvd4wjZ7vdi3xn9twzKHbdSoO2qA4gNhL6ZRIX5JlN/3zNUCceAxoBLm2TAs8B6Z+YbGPOFICOhaPI6UM7lLB4q4/6NZbfmtoDXy3Zw/7Zm/g1h2nYbQGltVqqcpVyq/pdd6dcsj3GdzeY/AxYJIRkDQv+5yJRmdcpGSBlgWPzdoS1SgUYhDkkos9q+HYOiNJFoMErCdpVMRQy+ZZmSCdbX4tDWFWSseDu/L9fRre4bcqE0InIlKByVh8ENWEI6OoUQXyecDObsCV+W4REfnMRFp5TvAGyf6n926RbbJtFRHR717426xwb9VPvv7xpv4FKP0wH1tH0ZLsuK1mqhgTgkQ6VTUXqLaoFctlUdavJQkyF+Z1wZOmHgIuBMu93KXPQPWtCf2kIbNFfeB5K9/HV/A5DTnikIhuU8rjCRtGCExuGIF4LetT15c9lyJvHNb8mKwXi0VEIv5yV8EelnpCfCN+VmkevZfriK0dPyJOsVZwQmfyJMfJyydNgVNhlgj+S/Nd48cMHHO+L9wmeYuFi256LDh8/kWRxNZWEcZpQXnQV0vBLtmWOPlLBt670gczJaG/Teg1+3RCTy5HoaC9BKlbXfJnZY2U7YJBlYtAiaWtrsXCKZzT2Q65vwHc5Xer75puszf4E7/vR9L5IP4o2cnp4Xvo/Ac=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1XIhRRIVJDCZducAmWB3valcp0BfJo4EDuB9tcfOzQUKHTZIyEhT8Yz31z8zVwyFIWW6zEGCScxVfx2XX2uOBWnXK4a2qQGlmYHFVtzXqpIm9iBUbFtw65VQVV8xlLwKeOI8rpqGWZZMy3Nqo1Ny7Uu3AunJES/VeUeEiZMC5WSoSqrKKTMzd3W1TShbowYYS5FETCXY3fk9bqu0HRRgUltXK5R5g6TxozzuavruBQAhjDEJRxH+qW+o3MZMHdEphTxNIEPnwGrqx93l8tlaVkuxclUtwzD0A1HFzoBI9NztXFWXIbAp5N4fW4hGlOCUUjekQTVAz6LA8ULp3FC+Cw6YtrUTUOa1mCFNWza9FzVPx3k6E60tAMyYUhjM2QWxoYwgQQoBuVu6NfV89MquL47ThBlkziJ2N757yABzSCM5xBorIisQHe6xQPpalwCdn2Kw5SRDPqyTeYIA1MGCUzIqkuYaL6AKXn5lRUTP1J0GeC/Kculvo1VQNcPZKdNpsD4/6nZdr3WVu5RmEJjVs6CN3jNatb9j6eJPX5b9Mevr8Zd8L6s5xC2ldegNuX+OO8366a3Pi4lD1etzmKJqk92P0LLae2ODY3MGEx7SfPB4xAM7SDyL+hqieHGRNf0esCu71hUw2PiXU9vH31ErP7k9p/g6vGMvr73y1y/q9L7m5T5Gb/p4nRsYb8aUt5ZzmZZWAsHvWBWfosHvyfX3QcTLardWXu1HNxdPQG8496Plb7wI3tx9hBe8TH7NX/1K62n1u0jmf6qf8a0HcOusKCEUfryL2BeHGV7+G3lp6gX4t/Ti5SQQJvkqu5cchTjQLnakLcktbipICASuKKY63On7JlWuWw0LfG2bNNoNR1PnG3Hrpk/Ha9WcNAaxR7EVkwnRPqSLLvun+8B4shlQANItCxO8QyY+o3FNuJI8elQPI6YMhjHgsW9jt2qNW3Ha5abhtX0Ok7Zbpme5TlepV2x2qrSj/ktvU28CYdkl8Evdhh8CJjMCUial33ORKMzLlKyQFnKQ7OUoRKFVAyCRHKxa9m1C52RaB6CBKxHcZCGUJrP5nmCdLb+tzSEWS4ddsb5+zsa3v63IhNCJyBSgclYmiCqCQdGkV0Ecjzg2nbAhXkvDYh8ZiKtPCF4jWT302e3yDbZtIqI6Lk1ejYL3Bv1k69/val/A0rfz8fGUZCRLbfFTBVjQpBIo6jmApUWpTTL0rx+VUmQiTCvC5409RHgVLDc2zh+BapvTOgnDZkN6j3PG/kuvpTP6IgjDpHoNiU/nrBhjIDJDcMXr2V16vqy41LkjcOKH5K1QrGISMTf7irYxVJPiAfibxknwWe5Dtja8iPiFGsFJ3QqT3KcvB1pChwLs0TwX5xsGz9k4JDzXeEmyRssXHTTS8rh+BdFEltdRRjHKeW+JBAh2CbbHCd/m4P7qfTFTE7oHxN6xY5O6MdedyRoL0LqRpf8WVkjebtgsZ8K/RxLXV2JhVM4p9Mtcv8AuM3vVtsxnUqr4/2B33cjaXwRf5Vs5XT/PTT+Aw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0725561388233556451</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0725561388233556451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0725511388233551099</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0725541388233554437</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0725561388233556451</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FD91BADEA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E1A192BFA2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F3A13330B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55a68fd3-0b14-4715-839f-96ccd027cddb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true" id="1e7bb601-c7e3-4093-a34d-6920f59ee058"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="7d3afa21-d1cd-4065-aa5f-fa33ae4a458e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>97A15611B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173BB919775E0401F0A07995A24:FCC59CB7"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072661388233566227</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>D6A1B8E0B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:D6A1B8E0B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:D6A1B8E0B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>97A15611B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>8BA123F1B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9DA10E82B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:97A15611B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:8BA123F1B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:9DA10E82B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxmwZWOwPYEZh0vr3MgBkrZ56Qh5AbW27FgyIfz6SiYmQC6lZyYzROvV7rcXfbunHCex5QecQy5oyrSw19Z/ImfmTKeuW2sBtmoNaELNNYHUCMy8hu15DWi1dC3kvICQcYGZaOuWiewasmqWO0GWbzV9E9URat7r2h3kXJqWKnVT11ZJzLhfum3rRc78FHPKfYYT4L4g/ji4uvSlpo8rTHrndIOydJh3FkJkvmGQegQE4pjUSZoYp8aezmnE/TGdMyyKHJ59RrytP999fHysP9r1NJ8blmmahukZUifidP5Z73yqLkMUslm6OXcxSxklOKZrrEBdgVikkRbE8zSnYpG8YxoZyFSma7CS6UMN9lk3XhyU6I60tAcy57jGFxhVxkYwgxwYAe12FLb1z8dVcHN3kmPGZ2me8IPzv0ECtoQ4zSCq8SqyCt3xFt9IV+cUiB8yEhecLuFatUmGCXDtJocZXV1SLpsv4lpZfm3F5R+tugzIv5Tl1NjFKqEbb2SnR+fAxf+p2W69NlbucFxA5yEkjoPigg2j9LfVuh8ngePefR+iddAuIewqb0Bty/18PmzWbW89X4L1dHW+mKWjb97Q7YbhzdPl6H7St7Mo+xFcDQRanyTUCL+cL6L/7OklT06ofeGdjYyTdfPp+/0qtoL4cT6E2+vbL59oiziN5k2fTi6mdv51iYeeF37j7pcsdF3+dXiV4dbYyfC1DXf5D3Yfjr+tHdS6NZ9+WeH91SSedeeX+Um/G5vNT9wdfF0JfHHhCmb9OA+Stdl+iWk3hn1hRQnjYvoLiKiOqj3CnjaQ9cLiY3pREhrVZqWqnymO4gKY0DvqlqIWv5AERCNfFnNz9loBcpoInVmebTeQ2T3zAkv+5zVcNPACt+KgDYoDiN2UzajypVh20z8fAySJz4FFkNeWaUEWwPUPLPawwFrIRvJxpIzDJJUs3u2f2bbVGzio3+/brmn3Ws0+6jXMgTvoNRoDXbtOxZAN82AmIN9ncGePwUdAaEZB0bzqcy4bnQuZkge8LESM6ktcZ1DIQZArLvathusYnCZZDAqwkaRREUM9W2Rlggy++bVqmPBSOupPyvf3bniH36pMSJ2IKgWuYjkDWU14NYoc36kCeT9gdzfgynxQRFQ9M5lWkVOyQbL/6aVbVJtsW0VG9LM7/okq3Fv1o6+/vml8AMo4zMfWUbSkO26rmSrHhCSRTlXNB1x/qBfLZVHWr6UIMpfmDcmTyBgDKSTLPU3S38CMrQnjqCGzRX3geSvfx1eIBRsLLCCR3aaVxyM2jDFwtWGE8rWsjl1f9lzKvAlYibdk3VguIgrxh7sK8YnSk+Ib+fOY5tFLud6wteNHxinXCkHZXJ3UOHl6pylIKs1SyX9pvmv8LQNvOd8XbpO8xSJkN00LAe9/0RSxtXVMSFowEfb0UrBLtiVO8ZSB/6L0ykxJ6M8TesXfndDfry7HkvYSrG916d+Va7RsFwK6WgRKLG19JRdO6ZzNd8j9GeAuv/eaATpz++bf+H0/ks4r8WvJTk4P30PnDw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxmwZWOwPYEZh0vr3MgBkrZ56Qh5AbW27FgyIfz6SiYmQC6lZyYzROvV7rcXfbunHCex5QecQy5oyrSw19Z/ImfmTKeuW2sBtmoNaELNNYHUCMy8hu15DWi1dC3kvICQcYGZaOuWiewasmqWO0GWbzV9E9URat7r2h3kXJqWKnVT11ZJzLhfum3rRc78FHPKfYYT4L4g/ji4uvSlpo8rTHrndIOydJh3FkJkvmGQegQE4pjUSZoYp8aezmnE/TGdMyyKHJ59RrytP999fHysP9r1NJ8blmmahukZUifidP5Z73yqLkMUslm6OXcxSxklOKZrrEBdgVikkRbE8zSnYpG8YxoZyFSma7CS6UMN9lk3XhyU6I60tAcy57jGFxhVxkYwgxwYAe12FLb1z8dVcHN3kmPGZ2me8IPzv0ECtoQ4zSCq8SqyCt3xFt9IV+cUiB8yEhecLuFatUmGCXDtJocZXV1SLpsv4lpZfm3F5R+tugzIv5Tl1NjFKqEbb2SnR+fAxf+p2W69NlbucFxA5yEkjoPigg2j9LfVuh8ngePefR+iddAuIewqb0Bty/18PmzWbW89X4L1dHW+mKWjb97Q7YbhzdPl6H7St7Mo+xFcDQRanyTUCL+cL6L/7OklT06ofeGdjYyTdfPp+/0qtoL4cT6E2+vbL59oiziN5k2fTi6mdv51iYeeF37j7pcsdF3+dXiV4dbYyfC1DXf5D3Yfjr+tHdS6NZ9+WeH91SSedeeX+Um/G5vNT9wdfF0JfHHhCmb9OA+Stdl+iWk3hn1hRQnjYvoLiKiOqj3CnjaQ9cLiY3pREhrVZqWqnymO4gKY0DvqlqIWv5AERCNfFnNz9loBcpoInVmebTeQ2T3zAkv+5zVcNPACt+KgDYoDiN2UzajypVh20z8fAySJz4FFkNeWaUEWwPUPLPawwFrIRvJxpIzDJJUs3u2f2bbVGzio3+/brmn3Ws0+6jXMgTvoNRoDXbtOxZAN82AmIN9ncGePwUdAaEZB0bzqcy4bnQuZkge8LESM6ktcZ1DIQZArLvathusYnCZZDAqwkaRREUM9W2Rlggy++bVqmPBSOupPyvf3bniH36pMSJ2IKgWuYjkDWU14NYoc36kCeT9gdzfgynxQRFQ9M5lWkVOyQbL/6aVbVJtsW0VG9LM7/okq3Fv1o6+/vml8AMo4zMfWUbSkO26rmSrHhCSRTlXNB1x/qBfLZVHWr6UIMpfmDcmTyBgDKSTLPU3S38CMrQnjqCGzRX3geSvfx1eIBRsLLCCR3aaVxyM2jDFwtWGE8rWsjl1f9lzKvAlYibdk3VguIgrxh7sK8YnSk+Ib+fOY5tFLud6wteNHxinXCkHZXJ3UOHl6pylIKs1SyX9pvmv8LQNvOd8XbpO8xSJkN00LAe9/0RSxtXVMSFowEfb0UrBLtiVO8ZSB/6L0ykxJ6M8TesXfndDfry7HkvYSrG916d+Va7RsFwK6WgRKLG19JRdO6ZzNd8j9GeAuv/eaATpz++bf+H0/ks4r8WvJTk4P30PnDw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I8EH3fXxFlH1fBSbiERAUp5SaW3gS90O9l5TqT4G5wqO0A7a9fOzQU6GXZT6pEPRnPnJk5PvaJwPPUDUIhgEuaMWPYbZm/mm4MPvHAcqp116rFuGbhmHhWHbBHIhvIQx2bxlCIHIZMSMxky3Rtp2o5ruU2rx03cBuBXat4Tf8/07gFLlRo5VKxTWM9T5kIirQtM+csyLCgImB4DiKQJJiE52eB8gxwiclsn2xQFgl5eyblIkCIVCIgkKakQrI5OkF7PieRCCY0YVjmHF5zRqJlvu5drVaVVbWS8QS5tm0j20fKJxI0+W62v5WbIRqyONusO5hljBKc0hesQZ2DnGWREaZJxqmczT8J7SDH1qEtWBOLODX23URvCQp0R0baA8kFtsQMO2WwMcTAgREwbsbDlvn9uAlu9l5zzESc8bk4WP8bJGBLSLMFRJYoKyvRHR/xg3a1T4AEQ0bSXNAlXGiaLDABYVxxiOn6jApFvkgYxfiNtVB/tGQZkH8Zywnaxaqgow+606UJCPl/ZrY7r02UW5zm0O7Mps6oNp17957nS5dfD9Yv53xGlvdJq4Cw67wBtR336/qQrFtuvW5aMgS9kaQs8/OrsePl6/oLGXlx4zH36s/T0RXyptnZz5Uf+3KwTJP+FOTwZTla+T1AA87dJ/74JPuzi/H45tvl+oyFY8dPBpMfDfy86I16diefokZD3N3Ki+Tu/vHnY/g0Hj0k07swu/fclftjkSaPuBp37btokNyOfzaqd7Ufv5+/3awGqwSJ89/pujdw8pvO1U3rrabdGvaNpSRM8odHILJcanoMu0ZfzQvLr+VFW2hkxYVrsNAaJSQwabb1Li0tQa4EiEaBGuZm3TwNHbfad05dv1qtOXbn1A9d9Z9fazp9P2yWGrRBcQCxk7GY6lxaZTf8+RogmQcCWATcWmY5mYEwv4jYxRIbQzZWhyNjAq4zpeIN77TvNHtht9PoKBVoNDqKka4T9kO/4zV7vmlcZPKSXfIwlsD3Fby+p+BjIHRBQcu85rlQRBdSteQJL3OZOpUlrjDI1UXAtRYHbq1ZR4LOFylowGieRXkKlcVsUTQIic2va2EiCuu4d12cv0/LO/xWdkL5RFQ7CF3LKahpwrurqB7Uy0I+L7i5W3AZPswjqo+ZaqvklGyQ7H96Y4umyZYqqqJfnckvp8S9dT96+/ud6AtQ6LAf20TRku6kLe9UdU0oEWmX03zCladKvlzmxfw8LZBchUdKJx00AZIrlXu+zn4DQ9sQ6KhLZov6IPPWvo8vlzM2kVjCXLHNKJZHvDAmIPQLY6hOy/rY58teStU3CWv5ka2TqoeIRvzlW4UERPsp85X6WWU8ehvXB7F28qg61bNCaXOiV/o6ef6EFCRTYanSv4zvBv8owEfJ943bJm+xSMWmh1zC518MLWwtExOS5UwOu2Zh2BXbAqd8XkDw5vQuTCHorzf0Wnx6Q0/PzyZK9ubY3PrSvztbtKALAVM/BAosLXOtHpwqOUt2xP0V4K6+dxuhc9rs2X/T9/1K2u/M7y07PT08D+0/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoYwe5eKkw6gwKVvfpVWy7T186MQRNCwFJUNtffxIUi1a73WemMzaLlbW+dcm3VouCKDQsm1KUMhwTaei05deGBrTA1A3F1DVDqUG/ppiaNlF035hMGr6mNepAloaUZmhIKAOEtWVD06sKv2I0x7phGQ1LMyu6rr3I0hNKKTfNVSqaLK2ikFArd9uWs5RYMaCYWgREiFoMWp59c21xTQsUmOROa40yd5h2ZowllqrCio8gCkNYgXGkttQdnZZPLQ9PCWBZijY+fdqWN3eXy2VlWa3E6VQ1NE1TNVPlOj7F03O5c1ZcRv6QBPH63AMkJhiCEH8CAeoGsVnsS3Y4jVPMZtER07qqa8K0glZQgXqNnMvql4Mc3YmWdkCmFCh0BvTC2AgFKEUEIulxNGzL56dVcH13nAJCgziN6N757yAhskBhnCBfoUVkBbrTLR5IV6eFoDUkMMwoXqBb0SYJgIhK9ykK8OoaU958PpXy8ksryv9w0WUI/k1ZWmoZK4euHsiOg6eIsv9Ts3K91laeQJihzrgbNRrV5C6q6WrfGM0ftVlw9/7rxaPTdg6hrLwGtS335rzfrNve2lzKQubOH72Bfu93n/sXNwm0l9lA/eXM5iRAHutFy1rUH4zp59tjoPZu67csTd4vsUsGF/6D/zG4xKEPoPtvuLg+Gz2Yz6D3Erw0hw5zRymwF2+zcXXWvwC2MZ46c/iP/hDV0agLPm8/w5g93fTcUdx/VP2Rs+heNSJgDBrvQQB+u2dXsfcApr23eVK/u8pqE+8Ztr9iKsewKywowcsmbwiy4ijaY+hIfV4vwH6mFyHBvhLkqlYiOIoyRJjcEbcEtVgZJyDsW7yY67Pp2LrmNo2uYVarNV3rdU3b4P+ZtabeN+1mwUFrFHsQezEJsPAlWHbdPz8DhJFFEfFRqiziDM4QlX+w6AAGpCEZ8ccRE4rGMWfxrl2tc5i1nt5weg3HdJ2ua7t6Xau7l81+7VKWbmN2R+5SO2Ao3WXw+g6DjxDECUaC5kWfU97olPGUzMEiY6FeWYAKQRkfBKngYsuoNesqxVESIgFYjWI/C1ElmSV5glS6/jUUAGkuHbnj/P0dDW//W5EJruNjoUBFLF3Eq4m+jaK6VS8COR5wsxxwYd7OfCyeGU8rSzFcI9n99NUtok22rcIjeu15r3qBe6t+8vXvN9UfQKn7+dg68he45LaYqXxMcBLpFNWcg8q8ki0WWV6/S0GQKTevcp7UVQ/BjLPcxzh+R0TdmlBPGjJb1Huet/JdfBmbEY8BhiLebVJ+PGHD8BAVG8aQv5bVqevLjkueN4ZW7JCsF/JFRCD+cVeBFhR6XHzPf5Zx6n+V64Ctkh8eJ18rGCZTcRLj5ONIU8CYm8Wc/+K0bPyQgUPOd4XbJG+xMN5Nk4yh418kQWxtGUAYZ4QNHTkXlMk2x8k+EmR9KX0zkxP6ZkKv6NEJ/fvm2uO0FwF5q4v/rKzgvF0gksUikGNpyyu+cHLnZFoi9w3AMr87DVvvNl3tT/y+G0nnm/i7pJTT/ffQ+Q8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072661388233566227</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072661388233566227</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072601388233560229</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072631388233563662</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072661388233566227</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>A7A16611B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>9BA133F1B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>ADA10E82B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d3afa21-d1cd-4065-aa5f-fa33ae4a458e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true" id="7af4cb6a-781a-4269-a422-d50ba0b645e7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="2c72d510-76b3-435c-9e82-1af7b14e1b10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>41B19C63B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96761015E63C71E0401F0A059979D6:B3D5630A"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726141388233574015</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>80B1A063B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:80B1A063B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:80B1A063B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>41B19C63B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>35B16AF3B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">47B1F574B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:41B19C63B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:35B16AF3B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:47B1F574B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnwBYcYT2DGGGid5kKANiEvHUVeQD225FiyIf31lUxMgJCUnpnMEK338u1F3+qcoyS2PZ9zyARhVAt7bf1ndNpEZ2eOU3Nmp2bNsSK7Js+o9uja2D7F0GpFpq6FnOcQUi4QFW3dNq1GzbJrtjuxbM9uepZZb7asB137ARmXrqVKXVqtkphyrwzb1vOMegxxwj2KEuCewN7Yv7r0pKaHKkx653yNsgyYdRZCpJ5h4HoEGOIY1zFLjHNjR+c84t6YzCkSeQYvMSPe1l9sl8tlfdmos2xu2KZpGmbLkDoRJ/PPeudTZQxRSGdsfQ4QZZRgFJPfSIG6ArFgkebHc5YRsUjecW0Zlqlc12CFa9hy6GfdeA1QojvS0w7IjKMaXyCrcjaCGWRAMWjfR2Fb/3xcB9e2kwxRPmNZwvfO/wYJaAExSyGq8SqzCt3xHg+Uq3MO2AspjnNOCrhWY5IiDFwbZjAjq0vC5fBFXCvbr624/CPVlAH+l7acG9tYJXTjQHV6ZA5c/J+ebfdr7eUHinPoGE/F4/W3qwEKTEJmWPSdyXBqfumHk2W7hLCtvAa1affLeX9YN7P1YpT2/C+BW0zvk4ciCRn7Nfn+1W8+D7v3c/s0fBC/2YXj+l+ccOEkQZ5cj6cD7pws/d6g4F/70+v8yYJheLK6HN2Zn7J4ePWULEz+PXi+GBV3qD/4djJl3/j4eujPR+zW9h9O7orfz6P5skiTq0Xan4bNm7vbrL8au5MbCj9cO7m9Z92W8el+2rgPLiCfZMQNbi9dnPbbrzlt57ArrChhnD/+AiyqoxqPsKcNZL+Q+JhelIREtVmp6qWKo7gAKvSOslLU4uWSgEjkyWauz47VtVpBs9G1W42GY5lBt+Xb8r+W41qDlu9WHLRGsQcxYHRGVCzFsuv5+RggTjwONIKsVrAcL4DrH3jsIYG0kI7k5WCUw4RJFrdsq9Ew/X7L6QeDRs8M7H6vOWj2nEHLdn3zTNeumbihN5k/E5DtMvjpDoOPAJOUgKJ5NedcDjoXsiRPqMhFbNULVKeQy0WQKS72bMc9NThJ0hgUYCNhUR5DPV2kZYEMvv6VlIR5KR31J+X9eze9/W9VJaRORJQCV7l0QXYTDqwis0rk/YTd7YQr934eEXXNZFlFRvAaye6n12lRY7IZFZnRz2D806pwb9SPNn9raXwAytivxyZQVJCtsNVOlWtCkkin6uYTqj/V86LIy/6dKYLMpHtD8qRljAHnkuWeJ+w/oMbGhXHUktmg3ou8ke/iy8WCjgUSkMhp08rjES+MMXD1wgjlbVkd+3zZCSnrJmAlDsmCWD5EFOIP3yrYw0pPiofyZ8my6LVdB3xtxZF5ymeFIHSuTmqdPL8zFJhJt0TyH8u2nR9ycCj4rnBT5A0WIafpMRfw/hdNEVtbRxiznIqwp5eCbbItcYrnFLxXpTduSkJ/2dAr/u6Gvr+6HEvaS5C+0SV/V66Rclww6OohUGJp6yv54JTB6XyL3F8AbvO7a3Yt3/w7v+9m0nkjfivZqun+fej8AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnwBYcYT2DGGGid5kKANiEvHUVeQD225FiyIf31lUxMgJCUnpnMEK338u1F3+qcoyS2PZ9zyARhVAt7bf1ndNpEZ2eOU3Nmp2bNsSK7Js+o9uja2D7F0GpFpq6FnOcQUi4QFW3dNq1GzbJrtjuxbM9uepZZb7asB137ARmXrqVKXVqtkphyrwzb1vOMegxxwj2KEuCewN7Yv7r0pKaHKkx653yNsgyYdRZCpJ5h4HoEGOIY1zFLjHNjR+c84t6YzCkSeQYvMSPe1l9sl8tlfdmos2xu2KZpGmbLkDoRJ/PPeudTZQxRSGdsfQ4QZZRgFJPfSIG6ArFgkebHc5YRsUjecW0Zlqlc12CFa9hy6GfdeA1QojvS0w7IjKMaXyCrcjaCGWRAMWjfR2Fb/3xcB9e2kwxRPmNZwvfO/wYJaAExSyGq8SqzCt3xHg+Uq3MO2AspjnNOCrhWY5IiDFwbZjAjq0vC5fBFXCvbr624/CPVlAH+l7acG9tYJXTjQHV6ZA5c/J+ebfdr7eUHinPoGE/F4/W3qwEKTEJmWPSdyXBqfumHk2W7hLCtvAa1affLeX9YN7P1YpT2/C+BW0zvk4ciCRn7Nfn+1W8+D7v3c/s0fBC/2YXj+l+ccOEkQZ5cj6cD7pws/d6g4F/70+v8yYJheLK6HN2Zn7J4ePWULEz+PXi+GBV3qD/4djJl3/j4eujPR+zW9h9O7orfz6P5skiTq0Xan4bNm7vbrL8au5MbCj9cO7m9Z92W8el+2rgPLiCfZMQNbi9dnPbbrzlt57ArrChhnD/+AiyqoxqPsKcNZL+Q+JhelIREtVmp6qWKo7gAKvSOslLU4uWSgEjkyWauz47VtVpBs9G1W42GY5lBt+Xb8r+W41qDlu9WHLRGsQcxYHRGVCzFsuv5+RggTjwONIKsVrAcL4DrH3jsIYG0kI7k5WCUw4RJFrdsq9Ew/X7L6QeDRs8M7H6vOWj2nEHLdn3zTNeumbihN5k/E5DtMvjpDoOPAJOUgKJ5NedcDjoXsiRPqMhFbNULVKeQy0WQKS72bMc9NThJ0hgUYCNhUR5DPV2kZYEMvv6VlIR5KR31J+X9eze9/W9VJaRORJQCV7l0QXYTDqwis0rk/YTd7YQr934eEXXNZFlFRvAaye6n12lRY7IZFZnRz2D806pwb9SPNn9raXwAytivxyZQVJCtsNVOlWtCkkin6uYTqj/V86LIy/6dKYLMpHtD8qRljAHnkuWeJ+w/oMbGhXHUktmg3ou8ke/iy8WCjgUSkMhp08rjES+MMXD1wgjlbVkd+3zZCSnrJmAlDsmCWD5EFOIP3yrYw0pPiofyZ8my6LVdB3xtxZF5ymeFIHSuTmqdPL8zFJhJt0TyH8u2nR9ycCj4rnBT5A0WIafpMRfw/hdNEVtbRxiznIqwp5eCbbItcYrnFLxXpTduSkJ/2dAr/u6Gvr+6HEvaS5C+0SV/V66Rclww6OohUGJp6yv54JTB6XyL3F8AbvO7a3Yt3/w7v+9m0nkjfivZqun+fej8AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxnjGwTbE5jhEnroCYQG0tK8dBR5ASW27OgCpL/+SCYmQEhKz0xmiNar3W8v+nYvOEoTL2pxDkyQjBr9bsP85WIHqtUZWDXXC62q62MrCOszC3k+9qoBxk7t3jT6nEvoUy4QFQ3Tc1zfcj3LCyauF3nnketVAq9+ZxrfgXFlWqlUHNNYpwnlUeG2YUpGowxxwiOKUuCRwNG4NbiKlGaESkxm82KDsnDImgsh8si2cSUGDEmCKzhL7Qt7T+ci5tGYzCkSksGLz5g3zJe7q9WqsvIrGZvbnuM4thPaSifmZP7ZbH4qL0Pcp7Nsc+4gmlGCUUJ+Iw1qAGKRxUYrmWeMiEX6jmnXdh1t2oI1trBbpZ9N+9VBge5ES3sgGUcWXyC3NHYDM2BAMRi3N/2G+fm0Cm7uThiifJaxlB+c/w4S0CUkWQ6xxcvISnSnWzySruYF4KhPcSI5WcJQt0mOMHBjxGBG1leEq+aLuVGU31hz9UfKLgP8N2W5sHexKuj2kex0yRy4+D81263Xxsp3lEhoPt58Xd2Hc5ytF4Pk9stZOhJBiGQnjx8bBYRd5Q2obblfzofNuu2tl0swegim03/d+fCcx7OnqrP6QYJhsP559min/9DhDxctH+VwYJ/d1tJ0zmb9S/r8Nb0e3H3DdeZ6QsqH6+yfgIXTxScp8/ribNBnHn0Y5uNWrzOVk+s7H33pffPdcav98yqfsjtG7tzg+6j3u5XGy2XwXLt3bgPZm+Z34eqnLcjtcgLxp15nDHgVnuUPo8W3L0/J6P6y8RrTbgz7wpISxvL+AbAoj7o9+l2jp+qFxMf0oiUktmaFapRrjuICqDCb+pamlkgqAiJxpIq5Ofu1tnve6vltL/T9qut02mHLU/+F1cDtha2g5KANigOInYzOiPalWXbTPx8DxGnEgcbArGUm8QK4+YHFLhLI6NMb9TgyymGSKRav9c47ntfuhX7Q6tS79XbN9S8v/XbXr/n1nhOaxjAT1/SatWYC2D6D1/YY/AYwyQlomtd9zlWjc6FS8oSWUiRuZYkqFKQaBExzcaQIpmZzkuYJaMB2msUygUq+yIsE2Xzz61kI80J6czkp3t+74R1+KzOhdGKiFbiOpQ2qmnBkFDllIO8HHOwGXJpvyZjoZ6bSKhjBGyT7n167RbfJtlVURL86419uiXurfvL1tzftD0DZh/nYOoqXZMdtOVPVmFAk0iyr+YQqTxW5XMqifnVNkEyZtxVPurZ6oVKx3PMkewRqb03YJw2ZLeoDz1v5Pj4pFnQskIBUdZtRHE/YMMbA9YbRV69lfer6sudS5U3AWhyTdRK1iGjEH+4qOMJaT4lH6meVsfi1XEds7fhRcaq1QhA61yc9Tp7faQqcKbNE8V/Gdo0fM3DM+b5wm+QtFqG66V4KeP+LoYmtYSKMM0lFv2sWgl2yLXCK5xyiV6U3ZgpCf5nQa/7uhJ4OrsaK9lJkbnXJn5UtUrQLBlMvAgWWhrlWC6dyTuc75P4CcJffA6fttpzzP/L7fiTNN+K3kp2cHr6H5n8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc6I8FL7vr2DoZQchQBWZ6gza0tLabletu+1NJw1B8wpBSfCjv34TFKvWdt13hhnI4eSc53zkyblgMIlN12MMZ5ykVAkuG+prNXo7D014rlmhjTTbckKtboCaFkZvUXheBTByQlUJGMtxQBmHlDdU0wCWBkzNdPrAdM2qC6qVqmW/qMoAZ0yYFioVQ1UWSUyZW7htqHlG3RQywlwKE8xcjtyed99xhaYLS0xq82KFsnCYNUecT1xdR5UQIxzHqILSRL/Qd3QuQub2yJBCnmd47TNkDXW9dz6fV+ZWJc2GumkYhm7UdaETMjI8VZsn5WYcBjRKV+s2pCklCMbkHUpQ95iP0lDx4mGaET5KvjANdGBI0xpeIA0Bm56q+oeDAt2RlnZAZgxqbARBaayLI5xhirDy1A0a6ulxFVzt7WeQsijNEra3/jdImM5wnE5wqLEyshLd8RYPpKt5gZEbUBTnjMzwg2yTCUSYKY8ZjsiiQ5hovpApRfmVBRMPKbsMo38py4W+jVVA1w9k55IMMeP/p2bb9VpZGcA4x80+f6HE7F/hM3ts/u7G4+X9YOLTx7tg3iggbCuvQG3KvV7vN+umt9abXmaR036hncnj3fvNzTt9C3odQmvLfADuUh94bXJ3Zk+rttP3w9k7vI5sx/O7t9lyHPcn4JlXu7fXwbI6vZleBycvLMn8AXhetAD/2dKfbtnzoOuACBod1qvPQGAxwF/Opmdnd9PxwKemD8jVz/FDqv/qWP1r71fGnvTBc/z+ZI9O3sbmkiWP2Y0Jpjofhslo3viIaTuGXWFJCb387T+MeLmU7RFcKr6oF+Tf04uUkFCLClV3IjmKcUy52pS7JLW4uSAgErqimKu1XWsB/7xmt8y6ZdnAaLfqnim+6rYD/LrnlBy0QrEHsZ3SiEhfkmVX/fM9QJS4DNMQZ9oszdEIM/Ubi5eQQyWgXXE4UspwPxUsbtVMYFpXdcO7tOS3b1hV03L8mm+CVsvwVOUh5T/oj8yLOM52Gfx8h8G7GJEJwZLmZZ8z0eiMi5RM4SznMajMYIXiXFwEmeRi17Sdc52RZBJjCVhP0jCPcWUymhQJ0tnqbWoQsULaveoX5+/L8Pb/lZkQOiGRCkzG0sKimvjAVWSUgXwdsLMdcGney0Mij5lIK88IWiHZ/fXRLbJNNq0iInpt915BiXujfvT2zzv1b0Dp+/nYOApnZMtteaeKa0KQSLOs5hRWppV8NsuL+tUkQWbCvC54Eug9jHLBcst+OsZU35jQj7pkNqj3PG/ku/hyPqI9DjlORLcpxfKICaOHmZwwAnFaFseOLzsuRd44XvBDsnYsBhGJ+NtZBblI6gnxo3jN0+wj8EO2tvyIOMVYwQkdypW8TpZfNAVKhVki+C/Nto0fMnDI+a5wk+QNFi666S3n+Os/iiS2hgoRSnPKg0u1EGyTbYGTLyfY/VD6ZKYg9PUNvWBf3tC/7zs9QXsJVDe65O/KGinaBWFVDgIFloa6EAOncE6HW+S+BrjN747RAp5Rtf7G77uRND+JP0u2crp/Hpp/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726141388233574015</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726141388233574015</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072691388233569822</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0726121388233572030</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0726141388233574015</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>51B19C63B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>45B16AF3B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>57B1F574B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c72d510-76b3-435c-9e82-1af7b14e1b10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true" id="2e50f51e-9179-4087-9d80-0e865186584b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="adbe4c95-cc13-4df0-858e-ffd6e0f6b284"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>FAB12C45B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96761016453C71E0401F0A059979D6:7B03621A"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726221388233582624</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3AB14B35B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3AB14B35B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3AB14B35B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FAB12C45B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EEB15416B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F0C15396B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FAB12C45B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EEB15416B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F0C15396B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqc+kFkLYjzJTbPt2DohQ96osT0hSibVKalIu//iSFIiC62WfGGczqylrfuuRb65qBJLZcjzGUcUyJ4neb6iu0nEmjYVvapO5UtZoBHG1iNQytYUEA0ZUxqZlAVXzGcuQTxgHhTdUyzKpmWpplj03Lta5c067Ur4wXVXlEGROmhUrFUJVVEhPmFm6bap4RlwKGmUtAgpjLoRt4NwNXaLqgxKS2rjcoC4dZa8Z56uo6rIQIojiGFUgT/Vo/0LkOmRvgKQE8z9DWZ8ia6vbucrmsLKsVmk11yzAM3XB0oRMyPL1UWxflZRT6JKKbcwcQSjAEMf4AEtQN4jMaKl48pRnms+Qb06ZuGtK0hlZQg2aNXKr6p4MC3ZmWDkBmDGhsBszS2AhFKEMEIuVh5DfVy/MquLk7zgBhEc0SdnT+O0iILFBMUxRqrIysRHe+xRPpal0j6PoExjnDC3Qr2yQVITDlLkMRXg0wE80XMqUov7Ji4g+XXYbg35TlWt/HKqDrJ7LTxVPE+P+p2X69NlYeQZyj1nMNooe2ufRuwtHTvB49vvmTG89ZZ8BvFhD2lTegduXeno+bdddb20t3o/uoTtCjM4jr9JbnsRcMshcTBqtg2R4/fzzr/IPV6CqdX5EX2IUDltk90MuH7H1lW28P0/46NH6ngyB6Sy7erl5G4dC+f9L9Ho7uB/f06XYMf/3z0L+bdaJe3kj0aPwreIvYv+bVovMyBs7QnjgmG/dJvJ54adrVyTC8NXrz4UX3fcoabPWbPk+GqVFPydxofsa0H8OhsKSEIJ+8IcjLo2wPv6v0Rb0A/5lepASHWlSouqnkKMYR4WpL3pLU4uaCgHDoimJuzn2vbVqdWr1tOdVqzTQ6bcezxH9OzTb7jmeXHLRBcQSxQ0mEpS/Jspv++RkgTFyGSIgybUFzOENM/cFiF3Cg+GQkHgclDI2pYHGn029YntGrN8yqLfB1vYZhGz2n1692+m3bU5VbyodkmHkRR9khg9cPGHyEIE4xkjQv+5yJRmdcpGQOFjmPzcoCVAjKxSDIJBe7Vs2u6wwnaYwkYD2hYR6jSjpLiwTpbPNraQCyQjrqjYv39214x9/KTAidEEsFJmNpI1FNdGIUGWUg3wds7wdcmvfyEMtnJtLKMww3SA4/fXaLbJNdq4iIXjvBq1ni3qmfff3rTf0HUPpxPnaOwgXec1vOVDEmBIm0ymrOQWVeyReLvKhfQxJkJszrgidNPUAwFyy3HtN3RPSdCf2sIbNDfeR5Jz/El/MZCTjgKBHdphTHMzaMADG5YfjitazOXV8OXIq8cbTip2SdWCwiEvGPuwp0odQT4jvxs6RZ+FmuE7b2/Ig4xVrBMZnKkxwn62+aAlJhFgv+o9m+8VMGTjk/FO6SvMPCRTdNco6+/6JIYmuqAEKaE+531UKwT7YFTr5Okfup9MVMQejbCb1i307op5tBIGgvAepOF/9ZWcNFu0CkykWgwNJUV2LhFM7JdI/ctwD3+b0q+L3Wrv6R3w8jaX0Rf5Xs5fT4PbT+Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqc+kFkLYjzJTbPt2DohQ96osT0hSibVKalIu//iSFIiC62WfGGczqylrfuuRb65qBJLZcjzGUcUyJ4neb6iu0nEmjYVvapO5UtZoBHG1iNQytYUEA0ZUxqZlAVXzGcuQTxgHhTdUyzKpmWpplj03Lta5c067Ur4wXVXlEGROmhUrFUJVVEhPmFm6bap4RlwKGmUtAgpjLoRt4NwNXaLqgxKS2rjcoC4dZa8Z56uo6rIQIojiGFUgT/Vo/0LkOmRvgKQE8z9DWZ8ia6vbucrmsLKsVmk11yzAM3XB0oRMyPL1UWxflZRT6JKKbcwcQSjAEMf4AEtQN4jMaKl48pRnms+Qb06ZuGtK0hlZQg2aNXKr6p4MC3ZmWDkBmDGhsBszS2AhFKEMEIuVh5DfVy/MquLk7zgBhEc0SdnT+O0iILFBMUxRqrIysRHe+xRPpal0j6PoExjnDC3Qr2yQVITDlLkMRXg0wE80XMqUov7Ji4g+XXYbg35TlWt/HKqDrJ7LTxVPE+P+p2X69NlYeQZyj1nMNooe2ufRuwtHTvB49vvmTG89ZZ8BvFhD2lTegduXeno+bdddb20t3o/uoTtCjM4jr9JbnsRcMshcTBqtg2R4/fzzr/IPV6CqdX5EX2IUDltk90MuH7H1lW28P0/46NH6ngyB6Sy7erl5G4dC+f9L9Ho7uB/f06XYMf/3z0L+bdaJe3kj0aPwreIvYv+bVovMyBs7QnjgmG/dJvJ54adrVyTC8NXrz4UX3fcoabPWbPk+GqVFPydxofsa0H8OhsKSEIJ+8IcjLo2wPv6v0Rb0A/5lepASHWlSouqnkKMYR4WpL3pLU4uaCgHDoimJuzn2vbVqdWr1tOdVqzTQ6bcezxH9OzTb7jmeXHLRBcQSxQ0mEpS/Jspv++RkgTFyGSIgybUFzOENM/cFiF3Cg+GQkHgclDI2pYHGn029YntGrN8yqLfB1vYZhGz2n1692+m3bU5VbyodkmHkRR9khg9cPGHyEIE4xkjQv+5yJRmdcpGQOFjmPzcoCVAjKxSDIJBe7Vs2u6wwnaYwkYD2hYR6jSjpLiwTpbPNraQCyQjrqjYv39214x9/KTAidEEsFJmNpI1FNdGIUGWUg3wds7wdcmvfyEMtnJtLKMww3SA4/fXaLbJNdq4iIXjvBq1ni3qmfff3rTf0HUPpxPnaOwgXec1vOVDEmBIm0ymrOQWVeyReLvKhfQxJkJszrgidNPUAwFyy3HtN3RPSdCf2sIbNDfeR5Jz/El/MZCTjgKBHdphTHMzaMADG5YfjitazOXV8OXIq8cbTip2SdWCwiEvGPuwp0odQT4jvxs6RZ+FmuE7b2/Ig4xVrBMZnKkxwn62+aAlJhFgv+o9m+8VMGTjk/FO6SvMPCRTdNco6+/6JIYmuqAEKaE+531UKwT7YFTr5Okfup9MVMQejbCb1i307op5tBIGgvAepOF/9ZWcNFu0CkykWgwNJUV2LhFM7JdI/ctwD3+b0q+L3Wrv6R3w8jaX0Rf5Xs5fT4PbT+Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1Pa9MKlI8y0gO7u420LsvW8OCENEG0TaNKK/vqTFIuA6GafGWcwqytrfeuSb61TDtPE9gPOcSYIo1rUa+uPANRBHcaOgZsN13AdGxgtr2EbnuuNvUZrbI1hrGsR5zmOKBeQirZuW8AxgG3YzSGwfbvu26BWr7v/6toIZ1yalio1S9eWaUK5X7pt63lGfQY54T6FKea+QP4guLzwpaYPK0x653SFsnSYdWZCzH3TRLUYI5wkqIZYap6aWzqnMfcHZEqhyDP87jPmbf397svLS+3FqbFsatqWZZlWy5Q6MSfTY71zVF3GcUQnbHXuQsooQTAhb1CBusRixmItSKYsI2KWfmEamMBSpg28RAYCLj3WzQ8HJboDLW2BzDg0+AyCytgtnuAMU4S1u9uorR8fVsHV3WEGKZ+wLOU757+DhGmBEzbHscGryCp0h1vck67OKUZ+RFGSc1LgK9Umc4gw124yPCHLC8Jl88VcK8uvLbn8I1WXYfQ3ZTk1N7FK6Oae7PTIFHPxf2q2Wa+VlRFMctw5L+ozmv44+b14GFtPTuvs14PzxFIaXaN2CWFTeQVqXe73826zrnvr/VJwbUbhInSYfWI/DYa4Pg9Hzsvd+fnP5xE/h6MRiq/c7n3y+kxs073n2StrUjIO7ibNdLgYXo6K6O1kcnVp3o2Do3yGpk58kc09cGL9BmexY83IP9NITDPyE94Vo3uThuMwF7NeAYq5u2w8hK+oW9wMnpKbetg9CZ8fBm8/3u56v7pHVr/BPGQ/XTSuuuFodNV1o/ZHTJsxbAsrShjk4yeMRHVU7RH1tDNZLyi+pxclIbExKVX9ueIoLjAVekfdUtTi55KASOzLYq7O/X4IPBfUQ7vlOC6wumErsOV/LbcJzlpBs+KgFYodiF1GJ0T5Uiy76p/vAaLU55jGODMKlqMZ5vo3FntQQC2it/JxMMrxkEkWrwdB3w37lguAfeaBfuvM61ktu+7WrcC2vIauXTFxTa+zYCJwts3g3haD32JE5gQrmld9zmWjcyFTsoBFLhJQK2CN4lwOgkxxsW+7Tc/kJJ0nWAE2UxbnCa7NZ/MyQSZf/doGRLyU3vaH5fv7Mrzdb1UmpE5MlAJXsYRYVhPvGUWgCuTrgJubAVfmgzwm6pnJtIqMoBWS7U8f3aLaZN0qMqLH7uARVLjX6gdf/3zT/AaUuZuPtaO4IBtuq5kqx4QkkU5VzQWsLWp5UeRl/RqKIDNp3pQ8CcwBRrlkudche8bUXJswDxoya9Q7ntfybXySNehAQIFT2W1aeTxgwxhgrjaMSL6W5aHry5ZLmTeBl2KfrJvIRUQh/nZXQT5SelJ8I39eWPYR+D5bG35knHKtEIRO1UmNk9cvmgIxaZZI/mPZpvF9BvY53xauk7zGImQ3jXOBv/6iKWJr6xAhllMR9fRSsEm2JU7xOsf+h9InMyWhv0/oJf9yQt9fXgwk7aVQX+uSPysbpGwXhHW1CJRY2vpSLpzSOZ1ukPs7wE1+d4IQuKHj/YnftyPpfBJ/lmzkdPc9dP4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6JKEH7fX0Gxj1vIRaJARatUNOFkExMv2SQvW5Oh0dnAYJgBTX79mcFg1Jis51RRBdP0dH99mW/6lKEktrwOY5BxklIl8Fvq78emg90GcrS6bbqafWIY2qOFbM3FYLqPEGIcRaoSMJZDQBlHlLdUyzDrmmlpljMxLc9qeNZJrW7aD6pyCxkTpoVKzVCVVRJT5pVuW2qeUS9FjDCPogSYx7E37lz+9ISmhypMavt0jbJ0mLXnnC88Xce1EDDEMa7hNNFP9R2d05B5YzKjiOcZvPkMWUt927tcLmvLei3NZrplGIZuuLrQCRmZfVfb36rNEAY0StfrHqIpJRjF5BVJUJfA52modOJZmhE+Tz4xbeqmIU1rsMIaNm36XdXfHZTojrS0AzJjSGNzZFbGRhBBBhSDMh0FLfX7cRVc751kiLIozRK2t/5vkIAWEKcLCDVWRVahO97igXS1TwF7AcVxzkgBV7JNFggDU64ziMjqJ2Gi+UKmlOVXVkw8pOoywP+lLKf6NlYBXT+QHZ/MgPH/U7Pteq2t3KI4h3Y8iZ6tu/wm9LEPxd0gP38Z+Mshzs7uWyWEbeU1qE2539b7zbrprbdN2eiscfHALDr3f+m/LBvsITqPBsvbV7c/vRnAfTc6X/VfVq963CeL8Pa+fj25vLm6uQ9I7kzywd3QdH8ks3Fz8af4djMdWq9mzxoN/B9nDdr1rR+DwIZGs3Cjmz/Nf0bX/aeHTF9ZD+gCE2tKhqu7HkzrNp2/Fu7V+WA6Oiuun+5mwdT8dvHSQU4yZE3DuLJ7F09F02m9x7Qdw66wooRx/vgHMK+Wsj0CXxmIeiH+Nb1ICQm1qFT1FpKjGAfK1bbcJanFywUBkdATxVyvB0bPPKm7ja7l1sW5Mnpdt2OJL9d2zIHbcSoOWqPYg9hLaUSkL8my6/75GiBOPAY0hEwr0hzPgalfWPQRR0pAR+JwpJTBJBUsbvndrtl1OvVO33asQdfv+02n0W86fkN8911VuUr5kA6zTsQh22Xwkx0GHwEmCwKS5mWfM9HojIuUPKMi57FZK1CNQi4ugkxysWfZzonOSLKIQQLWkzTMY6gt5osyQTpbvy0NYVZKR/1Jef4+DW//X5UJoRMSqcBkLF0Q1YQDV5FZBfJ5wM52wJX5Th4SecxEWnlG8BrJ7q/3bpFtsmkVEdHv3vi3WeHeqB+9/eNO/QtQ+n4+No7Cgmy5re5UcU0IEmlX1XxGtedaXhR5Wb+mJMhMmNcFT5r6GHAuWO5lkj4B1Tcm9KMumQ3qPc8b+S6+nM/pmCMOieg2pVweMWGMgckJIxCnZXXs+LLjUuSNw4ofkvViMYhIxF/OKtjDUk+Ir8VrmWbhe7kO2NryI+IUYwUndCZX8jp5+aQpcCrMEsF/abZt/JCBQ853hZskb7Bw0U2POYfP/yiS2FoqwjjNKQ98tRRsk22Jk78swHtX+mCmJPS3G3rFPr2h7y5/jgXtJUjd6JK/K2ukbBcMqhwESiwtdSUGTuGczrbI/Q3gNr/XO13T7tZP/sbvu5G0P4g/SrZyun8e2v8C</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726221388233582624</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726221388233582624</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0726171388233577403</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0726201388233580600</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0726221388233582624</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0BB12C45B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FEB15416B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>01C15396B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>adbe4c95-cc13-4df0-858e-ffd6e0f6b284</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true" id="0379ef9e-8a9c-49a4-bb94-7fc19923352a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="bdfdd7ad-7a7c-435d-9a32-ba3cf42456e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A4C19DD7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE967610168A3C71E0401F0A059979D6:39D136F2"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726321388233592743</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E3C131C7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E3C131C7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E3C131C7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>A4C19DD7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>98C17688B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AAC19D09B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:A4C19DD7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:98C17688B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:AAC19D09B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0j29xsT2DG2JBDmwsByknz0hHyAjq1ZWLJQPLrK5mYACEpPTOZIVqvdr+96Nu94DiJbc/nHDJBU6b1w5b+M6oBMU03Mkg0w0YNpg1j2ogioxpN7bodNSPXtXStz3kOfcYFZqKl26ZVNSzbsJ2xZXt2w7OdiuM0H3RtAhmXpqVKxdS1TRIz7hVuW3qeMS/FnHKP4QS4J4g38q+vPKnp4RKT3r7YoiwcZu2FEEsPIVKJgEAckwpJE3SBDnQuIu6N6JxhkWfw4jPiLf3l7nq9rqyrlTSbI9s0TWS6SOpEnM4/6+1P5WWI+myWbs8BZimjBMf0GStQ1yAWaaT58TzNqFgk75i2kGUq0wZsiEGsGvuso1cHBbozLR2AzDg2+AJbpbEhzCADRkD7Puy39M/nVXB7d5xhxmdplvCj899BAraCOF1CZPAyshLd+RZPpKt9AcTrMxLnnK7gRrXJEhPg2iCDGd1cUS6bL+JaUX5tw+UfLbsMyN+U5QLtY5XQ0YnshHQOXPyfmu3Xa2tlguMc2o0vC5eGTpgT5nSf6dqsYyv9hedCmK0Cwr7yFtSu3C/n42bd9dbLJZZeNqemY11+vZ9w5K6D5RN0BmgCVfHdv3R/rRZoPHx47P+4qj5kE9OfN/zFUISPi2xl3jbmQZV8+TEQJPtynww+WXe3k4dl8/5pRJ6/DnrdS3+Nq6PpYN5t9hZmffDPv3Y0z27GQ3GFftyuBuPYHqFh966OhsMbknfo9D5tTvA3/myan5zLu863TrN2vbqiAbOD5KHbeo1pP4ZDYUkJo3z6HxBRHlV79EOtJ+uFxcf0oiQ0MmaFqrdUHMUFMKG31S1FLV4uCYhGnizm9uzXAssNw2bHdqvVmmUGHde35X9uzbF6ru+UHLRFcQQxSNmMKl+KZbf98zFAkngcWASZsUpzsgCuf2AxxAJrfTaUjyNlHMapZHGn6jZd33WDnt0IQqfeDM1eo9esObXQDoJ6R9duUnHLbjN/JiA7ZPD6AYMPgdAlBUXzqs+5bHQuZEoe8SoXsVVZ4QqDXA6CTHGxZ9ecOuI0WcagAKMkjfIYKsvFskgQ4ttf28CEF9Jhd1y8v3fDO/5WZkLqRFQpcBVLB2Q14cQosspA3g/Y2Q+4NO/nEVXPTKZVZJRskRx+eu0W1Sa7VpER/QxGP60S90797Otvb6IPQKHjfOwcRSu657acqXJMSBJpl9V8xJXHSr5a5UX9moogM2keSZ600AhILlnuaZz+AoZ2JtBZQ2aH+sjzTn6ILxcLNhJYQCK7TSuOZ2wYI+Bqw+jL17I5d305cCnzJmAjTsmCWC4iCvGHuwrxiNKT4oH8WadZ9FquE7b2/Mg45VohKJurkxonT+80BUmlWSr5L832jZ8ycMr5oXCX5B0WIbtpmgt4/4umiK2lY0LSnIl+qBeCfbItcIqnJXivSm/MFIT+MqE3/N0JfX99NZK0l2B9p0v/rGzQol0I6GoRKLC09I1cOKVzNt8j9xeA+/zerQZW1Qr+yO+HkbTfiN9K9nJ6/B7avwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0j29xsT2DG2JBDmwsByknz0hHyAjq1ZWLJQPLrK5mYACEpPTOZIVqvdr+96Nu94DiJbc/nHDJBU6b1w5b+M6oBMU03Mkg0w0YNpg1j2ogioxpN7bodNSPXtXStz3kOfcYFZqKl26ZVNSzbsJ2xZXt2w7OdiuM0H3RtAhmXpqVKxdS1TRIz7hVuW3qeMS/FnHKP4QS4J4g38q+vPKnp4RKT3r7YoiwcZu2FEEsPIVKJgEAckwpJE3SBDnQuIu6N6JxhkWfw4jPiLf3l7nq9rqyrlTSbI9s0TWS6SOpEnM4/6+1P5WWI+myWbs8BZimjBMf0GStQ1yAWaaT58TzNqFgk75i2kGUq0wZsiEGsGvuso1cHBbozLR2AzDg2+AJbpbEhzCADRkD7Puy39M/nVXB7d5xhxmdplvCj899BAraCOF1CZPAyshLd+RZPpKt9AcTrMxLnnK7gRrXJEhPg2iCDGd1cUS6bL+JaUX5tw+UfLbsMyN+U5QLtY5XQ0YnshHQOXPyfmu3Xa2tlguMc2o0vC5eGTpgT5nSf6dqsYyv9hedCmK0Cwr7yFtSu3C/n42bd9dbLJZZeNqemY11+vZ9w5K6D5RN0BmgCVfHdv3R/rRZoPHx47P+4qj5kE9OfN/zFUISPi2xl3jbmQZV8+TEQJPtynww+WXe3k4dl8/5pRJ6/DnrdS3+Nq6PpYN5t9hZmffDPv3Y0z27GQ3GFftyuBuPYHqFh966OhsMbknfo9D5tTvA3/myan5zLu863TrN2vbqiAbOD5KHbeo1pP4ZDYUkJo3z6HxBRHlV79EOtJ+uFxcf0oiQ0MmaFqrdUHMUFMKG31S1FLV4uCYhGnizm9uzXAssNw2bHdqvVmmUGHde35X9uzbF6ru+UHLRFcQQxSNmMKl+KZbf98zFAkngcWASZsUpzsgCuf2AxxAJrfTaUjyNlHMapZHGn6jZd33WDnt0IQqfeDM1eo9esObXQDoJ6R9duUnHLbjN/JiA7ZPD6AYMPgdAlBUXzqs+5bHQuZEoe8SoXsVVZ4QqDXA6CTHGxZ9ecOuI0WcagAKMkjfIYKsvFskgQ4ttf28CEF9Jhd1y8v3fDO/5WZkLqRFQpcBVLB2Q14cQosspA3g/Y2Q+4NO/nEVXPTKZVZJRskRx+eu0W1Sa7VpER/QxGP60S90797Otvb6IPQKHjfOwcRSu657acqXJMSBJpl9V8xJXHSr5a5UX9moogM2keSZ600AhILlnuaZz+AoZ2JtBZQ2aH+sjzTn6ILxcLNhJYQCK7TSuOZ2wYI+Bqw+jL17I5d305cCnzJmAjTsmCWC4iCvGHuwrxiNKT4oH8WadZ9FquE7b2/Mg45VohKJurkxonT+80BUmlWSr5L832jZ8ycMr5oXCX5B0WIbtpmgt4/4umiK2lY0LSnIl+qBeCfbItcIqnJXivSm/MFIT+MqE3/N0JfX99NZK0l2B9p0v/rGzQol0I6GoRKLC09I1cOKVzNt8j9xeA+/zerQZW1Qr+yO+HkbTfiN9K9nJ6/B7avwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxljywZ8mcAMAafHaRIymJDTvnSEvIBaWyaWTGh+/ZFMTICQlJ6ZzBCtV7vfXvTtnnOcpXbQ4xwKQXOmRYOO/gN5CfabbWzYGNpGk3jY8N2pZdiW5bftFrQgcXUt4ryEiHGBmejotoUcA9mG7Y2RHdjtwEGNVtP9rmsTKLg0LVUalq6ts5TxoHLb0cuCBTnmlAcMZ8ADQYK4d3MdSM0A15j07vkGZeWw6C6EWAamSRoJEEhT0iB5Zp6bezrnCQ9iOmdYlAW8+Ex4R3+5+/T01HhyGnkxN2VMlmn5ptRJOJ1/1ruf6suQRGyWb859zHJGCU7pM1agbkAs8kTrpfO8oGKRvWMamchSpg1YE4OgJvusm68OKnQnWtoDWXBs8AVGtbERzKAARkC7H0Ud/fNpFdzcHReY8VleZPzg/HeQgK0gzZeQGLyOrEZ3usUj6eqeAwkiRtKS0xXcqjZZYgJcuytgRtfXlMvmS7hWlV9bc/lH6y4D8jdlOTd3sUro5pHsDOgcuPg/Ndut18bKBKcldLPFzTwbfhn5acomAxs/m7NV9rC2brJep4Kwq7wBtS33y/mwWbe99XKJDdNm5t7b1niejC+fer/GpZhctZlLJs1YtO1fZzxJXXZmX42vi4dBnBbDtXMx9FYxXzxPR6tnMSzCyEW9dRR+ch6+Pq7X336Ob+++frl/uPLOrJA9fp18G0Zf8nDgD9xo6lA6JI6VhHRCohhd3P7Tu78/+47nKRrMpjd3tyMI8/j+8dPQda4fwkGYFmw6S/zJSkSd15h2Y9gX1pQQl9OfQER9VO0RDbRLWS8sPqYXJaGJMatUg6XiKC6ACb2rbilqCUpJQDQJZDE3Z9/rI7fteRe27zhNZPUv/J4t//ObHrr0e17NQRsUBxD7OZtR5Uux7KZ/PgZIsoADS6AwVnlJFsD1DywOsMBaxEbyceSMwziXLO43UdhDfrvddPquG4Z+H3n9i3YLhZeu20JI125zMWTDojcTUOwzeGuPwUdA6JKConnV51w2OhcyJY94VYoUNVa4waCUg6BQXBzYTa9lcpotU1CAzSxPyhQay8WySpDJN7+2gQmvpKNwXL2/d8M7/FZnQuokVClwFcsFyGrCkVFk14G8H7C3G3BtvlcmVD0zmVZRULJBsv/ptVtUm2xbRUb0ox//QDXurfrJ19/eND8AZR7mY+soWdEdt/VMlWNCkki3ruYjbjw2ytWqrOrnKoIspHlT8iQyYyClZLnf4/wXMHNrwjxpyGxRH3jeyvfxlWLBYoEFZLLbtOp4woYRA1cbRiRfy/rU9WXPpcybgLU4JuunchFRiD/cVUhAlJ4U38mfp7xIXst1xNaOHxmnXCsEZXN1UuPk9ztNQXJplkr+y4td48cMHHO+L9wmeYtFyG6algLe/6IpYuvomJC8ZCIa6JVgl2wrnOL3EoJXpTdmKkJ/mdBr/u6E/vfmOpa0l2F9q0v/rGzQql0I6GoRqLB09LVcOKVzNt8h9xeAu/weOn3koL77J37fj6T7RvxWspPTw/fQ/Q8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrU+o8EP7ur+jUj07phSrQAWbKRe05eKMeb1+ckG4h2qalSQH99W9SLAKih/POOIPZbnafveTZbTIUR5bjMgYZJwlVvF5Lfa6FdTOoGiPNRHZDs4MTSxsZFtJCVLdNG0LLtJGqeIzl4FHGEeUt1TLMqmZamlW/NS3HOnGqx5Vq1X5SlTvImDAtVCqGqiziiDKncNtS84w6CWKEORTFwByOHd+9GDhC00ElJrXdXKIsHGbtCeepo+u4EgCGKMIVnMR6U9/QaQbM8cmYIp5n8OEzYC314+58Pq/Mq5UkG+uWYRi60dCFTsDI+FBtH5SXIfBomCzPXUQTSjCKyDuSoC6AT5JAcaNxkhE+ib8xbeqmIU1rsMAaNm16qOqfDgp0e1raAJkxpLEJMktjQwghA4pB+TP0WurhfhVc3r3NEGVhksVs6/xvkIDOIEpSCDRWRlai29/ijnS1m4Adj+IoZ2QGl7JNUoSBKdcZhGQxIEw0X8CUovzKgok/UnYZ4H8pS1Nfxyqg6zuy0yNjYPz/1Gy9XksrdyjKoX301BnCy838fPGWpfZrfHT+2Ln3s8Et/GkVENaVl6BW5f44bzfrqrc+Li36R/fV86PIvgvfoR7GJ78f8FSP7t1BGJ/3G8ifPaadwWN2TX5dv17WXqq5/fqg8/qN1b84O55dX5z1RnH0FD/5KDuokc5d7Ot3QUTTHn4b3V0mURrT6SObemF3cfXojtPeHN08sPlJNe/T3sNl/Wn266x+fprcmPxN93zv5b1x01i81g7ApvnVOQxGPfpajeH3ySVrfca0HsOmsKQEPx+9AOblUbaH11NORb0Q/5lepIQEWlioOqnkKMaBcrUtb0lqcXJBQCRwRDGXZ9ftmo2e0ehYDcFsptHtNFxL/New6+Zpw62XHLREsQWxm9CQSF+SZZf98zNAHDsMaACZNktyPAGm/mCxhzhSPDoUjyOhDG4TweK25Zpu3+1bxw3bMOrG6XHNrnUs0+yf9DtW31SVy4Rf0avMDTlkmwx+vMHgQ8AkJSBpXvY5E43OuEjJFM1yHpmVGapQyMUgyCQXO5ZdP9YZidMIJGA9ToI8gko6SYsE6Wz5a2kIs0I67N8W7+/b8La/lZkQOgGRCkzG0gFRTdgxiqwykO8Drq8HXJp384DIZybSyjOCl0g2P312i2yTVauIiJ67/rNZ4l6p73396039B1D6dj5WjoIZWXNbzlQxJgSJtMtqTlFlWslns7yoX00SZCbM64InTd0HnAuWe7tNXoHqKxP6XkNmhXrL80q+iS/nE+pzxCEW3aYUxz02DB+Y3DA88VoW+64vGy5F3jgs+C5ZNxKLiET8466CHSz1hPha/MyTLPgs1w5ba35EnGKt4ISO5UmOk7dvmgInwiwR/Jdk68Z3GdjlfFO4SvIKCxfdNMo5fP9FkcTWUhHGSU6511MLwTrZFjj5WwrOp9IXMwWhf0zoBft2Qj9cDHxBezFSV7rk78oaKdoFgyoXgQJLS12IhVM4p+M1cv8AuM7v/WrXrJrd2t/4fTOS9hfxV8laTrffQ/s/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726321388233592743</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726321388233592743</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0726271388233587842</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0726301388233590662</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0726321388233592743</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>B4C19DD7B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>A8C17688B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>BAC1AD09B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bdfdd7ad-7a7c-435d-9a32-ba3cf42456e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true" id="f6e5f09d-5554-47e6-9a65-99230c30d2ba"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="df6dd72b-2a24-431a-b439-c095878f0525"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5EC191E9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360420501EE5E0401F0A059945A9:8169BCB0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9DC121D9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5EC191E9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>42D1A68AB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5EC191E9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:42D1A68AB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:54D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyqEhEtIVJC4L73RBZbd9mVlnAm4G+wQO0D7648dGgoUuuyRKlFPxjPfXPzNXHM0D22vzjnEgjCq9VpV/XfJDsqVCcKGXcTYKDqFsoEsKBmo7Dg4KAdOaYJ1rcd5Aj3KBaKiqtt5q2BYtmFXRpbt2WWv4OSskvWsa2OIuTQtVXJ5XVvPQ8q91G1VT2LqMcQJ9yiaA/cE9ob1+ztPanoow6TXrjcoU4dxbSZE5JkmzvmAIQxxDrO5eW3u6Vz73BuSKUUiieHdp8+r+vvd1WqVWxVyLJ6adj6fN/OuKXV8TqaXeu0iuwx+jwZsc24iyijBKCRvSIG6BzFjvlYPpywmYjY/YdoyrbwybcAaG9gq0kvd/HCQojvT0h7ImCODz5CVGRtAADFQDNqPQa+qX55Xwc3dUYwoD1g85wfnf4MEdAkhi8A3eBZZhu58i0fSVbsG7PUoDhNOlvCg2iRCGLj2GENA1neEy+bzuZaWX1tz+UeyLgP8L2W5NnexSujmkey0yBS4+D81263XxsoYhQnUBg/cfbjrlPFjN8i/Ed54eIthcf8mnKdqCmFXeQNqW+7382Gzbnvr/VK3nWCnb40KP4qNxw4JbrqlTou1ExGw22FnPYpfJt1x33J4/5b2m8OX/liE32fjm8niibt1NHv+067QVfJ9eFWJLvpTc1qO3PB1ha9gyfL3Ykpfftrlu6vG06KynPphd3QVRaJyG7Bll4zRehAPOHGWg8Y9/GyAKD8/fIvnrZtir3Pxi4ye1q/fXOe5Py2vIjNssOpHTLsx7AszShgmkxfAIjuq9ui1tI6sFxJf04uSEN8IUlUvUhzFBVCh19QtRS1eIgmI+J4s5uZcajct12q7DdstFIpWvtlw67b8zy1WrI5br2QctEFxALHJaECUL8Wym/75GiCeexyoD7GxZAmeAde/sNhCAmk9OpCPg1EOIyZZ3C4U8yXHbbSdRqXZsdrtTqdoN8otp2iX6oVCRdcemOjTflwPBMT7DF7aY/ABYBIRUDSv+pzLRudCpmSBlokIrdwS5SgkchDEios9u1gpmZzMoxAUYHPO/CSEXDSL0gSZfPNrGwjzVDpoj9L3dzK8w29ZJqSOT5QCV7E0QFYTjowiOwvkdMCV3YAz8/XEJ+qZybSKmOANkv1PH92i2mTbKjKi383hbyvDvVU/+/rnm+YXoMzDfGwd+Uuy4zabqXJMSBKpZdVcoNwilyyXSVo/RxFkLM2bkictcwg4kSz3OmJ/gJpbE+ZZQ2aL+sDzVr6PLxEzOhRIwFx2m5Yez9gwhsDVhtGTr2V97vqy51LmTcBaHJM1Q7mIKMRf7irYw0pPih/lz4rF/ke5jtja8SPjlGuFIHSqTmqcvJ5oCsykWSL5j8W7xo8ZOOZ8X7hN8haLkN00SQSc/qIpYqvqCGOWUNFr6algl2xTnOI1Au9D6ZOZlNDfJ/San5zQv+7vhpL25kjf6pK/KxskbRcMuloEUixVfS0XTumcTnfI/R3gLr+7raZlW62/8vt+JLVP4s+SnZwevofafw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyqEhEtIVJC4L73RBZbd9mVlnAm4G+wQO0D7648dGgoUuuyRKlFPxjPfXPzNXHM0D22vzjnEgjCq9VpV/XfJDsqVCcKGXcTYKDqFsoEsKBmo7Dg4KAdOaYJ1rcd5Aj3KBaKiqtt5q2BYtmFXRpbt2WWv4OSskvWsa2OIuTQtVXJ5XVvPQ8q91G1VT2LqMcQJ9yiaA/cE9ob1+ztPanoow6TXrjcoU4dxbSZE5JkmzvmAIQxxDrO5eW3u6Vz73BuSKUUiieHdp8+r+vvd1WqVWxVyLJ6adj6fN/OuKXV8TqaXeu0iuwx+jwZsc24iyijBKCRvSIG6BzFjvlYPpywmYjY/YdoyrbwybcAaG9gq0kvd/HCQojvT0h7ImCODz5CVGRtAADFQDNqPQa+qX55Xwc3dUYwoD1g85wfnf4MEdAkhi8A3eBZZhu58i0fSVbsG7PUoDhNOlvCg2iRCGLj2GENA1neEy+bzuZaWX1tz+UeyLgP8L2W5NnexSujmkey0yBS4+D81263XxsoYhQnUBg/cfbjrlPFjN8i/Ed54eIthcf8mnKdqCmFXeQNqW+7382Gzbnvr/VK3nWCnb40KP4qNxw4JbrqlTou1ExGw22FnPYpfJt1x33J4/5b2m8OX/liE32fjm8niibt1NHv+067QVfJ9eFWJLvpTc1qO3PB1ha9gyfL3Ykpfftrlu6vG06KynPphd3QVRaJyG7Bll4zRehAPOHGWg8Y9/GyAKD8/fIvnrZtir3Pxi4ye1q/fXOe5Py2vIjNssOpHTLsx7AszShgmkxfAIjuq9ui1tI6sFxJf04uSEN8IUlUvUhzFBVCh19QtRS1eIgmI+J4s5uZcajct12q7DdstFIpWvtlw67b8zy1WrI5br2QctEFxALHJaECUL8Wym/75GiCeexyoD7GxZAmeAde/sNhCAmk9OpCPg1EOIyZZ3C4U8yXHbbSdRqXZsdrtTqdoN8otp2iX6oVCRdcemOjTflwPBMT7DF7aY/ABYBIRUDSv+pzLRudCpmSBlokIrdwS5SgkchDEios9u1gpmZzMoxAUYHPO/CSEXDSL0gSZfPNrGwjzVDpoj9L3dzK8w29ZJqSOT5QCV7E0QFYTjowiOwvkdMCV3YAz8/XEJ+qZybSKmOANkv1PH92i2mTbKjKi383hbyvDvVU/+/rnm+YXoMzDfGwd+Uuy4zabqXJMSBKpZdVcoNwilyyXSVo/RxFkLM2bkictcwg4kSz3OmJ/gJpbE+ZZQ2aL+sDzVr6PLxEzOhRIwFx2m5Yez9gwhsDVhtGTr2V97vqy51LmTcBaHJM1Q7mIKMRf7irYw0pPih/lz4rF/ke5jtja8SPjlGuFIHSqTmqcvJ5oCsykWSL5j8W7xo8ZOOZ8X7hN8haLkN00SQSc/qIpYqvqCGOWUNFr6algl2xTnOI1Au9D6ZOZlNDfJ/San5zQv+7vhpL25kjf6pK/KxskbRcMuloEUixVfS0XTumcTnfI/R3gLr+7raZlW62/8vt+JLVP4s+SnZwevofafw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc6I8GL7vr2DYyx3kIFRgqjMK9qs7PW1lu21vdmIIkhYCJoHa/fWbYLFqbdf9ZpyJeXkPz3vIk5wwkGeWP2QMUY4LokzCvvrLmsVG1+vNNA95rmYD71hzZ06imSB2kp5jm/DYUJUJYxWaEMYB4X3VMsyuZlqa5Uam5VvHftfr9Gz3QVVuEWXCtVDpCKtlnhHmN2H7akWJXwCGmU9AjpjPoT8dXpz7QtMHLSZ1cLJC2QSkg5Tz0td12IkRRFkGO7DI9RN9S+ckZv4UzwngFUWvMWPWV19tn5+fO8/dTkHnumUYhm54utCJGZ5/UQdHrTGKJyQpVvsAkIJgCDL8G0hQF4inRawMs3lBMU/zD1ybumlI1xpaQg2aNvmi6m8BGnQHetoCSRnQWArM1tkNShBFBCLlx82kr345rIMr24gCwpKC5mxn/2+QEKlRVpQo1libWYvucI97yjU4QdCfEJhVDNfoUo5JCSBiyjVFCV6eYyaGL2ZK035lycQPt1OG4L+05UTfxCqg63uqE+I5Yvz/9GyzXysvtyCr0OC2TvQf0c/f1HzoLWq6PI/BS1QsLkn21G8gbCqvQK3b/brfHdb1bL0apVNjmMxndErvg8j5eXVlYV6R3kNkLF5QeRkEj1E2Or0H7uPZ6Gl2Vz+l11egCs+/P2DrOvEc+1ifJW5Rfx+n6CguaP0cf8tKsSR2EMJ05AT27Rl7KMdlcjW1Lx+/TgM3P0/Li/wJWtSJDPs2QlZ0OXn4jf9LsFye4q/Zxf3Rt8i8uxv3DGd29sO5L6676bz/ltNmDtvClhKm1ewRQd5u5XhMQuVU9Avwz+lFSnCsJY2qX0qOYhwRrg6klaQWvxIEhGNfNHO1t63QHB67w5Hldbu2aQQjb2iJf57tmqfe0G05aIViB2JQkATLWJJlV/PzOUCY+wyRGFGtLiqYIqZ+4jEEHCgTciMOR0EYigrB4uE47Jqe43mu7VkjI7CGbnA6Dq3jkTMWH0aqclnwK3JFhwlHdJvBnS0Gv0EQlxhJmpdzzsSgMy5KsgB1xTOzU4MOQZW4CKjkYt+yXUdnOC8zJAHreRFXGeqUadkUSGer1dIAZI30Zhw15+/D9Ha/tZUQOjGWCkzmMkKim2jPVWS1iXycsLuZcOt+WMVYHjNRVk4xXCHZ/vQ2LXJM1qMiMvoVTH+ZLe61+sHm7y31T0Dpu/VYB4prvBG2vVPFNSFIZNB2cwE6i05V11XTv54kSCrc64InTX2KYCVYTpDSEyL62oV+0CWzRr0TeS3fxlfxlEw54CgX06Y02wNeGFPE5AtjIk7L8tDny1ZIUTeOlnyfLMjEQ0Qi/vStAn0o9YT4WizPBY3f2rXH10Yckad4VnBM5nInr5OXD4YCFsItFvxX0E3n+xzsC74tXBd5jYWLaZpVHH38RZHE1lcBhEVF+CRUG8Em2TY4+UuJ/Deld24aQn+9oZfswxv67uJ8KmgvB+paF/9dWcPNuECkyodAg6WvLsWDUwQn8w1yfwW4ye9eGJiWGXp/4/ftTAbvxO8lGzXdPQ+DPw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx1jyzY3T2AG7HDKmdCkQNI2Lx0hr0HBloklg5NffyQTEyAkpWcmM0Tr1e63F327Fxwnse31OIdM0JRpw6Cj/565bhMaETbsukMMN2xaBq4jMMCa4RlBbmNmh7o25DyHIeMCM9HRbQs5BrINuzVFtmc3PNeptez2va7dQcalaalSs3StSGLGvdJtR88z5qWYU+4xnAD3BPEmvdGVJzU9XGHSuxdblKXDrLsQYuWZJqmFQCCOSY2kiXlhHuhchNyb0DnDIs/gxWfIO/rL3c1mU9s4tTSbm7ZlWabVNqVOyOn8s979VF2GcMiidHv2MUsZJTimz1iBGoFYpKHWi+dpRsUiecc0MpGlTBtQEENmjn3WzVcHJbozLR2AzDg2+AKjytgYIsiAEdBux8OO/vm8Cm7vTjPMeJRmCT86/x0kYGuI0xWEBq8iq9Cdb/FEuroXQLwhI3HO6Rq+qTZZYQJcu8kgosUV5bL5Qq6V5dcKLv9o1WVA/qYsF+Y+VgndPJGdgM6Bi/9Ts/16ba3c4TiH7uDXWDj3P65/1GcrkRTzwaKxJNe/oijfdEoI+8pbULtyv5yPm3XXWy+Xosa9A4gl/WzKU+wOws3z/a1/GzXp9x6Kl0MyClDDviSbZxFfja6uaVoPkT35OveL5bMzevz+gJqP6FcLzEH6KR8/bvL4B+oPiqixIV8b86+O9ZPeLII7tCHk4WmNksXG9tFq0l4ubgdo8L0Zrdy762/39eDhS/jzS9FGA/PLDC2tTzd1f7m+9Qt7aTLz3/X06Z9R5zWm/RgOhRUlTPLZAxBRHVV7DANtIOuFxcf0oiQ0NKJS1VspjuICmNC76paiFi+XBERDTxZze667AbLaqN+3247jIsvvt3u2/K/tttCg3WtVHLRFcQTRT1lElS/Fstv++RggSTwOLITMWKc5WQDXP7AYYIG1IRvLx5EyDtNUsvjlpe27ftDoN+p+M7jsO4Om5TT9dmA5jZbbdHXtWyqu2XXWiwRkhwxeP2DwMRC6oqBoXvU5l43OhUzJI17nIka1Na4xyOUgyBQXe7bbqpucJqsYFGAzScM8htpqsSoTZPLtr21gwkvp+HJavr93wzv+VmVC6oRUKXAVSx9kNeHEKHKqQN4PuLUfcGW+l4dUPTOZVpFRskVy+Om1W1Sb7FpFRvTbn/xGFe6d+tnX3940PwBlHudj5yhc0z231UyVY0KSSLeq5iOuPdby9Tov69dUBJlJ86bkSWROgOSS5Z6m6RKYuTNhnjVkdqiPPO/kh/hysWATgQUkstu08njGhjEBrjaMoXwtxbnry4FLmTcBhTgl82O5iCjEH+4qxCNKT4pv5M8mzV4DP2Vrz4+MU64VgrK5Oqlx8vROU5BUmqWS/9Js3/gpA6ecHwp3Sd5hEbKbZrmA979oitg6OiYkzZkYBnop2CfbEqd4WoH3qvTGTEnoLxO64O9O6J+jq4mkvQTrO136Z2WDlu1CQFeLQImloxdy4ZTO2XyP3F8A7vN7O/CRjYL2n/j9MJLuG/FbyV5Oj99D9z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0726361388233596226</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0726381388233598896</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0726411388233601108</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6EC191E9B2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>52D1B68AB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>64D1091BB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df6dd72b-2a24-431a-b439-c095878f0525</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true" id="ef9a5f21-a7e3-4485-975b-1f8e6ad93e97"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="01d71217-608b-4672-9490-6de4de8e3237"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED2655C8FC94E0401F0A05991653:7CE7F6C8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726491388233609992</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>47D183EBB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:47D183EBB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:47D183EBB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>08D1E8FBB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FBD1A5DCB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0ED16A5DB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:08D1E8FBB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FBD1A5DCB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:0ED16A5DB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5GKj1shJNxTQBUXEVxFliDqebGGSQOjySRkJhj89TsTCAZElz1VVuF0erq/vszXXWfIc02rxRiEnPhUGXQb6rNjYowNp6whAxtaEWFTq83LZc2slGtF00TzOcqryoCxCAaUcUR5QzXzRkEzTM2sTgzTMstWsZwzq9X/VGUKIROmhUpO3Io9lzIrcdtQo5BaPmKEWRR5wCyOLbt1e2MJTQulmNRmfYsycRg2l5wHlq7jnAMYXBfnsO/pdf1Ap+4wyyYLingUws6nwxrq7u7b21vurZDzw4Vu5vN5PV/ThY7DyOJCbf5IL4MzoHN/e+4g6lOCkUvekQR1C3zpO0rLXfgh4UvvC9OGbuSlaQ1irGGjSC9U/cNBgu5MSwcgQ4Y0tkRGamwMcwiBYlDux4OGenFeBbd3JyGibO6HHjs6/xskoGtw/QAcjaWRpejOt3giXc06YGtAsRsxsoahbJMAYWDKKIQ5iW8IE83nMCUpvxIz8UfSLgP8L2Wp61msArp+IjtdsgDG/0/NsvXaWpkiN4JmZE6C8NHuvw79wt1P87Fv3/t62L+7fGo1EghZ5S2ofbl35+Nm3ffW7pJN4WlzuXBcHT3w62i1KTotM7afJhP7FzzMlu+PI/qEX24feoy9GIURvFdHdj7c+Hj4fr9ZGK12ZdqpTH9OSZv/QPQqKN1vDK/ngD4YLX9Nr4qTuD1tr6q/4fX31LhdL8bo+nq9eh0ElRcMs8XdbDJxJ/2555WH44A+lhadNcROPPwxn10F7ww9EP362uj1ab/02viIKRvDoTClBDuavQDm6VG2x6Cr9ES9EP+eXqSEONo8UbUCyVGMA+VqU96S1GJFgoCIY4libs/5ate4rPbabbNWKBSNfKdda5niv1qxavRqrWrKQVsURxA7Pp0T6Uuy7LZ/vgeIPYsBdSDU1n6El8DUbyx2EUfKgI7F4/Apg4kvWLxWLrUrNYGzkjfKtUqpUCx3K/lut9eqdIxuq60qQ5/f0buwNecQHjJ46YDBx4BJQEDSvOxzJhqdcZGSFVpH3DVya5SjEIlBEEoutsxitaQz4gUuSMC65zuRC7lgGSQJ0tn219QQZol0fDlJ3t+X4R1/SzMhdBwiFZiMpQ2imnBiFBXSQL4OuJoNODXfihwin5lIKw8J3iI5/PTRLbJN9q0iInru2M9Ginuvfvb1zzf1b0Dpx/nYO3LWJOM2naliTAgSaabVXKHcKhet11FSv4okyFCY1wVPGroNOBIst5n4r0D1vQn9rCGzR33keS8/xBfxJbU54uCJblOS4xkbhg1MbhgD8Vric9eXA5cibxxifkrWccUiIhF/u6tgC0s9IR6Jnzc/dD7KdcJWxo+IU6wVnNCFPMlxsvmiKbAvzBLBf36YNX7KwCnnh8J9kvdYuOimWcTh6y+KJLaGijD2I8oHXTURZMk2wck3AVgfSp/MJIS+m9Ax+3JCP97e2IL2PKTudcnflTWStAsGVS4CCZaGGouFUziniwy57wBm+b1Y6RrVwuVf+f0wkuYn8WdJJqfH76H5Bw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5GKj1shJNxTQBUXEVxFliDqebGGSQOjySRkJhj89TsTCAZElz1VVuF0erq/vszXXWfIc02rxRiEnPhUGXQb6rNjYowNp6whAxtaEWFTq83LZc2slGtF00TzOcqryoCxCAaUcUR5QzXzRkEzTM2sTgzTMstWsZwzq9X/VGUKIROmhUpO3Io9lzIrcdtQo5BaPmKEWRR5wCyOLbt1e2MJTQulmNRmfYsycRg2l5wHlq7jnAMYXBfnsO/pdf1Ap+4wyyYLingUws6nwxrq7u7b21vurZDzw4Vu5vN5PV/ThY7DyOJCbf5IL4MzoHN/e+4g6lOCkUvekQR1C3zpO0rLXfgh4UvvC9OGbuSlaQ1irGGjSC9U/cNBgu5MSwcgQ4Y0tkRGamwMcwiBYlDux4OGenFeBbd3JyGibO6HHjs6/xskoGtw/QAcjaWRpejOt3giXc06YGtAsRsxsoahbJMAYWDKKIQ5iW8IE83nMCUpvxIz8UfSLgP8L2Wp61msArp+IjtdsgDG/0/NsvXaWpkiN4JmZE6C8NHuvw79wt1P87Fv3/t62L+7fGo1EghZ5S2ofbl35+Nm3ffW7pJN4WlzuXBcHT3w62i1KTotM7afJhP7FzzMlu+PI/qEX24feoy9GIURvFdHdj7c+Hj4fr9ZGK12ZdqpTH9OSZv/QPQqKN1vDK/ngD4YLX9Nr4qTuD1tr6q/4fX31LhdL8bo+nq9eh0ElRcMs8XdbDJxJ/2555WH44A+lhadNcROPPwxn10F7ww9EP362uj1ab/02viIKRvDoTClBDuavQDm6VG2x6Cr9ES9EP+eXqSEONo8UbUCyVGMA+VqU96S1GJFgoCIY4libs/5ate4rPbabbNWKBSNfKdda5niv1qxavRqrWrKQVsURxA7Pp0T6Uuy7LZ/vgeIPYsBdSDU1n6El8DUbyx2EUfKgI7F4/Apg4kvWLxWLrUrNYGzkjfKtUqpUCx3K/lut9eqdIxuq60qQ5/f0buwNecQHjJ46YDBx4BJQEDSvOxzJhqdcZGSFVpH3DVya5SjEIlBEEoutsxitaQz4gUuSMC65zuRC7lgGSQJ0tn219QQZol0fDlJ3t+X4R1/SzMhdBwiFZiMpQ2imnBiFBXSQL4OuJoNODXfihwin5lIKw8J3iI5/PTRLbJN9q0iInru2M9Ginuvfvb1zzf1b0Dpx/nYO3LWJOM2naliTAgSaabVXKHcKhet11FSv4okyFCY1wVPGroNOBIst5n4r0D1vQn9rCGzR33keS8/xBfxJbU54uCJblOS4xkbhg1MbhgD8Vric9eXA5cibxxifkrWccUiIhF/u6tgC0s9IR6Jnzc/dD7KdcJWxo+IU6wVnNCFPMlxsvmiKbAvzBLBf36YNX7KwCnnh8J9kvdYuOimWcTh6y+KJLaGijD2I8oHXTURZMk2wck3AVgfSp/MJIS+m9Ax+3JCP97e2IL2PKTudcnflTWStAsGVS4CCZaGGouFUziniwy57wBm+b1Y6RrVwuVf+f0wkuYn8WdJJqfH76H5Bw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/A4jxnjKxd7AjOAoYFcmmKapn3pKPJilNqyY8lA8uuPZGIChKT0zGSGaL3a/faib/ecoSS2vC5jkHOSUmXkt9XfDdN6aDkzpDUNaGpOMwQN1U1Ts6BuN1utB6cemqoyYqyAEWUcUd5WLcO0NdPSrNbUtDyr4TluzWy6v1TlDnImTAuVmqEqqySmzCvdttUip16KGGEeRQkwj2Mv6F5feULTQxUmtXO+Rlk6zDtzzjNP13EtBAxxjGs4TfRzfUfnPGReQCKKeJHDq8+QtdXXu8vlsra0a2ke6ZZhGLrh6kInZCQ6VTsn1WUIR3SWrs99RFNKMIrJC5KgroHP01DpxlGaEz5PPjBt6qYhTWuwwho2HXqq6m8OSnRHWtoBmTOksTkyK2MTmEEOFIPyfTJqq6fHVXB9d5ojymZpnrC9879BArqAOM0g1FgVWYXueIsH0tU5B+yNKI4LRhZwI9skQxiYcpvDjKyuCBPNFzKlLL+yYuKPVF0G+F/Kcq5vYxXQ9QPZ8UkEjP+fmm3Xa23lDsUFdKIn4+fVM+0v6vf8ufdwNl6uyM14GBjRsl1C2FZeg9qU+/W836yb3nq9FP0Mms0rOnHDhh/p7pc4GY/pn5/P9uW3YXaG6S/ddt27sz99K7i+vi+mg0ZwFdqhNb65oK3Hx+Qma9z2e+6lf2N9O/FfLqbJIkdC+XsSuXndtQeB2bfS8cpvTRe9F1q83GZo/gOSi7OzNJnMkXH9RZ+hQdTL9N70x2Uzd+6XxWN/Pj+Z3OM738/cIcT6KHCdi++D9ltM2zHsCitKCIqHR8C8Osr2GPnKUNQL8c/pRUpIqM1KVS+THMU4UK525C1JLV4hCIiEnijm+jzs+Wa37vd7lmvbjmmIlHQt8Z/rtMyh221VHLRGsQexn9IZkb4ky67753OAOPEY0BBybZEWeA5M/cSijzhSRnQiHkdKGUxTweLd+qDZs+y+65pud2D3e0a36ThOYzBsDJ1efaAqNyn/Sr/m3RmHfJfB6zsMPgFMMgKS5mWfM9HojIuUPKFFwWOztkA1CoUYBLnkYs9yWnWdkSSLQQLWkzQsYqhl86xMkM7Wv5aGMCulk8G0fH8fhrf/rcqE0AmJVGAylh6IasKBUWRXgXwccGs74Mp8twiJfGYirTwneI1k99Nbt8g22bSKiOh3P/htVrg36kdff39T/wSUvp+PjaNwQbbcVjNVjAlBIp2qmk+o9lQrFouirF9TEmQuzOuCJ009AFwIlnuepn+A6hsT+lFDZoN6z/NGvouv4HMacMQhEd2mlMcjNowAmNwwRuK1rI5dX3ZcirxxWPFDsn4sFhGJ+NNdBXtY6gnxrfhZpnn4Vq4Dtrb8iDjFWsEJjeRJjpPnD5oCp8IsEfyX5tvGDxk45HxXuEnyBgsX3fRQcPj4iyKJra0ijNOC8pGvloJtsi1x8ucMvDeld2ZKQn+d0Cv24YS+v74KBO0lSN3okr8ra6RsFwyqXARKLG11JRZO4ZxGW+T+CnCb352mb7bsQe9v/L4bSeed+L1kK6f776HzHw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj1XIhUCTqCClCd2yKr0Qutvty8o4DpgmdogdCv31xw4NBUq77JEqUU/GM99c/M2cM5ClluczhgqOKVH6YUf9c2Y5NnAMV0uaNtRsp93S3GYz0cwxMo22A60WaKtKn7ES9QnjgPCOahlmUzMtzXJGpuVZba9lNizbelKVn6hgwrRQaRiqssxSwrzKbUctC+JRwDDzCMgQ8zj0In9w7QlND9SY1O75GmXlsOhOOc89XYeNGEGUprABaaaf6zs65zHzIjwhgJcFevMZs476dvfl5aXx0mzQYqJbhmHohqsLnZjhyTe1e1JfRnGfJHR9DgChBEOQ4lcgQQ0Qn9JY8dMJLTCfZp+YNnXTkKY1tIQaNG3yTdXfHVTojrS0A7JgQGNTYNbGhihBBSIQKQ/Dfkf9dlwF13dHBSAsoUXG9s7/BgmRBUppjmKN1ZHV6I63eCBd3XMEvT6BacnwAt3INskBREy5K1CCl9eYieaLmVKVX1ky8YfrLkPwX8pyrm9jFdD1A9kJ8QQx/n9qtl2vtZWfIC1RN/95PzCnTTROLopT//XBSGaT0xktlivWqSBsK69Bbcr9dt5v1k1vvV26uYH53OoHP2boenr1fDolq+Bh3ofJ6egH+h2kM9rL3fL0OgL50+zymY7GMDSW7WXePF0W7Pcgjb+PnoZP0aMdOyf344dBQudTN1jw1iQMQgfj0s/vbv27q96gnCwe4di9nLtjJ46i7BXkzUf714tbDILHlTvzxzplxePw9TLPbr6f3LbZzPm1Msf4aj74bU3uI9Z5j2k7hl1hTQlROZ4hyOujbI9+qFyKegH+Nb1ICY61pFL1cslRjCPC1a68JanFKwUB4dgTxVyfjV5otv1WeGGJt2SbRnDh+pb4z7Ud89L1nZqD1ij2IAaUJFj6kiy77p+vAcLMY4jEqNAWtIRTxNQvLIaAA6VPhuJxUMLQiAoW71mua1utluX0zoKz3kUrcMIz3/ebLccKfUcw+A3lt+S28BOOil0Gb+0w+BBBnGMkaV72ORONzrhIyRwsSp6ajQVoEFSKQVBILvYs22npDGd5iiRgPaNxmaJGPs2rBOls/WtpALJKOuyNqvf3aXj73+pMCJ0YSwUmY7lAoprowCiy60A+D9jZDrg275cxls9MpJUXGK6R7H567xbZJptWERH9CaI/Zo17o3709Y839S9A6fv52DiKF3jLbT1TxZgQJNKtqzkHjXmjXCzKqn5nkiALYV4XPGnqEYKlYLnViD4jom9M6EcNmQ3qPc8b+S6+kk9JxAFHmeg2pToesWFEiMkNoy9ey/LY9WXHpcgbR0t+SBakYhGRiL/cVaAHpZ4Q34mfF1rE7+U6YGvLj4hTrBUck4k8yXGy+qQpIBVmseA/WmwbP2TgkPNd4SbJGyxcdNO45OjzL4okto4KIKQl4f1QrQTbZFvh5Kscee9KH8xUhP42oZfs0wn9OLiOBO1lQN3o4r8ra7hqF4hUuQhUWDrqUiycwjmZbJH7G8BtfrfPQtNp9i7+xu+7kXQ/iD9KtnK6/x66/wE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726491388233609992</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726491388233609992</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0726441388233604844</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0726481388233608338</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0726491388233609992</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>18D1E8FBB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0CD1A5DCB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>1ED17A5DB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01d71217-608b-4672-9490-6de4de8e3237</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true" id="9fd6754b-277b-4401-b284-f41e01b854ae"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1291a5a7-2aac-482a-ab36-5459cc71bd6f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED265607FC94E0401F0A05991653:F022C4B5"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0726571388233617952</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>50E142DDB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:50E142DDB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:50E142DDB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>11E174EDB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>05E11BAEB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17E1723FB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:11E174EDB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:05E11BAEB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:17E1723FB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx6OQKwQiQAoEKrrAtoVe9rxUrjMB7yYOjR2g++uPHRoKFLrskUCJJ+OZby7+xk2GktjyfMYg4ySlyiBoqc8Otp3ICl3NdmuR5si3F8euaZYduUbVcaCOXFUZMJbDgDKOKG+plmHammlpVn1qWp5V86p2pW5Y/6rKA2RMmBYqFUNV1klMmVe4bal5Rr0UMcI8ihJgHsfexB8NPaHpoRKT2m5uUBYOs/ac84Wn67gSAoY4xhWcJnpT39NphsybkBlFPM/g3WfIWur73tVqVVnZlTSb6ZZhGLrR0IVOyMjsUm1flJshHNAo3ay7iKaUYBST30iCGgGfp6Hix7M0I3yenDBt6qYhTWuwxho2HXqp6h8OCnRnWtoDmTGksTkyS2N3EEEGFINyfzdoqZfnVXCzd5ohyqI0S9jB+u8gAV1CnC4g1FgZWYnufItH0tVuAvYGFMc5I0sYyzZZIAxMuckgIushYaL5QqYU5VfWTPxI2WWA/6YsTX0Xq4CuH8lOQGbA+P+p2W69NlYeUJxDe5DC+ub16p+J/2N0H79ddS1zPMrYgjC/VUDYVd6A2pb7fX3YrNveet90OwvmCVnd/1oubl+eru+nfP67Ux1DZ0ZxPwL9mtT86yc7+jWszuxHY0oIqj2Mx1WWXNHHIKQDMhyaDhiThdm56JAetbqj0Id5MCNXKcmuxyI094qMTdNcd51etR5Yc+P2xzeTvs3gftR/CHNgo9Ctv4U/Dafm9vs+ftTrYfWii1wK1ahnfVu/Dh/rvXyFWx8x7cawLywpYZK//ATMy6Vsj0Gg9EW9EP+aXqSEhFpUqHoLyVGMA+VqW+6S1OLlgoBI6Ilibtam2TNdpxd0rIZtO6bR7TR8S7w1nLrZb/j1koM2KA4gdlMaEelLsuymf74GiBOPAQ0h05ZpjufA1C8sBogjZUDvxOFIKYNpKlncNOqNhiv+vtEPnEbN6PqGX+13XTsw+q6tKuOUf6ffMz/ikO0zeHWPwe8AkwUBSfOyz5lodMZFSl7RMuexWVmiCoVcDIJMcrFnOfWqzkiyiEEC1pM0zGOoLOaLIkE62zwtDWFWSO960+L8nQzv8FuZCaETEqnAZCwdENWEI6PIKQM5HXB9N+DSvJ+HRB4zkVaeEbxBsv/po1tkm2xbRUT03J08myXurfrZ2z/v1L8ApR/mY+soXJIdt+VMFWNCkEi7rOYrqrxW8uUyL+rnSoLMhHld8KSpTwDnguXepukvoPrWhH7WkNmiPvC8le/jy/mcTjjikIhuU4rlGTeMCTB5wxiI07I+9/qy51LkjcOaH5N1Y3ERkYi/vKtgD0s9Ib4Rj1WahR/lOmJrx4+IU1wrOKEzuZLj5O1EU+BUmCWC/9Js1/gxA8ec7wu3Sd5i4aKbXnIOp78okthaKsI4zSkfBGoh2CXbAid/W4D3ofTJTEHo7xN6zU5O6KfRcCJoL0HqVpf8WVkjRbtgUOVFoMDSUtfiwimc09kOub8D3OX3qtEzHSv4I7/vR9L+JP4s2cnp4Xlo/wc=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx6OQKwQiQAoEKrrAtoVe9rxUrjMB7yYOjR2g++uPHRoKFLrskUCJJ+OZby7+xk2GktjyfMYg4ySlyiBoqc8Otp3ICl3NdmuR5si3F8euaZYduUbVcaCOXFUZMJbDgDKOKG+plmHammlpVn1qWp5V86p2pW5Y/6rKA2RMmBYqFUNV1klMmVe4bal5Rr0UMcI8ihJgHsfexB8NPaHpoRKT2m5uUBYOs/ac84Wn67gSAoY4xhWcJnpT39NphsybkBlFPM/g3WfIWur73tVqVVnZlTSb6ZZhGLrR0IVOyMjsUm1flJshHNAo3ay7iKaUYBST30iCGgGfp6Hix7M0I3yenDBt6qYhTWuwxho2HXqp6h8OCnRnWtoDmTGksTkyS2N3EEEGFINyfzdoqZfnVXCzd5ohyqI0S9jB+u8gAV1CnC4g1FgZWYnufItH0tVuAvYGFMc5I0sYyzZZIAxMuckgIushYaL5QqYU5VfWTPxI2WWA/6YsTX0Xq4CuH8lOQGbA+P+p2W69NlYeUJxDe5DC+ub16p+J/2N0H79ddS1zPMrYgjC/VUDYVd6A2pb7fX3YrNveet90OwvmCVnd/1oubl+eru+nfP67Ux1DZ0ZxPwL9mtT86yc7+jWszuxHY0oIqj2Mx1WWXNHHIKQDMhyaDhiThdm56JAetbqj0Id5MCNXKcmuxyI094qMTdNcd51etR5Yc+P2xzeTvs3gftR/CHNgo9Ctv4U/Dafm9vs+ftTrYfWii1wK1ahnfVu/Dh/rvXyFWx8x7cawLywpYZK//ATMy6Vsj0Gg9EW9EP+aXqSEhFpUqHoLyVGMA+VqW+6S1OLlgoBI6Ilibtam2TNdpxd0rIZtO6bR7TR8S7w1nLrZb/j1koM2KA4gdlMaEelLsuymf74GiBOPAQ0h05ZpjufA1C8sBogjZUDvxOFIKYNpKlncNOqNhiv+vtEPnEbN6PqGX+13XTsw+q6tKuOUf6ffMz/ikO0zeHWPwe8AkwUBSfOyz5lodMZFSl7RMuexWVmiCoVcDIJMcrFnOfWqzkiyiEEC1pM0zGOoLOaLIkE62zwtDWFWSO960+L8nQzv8FuZCaETEqnAZCwdENWEI6PIKQM5HXB9N+DSvJ+HRB4zkVaeEbxBsv/po1tkm2xbRUT03J08myXurfrZ2z/v1L8ApR/mY+soXJIdt+VMFWNCkEi7rOYrqrxW8uUyL+rnSoLMhHld8KSpTwDnguXepukvoPrWhH7WkNmiPvC8le/jy/mcTjjikIhuU4rlGTeMCTB5wxiI07I+9/qy51LkjcOaH5N1Y3ERkYi/vKtgD0s9Ib4Rj1WahR/lOmJrx4+IU1wrOKEzuZLj5O1EU+BUmCWC/9Js1/gxA8ec7wu3Sd5i4aKbXnIOp78okthaKsI4zSkfBGoh2CXbAid/W4D3ofTJTEHo7xN6zU5O6KfRcCJoL0HqVpf8WVkjRbtgUOVFoMDSUtfiwimc09kOub8D3OX3qtEzHSv4I7/vR9L+JP4s2cnp4Xlo/wc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj1XIhQAhKkhcT9P7Erq9vFTGmYC3iZPGDtD++rVDQ4HSLnukStST8cw3F38zJwzFkeV2GIOMk4QqXr+lPplOPTSq9ZoGFgo0u2lgzXFCcTSrtjWx7YYzCVXFYywHjzKOKG+plmFWNdPSLGdsWq5Vd2v1itNsPqrKL8iYMC1UKoaqLOOIMrdw21LzjLoJYoS5FMXAXI5dv3N54QpNF5WY1PbJCmXhMGvPOE9dXceVADBEEa7gJNZP9C2dk4C5PplSxPMM3n0GrKW+310sFpVFtZJkU90yDEM3mrrQCRiZ/lDbR+VlCDwaJqtzD9GEEowi8oYkqEvgsyRQOtE0yQifxV+YNnXTkKY1WGINmzb9oeofDgp0B1raApkxpLEZMktjIwghA4pBuR15LfXHYRVc3R1niLIwyWK2c/43SEDnECUpBBorIyvRHW5xT7raJ4Bdj+IoZ2QOV7JNUoSBKTcZhGR5QZhovoApRfmVJRN/pOwywP9SlhN9E6uAru/JTp9MgfH/U7PNeq2s/EJRDu2fjdSBxvUjv/Vun+9uRpMBms5ybpPooVVA2FRegVqX+/2826zr3nq/FLPwVzZPXtLUw+z0LjzPl8PoN752UGijtHo1er19GTZprV8l3bez89PuGR09zJxwFMEzu3z2z4/D8Wjxc2rB6cXR8DKMghj84XMc11A1WGZXs8i5T9/mb+NH37iDxUXn6uwhuk8md4ObY3300n88Jtl/VefBnzwsvHocnb+iZcdnS3TUvPKd4bGN8/vjwemocTke49ZHTJsxbAtLSvDzyW/AvDzK9vD6ylDUC/Hv6UVKSKCFhaqbSo5iHChX2/KWpBY3FwREAlcUc3U2agPT7HYGXatZrdqm0es2O5b4r2k75rDZcUoOWqHYgdhLaEikL8myq/75HiCOXQY0gEybJzmeAVO/sdhHHCkeHYnHkVAG40SweMccOA2zWTfMer9fd7pNsz7smR1LoHd6/YatKlcJv6bXWSfkkG0zeG2LwUeASUpA0rzscyYanXGRkhc0z3lkVuaoQiEXgyCTXOxatlPTGYnTCCRgPU6CPIJKOkuLBOls9WtpCLNCOhqMi/f3ZXi738pMCJ2ASAUmY+mCqCbsGUV2GcjXATubAZfmO3lA5DMTaeUZwSsk258+ukW2ybpVRERPPf/JLHGv1Q++/vmm/g0ofTcfa0fBnGy4LWeqGBOCRNplNV9Q5aWSz+d5Ub+GJMhMmNcFT5q6DzgXLPc6Tp6B6msT+kFDZo16x/Navo0v5zPqc8QhFt2mFMcDNgwfmNwwPPFaloeuL1suRd44LPk+WS8Si4hE/O2ugl0s9YT4Rvwskiz4KNceWxt+RJxireCETuVJjpPXL5oCJ8IsEfyXZJvG9xnY53xbuE7yGgsX3TTJOXz9RZHE1lIRxklOuddXC8Em2RY4+WsK7ofSJzMFob9P6CX7ckLfX174gvZipK51yd+VNVK0CwZVLgIFlpa6FAuncE6nG+T+DnCT32vGwLStfv9v/L4dSfuT+LNkI6e776H9Bw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxkjfwbjCczwleA0TVpMM21eOkJeQMGWiSUD6a+/kokJEJLSO5MZovVq9+zu0ZEuOE4TO2hzDrmgGdPCXlP/jcm5A2SMDdxwbMOdEGyMLccyILYnpkecsTf2dC3kvICQcYGZaOq2aTmGZRu2P7LswD4PvEbN9s0HXbuHnMvQ0qVm6to6TRgPyrRNvchZkGFOecBwCjwQJIjaX28C6RngCpPeutigLBPmrZkQiwAhUouBQJKQGslSdIH2fC5iHkR0yrAocnjJGfOm/rJ3tVrVVk4ty6fINk0TmQ0kfWJOp5/11qdqM8Qhm2SbdRezjFGCE/oHK1BfQcyyWGsn0yynYpa+E9pClqlCG7AmBrFc9llHrwlKdCdG2gOZc2zwGbaqYEOYQA6MgPZjGDb1z6dNcLN3lGPGJ1me8oP1v0ECtoQkW0Bs8KqyCt3pEY+0q3UBJAgZSQpOl3CraLLABLj2LYcJXd9QLskXc60cv7bm8o9WLAPyL2O5QLtYJXR0pDs9OgUu/s/Mdue1iXKPkwJaHl6NfrnP/oRJhrkhabizWcfMFvHtr2YJYdd5A2o77pf1IVm33HrZJNjK78xurgZzO7uJ1h24vvvVQEnhRz/aZ7797fFHcY2K4XV2LZ7z67UZ9YfD7wPfe/Tm3qCRnrnt+VV65Sxv+cD/5PSSlLvL5/nZHR546N4a9uaPs/XD9cMZzDAauYswYg/3V47Dvjz8nIx7mLG7gTfsD35+j6Mva7tg8+4XVM9Xgz+fLiOr/WdeH4cPJKUWmXi3vPla024N+8ZKEqJi/AhEVEtFj7CnXcp5YfGxvCgLjY1J6RoslEZxAUzoLbVLSUtQSAGicSCHuVlb9b5Vt53Ljt1wHNcyu51G25b/NVzfumy0/UqDNigOIHYzNqEql1LZDX8+BkjSgAOLITeWWUFmwPUPIvawwFrIhvJwZIzDKJMq7pzbvbrbPnftvu90TdPuN+q2515aHafumee2rt1m4o7d5e2JgHxfwb09BR8CoQsKSuYVz7kkOheyJU94WYjEqi1xjUEhL4JcaXFgu76HOE0XCSjAKM3iIoHaYrYoG4T45tc2MOGlddgflefv3fIOv1WdkD4xVQ5c1dIBOU04chW5VSHvF+zvFlyFbxcxVcdMtlXklGyQ7H96ZYuiyZYqsqLf3ei3VeHeup+8/e1O9AEodNiPbaJ4SXfSVneqvCakiLSqaT7h2lOtWC6Lcn51JZC5DI+kTlooAlJIlXseZXNgaBsCnXTJbFEfZN7a9/EVYsYigQWkkm1auTzhhREBVy+MUJ6W9anPl72Usm8C1uKYrZvIh4hC/OFbhQRE+UnzN/mzyvL4dVxHYu3kkXXKZ4WgbKpW6jp5focUJJNhqdS/LN8NfizAseT7xm2Tt1iEZNO4EPD+F00JW1PHhGQFE2FPLw27YlviFM8LCF6d3oQpBf3lhl7zd2/on19vIil7Kda3vvTvzgYt6UJAVw+BEktTX8sHp0zOpjvi/gJwV989s2+5dq/3N33fr6T1xvzWstPTw/PQ+g8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0726571388233617952</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0726571388233617952</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0726521388233612694</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0726551388233615729</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0726571388233617952</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>21E184EDB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>15E11BAEB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>27E1723FB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1291a5a7-2aac-482a-ab36-5459cc71bd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true" id="b8d214bd-2cc1-4dc0-99b0-027d75c528be"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="8402cb1b-a428-4bf5-b9a4-987663544776"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE96ED26565DFC94E0401F0A05991653:2151D784"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_072771388233627697</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>69E1A9EFB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:69E1A9EFB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:69E1A9EFB2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>2AE14600C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1EE17011C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20F17191C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:2AE14600C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1EE17011C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:20F17191C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSx6uQhbAkKkgQaJWWLiyly0tlnAn4nOCE2AHaX3/s0FCgy+FcqRL1ZDzzzeJv5oyheWS5LcYg5SSmit9pqC+1OoSmVTU0XK4Gmm3YSJtMbKxZdaiFNsZ1w6ypis9YBj5lHFHeUC3DLGumJXRGpuVaNdewSrVK7VlVxpAyYVqolAxVWc8jytzcbUPNUurGiBHmUjQH5nLsDlvXPVdouqjApDbPNihzh2lzxnni6jouBYAhinAJx3P9TN/TOQuYOyRTiniWwrvPgDXU97ur1aq0KpfidKpbhmHohqMLnYCR6anaPCkuQ+DTMN6cPURjSjCKyBuSoK6Bz+JAaUXTOCV8Nv/GtKmbhjStwRpr2LTpqap/OMjRHWlpD2TKkMZmyCyMDSCEFCgG5X7gN9TT4yq4uTtKEWVhnM7ZwfnfIAFdQhQnEGisiKxAd7zFL9LVPAPs+hRHGSNLuJFtkiAMTLlLISTrHmGi+QKm5OVX1kz8kaLLAP9LWc70XawCuv5FdjpkCoz/n5rt1mtjZYyiDJrP1BzfXtXTykXv100cs+g6BYfqPserRg5hV3kDalvu9/Nhs2576/3SwKxW+jhJ7PFDuLpzWuj+wQuDYfzrPrvR33rtm5FOjKe+OQnYpfe4vEgenyaDYSUIxmOIbvvRf8EiqD45MxJm0xNoe+uyHj0tvPPund2+u1yTenjbL6+v3oZXq0HXTxf9++XVtIcWz0Fvubp/SMY3F/aw7XjeW0L9bv96MFj7enhxeX7yPFr0O29zj132uVf5fT3xnxofMe3GsC8sKGGYTX4B5sVRtoffUc5FvRD/mV6khARamKu6ieQoxoFytSlvSWpxM0FAJHBFMTdnq9U17apheJZTLtum4bWdliX+c+y6ee606gUHbVAcQPRiGhLpS7Lspn9+BojnLgMaQKot4wzPgKk/WOwgjhSfDsTjiCmDUSxYvFqtt6qOYzudmtlu186tVsereDWzbtlts13pqMpNzG/pbdoKOaT7DF7ZY/ABYJIQkDQv+5yJRmdcpGSBlhmPzNISlShkYhCkkotdy65XdEbmSQQSsD6PgyyCUjJL8gTpbPNraQizXDrojvL39214h9+KTAidgEgFJmNpg6gmfBpFVbdSBPJ9wPXdgAvzrSwg8pmJtPKU4A2S/U8f3SLbZNsqIqIXb/hiFri36kdf/3xT/wGUfpiPraNgSXbcFjNVjAlBIs2imgtUWpSy5TLL61eTBJkK87rgSVMfAs4Ey72O4t9A9a0J/aghs0V94Hkr38eX8RkdcsRhLrpNyY9HbBhDYHLD8MVrWR+7vuy5FHnjsOZfybxILCIS8Y+7Cnax1BPiO/GzitPgo1xf2NrxI+IUawUndCpPcpy8ftMUOBZmieC/ON01/pWBr5zvC7dJ3mLhopsmGYfvvyiS2BoqwjjOKPclgQjBLtnmOPlrAu6H0iczOaG/T+g1+3ZCP173hoL25kjd6pK/K2skbxcMqlwEciwNdS0WTuGcTnfI/R3gLr9Xna7Zcrrn7b/w+34kzU/iz5KdnB6+h+Yf</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSx6uQhbAkKkgQaJWWLiyly0tlnAn4nOCE2AHaX3/s0FCgy+FcqRL1ZDzzzeJv5oyheWS5LcYg5SSmit9pqC+1OoSmVTU0XK4Gmm3YSJtMbKxZdaiFNsZ1w6ypis9YBj5lHFHeUC3DLGumJXRGpuVaNdewSrVK7VlVxpAyYVqolAxVWc8jytzcbUPNUurGiBHmUjQH5nLsDlvXPVdouqjApDbPNihzh2lzxnni6jouBYAhinAJx3P9TN/TOQuYOyRTiniWwrvPgDXU97ur1aq0KpfidKpbhmHohqMLnYCR6anaPCkuQ+DTMN6cPURjSjCKyBuSoK6Bz+JAaUXTOCV8Nv/GtKmbhjStwRpr2LTpqap/OMjRHWlpD2TKkMZmyCyMDSCEFCgG5X7gN9TT4yq4uTtKEWVhnM7ZwfnfIAFdQhQnEGisiKxAd7zFL9LVPAPs+hRHGSNLuJFtkiAMTLlLISTrHmGi+QKm5OVX1kz8kaLLAP9LWc70XawCuv5FdjpkCoz/n5rt1mtjZYyiDJrP1BzfXtXTykXv100cs+g6BYfqPserRg5hV3kDalvu9/Nhs2576/3SwKxW+jhJ7PFDuLpzWuj+wQuDYfzrPrvR33rtm5FOjKe+OQnYpfe4vEgenyaDYSUIxmOIbvvRf8EiqD45MxJm0xNoe+uyHj0tvPPund2+u1yTenjbL6+v3oZXq0HXTxf9++XVtIcWz0Fvubp/SMY3F/aw7XjeW0L9bv96MFj7enhxeX7yPFr0O29zj132uVf5fT3xnxofMe3GsC8sKGGYTX4B5sVRtoffUc5FvRD/mV6khARamKu6ieQoxoFytSlvSWpxM0FAJHBFMTdnq9U17apheJZTLtum4bWdliX+c+y6ee606gUHbVAcQPRiGhLpS7Lspn9+BojnLgMaQKot4wzPgKk/WOwgjhSfDsTjiCmDUSxYvFqtt6qOYzudmtlu186tVsereDWzbtlts13pqMpNzG/pbdoKOaT7DF7ZY/ABYJIQkDQv+5yJRmdcpGSBlhmPzNISlShkYhCkkotdy65XdEbmSQQSsD6PgyyCUjJL8gTpbPNraQizXDrojvL39214h9+KTAidgEgFJmNpg6gmfBpFVbdSBPJ9wPXdgAvzrSwg8pmJtPKU4A2S/U8f3SLbZNsqIqIXb/hiFri36kdf/3xT/wGUfpiPraNgSXbcFjNVjAlBIs2imgtUWpSy5TLL61eTBJkK87rgSVMfAs4Ey72O4t9A9a0J/aghs0V94Hkr38eX8RkdcsRhLrpNyY9HbBhDYHLD8MVrWR+7vuy5FHnjsOZfybxILCIS8Y+7Cnax1BPiO/GzitPgo1xf2NrxI+IUawUndCpPcpy8ftMUOBZmieC/ON01/pWBr5zvC7dJ3mLhopsmGYfvvyiS2BoqwjjOKPclgQjBLtnmOPlrAu6H0iczOaG/T+g1+3ZCP173hoL25kjd6pK/K2skbxcMqlwEciwNdS0WTuGcTnfI/R3gLr9Xna7Zcrrn7b/w+34kzU/iz5KdnB6+h+Yf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSx6uQBQIkKkgs6SndC3R9qYwzgNvEDrED9Pz6Y4eGAl0O50pVkSfjmW8WfzNHHMWR47c4h1QQRrVet6E/W7WRUy7brlGp4Jr8V/cMr1KtGqEHo7Bcd91qpaZrPc4z6FEuEBUN3bHssmE7hlMf2o7v1HyrWqo75Sddu4OUS9NSpWTp2jKOKPdztw09S6nPECfcpygG7gvsD1oX577U9FGBSW8erVDmDtPmVIjEN01cCgFDFOESZrF5ZG7pHIXcH5AJRSJL4d1nyBv6+93FYlFalEssnZiOZVmm5ZlSJ+Rkcqg3D4rLEPbomK3OHUQZJRhF5DdSoC5ATFmotaIJS4mYxt+Ytk3bUqYNWGID2xV6qJsfDnJ0e1raAplyZPApsgtjfRhDChSDdtvvNfTD/Sq4ujtMEeVjlsZ85/xvkIDOIWIJhAYvIivQ7W/xi3Q1jwD7PYqjjJM5XKo2SRAGrl2nMCbLc8Jl84Vcy8uvLbn8I0WXAf6XshyZm1gldPOL7HTJBLj4PzXbrNfKyh2KMmg+3bjB7M4l1i8UXL2+PkA3e7itnppU8EYOYVN5BWpd7vfzbrOue+v90unwJj5zfzmPo+NhnZ9ag8l4AFekf3/Wxks4YcHcDLLgyWsdd/uVWX3WHbfPp/+9tSv8oVOzx147eo2S/m31aWHPD+oPZHHi8jTyRpObx3v4fX9+cgfTqWWdk+txx7t76wC75M5LjzAUsAuoJY/B4yiBM8oX9GIwve/1+UTAax2cA7t279no/gWlj+ObOLl1Atz4iGkzhm1hQQmDbPQCWBRH1R69rnYs64XEz/SiJCQ0xrmqnyiO4gKo0JvqlqIWP5MEREJfFnN1toPArlm23XG8crliW52215KvrOJV6vax16oXHLRCsQOxw+iYKF+KZVf98zNAHPscaAipMWcZngLXf7DYRQJpPdqXj4NRDkMmWdwtdzstx5YI2+3ArrQCO3CrQeDJII47Xbeja5dMXNGrtDUWkG4zuLvF4H3AJCGgaF71OZeNzoVMyQzNMxHZpTkqUcjkIEgVF/tOpe6anMRJBAqwGbMwi6CUTJM8QSZf/ToGwjyX9oNh/v6+DW/3W5EJqRMSpcBVLG2Q1YRPo6jqu0Ug3wdc3wy4MN/KQqKemUyrSAleIdn+9NEtqk3WrSIjeu4Mnu0C91p97+ufb5o/gDJ387F2FM7JhttipsoxIUmkWVRzhkqzUjafZ3n9aoogU2nelDxpmwPAmWS5tyF7BWquTZh7DZk16h3Pa/k2vkxM6UAgAbHsNi0/7rFhDICrDaMnX8ty3/Vly6XMm4Cl+ErWieQiohD/uKtgHys9Kb6WPwuWhh/l+sLWhh8Zp1wrBKETdVLj5O2bpsBMmiWS/1i6afwrA1853xauk7zGImQ3jTIB33/RFLE1dIQxy6jodfVcsEm2OU7xloD/ofTJTE7o7xN6yb+d0A8X5wNJezHS17rk78oGydsFg64WgRxLQ1/KhVM6p5MNcn8HuMnvVUmNLS84bv+F37cjaX4Sf5Zs5HT3PTT/AA==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6JKEH7fX0Gxj1vIRVCgolWKusHN7YjGzb5sjUOrk8BAmMEYf/0OGIyay7qnKlVmmp7ury/zdZ8xFEeG22EMMk4SKvm9lvy7blozmBm2Ys7tUDEtp6HMGnVdsfDMsbW5pVmWJUs+Yzn4lHFEeUs2NL2u6IZi2GPdcI2mq9m1RtP8JUu3kDFhWqjUNFlaxxFlbum2JecZdRPECHMpioG5HLtB5/LCFZouqjDJ7bMtytJh1l5ynrqqimshYIgiXMNJrJ6pBzpnIXMDsqCI5xm8+AxZS365+/T0VHuq15JsoRqapqmaowqdkJHFV7n9pboMoU/nyfbsIZpQglFENqgAdQl8mYRSJ1okGeHL+APTuqprhWkF1ljBukm/yuqrgxLdiZYOQGYMKWyJ9MrYCOaQAcUgTUZ+S/56WgW3d8cZomyeZDE7Ov8bJKAriJIUQoVVkVXoTrf4TrraZ4Bdn+IoZ2QFV0WbpAgDk24ymJP1BWGi+UImleWX1kz8karLAP9LWc7UfawCuvpOdnpkAYz/n5rt12tr5RZFObSf4rup3Rii3goWlvPtvIlJY/OfF8+AtUoI+8pbULtyv5yPm3XXWy+XbtDi0sN3jexHlA1/3Tw++P3bXw/1y82Vfvsj9O999vMmTY3x1XjK76bX6g8rGd1CI5jml5P5ajKcNKcqycyh3Um/f7HQ5H5zdx904aEbk9W3UfPqezK7ji6swWQx6Q8X577KNnmQJlP0rGmAroLUQ2i60LxhMDXMc/1B85bPxF+a/pfe5m41uvb7U00bbvTzzHj2W68x7cdwKKwoIchn94B5dSzaw+9JA1EvxD+nl0JCQmVeqrppwVGMA+Vyu7hVUIubCwIioSuKuT0b2kBv6o7uGU69buqa13U6hvjPMW194HTsioO2KI4gegmdk8JXwbLb/vkcII5dBjSETFklOV4Ckz+x2EMcST4diceRUAbjRLB40zO6eqM7sJt9vdnoa3XPHDQd06nbTt3Tmh1Zukr4Nb3OOnMO2SGDWwcMPgJMUgIFzRd9zkSjMy5S8ohWOY/02grVKORiEGQFF7uGaVsqI3EaQQFYjZMwj6CWLtMyQSrb/hoKwqyUjvrj8v19GN7xtyoTQickhQIrYumCqCa8GUUN16oC+Thgez/gynwnD0nxzERaeUbwFsnhp9duKdpk1yoiot9e8FuvcO/UT77+9qb6CSj1OB87R+GK7LmtZqoYE4JE2lU1H1HtsZavVnlZv2ZBkJkwrwqe1NUAcC5Y7nmcPABVdybUk4bMDvWR5538EF/OlzTgiEMsuk0qjydsGAGwYsPwxWtZn7q+HLgUeeOw5u/JvEgsIgXiT3cV7OJCT4hvxM9TkoWv5XrH1p4fEadYKzihi+JUjJPnD5oCJ8IsEfyXZPvG3zPwnvND4S7JOyxcdNMs5/DxF6kgtpaMME5yyv2eXAr2ybbEyZ9TcF+V3pgpCf1lQq/ZhxP65+VFIGgvRvJOl/xdWSFlu2CQi0WgxNKS12LhFM7pYo/cXwDu83vD6esdpz/o/oXfDyNpvxG/lezl9Pg9tP8A</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_072771388233627697</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_072771388233627697</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_072711388233621290</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_072751388233625526</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_072771388233627697</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>3AE14600C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>2EE17011C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>30F18191C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8402cb1b-a428-4bf5-b9a4-987663544776</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true" id="cb272b5e-4f84-4901-b156-724bd1d9405a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="a43b1133-03f5-4d9d-af8f-7b340a1d4855"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547867D53A46E0401F0A079931FF:B70886A8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0727161388233636170</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>72F18A12C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:72F18A12C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:72F18A12C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>33F14332C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>27F1C403C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">39F1F1A3C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:33F14332C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:27F1C403C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:39F1F1A3C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jxmwZUgwnsCMQ+DULSEXaNrmJSPkxSgxEpFkLvn1lUxMgJCUnpnMEK1Xu99e9O2eSTxJvSCUEoSinFnRRcN+8E5QjQxH9RJBdbdU9XyvhEdQLSFc98CrD2tDILYVSZlBxKTCTDVsz0WVEvJKnj9AXuDVAoTKXtW9t607EFKb1ipl17YWk5TJIHfbsDPBAo4llQHDE5CBIkE/vOwGWjPABSa7ebZCmTsUzbFS08BxSDkGAmlKyoRPnDNnS+cslkGfJgyrTMCrz1g27Ne78/m8PK+UuUgcz3Vdx607WieWNPliN4+KyxBHbMRX5xZmnFGCU/qCDahLUGMeW2GacEHVePKBaeQg15guwYLobFbZF9t5c5CjO9DSFkghcUmOMSqM3cIIBDAC1o/bqGF/OayCq7sDgZkccTGRO+d/gwRsBimfQlySRWQFusMt7klX8wxIEDGSZpLOoGfaZIoJSOtawIguulTq5oullZffWkj9R4suA/IvZTlzNrFq6M6e7FzQBKT6PzXbrNfKyh1OM2gm10s+b39TAzTgvUhwcd1ifH5Pn3t+I4ewqbwCtS7363m3Wde99Xqpe/NNfK93ht0Z83sJfho9ois3afF+AiS8JzfxDYA/S+a0dvzy4nfdTBz3Bo9pbxG6PUcNOu2f4bgd/Xf6I7xiR7/PxUl13j+98WPyu/2S3M/C8V316+OEL/shvkLLYc2NvldPL5+Ou8nye5y0XqbjJy+9u33+RW9uhrOvx9/GtfnJHTijo5/tx0d/3v2RYj+pj5NIvLQbbzFtxrAtLCihnw0fgajiaNojurA6ul5YfU4vRkLj0ihXDaaGo6QCpuymuWWoJcg0AdE40MVcnSuVDqpWKl7Lq1cqVeS2zuuhp/+rV33UqYd+wUErFDsQW5yNqPFlWHbVP58DJJNAAotBlGY8I2OQ9icWL7DCVsRu9ePgTMKAaxZH7Vqt0q6E3jlyNWrv1Hdr1c6JH7brKDyvI9vqcXXFrkQ4UiC2Gfxki8FvgdApBUPzps+lbnSpdEqe8SxTKSrPcJlBpgeBMFwceFX/xJF0Mk3BAHYmPM5SKE/H0zxBjlz9akoiMpfetgf5+/swvN1vRSa0TkyNgjSxnIOuJuwZRW4RyMcB+5sBF+bDLKbmmem0KkHJCsn2p7duMW2ybhUd0UOr/4AK3Gv1g6+/v+l8AsrZzcfaUTyjG26LmarHhCaRZlHNZ1x+LmezWZbXr2YIUmjzjuZJ5PSBZJrllgP+BMxZm3AOGjJr1Due1/JtfJkas77CCia626z8eMCG0QdpNoxIv5bFoevLlkudNwULtU/WSvUiYhB/uquQgBg9Lb7WP3Mu4rdy7bG14UfHqdcKRVliTmacLD9oCsK1War5j4tN4/sM7HO+LVwneY1F6W4aZgo+/mIZYmvYmBCeMRVd2Llgk2xznGo5heBN6Z2ZnNBfJ/RCfjihf112+5r2Jthe69K/K5do3i4EbLMI5Fga9kIvnNo5SzbI/RXgJr/XvA7yQ/RXft+OpPlO/F6ykdPd99D8Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jxmwZUgwnsCMQ+DULSEXaNrmJSPkxSgxEpFkLvn1lUxMgJCUnpnMEK1Xu99e9O2eSTxJvSCUEoSinFnRRcN+8E5QjQxH9RJBdbdU9XyvhEdQLSFc98CrD2tDILYVSZlBxKTCTDVsz0WVEvJKnj9AXuDVAoTKXtW9t607EFKb1ipl17YWk5TJIHfbsDPBAo4llQHDE5CBIkE/vOwGWjPABSa7ebZCmTsUzbFS08BxSDkGAmlKyoRPnDNnS+cslkGfJgyrTMCrz1g27Ne78/m8PK+UuUgcz3Vdx607WieWNPliN4+KyxBHbMRX5xZmnFGCU/qCDahLUGMeW2GacEHVePKBaeQg15guwYLobFbZF9t5c5CjO9DSFkghcUmOMSqM3cIIBDAC1o/bqGF/OayCq7sDgZkccTGRO+d/gwRsBimfQlySRWQFusMt7klX8wxIEDGSZpLOoGfaZIoJSOtawIguulTq5oullZffWkj9R4suA/IvZTlzNrFq6M6e7FzQBKT6PzXbrNfKyh1OM2gm10s+b39TAzTgvUhwcd1ifH5Pn3t+I4ewqbwCtS7363m3Wde99Xqpe/NNfK93ht0Z83sJfho9ois3afF+AiS8JzfxDYA/S+a0dvzy4nfdTBz3Bo9pbxG6PUcNOu2f4bgd/Xf6I7xiR7/PxUl13j+98WPyu/2S3M/C8V316+OEL/shvkLLYc2NvldPL5+Ou8nye5y0XqbjJy+9u33+RW9uhrOvx9/GtfnJHTijo5/tx0d/3v2RYj+pj5NIvLQbbzFtxrAtLCihnw0fgajiaNojurA6ul5YfU4vRkLj0ihXDaaGo6QCpuymuWWoJcg0AdE40MVcnSuVDqpWKl7Lq1cqVeS2zuuhp/+rV33UqYd+wUErFDsQW5yNqPFlWHbVP58DJJNAAotBlGY8I2OQ9icWL7DCVsRu9ePgTMKAaxZH7Vqt0q6E3jlyNWrv1Hdr1c6JH7brKDyvI9vqcXXFrkQ4UiC2Gfxki8FvgdApBUPzps+lbnSpdEqe8SxTKSrPcJlBpgeBMFwceFX/xJF0Mk3BAHYmPM5SKE/H0zxBjlz9akoiMpfetgf5+/swvN1vRSa0TkyNgjSxnIOuJuwZRW4RyMcB+5sBF+bDLKbmmem0KkHJCsn2p7duMW2ybhUd0UOr/4AK3Gv1g6+/v+l8AsrZzcfaUTyjG26LmarHhCaRZlHNZ1x+LmezWZbXr2YIUmjzjuZJ5PSBZJrllgP+BMxZm3AOGjJr1Due1/JtfJkas77CCia626z8eMCG0QdpNoxIv5bFoevLlkudNwULtU/WSvUiYhB/uquQgBg9Lb7WP3Mu4rdy7bG14UfHqdcKRVliTmacLD9oCsK1War5j4tN4/sM7HO+LVwneY1F6W4aZgo+/mIZYmvYmBCeMRVd2Llgk2xznGo5heBN6Z2ZnNBfJ/RCfjihf112+5r2Jthe69K/K5do3i4EbLMI5Fga9kIvnNo5SzbI/RXgJr/XvA7yQ/RXft+OpPlO/F6ykdPd99D8Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/A4jxnjCwYbT2DGXHzqNDQJ0LTpS0eVF1Biy2DJ4OTXVzIxAUJSemYyQ7Re7X570bd7wVASW57PGGScpFQJ+231F643o4YRWZqNDUez0bShoYYFmtmChts0DAy2oyohYzmElHFEeVu1DLOumZZmuRPT8izHMxs1wzV/qsodZEyYFio1Q1WKJKbMK9221TyjXooYYR5FCTCPY2/sD688oemhCpPaudigLB1mnTnnC0/XcS0CDHGMazhN9At9T+ciYt6YzCjieQYvPiPWVl/urtfr2rpeS7OZbhmGoRstXehEjMzO1M6n6jJEIZ2mm3MP0ZQSjGLyjCSoIfB5Gil+PEszwufJO6ZN3TSkaQ0KrGHTpmeq/uqgRHeipT2QGUMamyOzMjaCKWRAMSjfRmFbPTutgpu7kwxRNk2zhB2c/w0S0BXE6QIijVWRVehOt3gkXZ0LwF5IcZwzsoKvsk0WCANTbjKYkuKKMNF8EVPK8isFE3+k6jLA/1KWC30Xq4CuH8lOn8yA8f9Ts916bazcoTiHjvktfsjGmf79EsUIPV6u4sB6KshsiobtEsKu8gbUttwv58Nm3fbWy6UHNObF6JJfXg+Dz+bP22Xg3/rf5nHfbj2md3g0TKC7/todoVXvcjUeIMdMJsub23Fc7/exbYTzFn3IbpYxdvjVJ7a+nTrGgDcHhnF3O09pMLu/t2nzsxt8fqQFzeLlMAsfyPz3c8McPkfhj/Pv9+cDu/8lYOtpavzndluRa86Lovf0KV3EEz/8YoB1PTk3f9z4X9bt15h2Y9gXVpQwzn8/AObVUbZH2FcCUS/EP6YXKSGRNi1VvYXkKMaBcrUjb0lq8XJBQCTyRDE3Z8sJzJ5t1HtWq163TaPXbfmW+K9lu2bQ8t2KgzYoDiD2Ujol0pdk2U3/fAwQJx4DGkGmrdIcz4GpH1jsI46UkI7E40gpg0kqWNyx3cDu9prNvhP0LMPpDqxB0LQd32l0613HVZWvKb+m15k/5ZDtM3hjj8FHgMmCgKR52edMNDrjIiVLtMp5bNZWqEYhF4Mgk1zsWbbb0BlJFjFIwHqSRnkMtcV8USZIZ5tfS0OYldLRYFK+v3fDO/xWZULoREQqMBlLF0Q14cgoMqpA3g/Y3Q24Mu/nEZHPTKSVZwRvkOx/eu0W2SbbVhER/eqNf5kV7q36ydff3tQ/AKUf5mPrKFqRHbfVTBVjQpBIp6rmEtWWtXy1ysv6OZIgM2FeFzxp6mPAuWC5p0n6CFTfmtBPGjJb1Aeet/J9fDmf0zFHHBLRbUp5PGHDGAOTG0YoXktx6vqy51LkjUPBj8l6sVhEJOIPdxXsYaknxDfiZ51m0Wu5jtja8SPiFGsFJ3QmT3KcPL3TFDgVZongvzTbNX7MwDHn+8JtkrdYuOim3zmH978oktjaKsI4zSkP+2op2CXbEid/WoD3qvTGTEnoLxO6YO9O6B/Dq7GgvQSpW13yd2WNlO2CQZWLQImlrRZi4RTO6WyH3F8A7vK7YwWm65vW3/h9P5LOG/FbyU5OD99D5w8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbdcto8EL3vU3jcy47xHxTbE5hxMbQkkLYxyVdy0xHyGtTaMpFk4/bpK5uYACEp/WYyQ7Re7Z790dm94ChNLM/nHJggGVXGQU/97liO1TFj0Jy2u9Da8XtbWzgGaHEMhussXLDtWFXGnOcwplwgKnqqZZi2Zlqa5cxMy7O6ntltWbZ1ryp3wLg0LVVahqqUaUK5V7vtqTmjXoY44R5FKXBPYC/0pxNPanqowaT2L7Yoa4esvxJi7ek6bkWAIUlwC2epfqEf6FxE3AvJkiKRM3j0GfGe+nh3s9m0NnYrY0vdMgxDN1xd6kScLN+q/TfNZYjGNM625wGiGSUYJeQ3qkBNQayySPGTZcaIWKUvmDZ106hMa1BiDZtt+lbVnxzU6M60dACScaTxFTIbYzcQAwOKQbm9GffUt+dVcHt3xhDlccZSfnT+N0hAC0iyNUQabyJr0J1v8US6+heAvTHFSc5JAddVm6wRBq58YRCTckK4bL6IK3X5lZLLP9J0GeB/KcuFvo9VQtdPZCcgS+Di/9Rsv15bK3coyaE/mAZBfPnVzq/J1e0PffFfyIrlZbvtl9NeDWFfeQtqV+7H83Gz7nrr8dL8Y9FBV6ybflgMf1/SoTFnS1rqYZkQ96szu7yaCzL4WsSf7jfG1Lj6tiriiUMmw+Jq8AmNHtyPiTl9WInJlIq7NzOL6UPzdv5RT9+FyXxdjuLZYH1LbNteTM1ZcL/6MewsI9Zht0Hx0+myYDmhg2i+ykfj8nbxbh5uupNAvPeHC/QmWIfu5v4uxqvNmKSfOkCy3lNM+zEcChtKCPPFD8CiOVbtMQ6UkawXEq/TSyUhkRbXqt664igugAq1X92qqMXLJQGRyJPF3J5td2SOTN8eWK5tt01j8MH1Lfmf23bMkes7DQdtURxBHGQ0JpWvimW3/fM6QJx6HGgETCuyHK+Aq69YDJBAypjeyMeRUQ6zTLK4afv+qG13XbMj0RmmM2gbbSuwfDfwrfddW1WuM/GZfmZ+LIAdMnjngMFvAJM1gYrmqz7nstG5kCl5QEUuErNVoBaFXA4CVnGxZ7Wdjs5Juk6gAqynWZQn0Fqv1nWCdL79tTSEeS29Gc7q9/dieMffmkxInYhUCryK5QPIasKJUWQ0gbwcsLMfcGPezyNSPTOZVsEI3iI5/PTULVWb7FpFRvR9EH43G9w79bOvP7+pvwJKP87HzlFUkD23zUyVY0KSSL+p5gNqPbTyosjr+nUrgmTSvC550tRDwLlkuV+z7CdQfWdCP2vI7FAfed7JD/HlYkVDgQSkstuU+njGhhECrzaMsXwt5bnry4FLmTcBpTglGyRyEakQv7qrYA9XelL8Rf5sMhY9leuErT0/Mk65VghCl9WpGie/XmgKnEmzRPJfxvaNnzJwyvmhcJfkHRYhu2mRC3j5i1IRW09FGGc5FeNArQX7ZFvjFL/W4D0pPTNTE/rjhC75ixP623QSStpLkbrTJX9X1kjdLhjUahGosfTUUi6c0jld7pH7I8B9fu9aI9PxTetv/H4YSf+Z+LlkL6fH76H/Bw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0727161388233636170</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0727161388233636170</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0727101388233630288</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0727131388233633572</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0727161388233636170</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>43F15332C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>37F1C403C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>49F1F1A3C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a43b1133-03f5-4d9d-af8f-7b340a1d4855</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true" id="ee161828-c017-447e-8019-2b264512c49d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ee12df8c-fe8c-46da-8d62-6f9f5fd0c0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173BD3E9775E0401F0A07995A24:B7EC6F57"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0727241388233644437</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>8BF1E344C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:8BF1E344C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:8BF1E344C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>4CF1D954C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>30022735C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">420258A5C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:4CF1D954C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:30022735C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:420258A5C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+I6FH6fX4HSx1HIQoAQFSTCckuntAjaTqcvleMcwDRxqO2wzK8fOxAKlHaYKyEZn5zlO4s/+5KjOLK9JufABEloodeuay+BY4+RWQr0oGqWdCcIXD2oBEgPrZI7Nit2WDFNrdDjPIUe5QJRUdds0yrplq3b7r1le3bVs82iXbaftcIjMC5dS5WitFrFEeVeFraupYx6CeKEexTFwD2BvVGzf+NJTQ/lmLTG5QZlFpA1pkLMPcPAxRAwRBEu4iQ2Lo0DncuQeyMyoUikDLYxQ17XtrbL5bK4LBUTNjFs0zQNs2ZInZCTyYXW+JYbQ9ij42SzbyGaUIJRRH4jBaoPYpqEhWY0SRgR0/gT15Zhmcq1DiusY8uhF5rxHiBDd6anA5CMI51PkZU7G8IYGFAMhYdhr65dnNfBje09Q5SPExbzo/2/QQK6gCiZQ6jzPLMc3fkeT5SrcQnY61EcpZws4FaNyRxh4IUBgzFZ3RAuhy/khaz9hRWXP5JPGeB/aculsY9VQjdOVKdNJsDF/+nZfr82Xh5RlEJjMuiu+o+LdRd+Dp6fr+LrDtj9cO23nyb1DMK+8gbUrt3b/fGw7mZrazR7qiY0TEvuTSm4ZlcP7cmvZ1r+kfy8fRCvo1f/acbeUst/Ddzu4Kr2Wv6Pzsdr5vev3HhSQzc2Xi6vo/XgetatsW+/q9O7FkvZ6BfqkHWndRuEd7fpwh899r+v4c15qFxfVcaMrZ/ix/WsNWD+k6jEqTlzKj0z9N++9/ldqyRcszm++0aDIWLrHzejZEZfZzOKS279Paf9HA6FOSWM0mAGWORbNR69dqEr+4XE1/SiJCTUx5mqN1ccxQVQoTWUlaIWL5UEREJPNnOzd1pdq10rOy27Vio5ltnya01b/qs5rtWtNd2cgzYojiC2EjomKpZi2c38fA0Qxx4HGgLTF0mKp8C1Lzy2kUCFHh3Kw5FQDveJZPFy2e44Tbfsd1y/I1fb6fqOWW12m61q03IkF98m4o7eseZYADtk8PIBgw8BkzkBRfNqzrkcdC5kSd7QIhWRVVygIoVUXgRMcbFnO27Z4CSeR6AAG3ESphEU59N5ViCDb1ZbR5hn0mHnPjt/n6Z3/C2vhNQJiVLgKhcfZDfhxFVk5Yl8nrC7n3DuvpmGRB0zWVbBCN4gOfz0Pi1qTHajIjN6aY1erBz3Tv1s84+WxhegjON67AKFC7IXNr9T5TUhSaSRd/MNFd+K6WKRZv2rKoJk0r0hedIyRoBTyXLr++QVqLFzYZx1yexQH0XeyQ/xpWJKRwIJiOW0FbLtGS+MEXD1wujJ07I69/lyEFLWTcBKnJK1IvkQUYi/fKtgDys9KR7IZZmw8L1dJ3ztxZF5ymeFIHSiduo6WX8yFDiRbonkv4TtOz/l4FTwQ+GuyDssQk5TkAr4/EtBEVtdQxgnKRW9tpYJ9sk2wynWc/DelT64yQh9e0Ov+Kc39FP/ZiRpL0baTpf8XVkn2bhg0NRDIMNS11bywSmD08keuW8B7vO763etTsn5K78fZtL4IP4o2avp8Xlo/AE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+I6FH6fX4HSx1HIQoAQFSTCckuntAjaTqcvleMcwDRxqO2wzK8fOxAKlHaYKyEZn5zlO4s/+5KjOLK9JufABEloodeuay+BY4+RWQr0oGqWdCcIXD2oBEgPrZI7Nit2WDFNrdDjPIUe5QJRUdds0yrplq3b7r1le3bVs82iXbaftcIjMC5dS5WitFrFEeVeFraupYx6CeKEexTFwD2BvVGzf+NJTQ/lmLTG5QZlFpA1pkLMPcPAxRAwRBEu4iQ2Lo0DncuQeyMyoUikDLYxQ17XtrbL5bK4LBUTNjFs0zQNs2ZInZCTyYXW+JYbQ9ij42SzbyGaUIJRRH4jBaoPYpqEhWY0SRgR0/gT15Zhmcq1DiusY8uhF5rxHiBDd6anA5CMI51PkZU7G8IYGFAMhYdhr65dnNfBje09Q5SPExbzo/2/QQK6gCiZQ6jzPLMc3fkeT5SrcQnY61EcpZws4FaNyRxh4IUBgzFZ3RAuhy/khaz9hRWXP5JPGeB/aculsY9VQjdOVKdNJsDF/+nZfr82Xh5RlEJjMuiu+o+LdRd+Dp6fr+LrDtj9cO23nyb1DMK+8gbUrt3b/fGw7mZrazR7qiY0TEvuTSm4ZlcP7cmvZ1r+kfy8fRCvo1f/acbeUst/Ddzu4Kr2Wv6Pzsdr5vev3HhSQzc2Xi6vo/XgetatsW+/q9O7FkvZ6BfqkHWndRuEd7fpwh899r+v4c15qFxfVcaMrZ/ix/WsNWD+k6jEqTlzKj0z9N++9/ldqyRcszm++0aDIWLrHzejZEZfZzOKS279Paf9HA6FOSWM0mAGWORbNR69dqEr+4XE1/SiJCTUx5mqN1ccxQVQoTWUlaIWL5UEREJPNnOzd1pdq10rOy27Vio5ltnya01b/qs5rtWtNd2cgzYojiC2EjomKpZi2c38fA0Qxx4HGgLTF0mKp8C1Lzy2kUCFHh3Kw5FQDveJZPFy2e44Tbfsd1y/I1fb6fqOWW12m61q03IkF98m4o7eseZYADtk8PIBgw8BkzkBRfNqzrkcdC5kSd7QIhWRVVygIoVUXgRMcbFnO27Z4CSeR6AAG3ESphEU59N5ViCDb1ZbR5hn0mHnPjt/n6Z3/C2vhNQJiVLgKhcfZDfhxFVk5Yl8nrC7n3DuvpmGRB0zWVbBCN4gOfz0Pi1qTHajIjN6aY1erBz3Tv1s84+WxhegjON67AKFC7IXNr9T5TUhSaSRd/MNFd+K6WKRZv2rKoJk0r0hedIyRoBTyXLr++QVqLFzYZx1yexQH0XeyQ/xpWJKRwIJiOW0FbLtGS+MEXD1wujJ07I69/lyEFLWTcBKnJK1IvkQUYi/fKtgDys9KR7IZZmw8L1dJ3ztxZF5ymeFIHSiduo6WX8yFDiRbonkv4TtOz/l4FTwQ+GuyDssQk5TkAr4/EtBEVtdQxgnKRW9tpYJ9sk2wynWc/DelT64yQh9e0Ov+Kc39FP/ZiRpL0baTpf8XVkn2bhg0NRDIMNS11bywSmD08keuW8B7vO763etTsn5K78fZtL4IP4o2avp8Xlo/AE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpIwq5cosAiULbE6kUyqVFfalcZwC3iUNjB1K+ftuhoUChm30kJOPJeGbNxctTZygMLLfFGMScRFTxOg315RVqtmXZU82Yvpqa45uGVrMQ1kpG2ZzWqqVKxQZV8RhLwKOMI8obqmWYtmZamlUdmZZrVVzLLjqW8awqjxAzYVqoFA1VScOAMjdz21CTmLoRYoS5FIXAXI7dYat75wpNF+WY1GZ9gzJzGDfnnC9cXcdFHzAEAS7iKNTr+p5O3WfukMwo4kkMXz591lC/zq5Wq+LKLkbxTLcMw9CNmi50fEZml2rzIj8Mvken0WbfRjSiBKOArJEE1QU+j3ylFcyimPB5eMK0qZuGNK1BijVsOvRS1b8dZOjOtLQHMmZIY3Nk5sYGMIUYKAZlPPAa6uV5FdycHcWIsmkUh+xg/2+QgC4hiBbgayyPLEd3vsUj6WrWAbsexUHCyBLuZZssEAam9GOYkvSOMNF8PlOy8ispEz+SdxngfylLXd/FKqDrR7LTITNg/P/UbLdeGyuPKEigue51P2EdmbejyWIwvL4blMu+U3BKsPIaGYRd5Q2obbm/9ofNuu2tr0OvT4VafzbE49fnh0cvRYWxPbn74PO0N3uqPAVv646z7t62HldJwX5fhmRSTd+DVXdB2173M5zfrfBDfzRZXwdv+PGCe3FUtpN+/2lkXN9W2uNZv/bEnpKKz3vjWcHrGd1eCcX4/v7+rTryYB4Xrm4nVvzfx/qhSpbvFrtO6bM+rsyuOheF9APVwuXEI8xEkfVsj98b3zHtxrAvzClhmLy+Aeb5VraH11FuRL0Q/51epIT42jRTdReSoxgHytWmPCWpxU0EARHfFcXc7G3DsKyKXWpbNdt2TKN9VWtZ4l/NqZo3tVY156ANigOI7YhOifQlWXbTP78DxKHLgPoQa8sowXNg6i8WO4gjxaMDcTkiymAUCRbvdByr3Cq1Okan1K5UyuZN2ek4cm21W7bVUZX7iPdoL25NOcT7DF7aY/ABYLIgIGle9jkTjc64SMkHWiY8MItLVKSQiIcgllzsWk61pDMSLgKQgPUw8pMAiov5IkuQzjarpSHMMungepTdv5PhHX7LMyF0fCIVmIzlCkQ14chTZOaBnA64uhtwbr6V+EReM5FWHhO8QbL/6btbZJtsW0VE9NIevpg57q362cd/ntR/AaUf5mPryF+SHbf5myqeCUEizbyaH6j4UUyWyySrX0USZCzM64InTX0IOBEs9zmK3oHqWxP6WY/MFvWB5618H1/C53TIEYdQdJuSbc+YMIbA5IThiduSnju+7LkUeeOQ8mOydiAGEYn411kFu1jqCXFfLKso9r/LdcTWjh8RpxgrOKEzuZPPyeeJpsCRMEsE/0XxrvFjBo453xduk7zFwkU3vSYcTn9RJLE1VIRxlFDuSQIRgl2yzXDyzwW430o/zGSE/vVCp+zkCz3p3g0F7YVI3eqSvytrJGsXLOZToZ9haaipGDiFczrbIfcvgLv8Xr26Ma9tx/kbv+9H0vwh/inZyenhfWj+AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqpVP6QZHSEWb4kAEF9QCeo944MV1KtE1rkgL669+kWARED+edcQaz3ew+u/vkSc44iiPHb3IOTJCEav1OXX9EruPaAXiG61lguNPTmlFzLWQABicoQ7XieK6u9TnPoE+5QFTUdceyy4btGI43sR3fqfpOpeTZ1oOu/QbGZWjpUrJ0bRlHlPt52rqeMeoniBPuUxQD9wX2x83hwJeePiow6Y2zFco8IWvMhEh908SlQOKJIlzCSWyemVs+ZwH3xySkSGQMPnIGvK5/7F0sFqVFuZSw0HQsyzKtmil9Ak7CY71xVGyGoE+nyWrdRjShBKOIvCMFaghilgRaMwoTRsQs/ia0bdqWCm3AEhvYdumxbn4myNEdGGkLJOPI4DNkF8FGMAUGFIN2O+rX9ePDJrjaO2GI8mnCYr6z/jdIQOcQJSkEBi8qK9AdHnFPuxpngP0+xVHGyRyuFE1ShIFrNwymZDkgXJIv4Fo+fm3J5R8pWAb4X8ZyZm5ildDNPd3pkBC4+D8z25zXKspvFGXQgIXoRRet+fXLCEO5jOPh68vgJrxIzZd6DmHTeQVqPe6P9S5Z19z62NSzrrte6t0+XA5bp/ejS1GNneh9JsqDfu1pWsnuBpWpO0y7AekOojDt9/hJ3J3fJPbDn8g9v11eu+Q5fKveLXrvvaOUzoa/+Aljv8LbeEFwh91dooer9/m1uWQnwYlF39ObE2r9SS+eRfDS8t5rk16TTAbP/KU37kzd8X3v3iLo9GJgH1WCYBk+3Av+TEM0emL2ktc/a9qsYdtYSMI4e3oGLIqloke/o3XlvJD4WV6UhQTGNHf1U6VRXAAVekPtUtLiZ1KASODLYa7WrmM5Fa9ZaTu1ctm1rXar1nTkfzXXs7u1pldo0ArFDsR2QqdE5VIqu+LPzwBx7HOgATBjnmR4Blz/IWIHCaT16UgejoRymCRSxSuViidlQPLQ7XjVVrVdLp82T13Hs9tVp+tWde0qEdf0mjWnAti2gle2FHwEmKQElMwrnnNJdC5kS17RPBORXZqjEoVMXgRMabHvuF7F5CROI1CAzTgJsghK6SzNG2Ty1a9jIMxz6+h8kp+/b8vb/VZ0QvoERDlwVUsL5DRhz1VkF4V8X7C3WXARvpkFRB0z2VbBCF4h2f70yRZFkzVVZEWP7fGjXeBeux+8/etO8wdQ5m4/1omCOdlIW9yp8pqQItIopvmKSq+lbD7P8vlVlUAyGd6UOmmbY8CZVLm3SfIC1FyHMA+6ZNaodzKv7dv4MjGjY4EExJJtWr484IUxBq5eGH15WpaHPl+2Usq+CViKfbZ2JB8iCvGPbxXsY+UnzTfyZ5Gw4HNce2Jt5JF1ymeFIDRUK3WdvH1DCpzIsETqX8I2g+8LsC/5tnHd5DUWIdn0lAn4/oumhK2uI4yTjIp+R88Nm2Kb4xRvKfifTl/C5IL+cUMv+bc39N1wMJayFyN97Uv+7myQnC4YdPUQyLHU9aV8cMrkNNwQ9w+Am/rutbr2edl1/6bv25U0vpi/WjZ6unseGv8B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0727241388233644437</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0727241388233644437</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0727191388233639071</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0727221388233642663</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0727241388233644437</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>5CF1D954C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>40022735C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>520268A5C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee12df8c-fe8c-46da-8d62-6f9f5fd0c0b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true" id="93bb75bb-4f76-4457-844b-e2e47a775c8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="42534710-c549-448e-8535-16e92cd055e1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE96ED265711FC94E0401F0A05991653:6B9E866D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:940265B6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5502A4D6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4902C2D7C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5502A4D6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4902C2D7C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:5B02B6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQj3eQF0GQUWeotpZb7Ysv57T90okhaFoISILa/vqboFi1tsdzZzpjs2x2n9198iQNCuLIcD1KUcZwQiS/05RfNAcaDrImiu4AXTHrRk0BmgGUmj2pBYbuwKBmyJJPaY58QhkgrCkbml5VdEMxnJFuuIbtVrVK1dSeZekXyigPzV0qmiyt4ohQt0jblPOMuAmgmLoExIi6DLpDr99zuacLSkxyq7FGWSTMWjPGUldVYSVAEEURrMAkVhvqnk8joO4QTwlgeYY2OQPalDd7l8tlZVmtJNlUNTRNU7W6yn0Ciqfncuus3IwCn4TJet0GJCEYggh/AAGqj9gsCSQvmiYZZrP4m9C6qmsitIJWUIG6Sc5l9TNBge7ESHsgMwoUOgN6GWyAQpQhApE0HvhN+fy0Ca73jjJAaJhkMT1Y/x0kRBYoSlIUKLSsrER3esQj7Wo1EHR9AqOc4gW6FTRJAURUus9QiFc9TDn5AioV45dWlP/hkmUI/s1YGuouVg5dPdKdDp4iyv7PzHbntY7yC0Q5ao1rzzjuxfbd2416ddN1ur4V3He6Zjv0mgWEXec1qO24N+tDsm65tdn0Np8/X05+f+RGduGnQ20wmT0OHp0rOh5fB/eTYS8d25p9e33529EfhzkIzGXydMt5MvGy139Wq2TaHYUsXGX31vWZEYU+/Eifu+aY9r2njjNwBu/j6r/3Uwdes65tLuYfM683fn99sOzube/u0Qr789eH5zgNQpr2wtGNoy7T4SDU4Vl/3r21jSe9E45m1bs8ffAemp817dawbywlYZhPXhFk5VLQw+9IV3xegP0sL8KCAyUsXN1UaBRliDC5JXYJaXFzLkA4cPkw12vL0gzP7NTaRr1aNXWtfVH3DP5f3XT0q7rnlBq0RnEAsZ2QEItcQmXX/PkZIIxdikiAMmWR5HCGqPxDxA5gQPLJgB+OhFA0SriK25eWbdlO9aLWcTTTdtqe5fFF1Xa0qyv7oi5Ltwm7I3eZFzKU7Su4tafgAwRxipGQecFzyolOGW/JHCxyFumVBagQlPOLIBNa7BqmY6kUx2mEBGA1ToI8QpV0lhYNUun611AApIV1cDkqzt+35R1+KzvBfQIsHKio5QLxaaIjV5FRFvJ9wc5uwWV4Lw+wOGa8rSzDcI1k/9MnWwRNtlThFb20hy96iXvrfvL2rzvVH0Cph/3YJgoWeCdteafya4KLSKuc5hxU5pV8sciL+dlCIDMeXuU6qatDBHOucu+j5A0RdRtCPemS2aI+yLy17+PL2YwMGWAo5myTiuUJL4whouKF4fPTsjr1+bKXkveNoRU7ZmtH/CEiEP/4VoEuFH7cfM9/lkkWfI7rSKydPLxO/qxgmEzFSlwn79+QAiY8LOb6l2S7wY8FOJZ837ht8hYL42ya5Ax9/0USwtaUAYRJTpjfkQvDrtgWONl7itxPpy9hCkHf3NAr+u0N/djvDbnsxUDe+uI/Oyu4oAtEsngIFFia8oo/OHlyMt0R9w3AXX2vm5pRsy7+qO/7lbS+mL9adnp6eB5a/wE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQj3eQF0GQUWeotpZb7Ysv57T90okhaFoISILa/vqboFi1tsdzZzpjs2x2n9198iQNCuLIcD1KUcZwQiS/05RfNAcaDrImiu4AXTHrRk0BmgGUmj2pBYbuwKBmyJJPaY58QhkgrCkbml5VdEMxnJFuuIbtVrVK1dSeZekXyigPzV0qmiyt4ohQt0jblPOMuAmgmLoExIi6DLpDr99zuacLSkxyq7FGWSTMWjPGUldVYSVAEEURrMAkVhvqnk8joO4QTwlgeYY2OQPalDd7l8tlZVmtJNlUNTRNU7W6yn0Ciqfncuus3IwCn4TJet0GJCEYggh/AAGqj9gsCSQvmiYZZrP4m9C6qmsitIJWUIG6Sc5l9TNBge7ESHsgMwoUOgN6GWyAQpQhApE0HvhN+fy0Ca73jjJAaJhkMT1Y/x0kRBYoSlIUKLSsrER3esQj7Wo1EHR9AqOc4gW6FTRJAURUus9QiFc9TDn5AioV45dWlP/hkmUI/s1YGuouVg5dPdKdDp4iyv7PzHbntY7yC0Q5ao1rzzjuxfbd2416ddN1ur4V3He6Zjv0mgWEXec1qO24N+tDsm65tdn0Np8/X05+f+RGduGnQ20wmT0OHp0rOh5fB/eTYS8d25p9e33529EfhzkIzGXydMt5MvGy139Wq2TaHYUsXGX31vWZEYU+/Eifu+aY9r2njjNwBu/j6r/3Uwdes65tLuYfM683fn99sOzube/u0Qr789eH5zgNQpr2wtGNoy7T4SDU4Vl/3r21jSe9E45m1bs8ffAemp817dawbywlYZhPXhFk5VLQw+9IV3xegP0sL8KCAyUsXN1UaBRliDC5JXYJaXFzLkA4cPkw12vL0gzP7NTaRr1aNXWtfVH3DP5f3XT0q7rnlBq0RnEAsZ2QEItcQmXX/PkZIIxdikiAMmWR5HCGqPxDxA5gQPLJgB+OhFA0SriK25eWbdlO9aLWcTTTdtqe5fFF1Xa0qyv7oi5Ltwm7I3eZFzKU7Su4tafgAwRxipGQecFzyolOGW/JHCxyFumVBagQlPOLIBNa7BqmY6kUx2mEBGA1ToI8QpV0lhYNUun611AApIV1cDkqzt+35R1+KzvBfQIsHKio5QLxaaIjV5FRFvJ9wc5uwWV4Lw+wOGa8rSzDcI1k/9MnWwRNtlThFb20hy96iXvrfvL2rzvVH0Cph/3YJgoWeCdteafya4KLSKuc5hxU5pV8sciL+dlCIDMeXuU6qatDBHOucu+j5A0RdRtCPemS2aI+yLy17+PL2YwMGWAo5myTiuUJL4whouKF4fPTsjr1+bKXkveNoRU7ZmtH/CEiEP/4VoEuFH7cfM9/lkkWfI7rSKydPLxO/qxgmEzFSlwn79+QAiY8LOb6l2S7wY8FOJZ837ht8hYL42ya5Ax9/0USwtaUAYRJTpjfkQvDrtgWONl7itxPpy9hCkHf3NAr+u0N/djvDbnsxUDe+uI/Oyu4oAtEsngIFFia8oo/OHlyMt0R9w3AXX2vm5pRsy7+qO/7lbS+mL9adnp6eB5a/wE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZU+pKEH73V6Ti462QFbKUUIUgx1zFLehRXqxhMoHRZBIyExZ//Z0JBgHBw7lVVuF0erq/XubrPqMgiQ2vTSnKGU6J5Heb8iuK7NAMR4ZiG3akWI2GqYwMR1PqZqMOjNHIsXUgSz6lBfIJZYCwpmxouqnohmI4A93wDNszrZpt2UNZekI55aa5Sk2TpUUSE+qVbptykRMvBRRTj4AEUY9BL2j3rz2u6YEKk9w6W6EsHeatCWOZp6qwFiKI4hjWYJqoZ+qWzllIvQCPCWBFjj59hrQpf96dz+e1uVlL87FqaJqmaq7KdUKKx6dy66S6jEKfROnq3AEkJRiCGH8AAaqP2CQNpXY8TnPMJskB07qqa8K0ghZQgbpFTmX1y0GJ7khLWyBzChQ6AXpl7AFFKEcEIunxwW/Kp8dVcHV3kANCozRP6M757yAhMkNxmqFQoVVkFbrjLe5JV+sMQc8nMC4onqEb0SYZgIhKdzmK8OIaU958IZXK8ksLyv9w1WUI/k1ZztRNrBy6uic7XTxGlP2fmm3Wa2XlCcQFal3f3zhPj8Gv+Mp20XLixm8fPsry6dK2miWETeUVqHW5P8+7zbrurc9L2Xvk/npKRk4f+yAJkhGd9H4R0w2j5J978/yauKM8arBIB0NzcMnwbWKyRUB6PLyraRC+48vh88fUnj2qz+zEjl96F7H7sniMu1OSP15eXsK57+YE+kPr4rme9bX+4o4ym0z7L8P3STB67tv3xHpRnW44H5tT/eVpcju4Gv/2nZOEDe23zL77rdH6v8tFpJvz5ldMmzFsCytKCIrRG4KsOor28LtSj9cLsJ/pRUhwqESlqpcJjqIMESa3xC1BLV7BCQiHHi/m6my5mtExunbHcE3T0rXOuds2+H+u5eg9t+1UHLRCsQOxk5IIC1+CZVf98zNAmHgUkRDlyiwt4ARR+QeLXcCA5JMH/jhSQtEg5Sxua5bZ05223bNcu+E0+Nt3bE0z3Z7Wduq2IUs3Kbslt3k7YijfZvD6FoM/IIgzjATNiz6nvNEp4ymZglnBYr02AzWCCj4IcsHFnmE5dZXiJIuRAKwmaVjEqJZNsjJBKl39GgqAtJQ+XAzK93cwvN1vVSa4ToiFAhWxnCNeTbRnFBlVIIcDdjYDrsy3ixCLZ8bTynIMV0i2P311i2iTdavwiF47wate4V6rH339+031B1Dqbj7WjsIZ3nBbzVQ+JjiJtKpqTkFtWitms6Ksny0IMufmVc6TuhogWHCWWw7Sd0TUtQn1qCGzRr3jeS3fxlewCQkYYCjh3SaVxyM2jABRsWH4/LUsjl1ftlzyvDG0YPtknZgvIgLxj7sK9KDQ4+I7/jNP8/CrXHtsbfjhcfK1gmEyFicxTpYHmgKm3Czm/Jfmm8b3GdjnfFu4TvIaC+PdNCoYOvxFEsTWlAGEaUGY35VLwSbZljjZMkPel9I3MyWhf07oBT04oZ/71wGnvQTIa138Z2UFl+0CkSwWgRJLU17whZM7J+MNcv8EuMnvrqUZjfp540/8vh1J65v4u2Qjp7vvofUf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1VwEj4TFSQIZW+6QCugu737sjLOAN4mTogdPvrrrx0aCpR22StVop6MZ87MHB/7huMotN0255AKGjPN7zb1X/Va1ZnhadWoV6s1o4LJ1MBAsNGoEVx2ZrPAIYGu+Zxn4DMuMBNN3TatsmHZht2YWLZr191yo2TX7Z+69h1SLkNLl5Kpa5soZNzN0zb1LGVujDnlLsMRcFcQd9we9F3p6eICk9662aHME6athRCJixApBUAgDEmJxBG6QUc+NwF3x3TOsMhSeM0Z8Kb+une9XpfW5VKczpFtmiYyHSR9Ak7nX/TWVbEZAp/N4t3awyxmlOCQvmAFagBiEQdaO5zHKRWL6IPQFrJMFdqADTGIVWFfdPSWIEd3YaQjkCnHBl9gqwg2ghmkwAhojyO/qX+5bIK7vZMUMz6L04ifrP8OErAVhHECgcGLygp0l0c8067WDRDXZyTMOF3BUNEkwQS49pDCjG76lEvyBVzLx69tuPyjBcuA/M1YbtAhVgkdnelOl86Bi/8zs8N57aJ8x2EGLTRcvtjD2Ot/8+qOs3ZW3XFUv/buPVxp5hAOnXeg9uN+XZ+Sdc+t101sUvfot5fJc7IVFf/FGy2Q9WJ31797U37rRJtbSesEJYNuCtTDi6+8AubIYz+u4XZFr/nT/NvoqUx+oOUjSa6GQXQNj97y1t+MhxXUY/1R/edTfytW91+T3uMy9PxavBg+bKeRePyHPt2Zk3+D8G5dHTyM7p77d+Pk9wtZ9zvh42p6NakNeyGG9qaytgb3Uw8NSPOtpsMajo2FJIyz6W8golgqevhdrSfnhcXn8qIsNDBmuaubKI3iApjQW2qXkhY3kwJEA1cOc7eudky7U+s0PNsplyuW6XWcti3/cyoNq+e0G4UG7VCcQPRiNqMql1LZHX8+B0gilwMLIDVWcUYWwPVPInaxwJrPRvJwxIzDJJYqXvNq9Uav69QbDa9qW7bZ8bxqr37bqzUqZa/b07VhLO7ZfdqeCUiPFbx6pOAjIDShoGRe8ZxLonMhW7LEq0yEVmmFSwwyeRGkSotdu9KoIk6jJAQFGEVxkIVQShZJ3iDEd7+2gQnPraPbSX7+Pizv9FvRCekTUOXAVS0dkNOEM1eRXRTyccGNw4KL8O0soOqYybaKlJIdkuNPb2xRNNlTRVb0yxv/sgrce/eLt7/fiT4BhU77sU8UrOhB2uJOldeEFJFWMc0lLi1L2WqV5fOrK4FMZXgkddJCYyCZVLntJH4GhvYh0EWXzB71Sea9/RhfJhZsLLCASLJNy5cXvDDGwNULw5enZXPp8+UopeybgI04Z/NC+RBRiD99qxCXKD9pfpA/6zh9K/xcrIM8sk75rBCUzdVKXSfbD0hBYhmWSv2L08Pg5wKcS35s3Dd5j0VINk0zAR9/0ZSwNXVMSJwx4Xf13HAotjlOsU3AfXN6FyYX9NcbesM/vKGfBv2xlL0I63tf+mdng+Z0IaCrh0COpalv5INTJmfzA3F/BXio707FtGvVTu1P+n5cSeud+b3loKen56H1Hw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0727291388233649136</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0727331388233653263</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0727361388233656751</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6502B4D6C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5902D2D7C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>6B02C6B8C2933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42534710-c549-448e-8535-16e92cd055e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00051_UserGet_CS_FUNC_CLG_Get_YOUTH_P2" searchProperties="true" id="f8ddfe97-e52d-44fd-8816-64dd42eeb467"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU" id="92c99100-ab33-442f-be37-2bc83221a480"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU" id="1f504d6d-060f-40ae-bedc-c8f55781e671"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60736F7C963CBC0E0401F0A05993D2E</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E70D01210A8C3671E0401F0A07997A7D:D5F272D3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E70D012043D9700FE0401F0A07997A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E70D012043D9700FE0401F0A07997A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E70D012043D9700FE0401F0A07997A7B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E70D012109BB3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E70D01210A3D3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E70D012109BB3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E70D01210A3D3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o6EMIorR3RGFoKLiADi+nEAoEGWSYtKvP4W2brt397597pNWVlbmyoGsVS9I91y6AxCCUewEflkSXiv/NCyj2WrvYI1iSL3GWJCqtS2drVm02SZZuq1bLFUpSwglUPJRrPvxa4UmqUaN5Gp0Q6PoDtXuUFy91WhtK+UljBA2jVXqZKWce66POle3r5Uk8juBjhzU8XUPok5sdFQgjztYs6PfMVXeXm4orw6jt30chx2CMOomNKDrGnUj8IgX4oPOi4k6qmP7epxE8N2niV4r72ezLKtnjXoQ2QRNkiRBcgTWMZFj/6q8le6HoSn5VnBbd3U/8B1Dd52LXoCSYbwPzDJw7SBy4r33jWmKoMjCdA3mRs2gGP9Xhfjt4Iruh5Y+gIyQXkN7nbobU6AFI+gbsLxQpNfKr59V8HZWi3QfWUHkoU/r/wYJ+il0gxCaNXSP7I7u5xa/SNfbCzQ6km+4CXJSOCnaJNQNiMqzCFpOPnYQbj4Tla/lL+fo3mHQ+C8leSGecWLYxBeZERwbovj/qddzrW5WlrqbwLdI9M/M+szpbRIq88yLJL4qLx3fztHrFcKz8g3Uo9Tv68+N+uir90PKohkq9OrQJectl1kraoPveexKXqZyQLSPdqvJiOygqiZxahOZvqUydcGtllrWbFqHBDFC2tNU5jKZcdNl6eRLIWXbK3ETtVrMvp1kcaPnU8rW2iqbiDtqekL5q4NFHFcm113wXuaP5MMQuN3NkVObDHuJ9wtdZdrRfFqi1s3mTp/Rh8hxTqt0JED0+jum5xiKuEbwfA2y+L9ukpygx/pj0S0mhYU/zxi+yZLUrQrdLoBdG2QSD2yJH1/AhLePp/3R6XMZyYP5ogcEcJYVkAn2RljO5yMxM5dLd7uUej1eVphsADZCCW8IYr4Utushqa+24YbukVuV5821Euwaw9AcHLPB3pjImpxNNOksH8R8oonk6iqzc7y+yAeZmmqLRml14DlZETMhu3oUxGw/2a6UcLPgMuMizmXA9AG1ELt7eaB5S8poKHvjII5lcLzK+b3cXS7lXNTArMTbkyWOTev2tqHhmeHOc/dPxgfYuGb2l+dd3022F/Egd8V+Vz31VWnXEObiECibxW61POqrXloyBhOwu3t0mo6+DjJ7286E+WY4CrbSPjUmYC7y/BzgdJFAlvpDEPR5IDPAyS/dA88GXbOXEUMalaqc22fXZ+e0RnqfdHWq3aY24xU7O7GC6Fe3o2R32Mv7dW9aHalmuuBi7rJBaTVldYcy8tCar8VBPMqtwVwt7WZCvjYGVdMeEu6F60Vyawiiy3nvyrYSr9gpOu8cy1rx6ynjtixXbiih5VrhGVW1YH6MSJaHDZrYnNNRXAK2zAPQPywO/Fzm20VSTSmbb2ReBz0xTsDlQMcjenkaDlLX2DRAkI9W08PxvTCmkIk8kc1F3FZiqS0AsyjCQF2IvQNY8LYd8bbY4+eGAOYbaZRtcL4WA6z8OY+9ax5tkQdiYwtYblBqLEgunsYqw4Czzy/8HreXT/nKZD2ydYLiWJ2ETCajieVvV8FR9pxoESXqYjSajPOdlvSPBzyrLFIdpY1tSUyPIXAmI21/FAJBn4WbTRxWfSMyYin0ZCm/TLfo0HZ2HjmsNil+RgpGi154u2zR18XtKLJVajRQ/FmjxZVQYp0HXvXQzlZVTWXDltn1LeF8JrbRkgxA0OOU5snMafq4X2RjNrOG4LjT6UnucvyZE0dbzciU+WiletVmqZmOxx550QhmEk4ztZ8x4nxebZi8NtBQGDmbpG3n0dQ36Y0es+mWXLJO6B45OjlqTNhY2h4u1iw1w5Y8K82ZtbH17FZoDAmFSIHYssZS/7y76JfQmxq3Afp5OjyEt/lBPE+WD6PnTjpU3K3QiO/L4gKShHIP3wp6/HcCU0gcs2ZdVTthwYJQDP248lacKshLJ8EUxzE7+Mq4rcUWKZAUTZEczzfYFiWSDEn1SEC2OK4FWsKd5dxQfILYDXzLKXwVPO52S/0doOF1EPRNGNXSIDH2EFX+YrHIV1nyFXz9Bj6CWoB5IkMKLNXjRYEVANts0k22yZIczZFUkwR0D3PESRBP/WkErBhGHzli8wNHVKDhhA4siGRxmyJ8naIYp+Skp0nsUvVUr/swwVQzKtheh2baTQI5XujCAjDhBWbiwnq4D68JItDtl67pBrpKFVH7R1K715v+2xA/792zgXVMp1BARTw8xBWFXxBe8h7M90G3n4O+mweJ6RQXOk5tHDnGDcnHrd8dU7TKo12KqLrqP9Qd90P9x8f/PEn8BRTxOR8PR2bqPLm9M3dMRjFdebtX9KTXT/UkTZNrDVsFFYuweYIiyBahQiPBfOqsBUfoEw8TxI+o7AP1J88P+Ud8Sbz31RiPAw93XPm6/ME7RoWoeMdI+IvJf/pI+uAS5y2GefyVrOvi506B+K8vIqNjFHpYPMM/WRCZv8v1ha0nPzjOYv5hZlmsCuJ6/qYpjACbdfAMDKJn418Z+Mr5R+EjyQ8sMe6mXRLD73fKxXB7reiGESR+LAmVq+B54F5xxucQdn4r/WHmSh3f3wI5+vYtsJbHKh59nl556Dr/W7nmXNvFgPgUcq5YXis5ftZi5779NODfAX4x40mmIXD4G+h9mvH8I4EfInn7Q/yn5Cmnn7+Ht38B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o6EMIorR3RGFoKLiADi+nEAoEGWSYtKvP4W2brt397597pNWVlbmyoGsVS9I91y6AxCCUewEflkSXiv/NCyj2WrvYI1iSL3GWJCqtS2drVm02SZZuq1bLFUpSwglUPJRrPvxa4UmqUaN5Gp0Q6PoDtXuUFy91WhtK+UljBA2jVXqZKWce66POle3r5Uk8juBjhzU8XUPok5sdFQgjztYs6PfMVXeXm4orw6jt30chx2CMOomNKDrGnUj8IgX4oPOi4k6qmP7epxE8N2niV4r72ezLKtnjXoQ2QRNkiRBcgTWMZFj/6q8le6HoSn5VnBbd3U/8B1Dd52LXoCSYbwPzDJw7SBy4r33jWmKoMjCdA3mRs2gGP9Xhfjt4Iruh5Y+gIyQXkN7nbobU6AFI+gbsLxQpNfKr59V8HZWi3QfWUHkoU/r/wYJ+il0gxCaNXSP7I7u5xa/SNfbCzQ6km+4CXJSOCnaJNQNiMqzCFpOPnYQbj4Tla/lL+fo3mHQ+C8leSGecWLYxBeZERwbovj/qddzrW5WlrqbwLdI9M/M+szpbRIq88yLJL4qLx3fztHrFcKz8g3Uo9Tv68+N+uir90PKohkq9OrQJectl1kraoPveexKXqZyQLSPdqvJiOygqiZxahOZvqUydcGtllrWbFqHBDFC2tNU5jKZcdNl6eRLIWXbK3ETtVrMvp1kcaPnU8rW2iqbiDtqekL5q4NFHFcm113wXuaP5MMQuN3NkVObDHuJ9wtdZdrRfFqi1s3mTp/Rh8hxTqt0JED0+jum5xiKuEbwfA2y+L9ukpygx/pj0S0mhYU/zxi+yZLUrQrdLoBdG2QSD2yJH1/AhLePp/3R6XMZyYP5ogcEcJYVkAn2RljO5yMxM5dLd7uUej1eVphsADZCCW8IYr4Utushqa+24YbukVuV5821Euwaw9AcHLPB3pjImpxNNOksH8R8oonk6iqzc7y+yAeZmmqLRml14DlZETMhu3oUxGw/2a6UcLPgMuMizmXA9AG1ELt7eaB5S8poKHvjII5lcLzK+b3cXS7lXNTArMTbkyWOTev2tqHhmeHOc/dPxgfYuGb2l+dd3022F/Egd8V+Vz31VWnXEObiECibxW61POqrXloyBhOwu3t0mo6+DjJ7286E+WY4CrbSPjUmYC7y/BzgdJFAlvpDEPR5IDPAyS/dA88GXbOXEUMalaqc22fXZ+e0RnqfdHWq3aY24xU7O7GC6Fe3o2R32Mv7dW9aHalmuuBi7rJBaTVldYcy8tCar8VBPMqtwVwt7WZCvjYGVdMeEu6F60Vyawiiy3nvyrYSr9gpOu8cy1rx6ynjtixXbiih5VrhGVW1YH6MSJaHDZrYnNNRXAK2zAPQPywO/Fzm20VSTSmbb2ReBz0xTsDlQMcjenkaDlLX2DRAkI9W08PxvTCmkIk8kc1F3FZiqS0AsyjCQF2IvQNY8LYd8bbY4+eGAOYbaZRtcL4WA6z8OY+9ax5tkQdiYwtYblBqLEgunsYqw4Czzy/8HreXT/nKZD2ydYLiWJ2ETCajieVvV8FR9pxoESXqYjSajPOdlvSPBzyrLFIdpY1tSUyPIXAmI21/FAJBn4WbTRxWfSMyYin0ZCm/TLfo0HZ2HjmsNil+RgpGi154u2zR18XtKLJVajRQ/FmjxZVQYp0HXvXQzlZVTWXDltn1LeF8JrbRkgxA0OOU5snMafq4X2RjNrOG4LjT6UnucvyZE0dbzciU+WiletVmqZmOxx550QhmEk4ztZ8x4nxebZi8NtBQGDmbpG3n0dQ36Y0es+mWXLJO6B45OjlqTNhY2h4u1iw1w5Y8K82ZtbH17FZoDAmFSIHYssZS/7y76JfQmxq3Afp5OjyEt/lBPE+WD6PnTjpU3K3QiO/L4gKShHIP3wp6/HcCU0gcs2ZdVTthwYJQDP248lacKshLJ8EUxzE7+Mq4rcUWKZAUTZEczzfYFiWSDEn1SEC2OK4FWsKd5dxQfILYDXzLKXwVPO52S/0doOF1EPRNGNXSIDH2EFX+YrHIV1nyFXz9Bj6CWoB5IkMKLNXjRYEVANts0k22yZIczZFUkwR0D3PESRBP/WkErBhGHzli8wNHVKDhhA4siGRxmyJ8naIYp+Skp0nsUvVUr/swwVQzKtheh2baTQI5XujCAjDhBWbiwnq4D68JItDtl67pBrpKFVH7R1K715v+2xA/792zgXVMp1BARTw8xBWFXxBe8h7M90G3n4O+mweJ6RQXOk5tHDnGDcnHrd8dU7TKo12KqLrqP9Qd90P9x8f/PEn8BRTxOR8PR2bqPLm9M3dMRjFdebtX9KTXT/UkTZNrDVsFFYuweYIiyBahQiPBfOqsBUfoEw8TxI+o7AP1J88P+Ud8Sbz31RiPAw93XPm6/ME7RoWoeMdI+IvJf/pI+uAS5y2GefyVrOvi506B+K8vIqNjFHpYPMM/WRCZv8v1ha0nPzjOYv5hZlmsCuJ6/qYpjACbdfAMDKJn418Z+Mr5R+EjyQ8sMe6mXRLD73fKxXB7reiGESR+LAmVq+B54F5xxucQdn4r/WHmSh3f3wI5+vYtsJbHKh59nl556Dr/W7nmXNvFgPgUcq5YXis5ftZi5779NODfAX4x40mmIXD4G+h9mvH8I4EfInn7Q/yn5Cmnn7+Ht38B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwimIlqRoEFRWNguvNWwjDomwybPrr30Gjx+Qk58v7Xek0Pd1PL9PzzDPSfY/uAIRgnLhhUJXFl9o/pq6bkKLMRouzdg3WZLiGbpmwwXJWi2N5nmdMs1aVEUqhHKBED5KXGk1STIPkGzSjUXSHando+olp8ttadQljhE1jlSeyVi18L0Cdi9uXWhoHnVBHLuoEug9RJzE6KlDGHazZ0W+Yaq/PV5QXh/GrkyRRhyCMJxMa0POMJyP0iWfig86ziTqqawd6ksbw3aeJXmrve/M8f8qZpzC2CZokSYLkCaxjItf+VXut3DZDUw6s8Lru6kEYuIbuuWe9BKXAxAnNKvDsMHYTx//GNEVQZGm6AQujYVBs8KtG/HZwQfdDSx9AxkhvIEenbsbm0IIxDAxYXczll9qvn1XwuleL9QBZYeyjT+v/BgkGGfTCCJoNdIvshu7nFr9I1+szNDpyYHgpcjM4Kdsk0g2Iqm8xtNxi7CLcfCaqXspfLdCtw6DxX0ryTDzixLCJLzIjujZEyf9Tr8daXa0sdS+Fr2dH5cMpRWVcXRv3uk1nnfq0P0TL3uHlAuFR+QrqXur39edGvffV+6bt4o0XyXzRkpS5vRkC1N6yoevHRLZLHa21yA58GBUrj2q26IUtUpuJO1myvUX9bCbq2O/vDrQ/Oh1yxbLYSk8bTTZhP25b5zMXjk7yai/ZS3KAluf4NKWbK8moK/4w2BwdyeJmTKuwMyvcO4ti0rdcRljLrA73UrGnSLmibA8nLQnPp4KLdittJxvtl98xPcZQxjWCp0uQ5f91k+RFPdHvi245KSx8PBP4qshyty52uwB2bZDLArBlYXwGE8E+HJ2D2+dzUgCzRQ+I4KTMQS7aG3E5m42k3Fwuve1S7vUEZc7mA7ARK/iDKBVLcbsekvpqG23oHrlVBcFcz8MdM4zMwSEfOMZE0ZR8osknBQc30SRydZHZBV6flb1CTbUFU1ntBV6ZS7mYXzyKUu5Mtqt5tFnwuXGWZgpg+4BaSF1HGWj+kjKYuWPspbECDhe54Cjd5VIpJA28VQR7ssSxad3eNjJ8M9r5nvNgfICNa2Z/edr1vXR7lvZKV+p31WNflXeMOJOGYL5Z7FbLg77qZRVjMAG7m0e36errMLe37VycbYajcCs7mTEBM0kQZgCniwSK3B+CsC8AhQVuce7uBS7smr2cGNKoUue9Prc+ucc10vukp1PtNrUZr7i3IydKQX07Snd7R3HWvWl9pJrZgk/48wZl9YzTXcooImu2lgbJqLAGM7WyexOLtTGom/aQ8M58L1ZaQxCfT46n2PNkxU3Raeda1kpYT1mvZXkKM48sz4pOqK6Fs0NMcgJkaGJzykZJBdiKAEB/v9gLM0Vol0k15Xy2UQQd9KQkBec9nYzo5XE4yDxjw4CwGK2m+8N7YUwxlwQin0m4raRKWwRmWYSBupB6e7AQbDsWbKknzAwRzDbyKN/gfC0GWPlzHnuXPNqSACRmCzh+UGEWJJ9ME5VlwSkQFkGPd5RjsTI5n2wdoTRWJxGbK2hiBdtVeFB8N17EqboYjSbjYqel/cMezyqLVEcZs61I2SEC7mSkOQcxFPW3aLNJonpgxEYiR74iF+fpFu3b7s4nh/UmJbyRooEPv7/LF31d2o5iW6VGg3nwxrT4Ckqt08Cv79v5qq6pXNQyu4Elnk7ENl6SIQh7/Lx5NAuaPjiLfMzl1hAcdjo9KTxeOPHSaKsZ+Xw2Wql+vVlpZuOxT541gp1E01zt56w0m9UZU9AGGopid5O27SKeBia90RMu25JLzo28A0+nB42NmKXt42K9ZWbUUt4qM3ZtbH27FRlDYk5kQGpZY7l/2p31c+RPjesA/Twd7sLr/CAeJ8uH0XMjHSruVmgkt2V5AclitYdvBT35O4EpJa7ZsC6qnahkQSiBQVJ7LXeV5KWTYorjmh18ZVzXUosUSYqmSMCIDNeiJJIlqR4JyBbPt0BLvLGcK4pPELthYLmlr5LHXW+pvwM0/A6CgQnjRhamhgNR7S8Wy3xV5WCOr98wQFALMU/kRF7k2W6bpEmG5qguK0lNku6SZBuAHiVKteokTKbBNAZWAuOPHLH5gSPOoeFGLiyJZHmbInydogSn5KhnaeJRT5n+FMAUU824ZHsdmm03CeT6kQdLwIQfmqkHnyInuiSIQNdfuqEb6CKdS9o/stq93PTfhvj52y0bWMd0SwVUxiNAXFH4BeGlbsF8H3T7MeibeZCabnmh49QmsWtckXz89Ltjyla5t0sZVVf9h7rhvqv/ePufO4m/gCI+5+PuyMzcB7c35o7JKKYrr7eKHvWn41OaZemlhq2SisXYPEERZItQoZFiPnXSwgMMiLsJ4kdU9o76k+e7/CO+NHECNcHjwMcdV70sf/COUSEq3zEyPjHFTx9JH1zivCWwSL6SdT383CkR//VFZHSMUg+L3/BPHsa/A//K1oMfHGc5/9zALlclcT190xRGiM26eAaG8aPxrwx85fyj8J7kO5YEd9MuTeD3X6rlcHup6YYRpkEii7WL4HHgXnAmpwh2fiv9YeZCHd/fAgX69i2wVsYqHn2+Xrvruv9bueFe2sWAeBdyL1heagV+1mLngf0w4N8BfjHjSZYReXwGep9mvHBP4IdIXv8Q/yl5yOnn8/D6Lw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20130923_081818</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E70D012109BC3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E70D01210A3E3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f61f1377-9b57-4e12-9112-c4306b2aa6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92c99100-ab33-442f-be37-2bc83221a480</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f504d6d-060f-40ae-bedc-c8f55781e671</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property><con:property><con:name>sName</con:name><con:value>27.User_Get_CS_Geopolicy_RET_CH</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="13.User_Get_CS_Geopolicy_RET_GB"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>GB</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>13.User_Get_CS_Geopolicy_RET_GB</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="15.User_Get_CS_Geopolicy_RET_CA"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CA</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>15.User_Get_CS_Geopolicy_RET_CA</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="17.User_Get_CS_Geopolicy_RET_IE"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>IE</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>17.User_Get_CS_Geopolicy_RET_IE</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="19.User_Get_CS_Geopolicy_RET_AU"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>AU</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>19.User_Get_CS_Geopolicy_RET_AU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="21.User_Get_CS_Geopolicy_RET_NZ"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>NZ</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>21.User_Get_CS_Geopolicy_RET_NZ</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="23.User_Get_CS_Geopolicy_RET_AT"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>AT</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>23.User_Get_CS_Geopolicy_RET_AT</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="25.User_Get_CS_Geopolicy_RET_DE"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>DE</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>25.User_Get_CS_Geopolicy_RET_DE</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="27.User_Get_CS_Geopolicy_RET_CH"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>27.User_Get_CS_Geopolicy_RET_CH</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>account_oid</con:name><con:value>E608A05B1095BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>15</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>eTag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GeoProfile</con:name><con:value>CH</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa.c.uvvu.com/Consent/Text/CH/urn:dece:type:policy:TermsOfUse:20130923/html</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:7001</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"> 	<Name> 		<GivenName>${#TestCase#GivenName}</GivenName> 		<SurName>${#TestCase#SurName}</SurName> 	</Name> 	<DisplayImage> 		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL} 		</DisplayImageURL> 	</DisplayImage> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#TestCase#PrimaryEmail}</Value> 			</PrimaryEmail> 			<AlternateEmail> 				<Value>${#TestCase#AlternateEmail}</Value> 				</AlternateEmail> 			<Address> 				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress> 				<PostalCode>${#TestCase#PostalCode}</PostalCode> 				<Locality>${#TestCase#Locality}</Locality> 				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince> 				<Country>${#TestCase#Country}</Country> 			</Address> 			<TelephoneNumber>			 					<Value>${#TestCase#TelephoneNumber}</Value> 				</TelephoneNumber> 				<MobileTelephoneNumber> 					<Value>${#TestCase#MobileTelephoneNumber}</Value> 				</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#TestCase#Language1}</Language> 	</Languages> 	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth> 	${#TestCase#LegalGuardian} 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password> 	</Credentials> 	<UserRecoveryTokens> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID1}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse> 		</RecoveryItem> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID2}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse> 		</RecoveryItem> 	</UserRecoveryTokens> 	${#TestCase#ResourceStatus} </User>]]></con:value></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"> 	<Name> 		<GivenName>${#TestCase#GivenName}</GivenName> 		<SurName>${#TestCase#SurName}</SurName> 	</Name> 	<DisplayImage> 		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL} 		</DisplayImageURL> 	</DisplayImage> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#TestCase#PrimaryEmail}</Value> 			</PrimaryEmail> 			<AlternateEmail> 				<Value>${#TestCase#AlternateEmail}</Value> 				</AlternateEmail> 			<Address> 				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress> 				<PostalCode>${#TestCase#PostalCode}</PostalCode> 				<Locality>${#TestCase#Locality}</Locality> 				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince> 				<Country>${#TestCase#Country}</Country> 			</Address> 			<TelephoneNumber>			 					<Value>${#TestCase#TelephoneNumber}</Value> 				</TelephoneNumber> 				<MobileTelephoneNumber> 					<Value>${#TestCase#MobileTelephoneNumber}</Value> 				</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#TestCase#Language1}</Language> 	</Languages> 	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth> 	${#TestCase#LegalGuardian} 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password> 	</Credentials> 	<UserRecoveryTokens> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID1}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse> 		</RecoveryItem> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID2}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse> 		</RecoveryItem> 	</UserRecoveryTokens> 	${#TestCase#ResourceStatus} </User>]]></con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwqCBWkqphUVFxw5Wbt3AYEGWTAUF//Tto9CQ5yfnyflc6PT3dTy/0PPOMTd9j2wBjFCduGJRV+aXyD2c3OaZlbWst2GjUGk3bqgl1vlFrMS1oNhFqtLhtpaxinCI1wIkZJC8VlmbqNZqvsdycoduM0G7Wn7hmw6iUlyjGxDRReaIr5dz3Aty+un2ppHHQDk3s4nZg+gi3E9jWgTZsE822ecdUeX2+obw6jF93SRK1KQo+WQgiz4NPMPSpZ+qDzrOF27rrBGaSxujNp4VfKm9nsyx7yupPYexQLE3TFC1QRMfCrvOr8lq6H0aWGtjhbS2ZQRi40PTci1mA0lCyC60y8JwwdpOd/41phmLownQN5bAGmUbwq0L9dnBF90NLH0DG2Kzhncncjc2QjWIUQFRezNSXyq+fVfB2dh6bAbbD2Mef1v8NEgpOyAsjZNXwPbI7up9b/CJdr88IttUAeil2T2hUtElkQoTLkxjZbj50MWk+C5ev5S/n+N5hCP6XkjxT73ES2NQXmZFdB+Hk/6nX+1rdrCxNL0Wv8yrPxynfyS7VzoHVu8dcy6U5xeMReLlCeK98A/Uo9dv6c6M++urtkBnTs1BtZkYQ7OvKLGUWikdNxsal1Tx05LS5x+N063p1fEw5WuOwhpWR0jzWca8pBUzmHB2QpvvBuTuaqqWhLrsHLhlBdwH2MBpI7Bo3uvGazT18OOFgXN1EzfRCdRlrPRYPF2AgaiK7k56uVgOOderV1uXgIdh0ZFzqTlLeUcYabycGYIXcndIvv2N6H0MR1wCdr0EW/9dNWpDNxHwspGJS2OTzTNCrpqpSVZYkgCQHZKoIHFUcXsBIdA7H3cHtChktgumiA2Rw1mYgk52NvJxOB0pmLZeesVQ7HVGbNbIe2MglsiEr+VI21n3aXBnRhu3Qhi6K1noWbuv9yOodst4OjrS5lo3m6lnbK/lortCrq8zJyfqi7TVmPF/US6u9KGgzJZOzq0dZyXYjYzWLNgshgxdlqoFGF5D6SDutN/eXDKzPdnCvDDVwuMrFnSYtl1quzMGkJDqjJYltLnWMCPpWtPW93TvjPWJ8bnWX523XS42LstckpSvpx66ubuvyVOmD2WaxXS0P5qpzKsHeCGzvHt2ma67DzDFamTzd9Aehoe5OcASmiihOAUkXDTS12wdhVwRaA7j5RdqLXChZnYzqs7hUFbwutz67xzU2u7RnMq0WsxmuuMmRk5WgagzS7X6n7dadcXWgW6eFkAiXDT5VT5zpMjCP7Ola6SWD3O5N9dJ2Iudr2KtaTp/yLkIn1vg+iC/nnac5s2TFjfF569r2SlyPGx5ve1p9FtmeHZ1xdR5ODzHNiajOUpvzaZCUgKOJAHT3i7041cRWkVRLzaYbTTRBR0lScNmzyYBdHvu9kwc3dRDmg9V4f3grjCVnikhlU4W0lVJqycAqitDTF0pnDxai48Sio3TEKZTBdKMOsg3J16JHlD/nsXPNo6OIQKkbgBN6pfqCFpJxojca4ByIi6Aj7LRjvrI4n+aPSBnqo6iRaXhkB8YqPGi+Gy/iVF8MBqNhvp2n3cOezCqb1genulFSTocIuKPBfHeQQ9mcRJtNElUDGMNEjXxNzS9jA+9b7tan+9UmI05oGfLswt9mi66pGIPY0ZlBbxZM6rxQwql97vnVfStbVec6F/GWFNjy+UwZ8ZIOQdgRZs2jlbPsYbfIhlxm98Fha7Kj3BPEs6AMjDnMZtPBSverzVLzNBz69GVONUbRONO7WUOZTqt1S5z35jiK3U3acvJ4HFjsxky4k0EvOTfyDgKbHuaNqL50fFKsycmKeG1SmjbW0PAdPoJ9akadgMLbQ7V73l7MS+SP4W2Afp4OD+FtflDvJ8uH0XMnHTrpVgST+7K4gFS53CG3gpn8ncAUEteq2VfVdlSwIJygIKm8FqcK8tJOCcVxrTa5Mm5rheVafFPmBZkW6hJHK3SDZjo0oJuCwLF8/c5ybig+QZTCwHYLXwWPu91SfwcI/TZGgYXi2ilM4Q7hyl8sFvkqq8GMXL9hgNE8LHgiLck8kDkZEG4h0S1eYhhREQAjdGSpITOV8ihMxsE4BnaC4o8csf6BI84QdCMXFUSyuE0xuU5xQlJyNE9p4jFPJ/MpQCmhmnHB9tpso9WksOtHHioAU35opR56inbRNUEUvv2yNRPiq3SmzP9Rdel6038b4ue9ezaIjuUWCriIR0SkougLwtu4B/N90Nz7oO/mQWq5xYVOUpvELrwh+bj1u2OKVnm0C4nqDvmh+VnwwSr1OaCHI+vkwkfPP54DhE0SvvF6L8nRfDo+padTei0CX3CpmJinGIrmKR3BlBCi8zw8oIB6mKB+xEUfqD95fsg/4kuTXaAn5Hv2ScuUr8sfPER0hIuHiEpaPv/pK+eDS5K3BOXJVzLJI++VAvFfnzSwDQs9Ip6QnyyMrd/l+sLWOz8kzmKAuYFTrArmef6mKWBIzLpkiIXxe+NfGfjK+UfhI8kPLAnppm2aoO93ysV0eqmYEIZpkKhy5Sp4PzGvOJNzhNq/lf4wc+V+b2Q+x9+S+bU21Mns8s3KQ9f938o199ouEJFT2L1ieank5F1KnAfOuwn9BvDLIS116L8N6Y+RvP4h/lPyLqefv4fXfwE=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwKYqVpGoQUFTcwI2bt3AYFmWTRdBf/w4aPUlOcr6835VOT0/30ws9zzwnhu/RXZAkKE7dMKjKwkvtH8SSu86ubTa4DkSNZqvTanA7kmswLdTptFm2BRFXq8pJkiE5SFIjSF9qNEkxDbLdoFmN5LotskuRTxTd0WvVFYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuCpRxF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0lVdOzDSLEZvPs3kpfZ2Ns/zp5x5CmOboEmSJEiOwDpm4tq/aq+V+2FkyoEV3tY9IwgDFxqeezFKUApKndCsAs8OYzd1/G9MUwRFlqYbqIANSDWDXzXit4Mruh9a+gAyToxG4hjU3dgCWShGAUTV5UJ+qf36WQVvZ7XYCBIrjP3k0/q/QULBCXlhhMxGco/sju7nFr9I1+szgl05gF6WuCc0KdskMiBKqrMYWW4xdhPcfGZSvZa/WiT3DkPwv5TkmXiPE8MmvsiM4NooSf+fer2v1c3KyvAy9MoZ7PBiMoRYP5BC33Y7JhGKkj4dLZSXK4T3yjdQj1K/rT836qOv3g4Jq9O6ZRuIopoxtJBKLHb5hLN344MwAgKkDlMjGJvOQmR2RV9vtk6AXuWuUW9FM5bRjxqfGrO1bHBCKsUVx9+01MEyXBfMead47daU5yext6D2LrM6G6Z3aW74DWXZXphLI3CuA53pxQeHXu/HZ28+pRxvns+WoXJ2PYxMG0vrjZtlWYR0werozZffMb2PoYxrhM7XIMv/mxbJCUZqPBa9clJY+PNM0asiy7260OsB1LNBLvPAlvnxBUx4+3B0Dm6fy0kezJcSEMBZWYBcsLfCaj4fibm5Wnn6SpYkXlk08wHYChW8IYjFStA3Q9JY69GWlkhd5Xlzswh3zDAyB4d84MCJoin5RJPPyl4sJppIrq8yu8Dri7JXqKm2ZCrrPc8pCzEX8qtHQcydib5eRNsll8OLOFdAsw+opdhzlIHmryjILBy4F8cKOFzlvKP0ViulEDUwq/D2ZIVj03qSHkHfjHa+57wzPsDGNbO/Ou/6XqZfxL3SE/s99dhX5R0jzMUhWGyXu/XqYKylUwUOJmB39+i2XGMT5rbeyYX5djgKddk5wQmYizw/BzhdJFDk/hCEfR4oTeAWl96eZ8OeKeXEkE4qdc7rs5uze9wkRp/0DKrTobbjNTs7soIY1PVRtts7irORpvWRap6WXMpdtsmpfmINl4JFZM034iAdFdZgrlZ2M6HYwEHdtIeEd+GkWGkPQXw5O55iL9I1O03OO9ey1vxm2vTalqcwi8jyrOic1LVwfohJlkcMTWzPp1FaAbbCA9DfL/f8XOE7ZVJNOZ9vFd4Akphm4LKn0xG9Og4HJw9uGRAWo/V0f3grjCnkIk/kcxG3lVjpCMAsizBQl6K0B0vetmPeFiV+DgUw38qjfIvztRxg5c95lK55tEUeiIwOWG5QYZYkl05TtdkE54BfBhLnKMdibbI+2T4icaxOomauJBMr0NfhQfHdeBln6nI0moyLnZb1D3s8qyxSHZ0YvSKeDhFwJyPNOQihYMyi7TaN6gGMYSpHviIXl6me7DvuzieH9RbFz0gBtumlv8uXfUPUR7GtUqPBIpgxba6SZNZ54Nf3nXxd11Q2apu9wBLOZ0KPV2QIQolbtI5mQdMHZ5mP2dwagsPOoCeFx/FnThzpGswX89Fa9eutSus0HvvkRSOak2iaq/28Kc7ndcbktYGWRLG7zTp2EU8Dk94aKXvSyRXrRt6Bo7OD1oyYle3jYs1OZtRWZpV5cwN1325HcEgsiBMQ29ZY7p93F+MS+VN4G6Cfp8NDeJsfxPvJ8mH03EmHirsVwfS+LC8gWahK+FYw0r8TmFLimg3rqtqNShaUpChIa6/lqZK8dDNMcVyzi6+M21qk2Q4pMjTHdnotlmRFsklSEgnINseRNN27s5wbik8Qe2FguaWvksfdbqm/A4R+N0GBieLGKcygg5LaXyyW+arKwQJfv2GQIC3EPLHTFHoUaDabUpsDFAO4liS12HYbgCbLCz2mVp2E6TSYxsBKUfyBI1L0B464QNCNXFQSyfI2TfB1mqQ4JUfjlKUe9XQyngKUYaoZl2yvSzc7LSJx/chDJWDCD83MQ0+RE10TRCS3X7phwOQqXYjaP7Lau97034b4ee+eDaxjuqVCUsbDI1xR9AXhJe/BfB90633Qd/MgM93yQsepTWMX3pB83PrdMWWrPNoFR3WH/ND8LPhglfgc0MOReXLho+cfzwHMJjHfeL2X5Gg8HZ+y0ym7FqFdcqkYmycogmwTKoIZJkRnLTyggHiYIH7ERR+oP3l+yD/iy1InUFP8Pfu4ZarX5Q8eIipKyoeIjFu++Okr54NLnLcUFelXsp6H3ysl4r8+aWAXlnpYPMM/eRibv8v1ha13fnCc5QBzA7tclczz/E1TwBCbdfEQC+P3xr8y8JXzj8JHkh9YUtxNuyxF3+9Uy+n0UjMgDLMglYXaVfB+Yl5xpucIdX8r/WHmyv3eyHyRfEvmN8pYxbPLN2oPXfd/Kzfca7tAhE8l7hXLS63A71LsPLDfTeg3gF8O6ZbE/m1If4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>user20130726_035217</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>V1</con:name><con:value>1</con:value></con:property><con:property><con:name>V2</con:name><con:value>11</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>16</con:value></con:property><con:property><con:name>targetHostb</con:name><con:value>qa.b.uvvu.com</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20121024</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>YES</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\scripts\Scripts_Praveen</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140218</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>