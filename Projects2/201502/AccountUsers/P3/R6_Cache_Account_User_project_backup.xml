<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="Caching_new_11" resourceRoot="" soapui-version="4.5.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Dynamic LASP Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\StreamCreate - Dynamic LASP Test Cases"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\Reports\reports 1.0.6.1.P\LP1_R3\Stream Create"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">E:\Praveen_backup\e\Cache_Reports\Build_121.305</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ashwin.tikle\My Documents\E2E_1.wadl" id="a60a9e2e-e3ba-41b7-ac00-0880bb232d63" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ashwin.tikle/My%20Documents/E2E_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ashwin.tikle/My%20Documents/E2E_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2E"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="UserCreate">
      <doc xml:lang="en" title="UserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="urn:dece:type:tokentype:usernamepassword" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="${#TestCase#audienceList}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateUser">
      <doc xml:lang="en" title="PolicyCreateUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateUser">
        <doc xml:lang="en" title="PolicyCreateUser"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateAccount">
      <doc xml:lang="en" title="PolicyCreateAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateAccount">
        <doc xml:lang="en" title="PolicyCreateAccount"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="c5384778-fa15-492e-98d2-cd38b37bca87"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="4236cf89-badd-4da3-be41-212ecb32cd9f"><con:settings/><con:parameters/><con:request name="Request 1" id="fbf0a345-7ac3-439c-a9eb-0973ad3dae25"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="1bf81db4-0f4d-4df3-a29e-dcd5837de6fd"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="81436d60-ed4c-4acf-82b9-36df796e3694"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="16f58881-b585-45c7-b5d3-0855ed1c19d2"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="cfac3392-e1f5-46d8-b715-941421d0a1a0"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="7a5d62d5-73fb-427a-af8b-deacc58a38e6"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="da11a115-e7b6-4375-94d0-46628633da9d" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="a4cc87d9-ae80-4e46-a00f-712a23d6055a"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="f0f2e4f0-1ce8-4cfb-afbb-ede68bf7f618"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="cc17343d-c656-4b2b-8269-776e6ce4386d"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="46f65468-d118-470e-8552-c4ff2859c054"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="70eaefb7-c66a-4aa5-9b72-73c018dae09d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="a1e642f5-0ad4-4209-8c68-d797fc86575a"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="TokenExchange" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{AssertionUUID}/?tokentype={tokentype}" id="d7e53243-5d95-471f-8f2b-4931540c2b7b"><con:settings/><con:parameters><con:parameter><con:name>AssertionUUID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>tokentype</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Post" method="POST" id="fa35e7d8-bc30-470e-aaf2-a6c401a85b4e"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="1d389c70-6bdb-4866-8aba-a76d8abc2740"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="5713e08c-edc0-40e1-ada6-d714cea13adb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="b88b5dcb-a980-41f2-bfc6-5ebb60804876"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9cbbfb09-adf9-4157-8959-f9c5054e63e1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountCreate" type="rest" basePath="" definitionUrl="E:\DECE_API\AccountCreate_1_1.wadl" id="2b3704da-bbbb-4111-b88e-5756034fd704" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/E:/DECE_API/AccountCreate_1_1.wadl"><con:part><con:url>file:/E:/DECE_API/AccountCreate_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="AccountCreate"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="AccountUpdate">
      <doc xml:lang="en" title="AccountUpdate"/>
      <param name="AccountID" default="AccountID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="AccountUpdate">
        <doc xml:lang="en" title="AccountUpdate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Account" xmlns:coor="${#Project#CoordinatorSchema}"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Account" xmlns:coor="${#Project#CoordinatorSchema}"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="7c15b9b1-5d7e-4f2a-8325-6e517c302aba"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="a216e7ed-3e15-4998-996d-25eadf6f6e2a"><con:settings/><con:parameters/><con:request name="Request 1" id="4116984e-845f-4cdc-b327-bf28be8e19eb"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="dc22c6a4-a34f-4837-891b-f49d7ab127d3"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#Project#NODEACCOUNTID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#NODEACCOUNTID}</con:default></con:parameter></con:parameters><con:method name="AccountUpdate" method="PUT" id="a1265a96-58b0-47f6-af66-9c9b95ba6618"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#CoordinatorSchema}">proj:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#CoordinatorSchema}">proj:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="758d0cd6-9d3d-42d8-a6b1-a3d503080e09"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="2a3710c4-68f5-44bf-bdf8-5e1aae0a0de6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#Project#NODEACCOUNTID}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NODEACCOUNTID}</con:default></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="e0eb8689-ff9d-4c60-b0d5-91cd129613c3"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="3767015c-0965-42b5-8558-47b953d33641"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="a327844e-455e-4718-b50a-a2fd9da779a7"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#Project#NODEACCOUNTID}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NODEACCOUNTID}</con:default></con:parameter></con:parameters><con:method name="AccountDelete" method="DELETE" id="d7b218ba-01f0-47ba-9b2c-bb6ae96a700f"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Accounts" type="rest" basePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" definitionUrl="file:/C:/Shikha/Process/Account.wadl" id="bd876302-76ed-4255-8add-b4459fb94cdd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Shikha/rest/0/9/Process/Account.wadl"><con:part><con:url>file:/C:/Shikha/rest/0/9/Process/Account.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Accounts"/>
  <resources base="https://qa.p.dece.neustar.com:443/rest/0/9/Account">
    <resource path="" id="/">
      <doc xml:lang="en" title="/"/>
      <resource path="" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
    <resource path="" id="Accounts_API">
      <doc xml:lang="en" title="Accounts_API"/>
      <resource path="" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401 500">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:endpoint>${#Project#Device_HostName}</con:endpoint></con:endpoints><con:resource name="Accounts_API" path="" id="b5efaf8b-21bf-41e1-a8bf-bda05372ea36"><con:settings/><con:parameters/><con:resource name="AccountCreate" path="" id="b2128efb-44a0-40e6-9b26-2b2249772fa9"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="a14b2b8d-47e0-4b43-a6e7-a11cff4b0c5c"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" sslKeystore="ofstest_concat.pem" id="9deadef3-a294-444d-97c6-3a0b95c1dac3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2013/10/coordinator">
<DisplayName>Acc_Create_20130403_085121</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET" method="GET" id="aa811878-2fa7-4330-83ab-bdd63431f2da"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" sslKeystore="" id="19352f41-629f-4bf4-ba1a-3e3b766f73d6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2011/11/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:ns2="http://www.movielabs.com/md" 
xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" 
xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd">
<DisplayName>Shikha Acc Perf Testing</DisplayName>
<Country>US</Country>
<ResourceStatus>
<Current>
<Value>urn:dece:type:status:pending</Value>
</Current>
<History/>
</ResourceStatus>
</Account>

]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" sslKeystore="" id="14b650ae-d8c5-447d-bb41-f9bfcd6243ee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2011/11/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:ns2="http://www.movielabs.com/md" 
xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" 
xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd">
<DisplayName>Shikha Acc Perf Testing</DisplayName>
<Country>US</Country>
<ResourceStatus>
<Current>
<Value>urn:dece:type:status:pending</Value>
</Current>
<History/>
</ResourceStatus>
</Account>

]]></con:request><con:credentials><con:username>shikha_account_get_user1</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account Get" path="{AccountID}" id="7640d44e-74ad-45f8-811b-565c1b0be891"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>dece:org:accountid:org;dece:3823102</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET" id="01c6d16d-b874-4b3c-a79f-86562f6559b3"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" accept="application/xml" sslKeystore="" id="f87ebde6-ada8-44b0-94e2-9016c18b5c7e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdbk6q6En73V1iuR8vh4jBeapxd4SoqKgje3jBEQBGQiyC/fgcdXc6sWbdzzsOxytJ0ujtfd39JOq//5AevekJR7AZ+r0Y9kbUq8mFgub7dqxm62GjX/nmrvMbmwaO7II5RlGDNqsz3atvNxrJokm7AZ2g2nhHTamyatNlokSRDUrWqHMcpkv04Mf2kV6NJimxQdIOkdeql2yS7TOupRTbXter8tjpdro7x+HH3sl6vlkZ+NzBjN+765gHF3QR2Z0AZdbFm17yBqb29w7ssGBFvr1bcnbm2byZphN4dWnGv5iRJ2CWILMuesuZTENkETZIkQXYIrGPFrv2thkN9N0aW7G+D65gz/cB3oem5hVmuqKDECawq8OwgchPn8BPXFEGRpesGymEDUs/+txrxfYELuj/09AFkFJuN2DGpmzMNbVGEi4aqhib3at9+U5erkR6ZfrwNokP8afx3WJB/Ql4QIqsR30K6wfpzj1/k6e0Vwa7sQy+N3RMal8UPTYji6jRCWzcfuTGmlBVXL4Wv5vGNNwj+TS1eiUecGDbxRWZ410Zx8p8U6rFIVy9z00vRG8dJ5IuxXqf62hjxwBi22BYhC539TO5dIDwqX0Hda/w+/szQO6HejaA+oeKVv5f4xXCw9eFomodae9JPBkqwsXcCYUClXrQd+2ysVO20rLf7nHbeR0Y4YopJcFKj87gdtpvmjqxXotSQvdAoNkOlY73o5/FAlTYWX4gtcp0dFkw70GLdyiLNSFtjqQ+CZBcuFqE6IpoZKMQJt4dH2vCPDuSmFWRGNh21WHEhO22SkZ0V7H2P6TGGMq4hOl+CLP8vGbLDm4l5H3Dl/t/ifZmgN0WW+bTgOHCe2SCTWWDj7w6MWXt/dPau1MlIFqiqCHiO9XbCSAF7CVCGwDoKN58rOVeAAWuP59hQrwBvzSqakPHZip+ral/IHN2S5ueN5KXrQhgrIL4Yc44iaMKc13RBUUBwleUKv5HynTJTMlld8RXsgBfysLCkToKk3IW0zCgzhl7NmHS9nGO5eB4dxqeNLngKp0jc7CjN5E2TV4UB0FYLSIspti1GhzCorAz2wWgQoh1AYkbiNUGh6PtM0Q16zGvmRaZ/lCmyNFDUOOPUS1RSRcgGc6P4nguOVTjrIOSCDqbXXECdE8fkejmIzQXjKxrIePtiPBQya3IDoqhkVuGuuRoJmSZoxlhUNDkTwEXGC5kXb+ixs5GcE2yq+UAHu8fCcKqwEH0872sneGaOFVMSweYwp2BTc6DLuOYyyOx1O+PV1WAYrGXsZgxUgWVVgAGRoAwN558FI3bOTEK3Q7totBWDA3KiikIFw/2pyMm225zY0/GC4bf71lRyp03TcgjZg/SuuQeyjKwh5aimpa0Ijffd4mUyNJbIjVZFMmZU6sVtMxVtkRpLPvBaVn+5Mob1fAVVfTKdGYtpkefj465deEl/wvaj2UDh7ckYoWkM6wRpiqze5hlu1d9hPm01EjEVYCssANLOtgUXE5jt764k7GuKgMkLFC6TuAUnzYAk1QWZ5VV1KzrUFErz1KDGiixYHk7TebXUvMqaY3lcKdJcrMMVLZJrHVgXZ+qzINqqwdQHS7RWx54+T0AWzrc+RZFSqPa3SmZDpWSAJWczFu8itpLKwDAn4YDMh/MXkjqqljeYdYDRzGf0Pp849vq8t9d7XJTVw9ZZ6cCb6w8ckzHFFhVVFzQFtK/7LVdko6l58JCHmwPMeR3X7GIc6KygiSpp5DwPhldZrAM6j1eFsFM44WJfAbliYlqcNksHH3Bjd6ILKSZt+kCX3YYmf8uxkmKVjxw7ckAFnzkmXDkmgO2xLrd5KmZeuDBeZDYrCUe1NR8NOiGpLkf7ClsXCTtxveeJ3870YX1BnbOWs1MXi47MO1zd366c5iZhSbOAKhrsW5Kr7Xn/5dk7KyNFZQyX8M7kDh2zeFQZy5QvNJNCJDpRWmcPa/dQFM1n2jhMZ+lJNsxhTJ2dzXHRyXbT/gtBRNKZKVrrkyouA7i63iOfD8m78HqMEo8H7IcT+NZRzdLNDsHkNizvYZmvivhyNJOfd2fUE3WRuFZje1Htpn4cIohhIKv2VppZCKJuihs41+riq/M6pkiKIclX4nGxT0i4wN+6pcuyCb3eyb/uEuGhu8FXDopqv/BUpqMq+xpuMgI/RnrQq8X47Eh995jiKBx89daq4yCZ+JMIbBMUXdpZ6ut2VsOBhi4qe96HFgHl5iH00BMMDoQJYZD6SYz/xJcu5KfAPs/dYsA6llsqxCUsFuE0o88tNvXcpW6Y/hD7zT1ILbdsNnBCksiFVyQfp94eYiuL9+QHFnrq4A9J3UDfdT8LPvglPod0X8o6ufBOxfvbQ+ZxM/QGWI4X7n4/zn22wG1xKS4RxxjyFS5K8cMketq4BXF/ScT/4HeNuYEW+sHzu4+7/CO2NHH8WYK32AHXvXoZ/v7h88Eah5+gPPlKxnkYYLn4L19DsAtLPSye4p8siKzvWf/C11eTH4X3eO6YEly0TZqgn89Uy03bq70T3LVqF8HtvHigzGP6eYETCHA1kfnaD04v7eB7f5/HP+3vl8poBh10MGt3Xff3yg33UieINzjW7ybnEOPP8QMUL+7bD4fVPabv51UHeyKZe9I+4H37Qfyj5L/IcHR7D/xNjjVB/L/LLxB5lqPoJr7ams//k1R+3rlv/wI=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:900105" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="Request 2" mediaType="application/xml" accept="" sslKeystore="" id="78231dd8-ef85-4be1-8eaf-d0f43cb6a36c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:AB1D1CBC814D4D11E0401F0A21997B60" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="Request 3" mediaType="application/xml" accept="" sslKeystore="" id="214809a5-23d7-4a7c-9654-af8661d68b7b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:username>shikha_account_get_user1</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:AB1D1CBC814D4D11E0401F0A21997B60" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="PUT" method="PUT" id="5da35543-1c53-49d4-b72c-f56975940d2e"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c816e7f3-3bd5-448d-b67a-c7d63811215f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#AccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Account Delete" path="{AccountID}" id="6bbf359d-1118-444d-905b-46a1afa3ea56"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="6285db56-d802-45f2-bbe1-51e8a1549ab6"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" id="11140b87-b2bf-4754-9977-7431d411abfc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#AccountID" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="POST" method="POST" id="a0311329-1976-4b7e-ab48-5c4d95ce43ac"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0e430a6b-0433-44c0-89dc-5dbe2bbd1316"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#AccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="User" type="rest" basePath="" definitionUrl="file:/C:/Shikha/DECE/Process/User.wadl" id="2e682464-d1f4-46fc-9da4-0ccccde46bad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Shikha/DECE/Process/User.wadl"><con:part><con:url>file:/C:/Shikha/DECE/Process/User.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="User"/>
  <resources base="${#Project#HostName}/dece/Account/{AccountID}/User">
    <resource path="" id="/">
      <doc xml:lang="en" title="/"/>
      <resource path="" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:UserCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401">
            <representation mediaType="application/xml" element="sch:UserCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
    <resource path="" id="User_API">
      <doc xml:lang="en" title="User_API"/>
      <resource path="" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:UserCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401 500">
            <representation mediaType="application/xml" element="sch:UserCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="User_API" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="0c8174b5-3220-4153-95b8-e0573d7c904c"><con:description/><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:resource name="UserGet" path="{UserID}" id="bdef12d4-97ec-43aa-8944-3c88e649824c"><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="fe6ed9dc-45bb-4044-98b5-da432363b947"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901_concat.pem" id="0d647a5c-fada-4b21-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900105"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:101500"/>
</con:parameters></con:request><con:request name="UserGet_BasicAuth" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901.pem" id="4553a6ad-ed9c-479c-bdba-8c19d8a65aee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:username>shikha_account_get_user1</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:AB1D1CBC814D4D11E0401F0A21997B60"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:AB1D1CBC81524D11E0401F0A21997B60"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="2a75f86c-9ff5-45ff-84b7-a90995a7d9dc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901.pem" id="2763722f-c825-4357-bf2c-e51d24d0c702"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900105"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:101500"/>
</con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="b4329d9b-1b13-45c7-ae21-f41e414a12c6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="bd315131-0490-434b-a772-ffe73481d151"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="c1897df5-c4db-4c21-b621-a15652594a4d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="cbc1da50-d46c-41ad-ae90-1e81d73552cf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="23016557-501a-48f8-b51e-7148ff32ac5d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="5dda1da8-abca-4de4-a94f-fca684152959"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_PUT" method="PUT" id="f1acf72d-2bb6-4052-bed0-2526c15ee49b"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="14870ecb-83d2-4746-b865-b03922902454"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZd6rKEn73V7jYj1mGQYnDSjyrGUVFBQGHN4QWUAalQdBff1qNbpOdPd17H+5DVuyihq+qvu6ufv2njMLqAaYoSOI3gn6miCqMncQNYu+NMA2p1iL+6VZekR2FTAcgBNMMa1YV4Y1Yr1auy1BMzWk4dq0B2WZtVWfsWpOiaIomqgpCOVRilNlx9kYwWFijmjW6bdAvHabVoahnlmaXRNW6RWfO0TGeGHUu8d6IPI21iY0C1IntCKJO5nSmQB12sGbHvoEhuu/wLgFTsvvqos408GI7y1P47tBFb4SfZbsOSRZF8VzUn5PUIxmKokiqTWIdFwXeNwKn+m4MXSVeJ9c1b8dJHDh2GJzsc0QVZn7iVkHoJWmQ+dFPXNMkTZ1d12Dp1By6EX8jyO8BLuj+0NMHkCmya8i36ZszHa5hipsGq6auvBHfftOXq5GR2jFaJ2mEPq3/DguMDzBMdtCtoVtKN1h/7vGLOnVfodNRYifMUXCAo3Pzd7YDUXWSwnVQDgOEKeWi6qXx1RLdeAOdv+nFK/mIE8Mmv6iMEHgQZf9Jox6bdPVi2WEOu/2tldXJzQAV7GkszTc9xu+jSI57tPJ2gfCofAV17/H7+jND74R6N+IzercX3VNjqWlLk3Jh7NpHhxO3XCq6M7NhbXsN8QC8Ax/k4/leGDAnQI0Kd7Ln5h61d5psXzCbVHK08rASLdvrMd92mqhlhpbHs8yYPkrrZBcY/HhVvtQ1uGfqHmzv9lmasclh569tb8qyJRy8jObLCKQ9OhIZL6eTStgbyosna5oc6FgHHgOk1tv3nB5zOOc1gMdLkuffc5ZqC3Zm3xf8ef+v8b7MYFdVFCE/8Tw4Tj1QKBzw8N8GjDhvu/e3gdwuKA5omgQEngs34lAFWxnQpsj5Km9ZasmfQJ/zRhY2NCogXHKqLhZCsRAsTeuJhW+4snVcyWG+PIkjFaCLMe+roi5agm6IqgqSq6xUhZVcbtSpWijaQqhgB4JY7k6u3M6gXAYOo7DqlGUWUzZfzi0sl47DaHRYGWKo8qrMT/fyVFnVBU3sA30xcxgpx7anYbRLKguTezDq7+AGQKmgcExwUo1toRomMxJ0+yIzPspURe6rGip47ZKVXBGLvmWevteC51TejcRSNMDkWgvH4KURtZz3kT1jY1UHheBdjAdi4Y5vQFSNKir8tVZDsdBF3RxJqq4UIrjIBLEI0YoZ+SvZPzh1rewbYPPYGF4TZ1KMv8f6wTmy+4otS2AVWbRT130nYAN7nhTeslUI2qI/SJYKdjMCmshxGsCAKHBODdefA0POYse7oM0EcLiWkgj6aUWlk8H2cCqpVlAfe5PRjBXW2+ZEDiZ12/VJJXSYTX0LFAW6A9rXbFdfkLoQB6eX8cCcwyBdnLIRq9EvQYut6LPcnAtJ2HR784U5eCoXjmaMJ1NzNjmV5Wi/aZ3CrDfmeum0rwreeAThBDlPJGVLnNESWH7R22A+rXUKshXgqRwA8sbzxAATmOttriTs6aqIyQtUvpD5GS9PgSw/iQonaNpa8umJI1u5SY9URXRDXKbjYq6HlSXPCbhTlD1b7haMRC0N4F6caQ1R8jSTferP4VIbhYaVgWJnrWOapuSd1lurheeoZwa4SjHl8C7iKrkCTHu861PlwHqh6L3mhv1pG5j1cspsy7HvLY9bb7nFTVk8bJ2FAULLeOCYgik2q2iGqKugdd1vpaqYdT10onK3ipxSMHDPLsaJwYm6pFFmKQhgcJUhAzAlWpzEjcqLF/sKKFUb0+KwmvtoEY+CsSHmmLT5A102K4b6LcfOFKt85NieBxr4zDHxyjERrPdPSkugEfvC79Cs8DhZ3GtNa9hv7yhtPtxWuCeJ9LIgbIzjVmEMnmb0sWj6G202ayuCzz/F64VfX2UcZZ8cDfa3TTnQt0L80giP6lDVWDMgwyO1gfsCDSsjhY7FenaSyHaaP3HRMohOp3qDMaPJND8opj1A9NFf7WftYjPpvZBkKh/ZU3N50KR54iyu98jnQ/IuvB6j5OMB++EEvk1U03y1gU52W57vYUWoSvhytLOfT2f0M32RBG5tfVHt5DHaQQfDgC7RXafQTV7JR5ef4vFJvA7OhudR83rz/noWdKLOCtopTIlfeDonXVViHY8SSYygkbwRCJ8QeRzsc4zVxxcsUR0l2Tgep2CdwfQytNJfD611TmcXwPNk+zAIwNKOdiF8dpKItB0nyeMM4R/oMmv8FNjnb7ccsI4bnBXQGRYHcTHh50GapjvMDdMfYr+5B7kbnEcKXJAsDZwrko+fuu+5ocyFzt4+2Dv6+WA/xzDHU316SfOG/W7yWfDBPfk5s3tE9xA4d97dHxqKgCefLuB4Qbz7/fjtswWegc/iM3CEkWPc8I53FZzI+7MB/YMfMfbKceEPnt993OUfseWZH08zvJ8i3P7qZfn7V84Ha5x+BsvsKxkfYoDn4L98+jgd56yHxRP8r0hS93vVv/D11cePwns+d0wZbtoqz+DPv1TPe/eNeOd54BIXwe1weNgVj+UXRF4kwdVEEYgfnF5mv/dhvvzZm40m5+pw6vgwsom7bvB75Vpw6ZOD9znW72THHcZf4tcmDh57RJdm6g32XpcPkLo/iH+U/BdFTG/z/d+UURel/7sSAkngeFxHfFXVG/+TUn7enN1/AQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}:444</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" ?> 
<User UserID="urn:dece:userid:org:dece:76474" UserClass="urn:dece:role:user:class:full" 
    xmlns="http://www.decellc.org/schema/2010/10/dece"
    xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
    xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
    xmlns:md="http://www.movielabs.com/md"
    xmlns:dece="http://www.decellc.org/schema/2010/10/dece"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.decellc.org/schema dece.xsd">
   <Name>
      <GivenName>Jessica11</GivenName>
      <SurName>Harbor</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail>
         <Value>jessieharbor@abc.com</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>jessie_harbor@yahoo.com</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </AlternateEmail>
   <Address>
	<PostalAddress>301 Copperfield St</PostalAddress>
      <PostalCode>08810</PostalCode>
      <Locality>Dayton</Locality>
      <StateOrProvince>CT</StateOrProvince>
	<Country>US</Country>		
  </Address>
   </ContactInfo>
   <Languages>
      <Language primary="false">de</Language>
  </Languages>
<Policies>
<!--Policy Status="urn:dece:type:status:active">
        <PolicyClass>urn:dece:policy:MinorUser</PolicyClass>
        <Resource>urn:dece:agreement:coppa:900</Resource>
       <RequestingEntity>urn:dece:userid:org:dece:76488</RequestingEntity> 
        <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
        <PolicyCreator>urn:dece:userid:org:dece:76488</PolicyCreator>
</Policy-->
<Policy Status="urn:dece:type:status:active">
        <PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</PolicyClass>
        <Resource>urn:dece:agreement:enduserlicenseagreement:84737262</Resource>
        <RequestingEntity>urn:dece:userid:org:dece:76488</RequestingEntity> 
        <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
        <PolicyCreator>urn:dece:userid:org:dece:76488</PolicyCreator>
    </Policy>
</Policies>
   <DateOfBirth>2010-21-01Z</DateOfBirth>
   <Credentials>
      <Username>jessi1002</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <UserStatus>
      <CurrentStatus>
         <Status>urn:dece:type:status:active</Status>
         <StatusDate>2010-08-04T00:00:00.000Z</StatusDate>
         <StatusModifiedBy>urn:dece:org:org:dece:10</StatusModifiedBy>
         <StatusDescription>User Updated</StatusDescription>
      </CurrentStatus>
    <StatusHistory/>
   </UserStatus>
</User>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900101"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:76488"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="UserGet_List" path="List" id="28fb67ae-8817-48f6-9746-d830a4043891"><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="b272c040-3db5-4c30-8b5e-31f7d4b2505d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2c6efed1-a2fd-4567-bc03-5922f8dd548b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_Filters" method="GET" id="9edb7a4d-69a4-4336-b16e-9afcc853786e"><con:settings/><con:parameters><con:parameter><con:name>offset</con:name><con:style>QUERY</con:style></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>class</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:option>urn:dece:type:viewfilter:displayname</con:option><con:option>urn:dece:type:viewfilter:surname</con:option><con:option/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>chunk</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="b57117a9-22e8-474b-9e82-7edd62c63c5f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="class" value="urn:dece:type:viewfilter:displayname"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="0c9d65be-36b5-4127-85b4-5fe08d2bb8fc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="30324bb9-0e99-48cb-a816-97e93b74a610"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="57430238-553a-4edd-87a2-8dc2395ece1d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="ad3ad536-a1ed-4e18-841d-a602f0334a31"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="c2dce4ce-3228-4b71-b8ed-65b1bfc671ea"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="825e86c3-a6cb-479f-bdef-9ba37e535249"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="625ec8f8-4bdb-4e05-9b60-aa4831181acb"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="49b49428-b176-4437-9a8b-01cacba6310b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_PUT" method="PUT" id="0df5d29d-eab1-4935-a695-21a618dabfa6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="8cbc0252-d808-4f30-80f1-cb2392dea466"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserUpdate" path="{UserID}" id="d09813ab-8c3f-484f-824e-eb60098a0f8c"><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserUpdate_PUT" method="PUT" id="bb1b7125-520e-424b-921e-72a6781d8c6f"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="UserUpdate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901.pem" id="7911d39c-d7fa-4537-abd8-4fa853f221cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdpc6pME/3ur7C8Hy3DorhVkqphkaCigrh+YxkWRVAGBPn174DRmNzk3vu8qUol03T3nO4+DGeekX7w6T5ACEaxFwZViX+pmRTTsckm2dCtDtlotaluo8eQrUanTRqM2TIhNJhaVUIogVKAYj2IX2o0SVENim5QbY3q9FvNPtV6Inutba26hBHCmbHLE1mrZgc/QP1y15daEgX9UEce6gf6AaJ+bPbnQB73sWdfv0GqvT5fQZYbRq9uHB/7BGE+WdCEvm8+meGBeCY++TxbqD/3nECPkwi+72mhl9p7bJqmT2nzKYwcgiZJkiB7BPaxkOf8qr1WbsHQkgI7vK45PQgDz9R9L9cLUDKM3dCqAt8JIy92Dz+kpgiKLFI3YGY2TKoV/KoRHxuU6P4x0yeQEdIbyNWpWzIV2jCCgQmrC1V6qf36pwFeQ7VID5AdRgf0Zf3fEMHgDP3wCK0GuhV2A/fvGb/p1uszNPtSYPoJ8s5wUrDkqJsQVWcRtL1s7CHMPQtVy+lXM3QjGDT/y0SeiUecGDbxTWd4z4Eo/n/G9Tiqa5al7ifwNRed0ylRsjab9FYLKj0rCnfxxJXQa72UEB6dr6Duk35ff+XpnVbvQXxreBAM2KG3u9yO6+vDzoWCltN1vW5Y/sQdDw35ZGcRJHjaYtY9bRC5USLL6oritBZvp0b61vVs0t1TrYq3HvfUybarjZJ8fTESK3e3rbO5tptDop5SBttSszAZM8Ndk1opGz+36YnEs7MxoRldqR4aekSc9xeyO5LaFTRbnLe7kZK741QfN9mOs3n5qOmxhqKuEbyURRb/rxmyx+uxfl9wxUFh47czhq+yJPFJznHgMndAKrHAwb87MGGd/cnde2IvJVmgKAPAc6y/E8Yy2IuAWgisK3PLpZxxORiyzmSJA7UK8LesrAopn274paK8CamrWeLyYoh+ss2FiQxQGcy5sqAKS17VBFkG4dWWybwhZjt5LqeSsuErOAEvZMfcEnsxFDPPpCVGnjP0Zs4k2/US2weX8WFyNjTBlzlZ5OYncS4ZTV4RhkDdrEx6kODYfHw4hpXNgn0IGh7hDsBBSuI9QS5r+1TWFvSEV/XSpn22yZI4lBWUckpZlVgR0uFykX/0gmNlzjoImaCB2bUXpsYNJuR2PUT6iglkFaS8UwaPhNSa3oDICplWuGuvxkKqCupiMpBVKRVAaeOF1EcGPXEN0T2bTSUbamD3OBhOEVaDAD8P1LN5YU4VXRwA47CkzKbqmh7j6eswdbbdlFc2w1G4lXCaCVAEllUABkSCojTcfxaM2SUzPXo92oNjexAeoBtVZCoc7c95Rna95tSZTVYMb+87M9GbNXXLJSTfpHfNPZAkaI0oV9EtdUOofODl7elosYZetMnjCaNQba/LVNRVsljzod+x3tabxaiebUxFm87mi9Usz7LJadfN/fhtyr5F86HMO9MJhDNk1glSH7Bal2e4zdsO88lWSchUgCOzAIg7xxE8TGD2bXcl4ZsqC5i8QOZSkVtx4hyIYl2QWF5R7IFLzUxxmSyoiSwJlo/bdNmsVb+y5VgeT4rUV9vjhh6QWw1YZTKlJQwcZcHUh2u4VSa+toxBelzaAUWR4lF5s+XUMeWCAZaUzln8FrGVRAILfXocktlo2Sapk2L5w3kPLJrZnN5nU9fZXvbOdo+Hsnl4dTYa8JfaA8ckTLFVRdEEVQbd6/uWydKiqfrmITsaBzPjNTyzMjjUWEEdKOQi43kwutqQBugMbXJhJ3NCGV8BmaxjWpyNtYs2wcSbakKCSZs80GVn0ORfOVZQrPKZYycOKOArx4QrxwRgn+pSl6cQ0+aOaJU6rCiclM5yPOwdSWU93lfY+oBwYs9vTYNuqo3qK+qSdtydslr1JN7l6oG9cZtGzJJ6bipwuO+Inrrng3bLv8hjWWEWHuFfyB08pWhcmUhUIDTjfED0oqTOHrbeIc+bLXpxmM2Ts7TQR4i6uMZp1Ut3s7c2QUTihck727MyWIfm5vod+XpI3o3XY5R4PGA/ncA36TVPjB0049uy+A5LfHWAP456/GcZV1g8q2GXrv1joQVRDIO49lpEFRKun2Ch51l9/OW8rimSYkjypuiue30BwoWB7RUZC8l6/ST/GYZ56BtQj2BU+0OmohtVKVCxxggDBLXwpdYkWYGnB226CWj8XgmdFjvgBy2u3RZaPbrXqlUnYTwNphGwYxg9yODOVxmsQtM7erDQyu+KAcW43JN+TmKfejrrTwFMsJiOCj3bp1tdhkDe4ejDAi5xCK3Eh09H91i2hUDXv3RDN1Fp7eEfkiq1zI/1fX12awX2sbzCARXVsBAPC36j6MlbKb+VTH+r/G/pQWJ5hWTBfY0jz7wi+fzogwwFC+5MuBZ1Q313/mr4lJj4WtN9L+vsmXdG3288WDFjUVXeKhAeykl/Oj0l53NSjqFTCMYIpycogqSJOTQTrPouWriHAXFPQfyL3r6D/rLx3f4ZXhK7wTzGL+sBU6ZaLv9+1/oUjTsQwyz+zsb5+HZVbP7HC5jZNws/bJ7hP2kYWR+N/ybXwz4YcnHQeIFTrAqhfPlhwmaI03r4sAmjx+TfJfhu88/Ge7/uWGLMCyOJ4c9PqsX58lLTTTNMgljia6Xh8WQrccaXI+x/OP2WppSq73ePDP1491jL47npwoNeu/t6f3dueOXkTYijkFdieall+BaNNw+ch5P0HeDjYdrDmcgP8n3C+/qb+XfLQ+e+Evj1fw==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" UserID="urn:dece:userid:org:dece:101500" xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>Shikha_get_user</GivenName>
      <SurName>Gupta</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail verificationEntity="urn:dece:org:org:dece:10" verificationDateTime="2012-09-28T20:26:21.440Z" VerificationStatus="urn:dece:type:status:success" verified="true" ID="Coordinator-Confirmed">
         <Value>update@vijay.com</Value>
         <ConfirmationEndpoint>Coordinator-Confirmed</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>testing_+428@uvvutesting.biz</Value>
      </AlternateEmail>
      <TelephoneNumber>
         <Value>+1.7033453434</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7033453434</Value>
      </MobileTelephoneNumber>      
   </ContactInfo>
   <Languages>
      <Language primary="true">en-gb</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">1993-09-28</DateOfBirth>
   <Credentials>
      <Username>Fshikha_user_get_user</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900105"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:101500"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="UserGet_List_Response" path="List" id="e59b674e-8b21-46ec-9559-e9c1ebc6e569"><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="f0984126-a94d-4ccd-adaa-6a811cce3583"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="de229466-db62-466d-b04e-85282fe63675"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_Filters" method="GET" id="4dc0c6e3-63ad-4d52-b0d8-1e72acad3d5c"><con:settings/><con:parameters><con:parameter><con:name>offset</con:name><con:style>QUERY</con:style></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>class</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:option>urn:dece:type:viewfilter:displayname</con:option><con:option>urn:dece:type:viewfilter:surname</con:option><con:option/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>chunk</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2a4c221d-2446-4ab6-977d-09aa63bd43a4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="class" value="urn:dece:type:viewfilter:displayname"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="d3996373-48ae-4a67-86c5-a8e04b6fd163"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="bbc1b4c8-f974-48f6-bd0c-276d48e53a48"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="927ad179-fd51-410c-af6b-33bab9bf1fc3"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="0938e6f2-c97b-4b85-821e-1d98c099a472"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="460ac525-0bce-410b-9b15-e39ec0984b42"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="7c7b2faf-5501-404c-a662-e6803723ca3f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="90461862-9ba4-489a-a9c7-2aa6bf16f4f3"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="86eed746-71a2-41fa-a4ef-c2a7af1e13ff"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_PUT" method="PUT" id="c97c5da9-6530-4b10-bcbb-72b3d7d8f217"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="1de69198-58cf-48dc-8d9c-83605190515a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda11v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM21LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="User_Create" path="" id="63f9d921-13af-4cba-8258-58e315b3b39d"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="User_Create" method="POST" id="a417ebbe-60ce-4371-8838-710b567555cc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="UserCreate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_CS_1_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:900105" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="User_Delete" path="{UserID}" id="486c92d7-a98e-444e-8e82-c6ecc3ad417e"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="User_Delete" method="DELETE" id="870564ec-f7fa-4fcc-8e13-5ee7c1163c6c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="02c312e5-b2c3-4b3e-9dfb-e112b93e81cb"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserValidationTokenCreate" path="{UserID}/VerificationToken/{TokenType}" id="6924bf78-642d-4a4d-9f7b-d3c2f1fc363b"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate" method="POST" id="8a3a6b78-67ad-4c3c-9b7e-a0dd6e361ed5"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="5610059f-ded0-4191-a1fc-b7270df86cf5"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="UserValidationTokenCreate_PrimaryEmail" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" id="f851ba3d-6d5d-4713-926d-87ddc591d36e"><con:settings/><con:parameters><con:parameter><con:name>UserIdentifier</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate_POST" method="POST" id="737f0853-2c67-4570-8f11-36e33269c577"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="dc9ebc02-ccb1-4a36-9d0c-d6fb01295484"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserValidationTokenCreate" type="rest" id="4fd3e11a-ad49-49f5-a145-cd4c69b6689b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="UserValidationTokenCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/VerificationToken/{TokenType}" id="3e5f092a-78ca-4d67-8dd6-a0aa20597d03"><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate" method="POST" id="faf263e4-8b32-432e-a62c-a389455556d1"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="aaafca0a-bbb5-4edf-929a-1c372158b4f0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#NodeUserID_BAU}"/>
  <con:entry key="TokenType" value="${#Project#TokenType2}"/>
</con:parameters></con:request></con:method><con:method name="HEAD" method="HEAD" id="4e60d4ad-2999-4ba7-af17-759311f381c3"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="HEAD_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="b333ab79-5bc5-4149-aa46-972c0ce82dbe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType3}"/>
</con:parameters></con:request></con:method><con:method name="PUT" method="PUT" id="5ced1b20-8cf5-439d-b594-9661219c7899"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PUT_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="9c3cf7d5-3d91-4797-a223-dbd80f98d358"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType3}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
</con:parameters></con:request></con:method><con:method name="GET" method="GET" id="dc210892-867a-48a3-83c9-d4ed12bdc448"><con:settings/><con:parameters/><con:request name="GET_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="ce67b096-fee5-42f8-bfa0-89e4703ad3a7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType1}"/>
</con:parameters></con:request></con:method><con:method name="DELETE" method="DELETE" id="94a156bc-a78d-4b4b-ac2d-311576170221"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DELETE_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="0f6236df-9789-49fc-af49-c3b1759da708"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType2}"/>
</con:parameters></con:request></con:method><con:method name="OPTIONS" method="OPTIONS" id="5a794939-711d-4738-bdea-83e04201e847"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="OPTIONS_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="12f08bec-eec6-4c46-ae9f-c6497392a6d3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType1}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="34e28ee8-cb22-4976-809c-d65d1b9a13fd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ResourceID}/ResourceStatus/Current/Update" id="156f9219-c236-4a0a-835a-763f5d29b59b"><con:settings/><con:parameters><con:parameter><con:name>ResourceID</con:name><con:value>ResourceID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ResourceID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountResourceStatusUpdate" method="PUT" id="daceda27-9099-4546-940f-d7787df11fab"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8f3e2924-922e-4a80-ab73-d5d41fbaad40"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="0426a87a-70d1-45d6-95d5-21f3364cf8bb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="74f81be6-f92c-47de-9322-ffa97ad02a7d"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="db9cbc48-bbee-4834-9ceb-0ea9d26f0a66"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#CoordinatorSchema}">proj:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="28a622ea-c1a5-4879-94e6-98761963496d"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="User_Policies" type="rest" id="911c4228-e08a-40ed-9172-f14c62262a70" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="Policy_Delete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/Policy/{PolicyID}" id="a16b2783-e12b-4b17-a27a-a92741eec1df"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Policy_Delete" method="DELETE" id="293b6c5e-92be-474d-92d8-87d45b9238cf"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="832567a3-7337-4986-93db-fd2d25d6f39b"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Policy_Get" method="GET" id="13082f26-ed73-4ee3-8797-ca59fb2e1181"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:PolicyList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="44902926-70cc-421d-8644-953e9a6b0018"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account_Policies" type="rest" id="c4f84637-2f21-469c-9211-c605f2e6636b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="Policy_Get" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Policy/{PolicyID}" id="5b217601-2c00-493a-a01c-b37611ed5003"><con:settings/><con:parameters><con:parameter><con:name>PolicyID</con:name><con:value>PolicyID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Policy_Get" method="GET" id="af528a64-b377-4d03-b05c-37cf3533d908"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:PolicyList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="cc65031e-c286-42fc-ae5d-21856fe14823"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Policy_Delete" method="DELETE" id="95013a24-0f33-4ebf-bbb7-7c35a32f5c83"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="80f1996a-b41b-4e31-b988-e4f688b64464"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Streams_API" type="rest" id="c137136a-9677-4415-b8aa-a9afdbfbfe04" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Stream_Create" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="c634b08b-6d59-4555-868d-3e9c7a6ca1d4"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>ACCT</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ACCT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Stream_Create" method="POST" id="39bf26c0-c579-40cd-87d7-48a70dc599b5"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="86fb7abf-0bdd-446d-acc5-4fd1f56d3cec"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Stream_Delete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="65ab85a9-5a52-4a5e-811d-ce1097700a27"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>ACCT</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ACCT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Stream_Delete" method="DELETE" id="e91669b2-95c3-4042-a8d7-78a62a89dd4d"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="f39a50ca-5f8b-442f-9083-ce8b4503ea96"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenCreate" type="rest" id="596f19c2-c34f-4f49-86c7-5f0e99d74c44" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" id="17619760-098d-4fe3-8bed-94168946be09"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="RightsTokenCreate" method="POST" id="b691f04b-75f2-4d44-9274-5fbf3efe7d7e"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="403eb202-9e7a-42ca-92fe-a37c69a3b6b3"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="a4ffc5e8-f03d-41e1-8214-51fb84f3d670" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="AccountMerge" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{encodedSurvivingAccountID}/Merge/{encodedRetiredAccountID}" id="12bc4f3f-754f-4462-9cf3-5f77bddf44d6"><con:settings/><con:parameters><con:parameter><con:name>encodedSurvivingAccountID</con:name><con:value>encodedSurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>encodedSurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>encodedRetiredAccountID</con:name><con:value>encodedRetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>encodedRetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" method="POST" id="78422aa1-809d-4a08-ad0b-9f210eb52753"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="fd1efa56-2d36-4ac3-b7d5-9f118bb3ee9d"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountMergeTest" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{encodedSurvivingAccountID}/Merge/Test/{encodedRetiredAccountID}" id="eb4c5389-e819-47c9-83bf-b66696a7a6be"><con:settings/><con:parameters><con:parameter><con:name>encodedSurvivingAccountID</con:name><con:value>encodedSurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>encodedSurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>encodedRetiredAccountID</con:name><con:value>encodedRetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>encodedRetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" method="POST" id="bee92379-ca37-4cad-b6df-c2be76ef0fec"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="08c8cdc8-0bec-486d-9d85-c69d94b15769"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountMergeUndo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{encodedSurvivingAccountID}/Merge/Undo" id="98dbf4a8-d13b-431a-b787-5e097d04592a"><con:settings/><con:parameters><con:parameter><con:name>encodedSurvivingAccountID</con:name><con:value>encodedSurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>encodedSurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" method="POST" id="c0453835-a022-4751-811b-8746897014b9"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="42f4f8e5-fe2c-416d-8671-eca0a7bac04a"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDelete" type="rest" basePath="" definitionUrl="C:\Users\ralluri\Desktop\Services\RightsTokenDelete_1.wadl" id="4b0f96a0-fcd8-4a65-ba39-6ab8b61253e5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ralluri/Desktop/Services/RightsTokenDelete_1.wadl"><con:part><con:url>file:/C:/Users/ralluri/Desktop/Services/RightsTokenDelete_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenDelete"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenDelete">
      <doc xml:lang="en" title="RightsTokenDelete"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="RightsTokenDelete">
        <doc xml:lang="en" title="RightsTokenDelete"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="8ce621a9-7a5a-4130-8305-b2f5bc64f7e9"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="RightsTokenDelete" method="DELETE" id="f7dfc478-d7a5-472f-99a7-5f69773a4698"><con:settings/><con:parameters/><con:request name="Request 1" id="a8bdcb24-4891-4853-9d5a-81b0e3a9738d"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenGet" type="rest" basePath="" definitionUrl="C:\Users\ralluri\Desktop\Services\RightsTokenGet_1.wadl" id="7a733c57-82a2-4ace-9281-5d395faf608d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ralluri/Desktop/Services/RightsTokenGet_1.wadl"><con:part><con:url>file:/C:/Users/ralluri/Desktop/Services/RightsTokenGet_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenGet"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenGet[ByTokenId]">
      <doc xml:lang="en" title="RightsTokenGet[ByTokenId]"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenGet_without_DST">
      <doc xml:lang="en" title="RightsTokenGet_without_DST"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenGet[ByTokenId]" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="03727e41-5c9c-44e2-8aee-c8ada9c84c21"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="72ae4291-2577-4a5c-a0b9-d520e5fb72ef"><con:settings/><con:parameters/><con:request name="Request 1" id="8680b2a2-2135-49c6-81e6-13ab4db3bd4b"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenUpdate" type="rest" basePath="" definitionUrl="C:\Users\ralluri\Desktop\Services\RightsTokenUpdate_1.wadl" id="ddea5374-a3fc-48d0-aa14-ec3d2b2b7dd0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ralluri/Desktop/Services/RightsTokenUpdate_1.wadl"><con:part><con:url>file:/C:/Users/ralluri/Desktop/Services/RightsTokenUpdate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenUpdate"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenUpdate">
      <doc xml:lang="en" title="RightsTokenUpdate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="RightsTokenUpdate">
        <doc xml:lang="en" title="RightsTokenUpdate"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="ffbab128-76ba-4d04-b75a-bd6d7ccf6195"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="RightsTokenUpdate" method="PUT" id="2614124f-899b-4f4a-9217-40f111de16bc"><con:settings/><con:parameters/><con:request name="Request 1" id="7e1ef8b4-8cf5-4bc9-8d54-08724e0420ae"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Resource_Property_Query" type="rest" id="7ea4dbc8-e3b5-4acf-8521-32a19e29ffdf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="POST_UserName" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/${#Project#URL}" id="66b18099-a568-4e01-8cb4-792642cdd21f"><con:settings/><con:parameters/><con:method name="Method 1" method="POST" id="0d7a4468-38d4-4253-ac35-2a943daa25f6"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="a764d8bf-aa52-431a-962a-44dc79b158a7"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightCreate" type="rest" id="c34e50aa-3b38-43d5-8ba6-ad217f7a3c25" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" id="2fc92974-3f79-43d3-b3fe-3bc71986105a"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="DiscreteMediaRightCreatePOST" method="POST" id="cf9f1127-2da6-4c8f-8f26-b84d6556f31c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d6b2958b-9d79-4536-9f7b-deb4bec42804"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightDelete" type="rest" id="c41fe423-aea8-4de9-9be3-1df92510a145" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenID}/DiscreteMediaRight/{DiscreteMediaTokenId}" id="e25a63c6-a19a-481f-ae67-b3c973d4f52d"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="DELETE" id="84eba69b-dca8-41ab-b7f8-97350170e05b"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="e6426343-b117-4535-a362-530ee5718e82"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightGet" type="rest" id="bfa4826f-5d6d-4b0a-a025-c2133ca89544" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightGet" path="/rest/1/21/Account/{NodeAccountId}/RightsToken/{RightsTokenID}/DiscreteMediaRight/{DiscreteMediaTokenId}" id="fb7230b2-bf63-4db3-bdff-fedf45c9cb39"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="4e167ce7-0b10-4473-9226-deec4f78ca21"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="57ad1460-70e1-48ae-8ee7-e9e36c4f5919"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightLeaseCreate" type="rest" id="b74a6b91-592f-415c-904a-8ece93ea27ae" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightLeaseCreate" path="/rest/1/21/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenId}/{DiscreteMediaProfile}/Lease" id="4e10b4d0-8cf7-4a93-b0bb-fc113f0be1b7"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>ContentProfile</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>DiscreteMediaProfile</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="40e959e4-735b-42bf-8cdc-d9af1dd0d46a"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="48fc3e6a-c021-4865-9848-a04fefcd77f5"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="MetadataBasicCreate" type="rest" id="499f9646-6998-4893-baf9-6795bdabeb2a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="MetadataBasicCreate" path="/rest/${#Project#REST_API_Version}/Asset/Metadata/Basic/" id="aad2a6a6-7f41-4ded-b236-416c1dce2b45"><con:settings/><con:parameters/><con:method name="Method 1" method="POST" id="d87ee311-b4d7-42d4-8bd2-bb8ddb24ce8d"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="7ed09761-3dd7-442f-ac9b-970ff814cc5e"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="Setup" id="c3da5f3e-d734-45e6-9e56-e47c85f1d1e8" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7ceff9d1-4164-4585-aa87-466d1801b6f9"><con:settings/><con:testStep type="groovy" name="Update_Node_Role" id="28e861a3-6f90-4b19-923d-b0f2918d16e1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import groovy.sql.Sql;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def role = context.expand( '${#TestCase#Node_Role}' )

log.info "Node Role : " + role;

switch(role)
		{
                case "urn:dece:role:accessportal":
                                tP.setPropertyValue("Node_Id","CFFA03DEA63199B9E0401F0A21997831");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:ACCESS");
                break;
                case "urn:dece:role:accessportal:customersupport":
                                tP.setPropertyValue("Node_Id","CFA7F92E17CB545BE0401F0A05994AE8");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:ACCESCS");
                break;
                case "urn:dece:role:contentProvider":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CC0C7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:CON");
                break;
                case "urn:dece:role:contentProvider:customersupport":
                                tP.setPropertyValue("Node_Id","CCE44AF42FBE113BE0401F0A21991776");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:CON_CS_1");
                break;
                case "urn:dece:role:coordinator":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CC8C7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:COO");
                break;
                case "urn:dece:role:coordinator:customersupport":
                                tP.setPropertyValue("Node_Id","CCE44AF42FC3113BE0401F0A21991776");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:COO_CS_1");
                break;
                case "urn:dece:role:dece":
                                tP.setPropertyValue("Node_Id","CFFA03DEA63799B9E0401F0A21997831");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DECE");
                break;
                case "urn:dece:role:dece:customersupport":
                                tP.setPropertyValue("Node_Id","CFFA03DEA63C99B9E0401F0A21997831");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DECECS");
                break;
                case "urn:dece:role:device":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CCDC7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DEV");
                break;
                case "urn:dece:role:device:customersupport":
                                tP.setPropertyValue("Node_Id","CE8BFD2E2DD09BAEE0401F0A21990E42");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:DEV_CS_1");
                break;
                case "urn:dece:role:lasp:dynamic":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CDCC7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DLASP");
                break;
                case "urn:dece:role:lasp:dynamic:customersupport":
                                tP.setPropertyValue("Node_Id","CCE44AF42FD2113BE0401F0A21991776");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DLASP_CS_1");
                break;
                case "urn:dece:role:dsp":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CD2C7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DSP");
                break;
                case "urn:dece:role:dsp:customersupport":
                                tP.setPropertyValue("Node_Id","CCE44AF42FC8113BE0401F0A21991776");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:DSP_CS_1");
                break;
                case "urn:dece:role:lasp:linked":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CD7C7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:LLASP");
                break;
                case "urn:dece:role:lasp:linked:customersupport":
                                tP.setPropertyValue("Node_Id","CCE44AF42FCD113BE0401F0A21991776");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:LLASP_CS_1");
                break;
                case "urn:dece:role:portal":
                                tP.setPropertyValue("Node_Id","DABD1A709AA89052E0401F0A21996E9F");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:iscportal1");
                break;
                case "urn:dece:role:portal:customersupport":
                                tP.setPropertyValue("Node_Id","DABD1A709AAD9052E0401F0A21996E9F");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:iscportalcs1");
                break;
                case "urn:dece:role:retailer":
                                tP.setPropertyValue("Node_Id","C0CEF8E08CE1C7D6E0401F0A0599120B");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:RET");                                
                break;
                case "urn:dece:role:retailer:customersupport":
                                tP.setPropertyValue("Node_Id","CCE44AF42FD7113BE0401F0A21991776");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:RET_CS_1");
                break;
                
                default:
                                tP.setPropertyValue("Node_Id","500500");
                                tP.setPropertyValue("Node_ID","urn:dece:org:org:dece:500500");
                break;

	}
	

</script></con:config></con:testStep><con:testStep type="calltestcase" name="Set_Project_Properties" id="f0a1be58-7146-4883-8fc2-08fcb903858c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>99a847ed-6e67-42df-af3b-2af91f522cbc</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>QC_Id</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>Node_Role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91154</con:value></con:property><con:property><con:name>Country</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="7a173ebd-dd31-491d-ab0e-0137a40ba19e"><con:settings/><con:testStep type="datagen" name="AccName" id="dc74a1c3-cc74-43e7-b59b-69011e85da93"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Raju_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="c37a5eb3-0eaf-4ce0-9d4d-573650c54057"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="3257a80e-3c21-460b-9ff9-703a797f705a"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="88f8ffe2-8f0a-4947-bdac-e5c32dfdc015"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="ab8d3b98-9291-4b7a-8fb6-fb19f14b3590"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="78a3c74a-14f0-4b68-be09-13d96c9f67db"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="a227f609-aac4-4a65-b0bd-739aecc18b97"><con:settings/><con:testStep type="datagen" name="UserName" id="a4db8b18-a43b-4218-a23c-2bdd4a8e66de"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Raju_user_create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f9b6e6f6-2f4c-420b-bc87-548f6749789b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType xsi:nil="true"/><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="392095eb-af42-4482-bdd9-d90152570110"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="697448b7-62df-45ac-96a7-73eba368e800"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="f69b34a8-4d03-452b-b1a2-a3d2dfe9b3cd"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="45180cbf-2fb6-435d-b2e4-47b76e8bd992"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_Project_Properties" searchProperties="true" id="99a847ed-6e67-42df-af3b-2af91f522cbc"><con:settings/><con:testStep type="groovy" name="Set_Project_Properties" id="c7c0b214-9e0e-4b8d-858d-2fa9d846a222"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}


/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/
/* No Youth for France */

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91161</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen1" searchProperties="true" id="0174dbe8-e670-4578-8b66-e1ed5f587123"><con:settings/><con:testStep type="datagen" name="AccName" id="3148dd95-a8f5-4570-9760-8f9e4160c175"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="85a3169a-fa2c-4823-af61-8dc47925ae4d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>DisplayName_New</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" id="668653d9-cc6c-43e1-ae8f-68dabeddc9d0" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="0bf01b26-b1c1-44d6-b979-1a82cd8bee3f"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="AccountName_Gen" id="9e92aacd-2309-4af4-9e32-9fd48580d68b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();


def today= "Account_create_" + new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue ("AccountDisplayName", today);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="905ea121-ee41-4672-b71c-134f95d212c3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");

log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="c69faf28-a056-48be-9459-aa214143d843"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#CoordinatorSchema}"> 
<DisplayName>${#TestCase#AccountDisplayName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11711c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="be288dfb-7de8-48c7-8cab-2bd12d29ecc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="8695b50a-8169-4297-b849-e54d49dc75af"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )


//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = false;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

//// Connection
////this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
//
////Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

  	 if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                                
          assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
	     int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	                                                       
	     tP.setPropertyValue("NODEACCOUNTID","urn:dece:accountid:org:dece:"+accountid); 
                                
       } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
                                        
            tP.setPropertyValue("NODEACCOUNTID","urn%3Adece%3Aaccountid%3Aorg%3Adece%3A"+accountid);
       }
}
else {                        
       assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C565E4B49BB04E0401F0A05997A12</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>AccountDisplayName</con:name><con:value>Account_create_20140512_082036</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1196f15b-f3ce-463e-b03b-33fc4c9d111d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="1f7ae884-83f0-4296-a352-bcd57011ca3d"><con:settings/><con:testStep type="groovy" name="Set Pem" id="c2e5edf3-759e-41a3-b27f-e8ca2ac43223"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("AccountResourceStatusUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="8527ad54-ed95-453f-baa3-039adb0d4fc3"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ResourceID}/ResourceStatus/Current/Update" methodName="AccountResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#Account_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="ResourceID" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="ef6285b0-3f34-4c70-b5ce-12932ef754f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="89f9d726-0c75-494c-886b-fd8d5fb661b1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
//
////Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - Account _ResourceStatusUpdate - Verify with Old Etag - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C565AEDA66E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn:dece:accountid:org:dece:null</con:value></con:property><con:property><con:name>status</con:name><con:value>suspended</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18911924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51511-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true" id="a08e6239-e09a-47ec-9112-3b6e2d32d1fe"><con:settings/><con:testStep type="calltestcase" name="AccName" id="c3aaf027-ec3a-41fe-863f-ca69d1bc9a2f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>602e3b4b-bb60-4901-877a-0bd21523ce3b</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c1197308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="f1a25080-ed76-4d7d-843b-701eac3a988d"><con:settings/><con:testStep type="groovy" name="SetCounter" id="9f7252f7-3b6a-46db-b7a3-9e6df01d102a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="811f843f-7d9d-4eb0-8234-3b2eaa5c2776"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a227f609-aac4-4a65-b0bd-739aecc18b97</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="c098588f-66e5-4667-82f2-caeb813556ba"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames" id="4201f2a7-c116-4b2d-929d-1632121aa4d6"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary" id="765de826-cafc-476e-890f-78543cf9a964"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c1197308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="3a726ffe-919d-4575-b640-e2bc3d4f58ff"><con:settings/><con:testStep type="groovy" name="UserName_Gen" id="00b5a985-2c23-47ab-95ee-ff33c1301b67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= "Full_User_create_" + new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue ("UserName", today);

tC.setPropertyValue ("Password", "Password1");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="73b30c57-47ba-4c48-b7fa-85612b343456"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="e445a4e6-3788-4476-bbb8-b496f35a0dc0"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>fau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#PrimaryEmail}</Value>
        <!--<Value>testing@uvvutesting.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <DateOfBirth MeetsAgeOfMajority="true">${#Project#ADULT_DOB_XML}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="27ba4db2-f0ca-462b-a21c-ae8da6c181eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="0d948a76-1566-45db-86fb-5618f769981b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = false;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

//// Connection
////this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
//
////Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                      
              assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
              
              int lastColon = urlStr.lastIndexOf(':');
              int lastSlash = urlStr.lastIndexOf('/');
              userid     = urlStr.substring(lastColon + 1);
                                             
              tP.setPropertyValue("NODEUSERID","urn:dece:userid:org:dece:"+userid);
                       
      } else {
              assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
              int lastColon = urlStr.lastIndexOf('%3A');
              int lastSlash = urlStr.lastIndexOf('/');
              userid     = urlStr.substring(lastColon + 3);
                              
              tP.setPropertyValue("NODEUSERID","urn%3Adece%3Auserid%3Aorg%3Adece%3A"+userid);
      }
                                
} else {
                                
         assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_UserName_Password" id="50e8ed0a-ccf4-44ac-b917-15711ffd9d9b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",testCase.getPropertyValue("UserName"));
callTC.setPropertyValue("Password",testCase.getPropertyValue("Password"));

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C565E4B49BB04E0401F0A05997A12/User/urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_082037</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50e8ed0a-ccf4-44ac-b917-15711ffd9d9b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Full" searchProperties="true" id="8f0b84bc-7818-4e76-bef1-f421b62ef0ad"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="04d568bc-be6a-4f65-9418-37d1f64c1266"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

</script></con:config></con:testStep><con:testStep type="groovy" name="UserName_Gen" id="9f4a7fca-87c8-44cb-97f4-e9bbdb311625"><con:settings/><con:config><script>def tC = testRunner.getTestCase();


def today= "User_create_" + new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue ("UserName", today);

tC.setPropertyValue ("Password", "Password1");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="f9ae2fd1-8fda-464d-85b4-aaf4f900bf91"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="8dc61400-299b-489e-b964-c929435d2438"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>fau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#PrimaryEmail}</Value>
        <!--<Value>testing@uvvutesting.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="752a21bc-b8aa-4027-89d0-1709ea2a0010"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="2d3e50d8-055c-48b5-9967-c9725fd97d12"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                      
              assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
              
              int lastColon = urlStr.lastIndexOf(':');
              int lastSlash = urlStr.lastIndexOf('/');
              userid     = urlStr.substring(lastColon + 1);
                                             
              tP.setPropertyValue("NODEUSERID2","urn:dece:userid:org:dece:"+userid);
                       
      } else {
              assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
              int lastColon = urlStr.lastIndexOf('%3A');
              int lastSlash = urlStr.lastIndexOf('/');
              userid     = urlStr.substring(lastColon + 3);
                              
              tP.setPropertyValue("NODEUSERID2","urn%3Adece%3Auserid%3Aorg%3Adece%3A"+userid);
      }
                                
} else {
                                
         assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_UserName_Password" id="ceac5288-c8df-4ea0-a14f-a60e47cef085"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",testCase.getPropertyValue("UserName"));
callTC.setPropertyValue("Password",testCase.getPropertyValue("Password"));

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C5587FC37089AE0401F0A05997A18/User/urn:dece:userid:org:dece:F92C5580FAE35D97E0401F0A0799216F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - UserDelete_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>UserName</con:name><con:value>User_create_20140512_08139</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A2199736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-08-24</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E26585227E5512DDE0401F0A059975D4</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f4a7fca-87c8-44cb-97f4-e9bbdb311625</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="29c15fcb-a18b-4ec7-87c6-193b1e3339d0"><con:settings/><con:testStep type="groovy" name="Set pem" id="78732f95-5bad-4898-b95b-9d4ef7846443"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");


soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="e9c22d09-c37e-4967-97ed-ef3bb24facb4"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded)

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded)

def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="b26df845-fea0-4199-9988-d916ad8ada68"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-2151-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="8ceb2bd2-0123-491e-957a-b50e21810fa1"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" id="37311d65-efc4-4fd6-afe9-373e9539dea8" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    
<dece:Policy>       
<dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>       
<dece:Resource>${#TestCase#NODEACCOUNTIDDecoded}</dece:Resource>       
<dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>       
<!--<dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>       
<dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->         
<!--<dece:RequestingEntity>urn:dece:org:org:dece:o:pjgdevicetoken:testing</dece:RequestingEntity>-->       
<dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       
<dece:ResourceStatus>          
<dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">             
<dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       
</dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713111b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn%3Adece%3Auserid%3Aorg%3Adece%3A${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="5c31e517-f3d1-4b5b-8698-6d855054e184"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" id="5ac0e316-69a3-4941-90a5-0be0f116f2de"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserDataUsageConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C565E4B49BB04E0401F0A05997A12</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForSecondUser" searchProperties="true" id="c243937e-d48b-4210-8dc9-c710463c97be"><con:settings/><con:testStep type="groovy" name="Set pem" id="b886bc67-a7fa-4c87-866f-6664d520d5c9"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");


soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="fdafa8a7-99c0-4ba6-af5c-b00e22eba0f9"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID2"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded)

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID2"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded)

def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="54383cb7-7d03-4d21-9b5e-8650a8a33a9d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-2151-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODEUSERIDDecoded}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="44568f51-3854-42d4-8536-0b962feb4157"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML2}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODEUSERIDDecoded}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="c34323a1-1084-4038-9f49-6162ed0acb7d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    
<dece:Policy>       
<dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>       
<dece:Resource>${#TestCase#NODEACCOUNTIDDecoded}</dece:Resource>       
<dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>       
<!--<dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>       
<dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->         
<!--<dece:RequestingEntity>urn:dece:org:org:dece:o:pjgdevicetoken:testing</dece:RequestingEntity>-->       
<dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       
<dece:ResourceStatus>          
<dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">             
<dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       
</dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713111b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn%3Adece%3Auserid%3Aorg%3Adece%3A${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="a328169d-7423-46aa-afe9-b40b211921c7"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODEUSERIDDecoded}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - UserDelete_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F92C5580FAE35D97E0401F0A0799216F</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C5587FC37089AE0401F0A05997A18</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="0fc67fe0-db17-4161-8164-c537f7a63266"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7e04da00-2a2c-4bd9-bb9b-fd3bcc3450a5"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def audience = context.expand( '${#Project#audience}' )
def urntokenType_userpassword = context.expand( '${#Project#urntokenType_userpassword}' )


def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));


if( testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("URLEncode"))
{
	testCase.setPropertyValue("tokentype",urntokenType_userpassword);
	testCase.setPropertyValue("audience",audience);
}
else
{
	testCase.setPropertyValue("tokentype",URLEncoder.encode(urntokenType_userpassword, "UTF-8"));
	testCase.setPropertyValue("audience",URLEncoder.encode(audience, "UTF-8"));
}

	</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="cd5ea61b-23a8-4780-b9af-279c4aab5494"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="8c6bff15-80e2-40c7-bee0-f0f348f0ccf1"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#CoordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="98c5f251-0317-4a02-9a7d-b1ceb0d7c6a9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

//if (contentLength[0].toInteger() > 0) {
//	rawResp = new ByteArrayOutputStream();
//    def rawResp = tStep.httpRequest.response.getRawResponseData();
//     strVal  = new String(rawResp);
//      log.info strVal[0];
//
//    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
//
//    	//XMLbody =  strVal.tokenize('\n').last();
//
//	String XMLbody  = strVal.substring(startAssert, strVal.size());
//     
//	tC.setPropertyValue("XMLbody", XMLbody);
//}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="cb5f2845-0209-4f0d-add6-b7f27f7229fa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//
////Content-Length
//if (contentLengthZero) {
//	assert tC.getPropertyValue("contentLength").toInteger() == 0;
//} else {
//	assert tC.getPropertyValue("contentLength").toInteger() > 0;
//}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set pem 1" id="1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = testCase.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS" id="a5d334f5-0485-4aa7-b0a6-321c8e79641b"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="635beeb6-dbc7-46f9-bde1-122d6bdd0f01"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="f3217336-ddd6-4c64-b37d-c5582afd0dd9"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML", "SAML2 Assertion="+ base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="6052e189-bbb8-4d9c-9e9e-87088502b21f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
 
def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");
 
if (expectErrType == "" || expectErrType == "SUCCESS") {
if (XMLbody.length() > 0) {
            def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

		   // Verify response sizes...
		   assert myXML.size() == 1;
		
		   String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
		   String userId    = myXML."saml2:Subject"."saml2:NameID";
		   
		   this.log.info "accountId [$accountId]";
		   this.log.info "userId [$userId]";
		
		  
		   if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
		   {
		   	 tP.setPropertyValue("NODEACCOUNTID",URLDecoder.decode(accountId,"UTF-8"));
		   	 tP.setPropertyValue("NODEUSERID",URLDecoder.decode(userId,"UTF-8"));
		   }
		   else{
		   	 tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(accountId, "UTF-8"));
		   	 tP.setPropertyValue("NODEUSERID",URLEncoder.encode(userId, "UTF-8"));
		   }
		   
		   this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
		   this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
		   
		} else {
            return false;
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Return AssertionUUID" id="c9940144-8f6f-413b-aed0-24093ff3a6bc"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("AssertionUUID",testCase.getPropertyValue("assertionUUID"));
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A21990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbb+I6EH7fXxGlj6uQSxMuUUECAuek224vXJbuy8o4E+Jt4kDspLS/fu3QUKC0hz0SEvJkPPPNxd/MBUNJbLldxiDjJKWK77XVX7ZRb9adc9DCllnX7EY90BBgpDlgYWw5DdRwsKr4jOXgU8YR5W3VMkxbMxzNtMam5VqGe96oNazGT1WZQsaEaaFSM1RlncSUuaXbtppn1E0RI8ylKAHmcuyOutdXrtB0UYVJ7VxsUJYOs07E+dLVdVwLAEMc4xpOE/1C39O5CJg7IguKeJ7Bq8+AtdXXu09PT7Wn81qaLXTLMAzdaOlCJ2BkcaZ2vlSXIfBpmG7OfURTSjCKyQuSoK6BR2mgdONFmhEeJR+YNnXTkKY1WGMNmzY9U/U3ByW6Ey3tgcwY0liEzMrYPYSQAcWgTO79tnp2WgU3d8cZoixMs4QdnP8OEtAC4nQJgcaqyCp0p1s8kq7OBWDXpzjOGSngu2yTJcLAlNsMQrK+Ikw0X8CUsvzKmokfqboM8N+U5ULfxSqg60ey45EFMP5/arZbr42VKYpz6OQ/5xNncj55mc2DGZn+CMNvUR+v52Nz0i4h7CpvQG3L/Xo+bNZtb71eurYeYdabe4NVN7Auf9x9taczNM2vw7uvL7k9HTrcsy9ta7qOGi0Io8d/vt7+DhYLbzievJw/Ym8aTvnN8tvzdXOGvnim/3s2bqbszvi2tq0uufMLlE3Y4OrJNm5HNyMbmiu/mD1YD6mTLIOH1KTz6cB/uUrSl+Qu7X3HwcSaDKJi2vjSyqKfi5vl6l9T711e9octb9J+i2k3hn1hRQmjfP4bMK+Osj18TxmKeiH+Ob1ICQm0sFR1l5KjGAfK1Y68JanFzQUBkcAVxdych82hafUHlm17XtczegPDNsyh0TWcVsuxW1bFQRsUBxD7KQ2J9CVZdtM/nwPEicuABpBpRZrjCJj6iUUPcaT49F48jpQyGKeCxU27XmR5vVEw6xGZSesxzlbzyMbOWlW+p/yG3mTdkEO2z93OHnffAyZLApLgZYcz0eKMi2SsUJHz2KwVqEYhFyMgkyzsWnbT0RlJljFIqHqSBnkMtWW0LFOjs82/pSHMSun9YFy+vA8DO/xW5UDoBEQqMBlLD0Qd4cgQsqpAPg64uRtwZb6bB0Q+MJFQnhG8QbL/6a1PZINsm0RE9Ks/+mVWuLfqJ19/f1P/BJR+mI+to6AgO26raSoGhKCPTlXNFaqtanlR5GX9GpIaM2FeFwxp6iPAueC353H6CFTfmtBPGi9b1Aeet/J9fDmP6IgjDonoNqU8nrBbjIDJ3cIX72R96uKy51LkjcOaH5P1Y7GCSMSfbinYxVJPiG/F31OaBW/lOmJrx4+IUywUnNCFPMlB8vxBU+BUmCWC+dJs1/gxA8ec7wu3Sd5i4aKb5jmHj78oktLaKsI4zSn3PbUU7NJsiZM/L8F9U3pnpqTy19m8Zh/O5tn11UgQXoLUrS75b2WNlO2CQZUrQImlra7Fqimc08UOrb8C3GP2ltV36s7A7tmtXs+wd5m90TW3zL4fSeed+L1kJ6eH76HzBw==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_4068653e-f916-476d-aeca-5e2cc257a75c</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4068653e-f916-476d-aeca-5e2cc257a75c</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A21990CC5</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value/></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A21990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20111110_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>Full_User_create_20140512_082037</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A21990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2980</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_4068653e-f916-476d-aeca-5e2cc257a75c</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_4068653e-f916-476d-aeca-5e2cc257a75c" IssueInstant="2014-05-12T12:20:37.727Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_4068653e-f916-476d-aeca-5e2cc257a75c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>uZbU5U3UzXbdXiVWffKhCcxbT1U=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
M2keXBbDEqAd2JWQ+4VXaVuMfQ+zu4VF5tD4J42Vxh79efhkG+PjdggDFTUz3kcDVfVtOpKyM8Xa
D1IjXT8osQ0Kx42AiQIvarUsELw40PSOS4e8qIvXY2Yo5mpdYo1nbVEIzLmozmQoBNcdU2UEhvV7
9rhZgOpqH1/BJJCF9DU=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_146vru67vs2ka1m9klrqbh4c5x" NotOnOrAfter="2014-05-12T15:20:37.727Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-05-12T12:20:27.727Z" NotOnOrAfter="2014-05-12T18:20:37.727Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_4068653e-f916-476d-aeca-5e2cc257a75c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-05-12T12:20:37.727Z" SessionIndex="_4068653e-f916-476d-aeca-5e2cc257a75c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F92C565E4B49BB04E0401F0A05997A12</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>801173c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-411e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c6bff15-80e2-40c7-bee0-f0f348f0ccf1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_second_User" searchProperties="true" id="c8558026-dc0c-4756-a37b-d284c730b211"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2b0cf291-6f26-443b-bf8d-ec49be8d5a1c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="88783021-3b5d-40c4-ad35-93c80cd115db"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="eed4c84e-3345-4978-be49-44244f80ac2b"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#CoordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#Project#urntokenType_userpassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="ffb619c1-e322-4405-bdb2-e5dbf272cb92">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="7b80aba6-6840-45f4-bf2e-38bec847d281">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set pem 1" id="24476509-6093-4327-a8c3-c0c98ea28892"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS" id="5b67bf97-13c0-4d76-b409-0f52ebdbca6b"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="dcf17e5d-94b0-47bd-bcb5-ddd7f9ae3e8e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="321d5d49-a7b5-4b0a-bbcf-5cf2014f5b2e"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert2", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML2","SAML2 Assertion="+ base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="046db7bd-a4e4-4597-b1dc-73f4588bca40"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
 
def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");
 
if (expectErrType == "" || expectErrType == "SUCCESS") {
if (XMLbody.length() > 0) {
            def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

		   // Verify response sizes...
		   assert myXML.size() == 1;
		
		   /*
		   String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
		   String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
		   */
		   String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
		   String userId    = myXML."saml2:Subject"."saml2:NameID";
		   
		   this.log.info "accountId [$accountId]";
		   this.log.info "userId [$userId]";
		
		  
		   if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
		   {
		   	 tP.setPropertyValue("NODEACCOUNTID2",URLDecoder.decode(accountId,"UTF-8"));
		   	 tP.setPropertyValue("NODEUSERID2",URLDecoder.decode(userId,"UTF-8"));
		   }
		   else{
		   	 tP.setPropertyValue("NODEACCOUNTID2",URLEncoder.encode(accountId, "UTF-8"));
		   	 tP.setPropertyValue("NODEUSERID2",URLEncoder.encode(userId, "UTF-8"));
		   }
		   		
		   this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
		   this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
		} else {
            return false;
	}
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A21990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdZc6pME773V1ieS8uwKmIlqRoWFRU3cL15C2FAlE2GTX/9O5joMTnJ+fJ+Vzo9Pd1PL/Q884wM36M7ACEYJ24YVBXppfaPvbNoqmWQDY5vwQZLM7uG0WTYhsVDim9Sts1SsFZVEEqhEqDECJKXGk1STINsN0hKp9gOS3aY1hPTYre16hLGCJvGKk9krVr4XoA6V7cvtTQOOqGBXNQJDB+iTmJ2NKCOOlizY9ww1V6f31BeHcav+ySJOgRhPlnQhJ5nPpmhTzwTH3SeLdTRXCcwkjSG7z4t9FJ7P5vn+VPOPIWxQ9AkSRIkT2AdC7nOr9pr5XYYWkpgh29r0QjCwDUNz70YJSgVJvvQqgLPCWM32fvfmKYIiixNN2BhNkyKDX7ViN8Oruh+aOkDyBgZDbQ3qJuxObRhDAMTVhdz5aX262cVfDurx0aA7DD20af1f4MEgwx6YQStBrpFdkP3c4tfpOv1GZodJTC9FLkZHJdtEhkmRNVpDG23GLkIN5+FqtfyVwt11zBo/peSPBOPODFs4ovMSK4DUfL/1OuxVm9WloaXwtdocjzzzYRrbceFbWWrYfss6zbtxYv2yxXCo/IbqHup39efG/XeV++HEBNLTfs81QOum49FdaAlRtpLRXqGomIw5+onz2k7SdtibSvMaZTMJ6cmUbjMSMwUJ4MnD5ztYNC1WyOiAhxN8c9xMiTS5ba7J2aE6UZbbj1lu/vNpaWQmlNvX1aCbtneeb5R18Npn6NncAMVkms3pyLTljRWYCfioVfRvFiO1MkwdOnIU/yiTuQvv2N6jKGMawjP1yDL/+smyUtGYtwXYjkpbPx5JvBVVRSxLokigKIDckUAjiKMLmAsOMfT/uj2+JwUwGzRBRI4q3OQS85GWs5mQzm3lktvu1S6XUGds3kfbKQK3pDkYilt1wPSWG2jDd0lt5ogWOt5uGMGkdU/5v29OVZ1NR/rylk9yMVYl8nVVeYUeH1RDyo10RdMZXUQeHUu51J+9SjJ+X68Xc2jzYLPzYs8UwHbA9RCFvdqX/eXlMnM9+ZBHqngeJULe1VcLtVC1sG0IjjjJY5NF7vbyPStaOd7+wfjfWxct3rL867npduLfFBFuSdqp56m7BhpJg/AfLPYrZZHY9XNKmZ/DHY3j27TNdZh7mzbuTTbDIbhVtln5hjMZEGYAZwuEqhKbwDCngBUFrjFRTwIrVC0ujkxoFGlznu91vrsntbI6JGeQbXb1Ga0ak1PLUkO6tthujvs1f26O6kPNStb8Al/2aCsnrUMlzKLyJ6t5X4yLOz+TKvsplKxNvt1yxkQ3oXvxio3APHlvPdUZ56sWhN03rm2vRLWE9bjbE9l5pHt2dEZ1fVwdozJlgAZmtics2GC21cVAOgdFgdhpgrtMqmWks82qmCArpyk4HKgkyG9PA36mWduGBAWw9XkcHwvjCXlskDkMxm3lVxpS8Aqi9DXFnL3ABaC48SCI3eFmSmB2UYZ5hucr0UfK3/OY/eaR0cWgMxsQYvvV5gFySeTRGNZcA6ERdDl9+qpWFktn+ROUB5p44jNVTS2g+0qPKq+Gy/iVFsMh+NRsdPT3vGAZ5VNasOM2Vbk7BgBdzzU90cplIxptNkkUT0wYzNRIl9Vistkiw5td+eTg3qTEqakZHL0wt/li54hb4exo1HD/jyYMhxfQal97vv1Qztf1XWtFXGWGNjS+Uxs4yUZgrDLz5snq6Dp436Rj1q5PQDHnUGPC48Xzrw83OpmPp8NV5pfb1aa2WjkkxedYMfRJNd6OSvPZnXGEvS+jqLY3aRtp4gngUVvjKSVbclly428I0+nR52NmKXj42JNMyvi1Gllxq7Nre9wkTkg5kQGZM4eKb3z7mJcIn9ivg3Qz9PhLnybH8TjZPkwem6kQ8PdCs3ktiwvIEWqdvGtYCR/JzClxLUa9lW1E5UsCCUwSGqv5amSvHRSTHFcq4OvjLe1TMusRHIsybR5ILRbMsmSVJcEJMfzFODAjeW8ofgEUQwD2y19lTzu7Zb6O0DT7yAYWDBuZGFq7iGq/cVima+qEszx9RsGCOoh5omAF5uy0BWaMi8CwMhMU2gJHCl38VLgmq1adRwmk2ASAzuB8UeOyH3giHOILxIXlkSyvE0Rvk5RglNyMrI08ainzHgKYIqpZlyyvQ7NtpsEcv3IgyVgwg+t1INP0T66JohAb790wzDRVTqX9X8UTbze9N+G+Hnvlg2sY7mlAirjESCuKPyC8NK3YL4NmiYfg76ZB6nllhc6Tm0Su+Ybko9bvzumbJV7u5RRido/1A33Xf3Hx/88SfwFFPE5H3dHVuY+uL0xd0xGMV15vVX0ZDydntIsS6815EoqFmPzBEWQHKFBM8V86qyHRxgQdxPEj6jsHfUnz3f5R3xpsg8wDUqgjzuuel3+4B2jQVS+YxT8xRQ/fSR9cInzlsAi+Uomevi5UyL+64vI7JilHhZP8U8extbvcn1h68EPjrOcf27glKuSuJ6/aQozxGZdPAPD+NH4Vwa+cv5ReE/yHUuCu2mXJvD7nWo53F5qhmmGaZAoUu0qeBy4V5zJOYKd30p/mLlSx/e3QIG+fQus1ZGGR59v1O667v9WbrjXdjHxKxjrX7G81Ar8rMXOA+dhwL8D/HrGU/LfZvzHSF7/EP8pecjp5+/h9V8=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_61939824-6787-4921-912d-e65bcd6ccf8e</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_61939824-6787-4921-912d-e65bcd6ccf8e</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A21990CC5</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value/></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A21990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20111110_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>User_create_20140512_08139</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A21990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2978</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_61939824-6787-4921-912d-e65bcd6ccf8e</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_61939824-6787-4921-912d-e65bcd6ccf8e" IssueInstant="2014-05-12T12:13:10.053Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_61939824-6787-4921-912d-e65bcd6ccf8e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>DQpM8qGnba/bHag68I67rTfEN9s=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
fO1U+NnVyySjq7GbSgDdZTj/nd9pB/jnN/5+LwUAURqcPSTx6sc6R/AI5tITP+LAyItr3I8Cd4CY
uoXzxNK53jJ1/KIw+WedfJMCb+JXlXJyGmxRgXMywvXbL4ztbWKQD98ZwQgmRlDAKcbrXWLwc2ex
qWb3vWsg1cK1wFMKGEs=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F92C5580FAE35D97E0401F0A0799216F</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_4d20l148qpiul3h4xdsk9762" NotOnOrAfter="2014-05-12T15:13:10.053Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-05-12T12:13:00.053Z" NotOnOrAfter="2014-05-12T18:13:10.053Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_61939824-6787-4921-912d-e65bcd6ccf8e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-05-12T12:13:10.053Z" SessionIndex="_61939824-6787-4921-912d-e65bcd6ccf8e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F92C5587FC37089AE0401F0A05997A18</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - UserDelete_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>assert2</con:name><con:value>nVZtc6o6EP7eX8HQjx0M4Bsw1RmO1l6q9kVt6+2XTgxR0wNBSVDsrz8JFqrW9nrujDNOls3usy95di8ZDAPTcRnDMScRVbx2Q32tGXbZtsyKVqtbda1im4ZmG6av4Vp1gvwaQlMLq4rHWII9yjikvKGaulHR9KpmmCPDdIyyY+glvVp+UZUnHDNhWqiUdFVJw4AyJ3PbUJOYOhFkhDkUhpg5HDlDt99zhKYDc0xq83KLMnMYN+ecLxwAUMnHCAcBKqEoBJdgT+fSZ86QzCjkSYw/fPqsoX7cXa/XpXW5FMUzYOq6DnQbCB2fkdm52jzLL2Pfo9Noe25BGlGCYEDeoQTVx3we+YobzKKY8Hn4jWkDGLo0reEUacio0HMVfDrI0J1oaQ9kzKDG5tDIjQ3wFMeYIqw8DryGen5aBbd3RzGkbBrFITs4/x0kTFc4iBbY11geWY7udItH0tW8xMjxKAoSRlb4VrbJAiLMlPsYT0naI0w0n8+UrPxKysSP5F2G0d+U5RLsYhXQwZHstMkMM/5/arZbr62VJxgkuNl+WPSt5TWdQDD5B85qllerx6Pp1a3NGhmEXeUtqKLcH+fDZi166+PS9M54vLilT5vN8G1Zv54MZ23/ZfQGqG8vfoE3eguqF731o/s4WKL74SitMVQbANercm90f9FzNx6Py57V8iutf8+SaPye3nar5bcbA3S99cUz9qc3/dbk4mYcjG8212E6mI37m/VqPOlV3vnkufvQtq2X9cMsHARtt4sm8fi5t0YmTs+Wz5Py6pnNDNQ11p1+9/qKNT5j2o1hX5hTwjCZvGHE86NsD6+tdES9IP+ZXqSE+No0U3UWkqMYx5SrTXlLUouTCAIiviOKuT13bLNVrVp6x70qV9t2/Uqv6EZHd/W6LR5YrZNz0BbFAcRWRKdE+pIsu+2fnwGi0GGY+jjWVlGC5pipP1hsQw4Vjw7E44gow6NIsHjFN/XAqFjLBUmC8ryS+uy3Xa+ZqnIb8Tt6F7tTjuN95q7uMfcAI7IgWNK77G8mGpxxkYolXCU8MEorWKI4EQMglhzsmBWrChgJFwGWQEEY+UmAS4v5IksMYNt/U4OIZdLB1Sh7d9+Gdfgtz4DQ8YlUYDKWX1hUER8ZQXoeyPcBW7sB5+bdxCfyeYl08pigLZL9T59dItujaBER0Wtr+GrkuAv1k69/vQl+AAUO81E48ldkx20+S8V4EOTRzKu5hKVlKVmtkqx+dUmMsTAPBD8aYIhRIthtM4p+YwoKE+Ck4VKgPvBcyPfxJXxOhxxyHIpuU7LjCZvFEDO5WXjilaSnri17LkXeOE75MVkrEAuIRPzjjoIcJPWE+F78raPY/yzXEVs7fkScYp3ghM7kSY6RzTdNgSJhlgjei+Jd48cMHHO+LyySXGDhopsmCcfff1EkoTVUiFCUUO611UywS7IZTr5ZYOdT6YuZjMg/JnPKvp3M435vKOguhGqhS/5bWSNZuyCxlwr9DEtDTcWiKZzT2Q6pfwA8wuv1Tqtc1y3bLXi9att117CKBO5F0vwi/irZyenhe2j+AQ==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>801173c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-411e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eed4c84e-3345-4978-be49-44244f80ac2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="7c7ae868-f90e-4c3a-8f29-ea1f383cbf0f"><con:settings/><con:testStep type="groovy" name="UserName_Gen" id="828662e4-e203-423a-b57c-cf9f838da017"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= "User_create_" + new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue ("UserName", today);

tP.setPropertyValue ("UserName_BAU1", today);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set properties for user" id="f821d649-bc32-40c2-9f7b-7c4498b9b99e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
testCase.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="a8e24fc2-b533-4d28-94f8-782d66e96b1e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="cd833f42-8a26-4ee0-b1c0-99e216a7de2f"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <DisplayImage>
        <DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr11KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix11IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData>
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    </DisplayImage>
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <LegalGuardian>${#TestCase#LegalGuardian}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="c34013d7-7784-4dd0-8948-1c434c68760d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b50ae353-c9ed-47af-bbc5-d3431a194a84"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                      
              assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
              
              int lastColon = urlStr.lastIndexOf(':');
              int lastSlash = urlStr.lastIndexOf('/');
              userid     = urlStr.substring(lastColon + 1);
                                             
              tP.setPropertyValue("NODEUSERID","urn:dece:userid:org:dece:"+userid);
                       
      } else {
              assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
              int lastColon = urlStr.lastIndexOf('%3A');
              int lastSlash = urlStr.lastIndexOf('/');
              userid     = urlStr.substring(lastColon + 3);
                              
              tP.setPropertyValue("NODEUSERID","urn%3Adece%3Auserid%3Aorg%3Adece%3A"+userid);
      }
                                
} else {
                                
         assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:EA6EC0E2EBAFC1A2E0401F0A05994A80/User/urn:dece:userid:org:dece:EA6EC0E328218645E0401F0A05994A82</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGetSelf_for_Child_and_Again_AccountGet_for_CLG - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>UserName</con:name><con:value>User_create_20131218_100814</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A726754AE0401F0A05990381</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-23</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A726754AE0401F0A05990381</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>828662e4-e203-423a-b57c-cf9f838da017</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="8691dd40-0ee8-4c76-89fe-96f74d3367f1"><con:settings/><con:testStep type="groovy" name="Set pem" id="e50cba40-d346-461a-9a81-ec041eb95abd"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="ce32e5ca-0d86-4666-8aff-0bf3965a92e0"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded)

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded)

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded);

def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
if( testStep1.disabled )
  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="a2aa3ae3-87fa-46f5-b2e3-57bb9d2ee9db"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_FULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-2151-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="74ad4008-426c-4c5f-9215-a13e6247c5cf"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_FULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-2151-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA" id="5cbf2153-f18b-4dcd-a9e7-f6515d58b794"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_FULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-2151-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="15b84e78-9a96-4dc6-9c92-e9254e8c9b48"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLBAU1}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="db6c877c-8d18-4c8e-b0ef-c70e01acfa23"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_FULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGetSelf_for_Child_and_Again_AccountGet_for_CLG - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EA6EC0E328218645E0401F0A05994A82</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EA6EC0E2EBAFC1A2E0401F0A05994A80</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:EA6EC0DF2166889AE0401F0A21994817</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API" searchProperties="true" id="e2c4b352-b1d7-45e9-92f5-80017e8c6856"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="39fd81c1-fcb2-401d-91b3-2a3d23d29d39"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="f5011b4b-580a-4e49-aec1-fec8f76ba93f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="5c6ae69f-3e09-4d51-a2a3-4c85c35795d5"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="28da194c-7ee2-4ae6-873b-b6ef6163e13d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String cacheControl = null;
String etag = null;
String expires = null;
String lastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Cache-Control": 
			cacheControl = value[0]; 
			break;
		case "ETag": 
			etag = value[0]; 
			break;
		case "Expires": 
			expires = value[0]; 
			break;
		case "Last-Modified": 
			lastModified = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("httpCacheControl", cacheControl);
tC.setPropertyValue("httpEtag", etag);
tC.setPropertyValue("httpExpires", expires);
tC.setPropertyValue("httpLastModified", lastModified);

tP.setPropertyValue("Account_Get_LastModified", lastModified);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("Account_Get_ETagPrior", tP.getPropertyValue('Account_Get_ETag'));
	tP.setPropertyValue("Account_Get_ETag", etag);

	log.info "Account_Get_ETag = "+tP.getPropertyValue('Account_Get_ETag')+ ", Account_Get_ETagPrior = "+tP.getPropertyValue('Account_Get_ETagPrior');

	assert tP.getPropertyValue('Account_Get_ETag') != tP.getPropertyValue('Account_Get_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	
	tP.setPropertyValue("Account_Get_ETagPrior", tP.getPropertyValue('Account_Get_ETag'));
	tP.setPropertyValue("Account_Get_ETag", etag);

	log.info "Account_Get_ETag = "+tP.getPropertyValue('Account_Get_ETag')+ ", Account_Get_ETagPrior = "+tP.getPropertyValue('Account_Get_ETagPrior');

	assert tP.getPropertyValue('Account_Get_ETag') == tP.getPropertyValue('Account_Get_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="98b1821f-7c3e-4c0d-9524-1f982af0133e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def streamcount = context.expand( '${#Project#StreamCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;
     
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		log.info "RightsLockerID : " +  myXML.RightsLockerID;		
		tC.setPropertyValue("RightsLockerID",myXML.RightsLockerID.toString());
		assert myXML.ActiveStreamCount == streamcount;
		def totalStream = 12;
		def AvailableStreams = totalStream.toInteger() - streamcount.toInteger();
		assert myXML.AvailableStreams == AvailableStreams;
		assert myXML.UserList.size() > 0;
		assert myXML.UserList.UserReference.size().toString() == usercount;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:F92C569A525EEFB2E0401F0A0799216B" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>Account_create_20140512_081315</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:F92C569A5266EFB2E0401F0A0799216B</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:F92C5583EE12F282E0401F0A05997A0E</UserReference>
   </UserList>
   <ResourceStatus>
      <Current ModificationDate="2014-05-12T12:13:17.552Z" ModifiedBy="urn:dece:org:org:dece:RET" CreationDate="2014-05-12T12:13:16.054Z" CreatedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1133</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserCount</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountUpdate_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E23D997E5D8EF2E2E0401F0A21994DAE"</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>httpCacheControl</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">max-age=86400</con:value></con:property><con:property><con:name>httpEtag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"F92C565CCC4B6EAEE0401F0A0799215B:5496501C"</con:value></con:property><con:property><con:name>httpExpires</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Tue, 13 May 2014 12:13:18 GMT</con:value></con:property><con:property><con:name>httpLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Mon, 12 May 2014 12:13:18 GMT</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE38366F552D01218E0401F0A059951A8</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:F92C569A5266EFB2E0401F0A0799216B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5c6ae69f-3e09-4d51-a2a3-4c85c35795d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Update_API" searchProperties="true" id="1eedbeec-1eb0-4440-9b3d-d76af50bfb0d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="90256e89-5be5-43f1-a01a-0c11e0e04a95"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="d9c43d7c-fc17-4daa-8d0d-f5710a976d6a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName_Gen" id="12e16ac3-d4f1-4b81-b219-bfad2b2e9cde"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>0174dbe8-e670-4578-8b66-e1ed5f587123</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:returnProperties><con:entry>tName</con:entry><con:entry>sName</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="AccountUpdate" id="c0481e2d-e8d8-4999-9afc-b864b3924d0f"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountUpdate" id="758d0cd6-9d3d-42d8-a6b1-a3d503080e09" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#Account_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <DisplayName>${#Project#DisplayName_New}</DisplayName> 
  <Country>${#TestCase#Country}</Country>
  ${#TestCase#ResourceStatus}
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d98feb7a-8bae-43b1-89cc-3357e400ef6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="395cfa69-56af-4676-bb6b-26321b014320"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The country code is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "The member's user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACC_ID_INVALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountIDNotValid";
		errorReason = "The account ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIDNotValid";
	break;

	case "CANNOT_UPDATE_COUNTRY":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CountryCannotBeChangedOnceSet";
		errorReason = "The country cannot be changed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;


     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;	

     case "STS_UPDT_NOT_ALLWD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;


	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
	/*else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
	
	}*/
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>90174</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountUpdate - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0481e2d-e8d8-4999-9afc-b864b3924d0f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>12e16ac3-d4f1-4b81-b219-bfad2b2e9cde</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API" searchProperties="true" id="f876563f-7d3d-48e1-9f5e-44c595e0eefe"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="861982a7-a7ad-4ce7-b9b7-1bd298e64fc7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="6c10c5a5-68e8-4736-a7f5-7944477f61a0"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="f2f9735c-4db0-436a-9efa-4ef2b80a65d7"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#Account_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d938d154-9353-4b78-92e6-1c1cd65c2b5c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="a2de8be5-d81d-4a61-a6e4-29637a63c9a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
//
////Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90259</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountDelete- Verify with old Etag - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f2f9735c-4db0-436a-9efa-4ef2b80a65d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Get_API" searchProperties="true" id="9a034d2a-b1ae-4a52-b411-61fb5ebe9859"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f74a9c61-16d4-448a-a898-52c6dcc3fd56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="5b6f76f8-f098-4cda-9b74-ed08303492c2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Get");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get" id="9e29cce0-d04a-4367-b690-165597caf13c"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="0d647a5c-fada-4b21-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#TestCase#NodeUserId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="2db466e7-3ddf-40a9-974f-9f6c1b014429"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;
String lastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
		case "Last-Modified": 
			lastModified = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("httpLastModified", lastModified);

tP.setPropertyValue("User_Get_LastModified", lastModified);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("User_Get_ETagPrior", tP.getPropertyValue('User_Get_ETag'));
	tP.setPropertyValue("User_Get_ETag", etag);

	log.info "User_Get_ETag = "+tP.getPropertyValue('User_Get_ETag')+ ", User_Get_EtagPrior = "+tP.getPropertyValue('User_Get_ETagPrior');

	assert tP.getPropertyValue('User_Get_ETag') != tP.getPropertyValue('User_Get_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	

	tP.setPropertyValue("User_Get_ETagPrior", tP.getPropertyValue('User_Get_ETag'));
	tP.setPropertyValue("User_Get_ETag", etag);

	log.info "User_Get_ETag = "+tP.getPropertyValue('User_Get_ETag')+ ", User_Get_EtagPrior = "+tP.getPropertyValue('User_Get_ETagPrior');

	assert tP.getPropertyValue('User_Get_ETag') == tP.getPropertyValue('User_Get_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="8f86f3d9-231f-41b5-b6ab-b4991749c73a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;

 	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Verify the response headers and body11" disabled="true" id="c3e86549-5d30-46e0-8b53-7bb383824d6d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;

 	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

// NOt Validating fo Cache Response - specific  to this project
/*
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<User UserID="urn:dece:userid:org:dece:F92C565AF8306E0EE0401F0A05997A10" UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>Full_User_create_20140512_082034</GivenName>
      <SurName>fau</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>test_+126@uvvutesting.biz</Value>
      </AlternateEmail>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">1994-08-25</DateOfBirth>
   <Credentials>
      <Username>full_user_create_20140512_082034</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current ModificationDate="2014-05-12T12:20:35.742Z" ModifiedBy="urn:dece:org:org:dece:RET" CreationDate="2014-05-12T12:20:34.436Z" CreatedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
   </ResourceStatus>
</User>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1963</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn:dece:userid:org:dece:F92C565AF8306E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>SecondUser</con:name><con:value>Yes</con:value></con:property><con:property><con:name>Etag_Update_Delete</con:name><con:value>Yes</con:value></con:property><con:property><con:name>httpLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Mon, 12 May 2014 12:20:36 GMT</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e29cce0-d04a-4367-b690-165597caf13c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c112d7e9-edec-43e6-a2ed-979383edf9f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_GetList_API" searchProperties="true" id="f825a6d5-fcaf-4a9f-9dc8-9fce64b955a8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6bb3dacb-00c5-4c09-b55a-9b27a2f62fc5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("AccountID",tP.getPropertyValue("Node_Account"));

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="c6a61ba8-2fa9-43d9-a175-b31904052857"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserGetList");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGetList" id="d42b7cbc-b7d4-4df9-8eef-d9026d01910c"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGetList" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2c6efed1-a2fd-4567-bc03-5922f8dd548b" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="5051c2bf-a09b-473f-9c9b-f32c21cdcfde"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGetList');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("User_GetList_ETagPrior", tP.getPropertyValue('User_GetList_ETag'));
	tP.setPropertyValue("User_GetList_ETag", etag);

	log.info "User_GetList_ETag = "+tP.getPropertyValue('User_GetList_ETag')+ ", User_GetList_EtagPrior = "+tP.getPropertyValue('User_GetList_ETagPrior');

	assert tP.getPropertyValue('User_GetList_ETag') != tP.getPropertyValue('User_GetList_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	

	tP.setPropertyValue("User_GetList_ETagPrior", tP.getPropertyValue('User_GetList_ETag'));
	tP.setPropertyValue("User_GetList_ETag", etag);

	log.info "User_GetList_ETag = "+tP.getPropertyValue('User_GetList_ETag')+ ", User_GetList_EtagPrior = "+tP.getPropertyValue('User_GetList_ETagPrior');

	assert tP.getPropertyValue('User_GetList_ETag') == tP.getPropertyValue('User_GetList_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="3e521e3f-840f-4591-af16-d0014fe41a83"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Query_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/List";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
	errorID     = "urn:dece:errorid:org:dece:UserNotInAccount";
	errorReason = "The member does not belong to the account.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotInAccount";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;


     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
      
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
	        //this.log.info myXML.@xmlns.text();
		  assert myXML.size() == 1;
		  assert myXML.UserReference.size().toString() == usercount;
		
		  for(def i = 0;i&lt;myXML.UserReference.size();i++)
		   {
		     assert myXML.UserReference[i].text().matches("urn:dece:userid:org:dece:[0-9,A-F]*");
		     this.log.info "Valid User Reference :  " + myXML.UserReference[i].text();
		   }
	   }
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1"/>
      <title>Error 404 Not Found</title>
   </head>
   <body>
      <h2>HTTP ERROR: 404</h2>
      <p>
         Problem accessing /rest/1/21/Account/urn:dece:accountid:org:dece:F8F12CDFCEBC20F8E0401F0A07991D39/User/List. Reason:
         <pre>Not Found</pre>
      </p>
      <hr/>
      <i>
         <small>Powered by Jetty://</small>
      </i>
   </body>
</html>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/html;charset=ISO-8859-1</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1355</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>UserCount</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90940</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGetList - ManageUserConsent- Verify with old Etag - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGetList</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E268F4CBAC2210C1E0401F0A05995EE2"</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b651d442-610d-4859-809b-2cbedd24a3c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Update_API" searchProperties="true" id="90e774cf-9b54-422d-b527-c68e8b39cfb5"><con:settings/><con:testStep type="groovy" name="UserName_Gen" id="c112d7e9-edec-43e6-a2ed-979383edf9f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= "Full_User_create_" + new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue ("UserName", today);

tC.setPropertyValue ("Password", "Password1");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="ce1f1f5a-dbcf-4401-b709-9904592182cf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="5ab69c6e-a37e-49ea-b783-ccf3393a0d8c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="c1e5408f-2815-47d2-a35a-ce700b37f9a2"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate_PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="7911d39c-d7fa-4537-abd8-4fa853f221cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#User_Get_ETag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" UserID="urn:dece:userid:org:dece:${#Project#NODEUSERIDFULL}" xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>${#TestCase#UserName}</GivenName>
      <SurName>${#TestCase#UserName}</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail>
         <Value>${#Project#PrimaryEmail}</Value>
         <ConfirmationEndpoint>Coordinator-Confirmed</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>${#Project#AlternateEmail}</Value>
      </AlternateEmail>
      <TelephoneNumber>
         <Value>+1.7033453434</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7033453434</Value>
      </MobileTelephoneNumber>      
   </ContactInfo>
   <Languages>
      <Language primary="true">en-gb</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">${#Project#ADULT_DOB_XML}</DateOfBirth>
   <Credentials>
      <Username>${#TestCase#UserName}</Username>
       <Password>${#TestCase#Password}</Password> 
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="18091881-4310-4c1b-871b-26bc252b7a8d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body11" id="7482c25c-4e14-4425-bb14-728754084c2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull     = true;
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_UserName_Password" id="af7c8c1c-ac17-46e4-9381-f5ba183b4fba"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",testCase.getPropertyValue("UserName"));


</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet 111 - UserUpdate 107- UserGet 111-Verify with old Etag - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_08126</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>Raju</con:value></con:property><con:property><con:name>SurName</con:name><con:value>Alluri</con:value></con:property><con:property><con:name>Etag</con:name><con:value>"E38253748CACB2A7E0401F0A21990BE2"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9502db6b-c711-4d04-9372-64700bfdfead</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete_API" searchProperties="true" id="687ecfe5-4f68-4863-87a4-27f1e7bd0c3b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1d1d2574-19fc-4f4e-b13f-cfb30b4cdd31"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="ef2a4919-b36f-4805-ab21-2259e910515f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Delete" id="b651d442-610d-4859-809b-2cbedd24a3c3"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="User_Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Delete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#User_Get_ETag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#TestCase#NODEUSERID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="aac3b393-f45d-4613-a5c7-f08670eba934"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Delete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="4a8a1c28-fb0d-4fea-93c7-e2d6b2360300"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		//errorReason = "The supplied UserID is invalid.";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	//errorReason = "The supplied UserID was not found.";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		//errorReason = "The user has already been removed.";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

	case "LAST_FULL_USER":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The last remaining full-access user in an account cannot be removed.";
			errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
	break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		//errorReason = "Requestor privilege is not sufficient to delete full access users in the account";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		//errorReason = "User cannot be deleted as he is CLG to other users in the account";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";
		//errorReason = "The requesting member cannot delete the member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

		tP.setPropertyValue("fileName",fileName);
		def testCaseName = testRunner.testCase.name;

		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted">
      <Reason Language="en">The last remaining full-access user in an account cannot be removed.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:F8F4D466F255F2E1E0401F0A05991C52/User/urn:dece:userid:org:dece:F92C5657DE195E2CE0401F0A05997A08</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">841</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>LAST_FULL_USER</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91155</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - LastUserDelete - Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:F92C5657DE195E2CE0401F0A05997A08</con:value></con:property><con:property><con:name>Etag</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF5JCooLEculh2y4t9ML2ZeU6E/A2sWnshNBff+zQUKC0hz0SEvJkPPPNxd/MKUdJ7AQdziEVhFFt2Gvpv+thw8MnDWSgph0abhM/Gn746BqAwffdsNE8sV1dG3KewZBygaho6Y5lu4blGbZzY7mB6wSOW6vXnQddu4OUS9NSpWbpWpHElAel25aepTRgiBMeUJQADwQOJp3Li0BqBqjCpLdP1yhLh2l7LsQiME1cCyWeOMY1zBLz1NzROQ15MCEzikSWwqvPkLf017vL5bK2rNdYOjMdy7JMyzelTsjJ7Kve/lJdhnBII7Y+dxFllGAUkxekQF2CmLNQ68QzlhIxTz4wbZu2pUwbUGAD2y79qptvDkp0R1raAZlyZPA5sitjY4ggBYpBux0PW/rX4yq4vnuTIsojliZ87/x3kIDmELMFhAavIqvQHW/xQLrap4CDIcVxxkkOP1WbLBAGrl2lEJHignDZfCHXyvJrBZc/UnUZ4L8py6m5jVVCNw9kp0dmwMX/qdl2vdZW7lCcQftbnDSuo1Vk3o+cHE/P7y4zJ8r7JnRnrRLCtvIa1Kbcr+f9Zt301uul+3v/5Puk94jZwyj78a1fTP8ZTVezIv12Zg/YS/idgfkUnl3SkN3cj6Nf8394d8SiH354FzU6V7dZf9LLr7vP3eja+vJwlkfz6ML3L34+NZPz5A9x7mB8P6NRjBeL819LPLXq12cw4E4nn83THp7f3iarp9FD/cKCiWg+N59/ecyPfXC+eH27X5y7Vy/T88vedPVoe83WW0zbMewKK0qYZI9/AIvqqNpj2NMGsl5IfE4vSkJCIypVg4XiKC6ACr2tbilqCTJJQCQMZDHX54HvdL0Tr9Hr277Xd7p9y7XsgdWxPN9vdKxmxUFrFHsQu4xGRPlSLLvun88B4iTgQENIjZxleA5c/8RiDwmkDelYPg5GOdwwyeK29fKyLBrJsv6E7EIsZcvYlu+sQl37ycSIjtJOJCDdpe7GDnWPAZMFAcXvqsG57HAuZC6eUZ6J2K7lqEYhkxMgVSQs7zU9k5NkEYNCaiYszGKoLeaLMjMmX/87BsK8lI77N+XD+zCu/W9VCqROSJQCV7F8B1lGODCD7CqQDwO2re2AK/OdLCTqfcl8ipTgNZLdT29tovpj0yMyot/dyW+7wr1RP/r6+5vmJ6DM/XxsHIU52XJbDVM5HyR7tKtqPqPacy3L86ysX0MxYyrNm5IgbXMCOJP0trphT0DNjQnzqOmyQb3neSPfxZeJOZ0IJCCR3aaVxyNWiwlwtVoM5TMpjt1bdlzKvAkoxCFZN5YbiEL86ZKCA6z0pPhK/i1ZGr6V64CtLT8yTrlPCEJn6qTmyOqDpsBMmiWS+Fi6bfyQgUPOd4WbJG+wCNlNj5mAj79oitFaOsKYZVQMe3op2GbZEqdYLSB4U3pnpmTy19Fc8A9H8/TyYiL5LkH6Rpf8t7JBynbBoKsNoMTS0gu5aUrndLbF6q8Ad4i9OXB77snJwPG8gSNH0hax213P2SRwJ5L2O/F7yVZO999D+18=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0bf82b90-98b1-4f22-b5f2-fee31bde8abe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>437753d1-2ec7-450f-9e67-a3f918bb35b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1e5408f-2815-47d2-a35a-ce700b37f9a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="96dfb56d-608d-49d0-a66f-b81fac3092db"><con:settings/><con:testStep type="groovy" name="Setpem" id="78dc0482-bf52-4bf1-a4e5-897d4bbddaaf"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		certPath = testProject.getPropertyValue("certsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		certPath = testProject.getPropertyValue("certsPath_Linux");
	}

String nodeId = testCase.getPropertyValue("Node_Id");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
//String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>User_Get_API_If-None-Match</con:value></con:property><con:property><con:name>sName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserValidationTokenCreate_Account_User" searchProperties="true" id="9a3790d1-24de-47a3-97b9-1c2f2e7599d3"><con:settings/><con:testStep type="groovy" name="SetPem" id="af0bc32b-2d41-49bd-870c-748e7e425b56"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

//String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+nodeId;
//testCase.setPropertyValue("keyStorePath","");


def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

//Thread.sleep(5000);

//keyStorePath = testCase.getPropertyValue("keyStorePath");
keyStorePath=myTC.getPropertyValue("keyStorePath");

log.info "keyStorePath test: "+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserValidationTokenCreate");

this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep,keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate" id="5e3ff2de-196f-4311-b5ae-aea383d4a276"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/VerificationToken/{TokenType}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="TokenType" value="${#TestCase#TokenType}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERIDFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Details" id="abc656fa-e3cb-4c89-97e8-b378cd9f431a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('UserValidationTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();
log.info "Extracting Response Details"

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

log.info "End of Extracting Response Details"
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Details" id="4979d5f9-95aa-481e-b831-13b2ee93273a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#HostName}' );

def errorRespType = context.expand( '${#TestCase#errorRespType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;


String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype =  "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
               case "SUCCESS":        
                			  log.info "Success message --->"	                        
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                                XMLbodynull        = true;
                                httpLocationHeader = true;
                                //this.log.info "Hello";
                break;           
                
                case "API_NOT_AUTH":
                		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                		//errorReason = "API call not authorized";
					errorReason = "The API call is not authorized.";
                		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;

                case "ACCOUNT_FORBIDDEN":
                          expectHTTPstatus = "HTTP/1.1 403 Forbidden";                               
                          errorID = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                          //errorReason = "Request Account ID not match";
					 errorReason = "The account ID does not match.";
                          errorLink   = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;

                case "SECURITY_FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";                               
                                errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1122";
                                errorReason = "forbidden";							
                                errorLink   = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
                break;

                case "NOT_FOUND":
                                expectHTTPstatus = "HTTP/1.1 404 Not Found";                               
                                 XMLbodynull        = true;
                                 httpLocationHeader = true;
                                 expectHTTPcontenttype = "text/xml";                               
                break;   
			
			case "INVALID_TOKENTYPE":						
                                expectHTTPstatus = "HTTP/1.1 400 Bad Request";                               
                                errorID = "urn:dece:errorid:org:dece:TokenTypeNotValid";
                                //errorReason = "Token type in the request is not valid";
						  errorReason = "The token type is not valid";
                                errorLink   = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
                break;   

			case "INVALID_METHOD":
						expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
						errorID = "urn:dece:error:MalformedRequest";
						//errorReason = "405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.";	
						errorReason = "The request cannot be fulfilled because the method is unknown or not supported by the server.";							
			break;
			
			case "INVALID_USERID":						
                                expectHTTPstatus = "HTTP/1.1 400 Bad Request";                               
                                errorID = "urn:dece:errorid:org:dece:UserIdInvalid";
                                //errorReason = "The supplied UserID is invalid.";
						   errorReason = "The user ID is not valid.";
                                errorLink   = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;   
                case "FORBIDDEN_COORD":
			               expectHTTPstatus = "HTTP/1.1 403 Forbidden";
						errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
						//errorReason = "Coordinator cannot service the request.";
						errorReason = "The request cannot be serviced.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
			break;
			case "USER_STATUS_NOT_VALID":
						expectHTTPstatus = "HTTP/1.1 400 Bad Request";
						errorID = "urn:dece:errorid:org:dece:UserStatusNotValid";
						//errorReason = "The user status is invalid.";
						errorReason = "The member\'s status is not valid.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";					
			break;
			case "REQUESTOR_NOT_ACTIVE":
						expectHTTPstatus = "HTTP/1.1 403 Forbidden";
						errorID = "urn:dece:errorid:org:dece:RequestorNotActive";
						//errorReason = "The requestor is not active.";	
						errorReason = "The requesting member is not active.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";	
			break;
			case "FORBIDDEN_USER_LINK_CONSENT":
						expectHTTPstatus = "HTTP/1.1 403 Forbidden";
						errorID = "urn:dece:errorid:org:dece:Policy:UserLinkConsentRequired";
						errorReason = "The setting of the \"User Link Consent\" policy prevents the requested action from being completed.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#Policy:UserLinkConsentRequired";	
			break;			
						
			
}

// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

                assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;

                                // ErrorLink
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
                
 } 



</script></con:config></con:testStep><con:properties><con:property><con:name>TokenType</con:name><con:value>urn%3Adece%3Atype%3Atoken%3AResetPassword</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorRespType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>05f29811-9d45-4892-ab42-c44278163a96</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e3ff2de-196f-4311-b5ae-aea383d4a276</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserValidationTokenCreate_PrimaryEmail" searchProperties="true" id="a70333b3-fff7-497f-aaf6-ee711935cd32"><con:settings/><con:testStep type="groovy" name="SetPem" id="6686cbff-6035-491e-b734-db4c3c0250a6"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserValidationTokenRequest");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate" id="a9ae8924-21ac-4ad4-aa9e-32d658dd5b71"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate_POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#TestCase#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="7569897d-3ece-4bf9-9d78-916f4d370816"><con:settings/><con:config><script>import groovy.xml.* ;
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status;
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange ;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('UserValidationTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

/*def userVerTokenTS = tP.getTestSuiteByName('Setup');
log.info "userVerTokenTS===="+userVerTokenTS;

def userVerTokenTC = userVerTokenTS.getTestCaseByName('User_VerificationTokenCreate_Request_Post');
log.info "userVerTokenTC===="+userVerTokenTC;

def tStep  = userVerTokenTC.getTestStepByName('UserValidationTokenRequest');
log.info "tStep===="+tStep;

def expXML = tStep.httpRequest.response.getResponseContent();*/

log.info 'expXML=='+expXML;

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

log.info "tStep.httpRequest.response.responseHeaders ==="+tStep.httpRequest.response.responseHeaders;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
log.info "expXML: "+expXML;

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
log.info "httpStatus==="+status;
tC.setPropertyValue("httpConnect", connection);
log.info "httpConnect==="+connection;
tC.setPropertyValue("httpContentType", contentType);
log.info "httpContentType==="+contentType;
tC.setPropertyValue("httpContentLength", contentLength);
log.info "httpContentLength==="+contentLength;
tC.setPropertyValue("httpLocation", contentLocation);
log.info "httpLocation==="+contentLocation;

log.info "Done setting the properties for the Response";
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="f21cf66f-5288-40ba-9b5c-102e1e7ca82a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info 'errorRespType=='+errorRespType
def XMLbody   = context.expand( '${#TestCase#XMLbody}');
log.info 'XMLbody=='+XMLbody

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String orgRequest = url + "/merc_api/merc-service/Account/";
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;

def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );


if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info "We are in SUCCESS Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;
	case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "Token type in the request is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "User Identifier is required to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "Request Account ID not match";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is unauthorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;
	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the user identifier has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;
	
}


log.info "xmlbodynull " + XMLbodynull;

if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

 log.info 'DONE'



</script></con:config></con:testStep><con:properties><con:property><con:name>TokenType</con:name><con:value>urn%3Adece%3Atype%3Atoken%3AResetPassword</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b3ca7188-ff18-4ab6-92e1-c03925bc6d0d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9ae8924-21ac-4ad4-aa9e-32d658dd5b71</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdafa8a7-99c0-4ba6-af5c-b00e22eba0f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="2e979456-eadb-456b-b267-378e93d198e0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="aee41b46-6f40-4a3b-b60e-8ad17d33e49e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("XMLbody",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="f345954e-3748-45b0-b898-656c5aea231f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("UserResourceStatusUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="e4104b59-1f95-41b5-b7ff-6f45658f29a2"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#User_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#TestCase#NodeUserId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="709b5526-2270-4287-a195-c355ac9490d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="c78caf79-0530-415a-8add-164ec6509c25"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
//
////Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - User _ResourceStatusUpdate - Verify with Old Etag - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C565A5D1EDF58E0401F0A05997A0A/User/urn:dece:userid:org:dece:F92C578DC7481E43E0401F0A05997A1A</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:null</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn:dece:accountid:org:dece:null</con:value></con:property><con:property><con:name>status</con:name><con:value>suspended</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn:dece:userid:org:dece:F92C578DC7481E43E0401F0A05997A1A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18911924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51511-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Enable_UDUC_Policy" searchProperties="true" id="f0f9e617-1187-4241-ade6-49dab237b6c9"><con:settings/><con:testStep type="groovy" name="Set pem" id="51c2489b-75bb-48bb-a7e9-e5af51ff1490"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="f430c578-0950-487e-860c-34ac6514c5b4"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded)

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded)

def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_UserDataUsageConsent" )
if( testStep.disabled )
  testStep.disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGet - EnableUserDataUsageConsent- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E2F2C8E4225A821BE0401F0A05991ABD</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E2F2C87FEB3A28ABE0401F0A05991ABF</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f430c578-0950-487e-860c-34ac6514c5b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Policy_Delete" searchProperties="true" id="9bb9820c-ea54-417f-bc6d-303721136889"><con:settings/><con:testStep type="groovy" name="Set pem" id="bfb5154e-f099-45fe-9792-478b96d7ca9a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("Policy_Delete");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Delete" id="a796a82b-46a3-4321-adf2-98c23e386008"><con:settings/><con:config service="User_Policies" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/Policy/{PolicyID}" methodName="Policy_Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Delete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="55634e78-c5fd-47f3-bf6a-a2ca8cac850d"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyID" value="${#Project#Decoded_PolicyId}${#Project#POLICY_OID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - UserLinkConsent- Verify with old Etag - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E3439F598EE00469E0401F0A21995308</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E3439F598EC00469E0401F0A21995308</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f430c578-0950-487e-860c-34ac6514c5b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Policy_Get" searchProperties="true" id="f64621db-c53c-4476-b9dd-c00514725b4c"><con:settings/><con:testStep type="groovy" name="Set pem" id="3a23de61-582b-4834-8917-d3b711e93360"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("Policy_Get");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Get" id="fcfea54d-97e7-400a-b10b-0cca801f943c"><con:settings/><con:config service="User_Policies" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/Policy/{PolicyID}" methodName="Policy_Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Get" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyID" value="${#Project#Decoded_PolicyClass}${#TestCase#Policy_Class}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGet - EnableUserDataUsageConsent- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E3439F598EE00469E0401F0A21995308</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E3439F598EC00469E0401F0A21995308</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f430c578-0950-487e-860c-34ac6514c5b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Policy_Get" searchProperties="true" id="e909c4ef-d7c7-460e-96bb-5c6d8f85c530"><con:settings/><con:testStep type="groovy" name="Set pem" id="dd2a9309-79e1-4d11-8350-1424082d9832"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("Account_Policy_Get");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Policy_Get" id="74c7ddd1-815c-451c-b0dc-e97cd2a5ee22"><con:settings/><con:config service="Account_Policies" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Policy/{PolicyID}" methodName="Policy_Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Policy_Get" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="PolicyID" value="${#Project#Decoded_PolicyClass}${#TestCase#Policy_Class}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGet - EnableUserDataUsageConsent- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E3439F598EE00469E0401F0A21995308</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E3439F598EC00469E0401F0A21995308</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f430c578-0950-487e-860c-34ac6514c5b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Policy_Delete" searchProperties="true" id="1932f713-a3cd-46d0-84b5-f87eba47336a"><con:settings/><con:testStep type="groovy" name="Set pem" id="f9cdacb7-dd6f-411d-8da8-114338ded81d"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("Policy_Delete");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Delete" id="cc4c10cb-a0a3-43d9-825b-abe84277c52c"><con:settings/><con:config service="Account_Policies" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Policy/{PolicyID}" methodName="Policy_Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Delete" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="2ef166e0-c456-4e4a-a38f-b11e10ee13cc"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="PolicyID" value="${#Project#Decoded_PolicyId}${#Project#POLICY_OID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - EnableManageUserConsent- Verify with old Etag - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E3439F598EE00469E0401F0A21995308</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E3439F598EC00469E0401F0A21995308</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f430c578-0950-487e-860c-34ac6514c5b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4e2e3daf-ab67-4e4f-a871-58f2fa3541bb">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="d990589c-5be9-4279-9367-bd51a438d553">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
//import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

//def headers = new StringToStringMap()
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
//testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));
testCase.setPropertyValue("expectErrTypeRTCreate",CallingTCase.getPropertyValue("expectErrTypeRTCreate"));
//Testing RightTokenCreate Request Properties Loaded correctly.



</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="989e0c90-c14b-42d0-914c-3b9332af8a59">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_OID");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="RightsTokenCreate Request POST" id="58131b60-eab1-498c-afaf-cb2d11c50413"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreate Request POST" mediaType="application/xml" postQueryString="false" id="403eb202-9e7a-42ca-92fe-a37c69a3b6b3" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#CoordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="e6d5e0d7-38a2-4221-b904-c84844e33bb2">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="ef45df28-ce8b-4518-ab24-b31460e640fd">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
log.info testCase.getPropertyValue("DBrightstokenid");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsTokenCreate RESPONSE" id="b0f6f95c-9ca9-441c-88d8-7deac85a7e1a">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("NODEACCOUNTID"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenCreate Request POST").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTCreate");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCD376EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property>
        
        
        
        <con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD7E352A3E0401F0A07991D20</con:value></con:property>
        
        
        
        
        
        
        
        
        <con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value>nVfbkqLKEn33Kwzn0bABFW8x3RHFtbFF5SJeXk5gUQKKoBQI+vW7wNHRnp7Zs89Dh11JZdbKzEWy6ju290FzADBGceJHYVURXmv/662dje311YbdY1uNNrSZRs/posYa2r12j2Z7/damVlUwTpES4sQOk9dak2ZaDZpt0IxJdwftzqDdemHb/VWtaqEYk9Bkywtdq+b7IMSD8tjXWhqHg8jGPh6E9h7hQQIHBlBHA7JzYN8w1d6+X1GWB8ZvXpIcBhQFXxwEURDAFxjtqe/U057vDh4YvhvaSRqjH2c6+LX2wzfLspes9RLFLtWkaZqi+xTZ42Df/VZ7q9yckaOEm+i65u0wCn1oB/7FLkCpKPEipwoCN4r9xNv/JjRDMXQRuoFy2IBMO/xWo34eUKL7y0hPIGNsN7BnM7dgOtqgGIUQVWe68lr79ncdvPqasR3iTRTv8af1f4OEwhMKogNyGviW2Q3d30f8olxv3xEcKCEMUuyf0LigycGGCFenMdr4+cjHhHwOrpbtr+b4xjAE/0tLvlOPOAls6ovKCL6LcPL/9OuxV9colh2k6C3W9j0979RbZ9tbz5euuaq/u2fTsDbaawnhcfMV1L3VP9afiXrn1Q+ncX0Run1zG1rQOmdrc7kE76rETr3xSTCoiwAjenj2LBSiIed22Ollt3YvvoX0fKZYayvT9kdqUZ+hmWVsKh/K3Nht2t2wG2znvUAKlYPrdcdi1PbbdSnyl8akpUXuoQUXB+mdDoP+kJ8biWLSKW+w2/XW12w96sjh6WJXxlx9xgYQ6dukrm2T7Xoqvv7M6TGHIq8PdC6TLP5fsHRfsBP7vuCLSbEhr2eC3lRFEdILz4Oz4YJM4YBL/rZgzLm7o7fz5X5Gc0DTJCDwXLAVRyrYyYCZiZyn8pal5vwFkEqMLeJoVkCw4lRdzIRsKVia9i5mnunI1nktB+nqIo5VgEtn3lNFXbQE3RRVFURXW64KaznfqoaaKdpSqJAAgpgfLo7cT5Cc+7CpsKrBNpcGm64WFrFL59F+fFqbYqDyqswbR9lQ1i1BE4dAX85hU0qJ72W0P0SV5Yx7cBoe0BYgKaPJmeCimrtMNWfNsaDbpc18tqmKPFQ1nPFamZVcEbOhNbv8rAXPqbyzF3PRBNNrLaDJS2N6tRhie86Gqg4ywS2dP8TMmdyAqBqdVfhrrUZipov6bCypupKJoLQJYhbgdXPsrWXvBFtaPjTB9rExvCbOpZA8D/UTPLPHii1LYL23GNjSPeizvr2IMnfVywRtOfyIVgoJMwaayHEaIIBoUKRG6s+BEWexk4Pfb/potJGiPfLiispEH7vTJad7fmviTsdzVtjsulPZn7Zsx6OUADa3rR1QFOR8MJ5mO/qS0oXQv3QmH7MF8uPlJRmzGtPxe2xFn6ezhRAFXed9sZx91PMl1MzJ1JjNp5c8Hx+3vUuQvE+499gYqoI7GSM0xbBO0bbEmT2B5ZfvW8KnjU4jtgJclQNA3rqu6BMCc+/bKwnfdVUk5AUqn8n8nJcNIMt1UeEETdtIHjOFspXOmLGqiE5AynReLvSgsuI5gXSKtuerw7Ip0SsTOGUwrS1KrjZj68MFWmnjwLQSkB2sTcgwtHzQ3jdq5kK1YICjZAZH3iKukipgZk8OQzr/sDo0c9ScYGj0wayVG81dPvHc1XnnrnakKcuHV2dpgsAyHzimEIrNK5op6iroXd+3XFVmLT2A+/yw3sNcMEnPSufI5ERd0uhZLgjg42rDJmjmeHkRtyovlv4VkKs2ocVpvfDwMhz7E1NMCWnTB7ps1036XzlWUKzyzLEjDzTwmWPilWMi2BzrSk9gMNvhD3ieuZwsHrWuNRr2D7S2GO0qXF2i3MQP2pOwl5kf9TlzzrreVpvP+4rg8fVws/Ra64Sj7QvU0HDXlX19J4SddnBWR6rGznwqONNbdMzwqDJWmFBsJReJ6sdpnduv/P3l0mo3Z/upkZ6Umf2BmbO3Ps772Xb63qGoWD6zl+7qpEmLCC6v35HPQ/JuvI5R6nHAPk3gm/Yy0vUWweS2LL7DilCVyMfRTv6s4wqL7zQ25dbBoRCDOEFhUnsrvAoNN0iJ0vOdAflyXtcCB9ptAbA9RugKIsOLdJtmJBrQ3X6/2eZ7N7F3RfEJIh+FG784q5Cz14/1nwHC/QCj0EFx4xSl0EO49oeIRb2qSqgTFRKFGJkRkcs8K4mg2WT7EtvlmA7HtLp9XuIlTqKb3V6XiN5xlEzCSQw2CYqfpDJDP0llHUH/4KNCTxeiAhNVgRNSkqN9SpOAeTnZLyFKieKOC9E7aLZ7LIX9/SFABWBqHzlpgF4O3qEsEIWvv82GDXFpLQpYqp3f5vf52a0UZI/jFxtwkQyHSDvRF6K/dcvk9xm3HjO+hQep4xeihtQ1iX14RfL86CddCp7cuVKkdMN83/rZ8BSW+pzR/STn5MM74+93IiKpieh6uzXkaL8cX9LTKS1b0C0EZUzCUwxFdygDwZSowrMZ7VBI3UNQfyXI76g/nXy3P+NLEy80EvI27wlhquXyL25jBsLFbUwhhM//9qr3dCSpW4Ly5CsbH5BLW4H4j/c6OIDFPmKekp8sip2f7foi1sM5JM9ifPmhW6wK+X3+DStgRML6ZIRF8WPwrwJ8dfiz8V7kO5aEsGmdJuj3T6rFbHqt2RBGaZgoQq00PM7LEmdyPqDBz02/hCkF8I8bTY5/e6NZqCODTK69Xbvv9f99c8Mv6QIR8cJ+ieW1lpPLOTk8dB/m8w+AX49ovvOnEf2cydsv5l8tDzX9/D68/QM=</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
      <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - RightsTokenCreate- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBA44DA581C6DE1CE0401F0A219924C8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C565CCD376EAEE0401F0A0799215B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12CDFD7E352A3E0401F0A07991D20</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>283</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F92C565CE53A4136E0401F0A05997A0C</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCD376EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F92C565CE53A4136E0401F0A05997A0C</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>58131b60-eab1-498c-afaf-cb2d11c50413</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request" searchProperties="true" id="efd2fc04-3e59-4294-8032-6dfdb8172146">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="910e3739-7d79-48fa-8bb9-317b7c05f4f9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

//def headers = new StringToStringMap()
//headers.put("Authorization",testProject.getPropertyValue("SAML"));
//testRunner.testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.setRequestHeaders(headers);

//SetUp test properties

testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="5c142dba-a756-49c1-84ae-924ff26435aa">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_OID");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID" id="ad1f317b-4652-4757-bf15-d3899c73c3e8"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenGet byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="b31081a5-840e-47de-a9bd-58a6c86bc33d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('RightsTokenGet byTokenID');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag=null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
			
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tP.setPropertyValue("Rights_Get_ETag", etag);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="973bb004-7a4d-40f1-9a36-387d7c8e8b58">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="56421a73-32c3-42e4-b11f-3911da210aed">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 

def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

log.info "Log File Location : "+ logFile;

logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="511abc70-a1dc-4b65-a3a3-01943c8509bf">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("NODEACCOUNTID"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>DECECacheTestScenario - UserGet - RightsTokenUpdate- Verify with old Etag - 304 Not Modified</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>UserGet</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:F92C569A51AEEFB2E0401F0A0799216B</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBB728DEF0887428E0401F0A219923A4</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AF92C569A51AEEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:F92C569A51AEEFB2E0401F0A0799216B" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-05-12T12:12:25.395Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-05-12T12:12:25.400Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2881</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:F92C569A51AEEFB2E0401F0A0799216B" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-05-12T12:12:25.395Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-05-12T12:12:25.400Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>163</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Request" searchProperties="true" id="e6d24214-36bd-475d-8010-de6ce0dbc011">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="a1751c3e-e476-4eb5-be98-893ee7efc2a2">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

//def headers = new StringToStringMap()
//headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//headers.put("If-Match",testProject.getPropertyValue("eTag"));
//testRunner.testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.setRequestHeaders(headers);

testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("RightsLockerID",CallingTCase.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanDownLoad1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RRSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("PITransactionType",CallingTCase.getPropertyValue("PITransactionType"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("StreamWebLocLocation1",CallingTCase.getPropertyValue("StreamWebLocLocation1"));
testCase.setPropertyValue("StreamWebLocPreference1",CallingTCase.getPropertyValue("StreamWebLocPreference1"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTUReq","OK");
CallingTCase.setPropertyValue("FeedRTUReq",testCase.getPropertyValue("FeedRTUReq"));</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="bddf284c-3ec6-4749-9834-b2a1f9916265">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_OID");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightTokenUpdateRequest PUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="RightTokenUpdateRequest PUT" id="c740c6da-af67-4e59-bc37-4669ad04fa42"><con:settings/><con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightTokenUpdateRequest PUT" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#Rights_Get_ETag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenFull ALID="${#TestCase#ALID}" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="${#TestCase#ContentID}" xmlns:ns4="${#Project#CoordinatorSchema}" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName} 		</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:DiscreteMediaRightsRemaining 				FulfillmentMethod="${#TestCase#PPDiscreteMediaProfile1}">${#TestCase#PPDiscreteMediaRemaining1} 			</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc} 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>${#TestCase#RightsLockerID}</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="39e88dd0-2686-4ef5-9a65-87c67e6f4abe">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" disabled="true" id="59d0bf17-b521-4812-a855-34727d659659">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 

def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

log.info "Log File Location : "+ logFile;

logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="161d7477-ddaf-4cdd-9e9e-b04280a8e216">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("NODEACCOUNTID"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");

def ResponseXML = testCase.getTestStepByName("RightTokenUpdateRequest PUT").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightTokenUpdateRequest PUT").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</con:value>
        </con:property>
        
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property>
        
        
        <con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property>
        <con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property>
        
        <con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property>
        
        
        <con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ns3.google.com</con:value>
        </con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property>
        
        
        
        <con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</con:value></con:property>
        <con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD60752A3E0401F0A07991D20</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node2199_RetailerNode</con:value></con:property>
        
        
        <con:property><con:name>PITransactionType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property>
        
        
        
        
        <con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property>
        
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:F92C565CCBA76EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:F92C569A51AEEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property>
        
        
        <con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>StreamWebLocLocation1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
      <con:property><con:name>StreamWebLocPreference1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - RightsTokenUpdate- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AF92C569A51AEEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADE54AD6830BE2671E0401F0A21996160</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenFull ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging 		</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:DiscreteMediaRightsRemaining 				FulfillmentMethod="urn:dece:type:discretemediaformat:securedigital">1 			</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node2199_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12CDFD60752A3E0401F0A07991D20</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:F92C565CCBA76EAEE0401F0A0799215B</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>2435</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDelete Request" searchProperties="true" id="b36bb51d-60aa-40c1-9c74-afba8c200543">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="a32452e4-9d44-4957-9028-7eb95d112183">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

//def headers = new StringToStringMap()
//headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//headers.put("If-Match",testProject.getPropertyValue("eTag"));
//testRunner.testCase.getTestStepByName("RightsTokenDelete byTokenID").testRequest.setRequestHeaders(headers);

//SetUp test properties

testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="pem set" id="21bea0ae-be41-465c-804d-9d745c74a203">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_OID");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDelete byTokenID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDelete byTokenID" id="c7ba70d0-f10f-4738-a04a-891f13bc77b0"><con:settings/><con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenDelete byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#Rights_Get_ETag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="54872091-6fc7-46b3-9cda-a4bb256f2170">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenDelete byTokenID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" disabled="true" id="fd39f146-39b5-485b-a3a3-15bb21dcd111">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenDelete byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenDelete byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenDelete byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 

def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

log.info "Log File Location : "+ logFile;

logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="5c75ee90-5ebb-4f1f-bf8d-da1644934bd4">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("NODEACCOUNTID"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenDelete byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenDelete byTokenID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>DECECacheTestScenario - UserGet - RightsTokenDelete- Verify with old Etag - 304 Not Modified</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>UserGet</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:F92C5583ED90F282E0401F0A05997A0E</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:F92C565AF61B6E0EE0401F0A05997A10</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBB728DEF0887428E0401F0A219923A4</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AF92C565AF61B6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E2CBE24531240945E0401F0A05990271" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-21-31T08:55:32.288Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-21-31T09:30:52.416Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-21-31T09:30:51.942Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Updated</Description>
            </Prior>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-21-31T08:55:32.293Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2821</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>1935</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1f118337-f1eb-4267-96ae-781a0f4f6f53</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f8a23ff-4ab9-4aa2-8171-fd0a11618bd7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="58629ae7-1049-4c0c-bd43-620edfb1a0aa"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e3c3ae37-261c-4bdb-96c8-feddd7f7f531"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
//tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));

tC.setPropertyValue("RightsTokenID",callTC.getPropertyValue("RightsTokenID"));
tC.setPropertyValue("decodedNodeUserID",callTC.getPropertyValue("decodedNodeUserID"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3ed8b0c2-35e4-4145-9d4e-27a3563d10ed"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("POST - StreamCreate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="0267866d-c925-4559-ac2b-724dfc54593d"><con:settings/><con:config service="Streams_API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" methodName="Stream_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">       <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>        <RequestingUserID>${#TestCase#decodedNodeUserID}</RequestingUserID>       <RightsTokenID>${#TestCase#RightsTokenID}</RightsTokenID>        <TransactionID></TransactionID>         <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="50" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="1b1195d0-5e73-404e-a230-ec297815f5ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="4eb2ebc5-c394-4e8c-9d2f-85ccfdb9892e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,"LP1");

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "INVALID_CALCULATION_METHOD":
		errId = "CalculationMethodNotValid";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_VALID":
		errId = "RightsTokenIDNotValid";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
	case "GEOLOCATION_VALUE_FORMAT_NOT_VALID":
		errId = "GeoLocationValueFormatNotValid";
	     break;
	case "CONFIDENCE_OUT_OF_RANGE":
		errId = "ConfidenceOutOfRange";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamCreate").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="3bead63e-93ad-4449-b38d-78b7dcdc2c50"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = URLDecoder.decode(a,"UTF-8");
	//def urlStr = b.getPath();
	def urlStr = b;

	//assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			//assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="8d8dbfac-abb6-441b-8c81-e0944945db1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy"));
callTC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus"));
</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ashwin_user_create_20131126_020921</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:F8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:E2A4C8F78A56EB42E0401F0A059938CD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12D327AEDD98EE0401F0A07991D37</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B621E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3710</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZd6JKEH73V3icR0/CoridJOc0qxhRQcTlDaFZFEFpEPTX3wajMctk5s5Dli5q+brq6+rqJ2TuAroHEIJx4kdhVeafa81mB9JOm3kwW6T50GQs8mHdphr4F2w2adhtdGi6VpURSqEcosQMk+caTVLUA0k90C2davaoVo9iHrGfVa1qwBhhz1jlkaxV810Qol4Z9bmWxmEvMpGPeqG5g6iXWL0pUIY9rNkzr5BqL08XkGXA+MVLkn2PIKxHG1owCKxHK9oRT8QHnScb9aa+G5pJGsO3mDZ6rr3ZZln2mDUeo9glaJIkCbJLYB0b+e6v2kvlagxtOXSiy5ozwyj0LTPwz2YBSoGJF9lVELhR7Cfe7jeuKYIiC9cPMLceLKoZ/qoR7wFKdH/p6QPIGJkPyDOpqzMNOjCGoQWrM01+rv36qwJeTPXYDJETxTv0af3/EMHwCINoD+0HdN3YFdzfe/wmWy9P0OrJoRWkyD/CUcGSvWlBVJ3E0PHzoY8w92xULatfzdGVYND6PxV5Iu5xYtjEN5nhfRei5F/KdV+qixfDDFL4YozsNeufwm3mR+mJVYR6MGQygtHU2XMJ4V75AupW6bf1Z57eaPVmxJ4kIWYHwNmAhAANZ77ZuwMrc9rT6YyORMZZdLOtaszrqdpXaKKLbA9GCjNthhtr3CEdrj0M+TG1WUsrUBmcyMOGTiKaFB23Th40G7DsLIr7y1Nruc8WuSNC9exSEu/RGZ0eUndsOIOQHzWNIQ36ou5qEeNrRK7XjYq7MQICdiTrdMiZKbFVFfT8vqf7PRT7eoWncpPF/wuG7PJmYt4WXNEoHHw6E/iiyDKfnjkOnKYuyGQWuPhnA0asuz14W1/qZiQLVFUEPMcGG2GogK0EqJnAegpnGErOncGAdUcGNtQrIFixiiZkfLbkDVXtC5mn25JxWktBujoLIwWg0pjzFEETDF7TBUUB0UWWK/xayjfKVMlkdclXsANeyPdnW+omUMp9i5YZZcrQyymTrhYGloun4W50XOtCoHCKxE0P0lReN3hVGABtObdoMcW25+FuH1WWM/bOaLCHGwDFjMQxwVnRt5miz+gRr5mlTP8oU2RpoKgo49RyV1JFyAbG7PyeC45VOHsn5IIOJpdcWDonjsjVYoDMORMqGsh4tzR+FTJ7fAWiqGRW4S65GgqZJmizkahociaAUsYLWYDW9MhbS97Raqj5QAeb+8JwqjAXQ/w91I7WiTlUTEkE651BWQ3Ns3zGNxdR5q46Ga8uB6/RSsZuRkAVWFYFGBAJiq3h/LNgyBrMeO93aR8OHTHaQS+uKFT0uj2ec7LjN8buZDRneGfbnkj+pGHaHiEHFr1pbIEsQ/uV8lTT1paExof+uTV+nS2gHy/PyYhRqZbfYSraPJ0t+Cho2/3FcvZaz5eWqo8n09l8cs7z0WHTOQdJf8z24+lA4d3xCMIJsuoEaYqs3uEZbtnfYD45GgmZCnAVFgBp47qCjwnM9jcXEvY1RcDkBQqXSdyck6ZAkuqCzPKq6ogeNbEkI51RI0UW7ACn6bRcaEFlxbE8rhRpzlf7JS2SKx3YpTO1KYiuOmPqgwVcqaNANxKQ7Q0npChS2qt9R8lcSykYYMvZlMWniK2kMpiZ4/2AzF+NFkkdVDsYTLtg1sin9DYfe+7qtHVXW1yU5d3RWeogMPQ7jsmYYvOKqguaAjqX85Yr8qyhBdYu3693Vs7ruGalcaSzgiaq5CznefB6kSEd0DlanoWNwgmlfQXkiolpcVwvPLQMR/5YF1JM2vSOLps1Tf6RYwXFKh85duCACj5zTLhwTADOoS53eAoxLW6P5pnLSsJBbRvDQXdPqovhtsLWRcJN/KA5DjuZ/lqfU6es7W3U+bwr8x5XD52l11gnLGmeLRUOtm3J17Z82GoGJ2WoqMzMJ4ITuYGHDA0rI5kKhUZyFolunNbZ3crfnc+NJj3bTabpUZ6Zr4g6eevDvJttJv0WQcTSiTm3V0dVXETW8nKPfG6SN+GljRL3DfZDB76OXtN0vYFWcl0W97DMV0V8OZrJz2NcIfHtB6dU7e2LWRAlMExqL4VVMcL1Ujzo+XYP35yXdRcAvtXptNgm1WZbZFsgmyQlkoBkut1Wu8FeZ70Lik8QuSh0/CJWMcxeLuufAVq73hqaMYxrP3gq8lSVQw1PH1GIoB491xoMA7pNsdPstBi2wzFNttUSAUt36Sbd4pqtWnUUJeNwHAMngfHdgNz+PCBr0PL3Piym6LdZAiU4EQfzmCYB9Xg0H0OY4jE7LibdHt3sMGUCCDvd7S38AXe3eB+h5HHv7cth5rfb+PztumOsY/uFAipAsxBXC34z0pNXxF92Rn87+l/dg9T2i5kFpy+JfeuC5OOndzYUNLhRgexS5BXzTfWvTel/N23+o2mXoph/N219NSV+SCHxuXq3SPbRv4t7fUnhxwGeH8sHFMIsO5iPh8f0eExLXrVJkiZi7J4giS4xhVaK59uTHm1hSNw8EH/zsrhh/hT3Jv+ILk28cJrgtrTDR6BaLv/8qvxgjROQwDz5TsYF+B1ZBP/xqWn1rEIPiyf4TxbF9nvev/F1FwdDLlqqH7rFqngSnD6W9+3o9qwIe/VxV43ie9/f2X8X+6Pwlq4blASzYp0m8PdfqkW7fK6ZlhWlYSLztVJw38JLzMlpD3vvSl/clDP52yMrR799ZC2U4dTy4M6s3XT9Pys/+GXhLYitkF9iea7lqFdwPnTvrow3gL+5NZifbo2PO3n5Iv4qucvpZ2a//Ac=</con:value></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Raju</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C5743B8404D0EE0401F0A05997A16/Stream/urn:dece:streamhandleid:org:dece:F8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A219921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A21993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E00B9A40E209CD0FE0401F0A059915D8</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E00B9A40E221CD0FE0401F0A059915D8</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6rKEn73V1juR8sAgihWkqrhpqioeNeXUzgMF+UmA4L++jOY6EqystbJPk8wTU/31xd6vnnGZuA3uwBjlKReFFY1+aX2H56DnTbatxomy7caHN3hyZvNNgSLMWm7Y+45m65VNYwzpIU4NcP0pdakGbZB840mv6A7XY7tNtmnpiDsatUVSjAxTVSeyK4i8EPcvbl9qWVJ2I1M7OFuaAYId1PYnQN91CWaXfOOqfb6/Iby5jB5ddM21lIUfLIQRL4Pn2AUUM/UJ51nC3fnnhOaaZagd58Wfqm9783z/Clnn6LEoZo0TVO0QBEdC3vOP7XXyn0zsrTQjt7WkhlGoQdN37uaJSgdpW5kVYHvRImXusEfTDMUQ5emG6iADchw4T816peDG7ofWvoEMsFmA7smczc2QzZKUAhRdTnTXmr//KyCb3sXiRliO0oC/GX97yCh8Iz8KEZWA98ju6P7ucVv0vX6jGBXC6GfYe+MxmWbxCZEuDpNkO0VIw+T5rNw9Vb+aoHvHYbgvynJM/URJ4FNfZMZ2XMQTv+fen2s1ZuVleln6PWKIskf8dP+CWLfmMPWbnudG6GTaMuXG4SPym+gHqV+X39t1EdfvW9aTVbp4JQM1WDZHxpOMVOjdDqfOid3UNhs4W4EP5o1R9NpnEoqKFr7S9Y2hUlg7Nw6Z2z2g2Nytdb2aFJoXmWPeV7aznLLVZ31MrC1lcjJ8UKCPicOxgkXMa11T1vysQmXE6pFrwZ1lWV2y2YueWM1Yia7ev+Q2FKx0egKfYzZkSJQHYqn8UBLwh5++RXTxxjKuIbocguyfN+0aEE2U/OxkMpJYZPfM0WvuqZJdVmSAJIckGsicDRxdAVj0Tme3KPXE3JaBMZSBTK46DOQy85WXhnGUMmt1crfrTRVFfUZl/fBVq6QD7JSrOTdZkCb6128bar0bi6K1mYW7dlBbPWPed+FY32h5+OFdtEPSjFeKPT6JnMKsr7qB52ZLJZsZX0QBX2m5HJ+8ygruTverWfxdink8KoYOuB6gFkqkqv3F8GKgezMhQdlpIPjTS66urRa6YWyANOK6IxXJLaFpO5iGFjxPvDdD8b7xPjC6q0u+56f7a7KQZeUnjQ/9ebanpUNZQBm2+V+vTqaa/Vcgf0x2N89ei3P3ES5s+vksrEdDKOd5p7hGBiKKBqApIsGutYbgKgnAp0DXnGVDiIfSZaaU4MmrtQFv8dvLt5pg80e7ZtMp8NsR2t+euJlJazvhtn+4OruRp3Uh3PrvBRS4brF5/qZNz0GFrFtbJR+OizsvjGv7KdysYH9uuUMKP8qqIneHoDkenF93Zmla36CL3vPttfiZsL5bdvX2Vls+3Z8wfVFZBwTmhcR26S2l/MwrQBHFwHoHZYH0dDFTplUS8uNrS6aQFXSDFwPzXTYXJ0G/bMPtyyIiuF6cji+F8aSc0WkckMhbaVUOjKwyiL050tFPYCl6DiJ6CiqaEAZGFttmG9JvpZ9ovw1j+otj44iAoXdAV7oV9glLaSTdM5x4BKKy1AVXP1UrC0+oNsnpIzm45jLdTy2w911OuqBlyyTbL4cDsejYr/IescDmVU2PR+e2V1FOR9j4I2HC/coR7I5jbfbNK6HMIGpFge6VlwnO3zoePuAHtRbjDilZdhuLoN9vuyZym6YOHNm2J+FU7YtVHBmX/pB/dDJ1/XFnI/blhTa8uVC7ZIVHYFIFWatk1U0m0d3mY/43B6A495sjgtfEC+CMtwtYD4zhut5UG9VWufRKKCvC4obx5N83ss5xTDqrCUu+gscJ9426zhFMgmt5tZM+fOOXvFe7B+FZnZccDG7cgJSrOnZitv6tGJwG7gLnHYMB9SMOgOlbY+03mV/Na9xMIFvA/TrdHgI3+YH9XGyfBo9d9IxJ92KYHpflgeQJldVciqY6d8JTCnxrIZ9U+3GJQvCKQrT2mu5qyQv3YxQHM/qkiPjba3QtCgAjlaaBLVMqwrN0YxKA7olCExL7txZzhuKLxClKLS90lfJ495Oqb8DhEEXo9BCSeMcZdBFuPYXi2W+qlo4I8dvFGK0iAhP5Ngm0+FUSeJ4ILWVlghYwLdbYqsjKW1RYmrVcZROwkkC7BQlnzgiw3ziiDMEvdhDJZEsT1NMjlOckpSczHOW+szT2XwKUUaoZlKyvW6T67Qo7AWxj0rAVBBZmY+eYje+JYjCb89mw4T4JmXbDH215v8Y39dv91QQHcsrFXAZjIhIOdE3bJe5R/JbxNy3rPhuHmSWV57mJK9p4sE3JJ8//WqXsk8evVKGdMf8UP3xVub3rdRfEFFfk/HwZJ29D37vnJ3QUEJUXu+1PJlPp6fsfM5u1WuXJCwh5imGonlqjmBGmNRlER1RSD1MUD8isQ/UXzw/5J/xZakbzlMyCALSa9Xb8gc3mDnC5Q1GI/9K8dPr0SeXJG8pKtLvZJJPLjol4r/ehWAXlnpEPCWPPEqsX+X6xtYHPyTOcvJ5oVOuSsp6+UNXwIiY9cj0i5KPxr8z8J3zz8JHkh9YUtJN+yxFf/5SLcfaS82EMMrCVJNrN8HHUXvDmV5i1P2l9JuZG2l8vwUU+I+3gI0+mpOhF5i1h673v5Ub3q1dICK7sHfD8lIryIWWOA+dD6P9HeAfpnv7b9P9cySvv4l/l3zI6df/4fW/</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>sCbodyTransactionIDSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77327</con:value></con:property><con:property><con:name>subDivided</con:name><con:value>US 20148</con:value></con:property><con:property><con:name>calculationmethod</con:name><con:value>urn:dece:type:geoloc:networkaddress</con:value></con:property><con:property><con:name>viaproxy</con:name><con:value>urn:dece:type:true</con:value></con:property><con:property><con:name>confidence</con:name><con:value>50</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE00B9A40E221CD0FE0401F0A059915D8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - StreamDelete - 304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:F92C565B52C1E980E0401F0A07992167</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e3c10297-f131-45e9-844d-fef7ea6ab439</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="97409474-dfbf-40d9-91b5-577e39e2372e"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="253c48c0-80f7-4e4e-9919-9a5700499557"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

tC.setPropertyValue("errorRespTypeStreamView",callTC.getPropertyValue("errorRespTypeStreamView"));
tC.setPropertyValue("expectStreamStatus",callTC.getPropertyValue("expectStreamStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="81e5212c-b21c-41eb-8c6e-542ebb8be1dd"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",nodeId);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("Delete - StreamDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete - StreamDelete" id="4bf3b094-893e-4c3c-963b-b65832a93598"><con:settings/><con:config service="Streams_API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" methodName="Stream_Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete - StreamDelete" id="4c44e8eb-ec74-4743-a725-58cfab41f542" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="STREAMHANDLE" value="${#TestCase#streamhandleFULLEncoded}"/>
  <con:entry key="ACCT" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="STREAM" value="${#TestCase#streamhandleFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="1322caab-f516-450e-bb24-f1f121c48a1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Delete - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="101661da-c2c8-4849-acee-9d97b6de5879"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

/*
*   VALIDATION HTTP HEADERS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;
//Content-Length
assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

</script></con:config></con:testStep><con:testStep type="groovy" name="Return Property Values if Required" id="09affb16-ec22-4e01-8592-8e68ddcfea65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
callTC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus"));
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:0</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVfbcrLMEr33KSz/S8sAiihWkqpBUFHRKKiRm10wDAflJAOCPv0eTPQz+ZLs/PtKp6ene/WBnjWP2Aj8Zg9gjJLUi8KqLD7V/mM2TdhmaKbBIAQbbNtGDZ5h2IbFtrs0Mi3WsuxaVcY4Q3KIUyNMn2pNmmk1aK7RpDWG7jW5HsM9sK2OXquuUYKJaaLyQNeqReCHuHdx+1TLkrAXGdjDvdAIEO6lsKcCZdojmj3jiqn2/PiG8uIweXbTNO5RFHywEES+Dx9gFFCP1AedRwv3VM8JjTRL0LtPCz/V3s/mef6Qtx6ixKGaNE1TNE8RHQt7zj+158r1MLLk0I7e1n0jjEIPGr53NkpQCkrdyKoC34kSL3WDb0wzFEOXphuogA3IsOE/NeqPgwu6X1r6ADLBRgO7BnM1tkQ2SlAIUXW1lJ9q//yugm9ntcQIsR0lAf60/neQUHhEfhQjq4GvkV3R/d7iF+l6fkSwJ4fQz7B3RLOyTWIDIlx9SZDtFVMPk+azcPVS/mqBrx2G4L8pySN1j5PApr7IjOg5CKf/T73ua/VmZW34GXpu53qxSmZgs3cVFUrt5Qzqw6IzwCfl6QLhXvkN1K3U7+vPjXrrq/dDrtPSgwn0dgyauA5lpvtivx6Dwxq1uLE51rhhLG+NUxit5+lontAiUOdLf7/B2uI8y6a7/jlgTuvhdsOkTmW32PazbOVo2+nWmY1teGqvHCFUcuq82fmSNj1YzFRZKoN9ywQya/bNSSFN/KQwJZS1QCy7ycLlVFGxz0VlZyb6DIZL/pSM6fMw0ib7pz8x3cdQxjVBp0uQ5f/XNs2LRmrcFv1yUtjk80zRsyLL/brY7wPUd0AuC8CRhekZzARnf3D33pDPaQEsVgMggpOyBLnobMX1YjGRcmu99vW1PBgIypLNR2ArVsiGKBVrUX8d08ZGj7fNAa2rgmC9LiOzNY6t0T4fuXCmaEo+0+STspOKmSbRm4vMKcj6rOwUZq6tWpXNTuCVpZSL+cWjKOXuTN8s4+2Kz+FZWiiAHQJmJfVdZaQFawa2li7cSVMF7C9ywVX667VSSBp4qQjObE1i0/oDPYaBFZuB794ZHxHjmjVcn8yhn+lnaaf0pWFfPQxV2WyJC2kMltuVuVnvjc3gWIGjGTCvHr22Z7xGuaN3c3GxHU8iXXaPcAYWkiAsAEkXDRR5OAbRUAAKC7zi3N8JXNS3Bjk1buJKnfeH3OvJO7xiY0j7BtPtMtvphns5cKIU1vVJZu5cxX0dzOsT1Tqu+JQ/b/GxfuQMj4FFbC9epVE6KezRQq2YL2LxCkd1yxlT/pkfJEpnDJLzyfUVZ5luuDk+mZ5tb4TXOet3bF9pLWPbt+MTrmvRYp/QnIBaTWp7Ok7SCnAUAYDhbrUTForQLZNqyfliqwgGGEhpBs67Zjpprg/j0dGH2xaIislmvtu/F8YSc0mg8oVE2kqqdEVglUUYqStpsAMrwXESwZEGwgKKYLGVJ/mW5Gs1Isqf8zi45NGRBCC1dMDxo0prRfPpPFVZFpxCYRUOeFc5FBuLC+jOAUlTdRazuYJndqhvor0SeMkqydTVZDKbFqaWDfc7MqtsWp0cW3pFOu5j4M0mmrsXI9F4ibfbNK6HMIGpHAeKXJznOt51PTOgx/U2I7zQIuw0V4GZr4aGpE8SR2Umo2X40urwFZzZp1FQ33XzTV1Tubhj9UNbPJ0oPVnTEYgG/LJ9sIpmc++u8imX22OwN43mrPB54cRLE12D+XIx2ahBvV1pH6fTgD5rFDuL57k6zFlpsai3LEEbaThOvG3WdYpkHlrNrZFyR51ec17s7/lmttfYuLV2AlKsl6MVd5SXyoJ9hXrgdGI4ppbUEUgdeyoPT+bZOMfBHL4N0M/T4SZ8mx/U/WT5MHqupEMl3Ypgel2WF5AsVgfkVjDSnwlMKfGshn1R7cUlC8IpCtPac3mqJC+9jFAcz+qRK+NtLQ54ti31eZa0qdgUaYlmaWZAA7rD83Sn212ynDcUnyD2o9D2Sl8lj3u7pX4GCIMeRqGFksYxyqCLcO0Hi2W+qnK4JNdvFGKkRYQntmiGG7RZnm9L7QHNA7bPc81up8M3Acfw0qBWnUXpPJwnwE5R8pEjtj5wxCWCXuyhkki+36Y4JRk5GMcs9ZmHo/EQoowwzaQke70m221fMkFZWRBDshEFKIkjnD7Ebny5zr+N4/PeNWSiY3mlAi5BC4iUDX3Baukr4r8iY79kv1fzILO88tYm+UsTD74h+bj1py3Kfrj1BM0z7BXzTfV3Rwnl4/4+Sv2AiPqcjJsn6+jd+b1yc0I3CSG5UHJMinYwHg4P2fGYXcrUKclWQsxTDEVzlIpgRhjTSYv2KKRuJqhfkdUb6k+eb/KP+LLUDdWUfPAB6anqZfmLl4qKcPlSkck3Ufz2GfTBJclbior0K1nfJw+aEvGPbx7Yg6UeEb+QnzxKrD/l+sLWnR8SZznhvNApVyU1PX3TFTAiZj0y5aLk3vhXBr5y/lF4S/INS0q6ycxS9P1OtRxfTzUDwigLU1msXQT3I/WCMz3FqPdH6S8zF3L4zvYL/C3bf1WmKhlugVG76Xr/W7nhXdoFInIKexcsT7WCPFyJ89C5G+HvAL+Z4t2fpvjHSJ7/Ev8tucvp5+/h+b8=</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:0000-3BAB-9352-9999-G-0000-9999-Q:0001</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>eDECEDeleteFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>eDeletedByPresent</con:name><con:value>false</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Hello-George...Lovely 123 Day</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>1999003</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11081 - StreamCreate - DLP - &lt;TransactionID> can be duplicated on 'deleted' stream - 201 Created</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:DF9942FD9463A8EAE0401F0A219923F8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DF945EC94BAAD2D0E0401F0A21992178</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DF945EC94BA8D2D0E0401F0A21992178</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77328</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF945EC94BA8D2D0E0401F0A21992178</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AF8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - StreamDelete - 304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>839f0827-d6d7-446f-8ee2-3ed59a7254c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API_If-None-Match" searchProperties="true" id="ec958973-7b03-4237-a04a-f2f832123c41"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="19d83bc2-6665-48c3-8f20-863eb2ff61ad"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="e9d490af-9fc8-481a-ba1b-c3d724e26290"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="21962ac3-7daf-43b7-af85-ac6f4ab71975"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#Project#Account_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="0a7fe6b9-af90-483c-b522-45276ce5554c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String cacheControl = null;
String etag = null;
String expires = null;
String lastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Cache-Control": 
			cacheControl = value[0]; 
			break;
		case "ETag": 
			etag = value[0]; 
			break;
		case "Expires": 
			expires = value[0]; 
			break;
		case "Last-Modified": 
			lastModified = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("httpCacheControl", cacheControl);
tC.setPropertyValue("httpEtag", etag);
tC.setPropertyValue("httpExpires", expires);
tC.setPropertyValue("httpLastModified", lastModified);

tP.setPropertyValue("Account_Get_LastModified", lastModified);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("Account_Get_ETagPrior", tP.getPropertyValue('Account_Get_ETag'));
	tP.setPropertyValue("Account_Get_ETag", etag);

	log.info "Account_Get_ETag = "+tP.getPropertyValue('Account_Get_ETag')+ ", Account_Get_ETagPrior = "+tP.getPropertyValue('Account_Get_ETagPrior');

	assert tP.getPropertyValue('Account_Get_ETag') != tP.getPropertyValue('Account_Get_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	
	tP.setPropertyValue("Account_Get_ETagPrior", tP.getPropertyValue('Account_Get_ETag'));
	tP.setPropertyValue("Account_Get_ETag", etag);

	log.info "Account_Get_ETag = "+tP.getPropertyValue('Account_Get_ETag')+ ", Account_Get_ETagPrior = "+tP.getPropertyValue('Account_Get_ETagPrior');

	assert tP.getPropertyValue('Account_Get_ETag') == tP.getPropertyValue('Account_Get_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="2a4b1e0c-e792-4a11-b890-78bce1ca939c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def streamcount = context.expand( '${#Project#StreamCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;

     case "304_Not_Modified":
	     expectHTTPstatus = "HTTP/1.1 304 Not Modified";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		XMLbodynull        = true;
     break;
     
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == streamcount;
		def totalStream = 12;
		def AvailableStreams = totalStream.toInteger() - streamcount.toInteger();
		assert myXML.AvailableStreams == AvailableStreams;
		assert myXML.UserList.size() > 0;
		assert myXML.UserList.UserReference.size().toString() == usercount;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:F8F12CDFCEBC20F8E0401F0A07991D39" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>Account_create_20140509_115423</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:F8F12CDFCEC420F8E0401F0A07991D39</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:F8F12C65A8E525B7E0401F0A05997571</UserReference>
      <UserReference>urn:dece:userid:org:dece:F8F4D473329E9FC8E0401F0A05991C2E</UserReference>
   </UserList>
   <ResourceStatus>
      <Current ModificationDate="2014-05-09T15:54:25.593Z" ModifiedBy="urn:dece:org:org:dece:RET" CreationDate="2014-05-09T15:54:23.372Z" CreatedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1230</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserCount</con:name><con:value>2</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGet 121- UserCreate 121-AccountGet 111 Verify with Old Etag - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E23D997E5D8EF2E2E0401F0A21994DAE"</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>httpCacheControl</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">max-age=86400</con:value></con:property><con:property><con:name>httpEtag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"F8F4D4491647471FE0401F0A07993CAC:81F2E062"</con:value></con:property><con:property><con:name>httpExpires</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sat, 10 May 2014 15:54:28 GMT</con:value></con:property><con:property><con:name>httpLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fri, 09 May 2014 15:54:28 GMT</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE38366F552D01218E0401F0A059951A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5c6ae69f-3e09-4d51-a2a3-4c85c35795d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Get_API_If-None-Match" searchProperties="true" id="8969be6f-12b9-4a9b-8f80-dc5580538680"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0c1b8b12-11f2-4f4a-bc41-7d7a3aa668fd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="1c45746a-1122-4f44-912b-3a9fe92111a7"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Get");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get" id="dc7e27b2-0d5e-425f-914a-c2db850301cb"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="0d647a5c-fada-4b21-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#Project#User_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#TestCase#NodeUserId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="f36c65e4-b68c-47f3-b657-bf732e1180e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("User_Get_ETagPrior", tP.getPropertyValue('User_Get_ETag'));
	tP.setPropertyValue("User_Get_ETag", etag);

	log.info "User_Get_ETag = "+tP.getPropertyValue('User_Get_ETag')+ ", User_Get_EtagPrior = "+tP.getPropertyValue('User_Get_ETagPrior');

	assert tP.getPropertyValue('User_Get_ETag') != tP.getPropertyValue('User_Get_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	

	tP.setPropertyValue("User_Get_ETagPrior", tP.getPropertyValue('User_Get_ETag'));
	tP.setPropertyValue("User_Get_ETag", etag);

	log.info "User_Get_ETag = "+tP.getPropertyValue('User_Get_ETag')+ ", User_Get_EtagPrior = "+tP.getPropertyValue('User_Get_ETagPrior');

	assert tP.getPropertyValue('User_Get_ETag') == tP.getPropertyValue('User_Get_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="dda4c8bc-f479-4954-8e52-ff0a01aab319"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;

 	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;

      case "304_Not_Modified":
	     expectHTTPstatus = "HTTP/1.1 304 Not Modified";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		XMLbodynull        = true;
     break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Verify the response headers and body11" disabled="true" id="4cb9b62a-578f-4876-9d6d-db7b97286ee4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;

 	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

// NOt Validating fo Cache Response - specific  to this project
/*
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserIdInvalid">
      <Reason Language="en">The user ID is not valid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C55829AC4F11CE0401F0A0799215F/User/E501A9DE7019CB21E0401F0A2199721F</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#UserIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">720</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>USER_NOT_VALID</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>E501A9DE7019CB21E0401F0A2199721F</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>FAILURE</con:value></con:property><con:property><con:name>SecondUser</con:name><con:value>Yes</con:value></con:property><con:property><con:name>Etag_Update_Delete</con:name><con:value>Yes</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e29cce0-d04a-4367-b690-165597caf13c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c112d7e9-edec-43e6-a2ed-979383edf9f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_GetList_API_If-None-Match" searchProperties="true" id="d0b67fb3-fe3a-4a16-ba93-9cd3cac8fc0b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7e1bf578-5953-4d5a-ac2f-8fc6f8111e5b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("AccountID",tP.getPropertyValue("Node_Account"));

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="e39e93aa-75e5-45d8-ad7c-a62097249800"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserGetList");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGetList" id="3d36a2ad-ce4a-409b-9594-772e4e0872f6"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGetList" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2c6efed1-a2fd-4567-bc03-5922f8dd548b" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#Project#User_GetList_ETag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d11312d3-539e-4d14-990b-a86b9342b0d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGetList');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("User_GetList_ETagPrior", tP.getPropertyValue('User_GetList_ETag'));
	tP.setPropertyValue("User_GetList_ETag", etag);

	log.info "User_GetList_ETag = "+tP.getPropertyValue('User_GetList_ETag')+ ", User_GetList_EtagPrior = "+tP.getPropertyValue('User_GetList_ETagPrior');

	assert tP.getPropertyValue('User_GetList_ETag') != tP.getPropertyValue('User_GetList_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	

	tP.setPropertyValue("User_GetList_ETagPrior", tP.getPropertyValue('User_GetList_ETag'));
	tP.setPropertyValue("User_GetList_ETag", etag);

	log.info "User_GetList_ETag = "+tP.getPropertyValue('User_GetList_ETag')+ ", User_GetList_EtagPrior = "+tP.getPropertyValue('User_GetList_ETagPrior');

	assert tP.getPropertyValue('User_GetList_ETag') == tP.getPropertyValue('User_GetList_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="645d91fc-1168-413d-ae15-94f9d2bdf982"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Query_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/List";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
	errorID     = "urn:dece:errorid:org:dece:UserNotInAccount";
	errorReason = "The member does not belong to the account.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotInAccount";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;


     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;

      case "304_Not_Modified":
	     expectHTTPstatus = "HTTP/1.1 304 Not Modified";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		XMLbodynull = true;
     break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
	        //this.log.info myXML.@xmlns.text();
		  assert myXML.size() == 1;
		  assert myXML.UserReference.size().toString() == usercount;
		
		  for(def i = 0;i&lt;myXML.UserReference.size();i++)
		   {
		     assert myXML.UserReference[i].text().matches("urn:dece:userid:org:dece:[0-9,A-F]*");
		     this.log.info "Valid User Reference :  " + myXML.UserReference[i].text();
		   }
	   }
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1"/>
      <title>Error 404 Not Found</title>
   </head>
   <body>
      <h2>HTTP ERROR: 404</h2>
      <p>
         Problem accessing /rest/1/21/Account/urn:dece:accountid:org:dece:F8F12CDFCEBC20F8E0401F0A07991D39/User/List. Reason:
         <pre>Not Found</pre>
      </p>
      <hr/>
      <i>
         <small>Powered by Jetty://</small>
      </i>
   </body>
</html>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/html;charset=ISO-8859-1</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1355</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>NO_MNG_ACC_CNST</con:value></con:property><con:property><con:name>UserCount</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90940</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGetList - ManageUserConsent- Verify with old Etag - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGetList</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E268F4CBAC2210C1E0401F0A05995EE2"</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>FAILURE</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b651d442-610d-4859-809b-2cbedd24a3c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1f25b255-ee4a-40c0-9c5b-bd85f3a7aeca"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="3a240dbb-6ad5-4734-9a38-f29af04ac2c4"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status"));
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status"));
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));


//Set the SAML Details of the Full Users to the AccountMergeTest API

//def headers = new StringToStringMap()
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));
//
//testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9f853eab-3558-4df4-bd42-2ae293089b13"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",nodeId);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="3f6d33c2-2a48-4ec4-ba4a-33ae5a3714d8"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{encodedSurvivingAccountID}/Merge/Test/{encodedRetiredAccountID}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML_1}"/>
  &lt;con:entry key="Authorization" value="${#Project#SAML_2}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2011/08/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                    

</dece:AccountMerge>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="encodedRetiredAccountID" value="${#Project#RetiringAccID}"/>
  <con:entry key="encodedSurvivingAccountID" value="${#Project#SurvivingAccID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="cb8ce75f-cf9f-48ac-bec8-d0e5a219d2ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="9d361da4-8a1e-4ceb-abfc-37d751196d45"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
/*
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}
*/
//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:E36AE1AA4903498EE0401F0A05994921</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:E36AE27DDD455401E0401F0A05994903</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE36AE1AA4903498EE0401F0A05994921</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE36AE27DDD455401E0401F0A05994903</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:F8F12CE09BBB20F8E0401F0A07991D39</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:F8F12CD723196A81E0401F0A05995498</con:value></con:property><con:property><con:name>user3Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user4Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user5Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user6Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survivingAccountUserAssertion</con:name><con:value>SAML2 assertion=nVfZburKEn3nKxD7ERGPDEZJpPYEBsxkRr8cGbttDJ5we4Kvv20S2CQ72TfnSJFIF9VVqwaqVj8jw/foLkAIxokbBlVFfKn902RtumNDowE7XKfBMpBsdDrNZsOiyHaLa1FGe2fVqgpCKVQClBhB8lKjSYppkB38tyBbXabVbbaeuE5Hr1VXMEbYNFZ5ImvVwvcC1L26famlcdANDeSibmD4EHUTs6sBddTFml3jhqn2+vyG8uowft0nSdQlCPPJgib0PPPJDH3imfig82yhruY6gZGkMXz3aaGX2vvdPM+fcuYpjB2CJkmSIDkC61jIdX7VXiu3y9BSAjt8OwtGEAauaXjuxShBqTDZh1YVeE4Yu8ne/8Y0RVBkaboBC7NhUmzwq0b8dnBF90NLH0DGyGigvUHdjM2hDWMYmLC6nCsvtV8/q+Db3UVsBMgOYx99Ov87SDDIoBdG0GqgW2Q3dD+3+EW6Xp+h2VUC00uRm8Fx2SaRYUJUncbQdouRi3DzWah6LX+1QLcOg+a/Kckz8YgTwya+yIzoOhAl/6Vej7V6s7IyvBS+Tj3Xc4Z5m59OdGEpDnM4Z3MShaHKvlwhPCq/gbqX+v38uVHvffV+acSscn/el5BYoPDALtJ5ehnlZECSS5lEwWnU8pmIZpC6kbeZwasAMkGcj9km4maxSs0oqZCJCT1Mhxep4tmHIobrw973Nn1tQ7Arem0Wo5SU0sQeZMhbjZjg2J6ODYdKTbeTqa40k44rOkJNnV6p7Q4R9fbCYDge8JWmmPVdJTlsyFNbUHSW08OX3zE9xlDGNYTna5Dl/5smyYlGYtwPQjkpbPzzTOCrqihCXRQEAAUH5AoPHIUfXcCYd46n/dHtcTnJg9lSBiI4q3OQi85WXM1mQym3VitPXymyzKu4DH2wFSv4C1EqVqK+GZDGWo+2tEzqGs9bm3m4YwaR1T/m/b05VhdqPl4oZ/UgFeOFRK6vMqfA54t6UKnJYslU1geeU+dSLuZXj6KU78f6eh5tl1xuXqSZCtgeoJaSsFf7C39Fmcx8bx6kkQqOVzm/V4XVSi2kBZhWeGe8wrEtBFmPTN+Kdr63fzDex8YXVm913vW8VL9IB1WQeoJ26mnKjhFn0gDMt8vdenU01nJWMftjsLt5dJuusQlzR+/k4mw7GIa6ss/MMZhJPD8DOF0kUJXeAIQ9HqgscIuLcOBboWDJOTGgUaXOeb3W5uyeNsjokZ5BdTrUdrRuTU8tUQrq+jDdHfbqfiNP6kPNypZcwl22KKtnLcOlzCKyZxupnwwLuz/TKrupWGzMft1yBoR34eRYbQ9AfDnvPdWZJ+vWBJ13rm2v+c2E9dq2pzLzyPbs6Izqi3B2jMkWDxma2J6zYVIBjsoD0DssD/xM5TtlUi0ln21V3gCylKTgcqCTIb11DfqZZ24ZEBbD9eRwfC+MJeYST+QzCbeVVOmIwCqL0NeWknwAS95xYt6RZH5mimC2VYb5Fudr2cfKn/MoX/PoSDyQGB20uH6FWZJcMkk0lgXngF8GMrdXT8Xaavlk+wSlkTaO2FxFYzvQ1+FR9d14Gafacjgcj4rdIu0dD3hW2aQ2zBi9ImXHCLjj4WJ/FEPRmEbbbRLVAzM2EyXyVaW4THR11Lg7nxzUmxQ/JUWzTS/9Xb7sGZI+jB2NGvbnwZRpcxWU2ue+Xz908nV9obWitiUEtng+E3q8IkMQyty8ebIKmj7ul/moldsDcNwZ9LjwOP7MSUN9Yebz2XCt+fVmpZmNRj55WRDsOJrkWi9npdmszlj8or9AUexu045TxJPAordG0sp0ctVyI+/I0elxwUbMyvFxsaaZFbXVaWXGbkzdd9qROSDmRAaktj1SeufdxbhE/sR8G6Cfp8Nd+DY/iMfJ8mH03EiHhrsVmsntWC4gRazKeCsYyd8JTClxrYZ9Ve1GJQtCCQyS2mt5qyQv3RRTHNfq4pXxdpaYFpColkABhmoznCyRLEnJJCCbHMdyJHdjOW8oPkEUwsB2S18lj3vbUn8HaPpdBAMLxo0sTM09RLW/WCzzVVWCOV6/YYDgIsQ8ETRpWZJJviNzzWanRfMYLCOyTaHd4SlWaNeq4zCZBJMY2AmMP3JE7gNHnEPTjVxYEslymyK8TlGCU3IysjTxqKfMeApgiqlmXLK9Ls12mgRy/ciDJWDCD63Ug0/RPromiEBvn3TDMNFVOpcW/yiacN3034b4+btbNrCO5ZYKqIyHh7ii8AvCy96C+TZoin4M+mYepJZbLnSc2iR2zTckH7/63TFlq9zbZTQC2vQG+q77s7tlRgTtH+q/X//zJvGXgIjPubw7sjL3we2N9WMii6nO660bTsbT6SnNsvRa/3ZJ42JsnqAIsk1o0EwxFzsvwiMMiLsJ4kc0+I76k+e7/CO+NNkHWoJHiY+7tXo9/uANpEFUvoEU/GsrfvrA+uAS5y2BRfKVTPDwU6lE/NfXlNk1Sz0snuKPPIx/B/6VrQc/OM5ydrqBU55K0nv+pinMEJt18fwM40fjXxn4yvlH4T3JdywJ7qZdmsDvv6mWg/GlZphmmAaJItaugsdhfcWZnCPY/a30h5kr7Xx/RxTo23fERh1peGz6Ru2u6/5/5YZ7bRcT4lvIvWJ5qRX4SYydB87DcngH+Od+AADvAoblOtKn/dC+J/BDJK9/iP+UPOT08+/h9X8=</con:value></con:property><con:property><con:name>RetiredAccountUserAssertion</con:name><con:value>SAML2 assertion=nVdbc6rKEn73V1iuR8tw9YKVpGoQUFQ0iHh72YUwXJSbDAj668+g0WWyknWyd5WlTtPT/XVP0/3NMzICn+4ChGCSelFYlYWX2j8dumnBLUc1tk3KbLAkCRvblk03LJKibdIyOq0WV6vKCGVQDlFqhOlLjSYppkF28GdOtrpMu8u2npgms6lVFzBB2DRWeSJr1SLwQ9S9uH2pZUnYjQzkoW5oBBB1U7OrAWXcxZpd44ap9vp8RXlxmLy6aRp3CcJ8sqAJfd98MqOAeCY+6DxbqKt5TmikWQLffVropfa+N8/zp5x5ihKHoEmSJEiOwDoW8pxftdfKbTO05NCOruueEUahZxq+dzZKUApM3ciqAt+JEi91g29MUwRFlqYbsDAbJsWGv2rEbwcXdD+09AFkgowGcg3qZmwGbZjA0IRVfSa/1H797ASve+eJESI7SgL0af3vIMHwCP0ohlYD3SK7ofu5xS/S9foMza4cmn6GvCOclGUSGyZE1bcE2l4x9hAuPgtVL8dfLdCtwqD5b47kmXjEiWETX2RG8ByI0v9yXo9ndbWyMPwMvq77zAkuGIWWiZA+9uPNCh2kqGeIlv5ygfCofAV1P+r39edCvdfV+6b1qRgsV4ne4erkvK2rm4DThvm03zzw0sLrT8PQVwctbXIK8+mcUjrhKQn7IVyEfF7nJGHviv2mlLBtTkd2JWG37OwkTxxWoUCSSowjLZcqvVDds5zXvfU2FN18JivhMR2JwzqbESGoB6SGzDOXuLMFWOizIa9OlbZBVVKNsAd1JO3YzUrTh/65E738jukxhjKuETxdgiz/r5okJxipcV/0yk5h49czha+KLPfqQq8HYM8BucwDR+bHZzDhnf3B3Xt9Lid5oOoSEMBJmYFccNbCQlVHYm4tFv5mIUsSr8zYfADWQgU/EMRiIWxWQ9JYbuI1LZEbjeet1SzaMsPYGuzzgWtOlLmST+bySdmJxWQuksuLzCnw+qzsFGo615nKcsdzykzMhfziURBzd7JZzuK1zuXmWVQVwPYBpYs9VxnMgwVlMjPX3IljBewvct5VeouFUohz8FbhnckCxzbvSZvYDKx4G/jug/EBNj63+ovTtu9nm7O4U3piv6cd+pq8ZQRVHILZWt8uF3tjKR0r5mACtjePXtMzVlHubDq5oK6Ho2gju0dzAlSR51WA00UCRe4PQdTngcICrzj3dnwr6llSTgxpVKlzfr+1OnmHFTL6pG9QnQ61Hi9bb4eWIIb1zSjb7lzFXUnT+kizjjqXcuc1OtaPLcOjzCK21ZU4SEeFPVC1yvZNKFbmoG45Q8I/c1KitIcgOZ9cX3Fm6bI1RaetZ9tLfjVl/bbtK8wstn21PqH6PFL3CdniIUMT69NxlFaAo/AA9Hf6jlcVvlMm1ZJzda3wBpDENAPnHZ2O6MVhODj65poBUTFaTnf794OxhFzkiVwVcVmJlY4ArPIQBpouSjug846T8I4o8aopAHUtj/I1zpc+wMqf8yhd8uiIPBCZDWhxgwqjk1w6TTWWBaeQ10OJc5VDsbRaAdk+QHGsTWI2V9DEDjfLaK8EXqInmaaPRpNxsZ1n/f0O9yqb1EZHZlMRj/sYeJPR3N0LkWC8xet1GtdDMzFTOQ4UuThPN2jX8bYBOaw3Kf6NFMw2rQfbXO8b4maUOBo1GszCN6bNVVBmnwZBfdfJl/W51orbVi+0hdOJ2CQLMgKRxM2aB6ug6b2r5+NWbg/BfmvQk8Ln+BMnjjZzM5+po6UW1JuV5nE8DsjznGAn8TTX+jkrqmqdsfj5YI7ixFtnHadIpqFFr420ddyQi5YX+3uOzvZzNmYWToAP6+1oxW3lraKyK3MTOO3YHBIz4gjEtj2W+6ft2TjHwdS8NtDP3eEuvPYP4rGzfGg9N9Kh4WqFZnpblgNIFqoSngpG+ncCU0o8q2FfVLtxyYJQCsO09lruKslLN8MUx7O6eGRc1yLTAiLdFgSh2WmyJCWS+EsiAdnkOJYjmRvLuaL4BLEXhbZX+ip53HVK/R2gGXQRDC2YNI5RZroQ1f5iscxXVQ5nePxGIYLzCPNESuRYQRIAJfAdCbDNHtnr9dqMwLIS2WtyVK11idJpOE2AncLkI0fkPnDEGTS92IMlkSynKcLjFKU4JQfjmKU+9XQ0nkKYYaqZlGyvS7OdJoG8IPZhCZgIIivz4VPsxpcEEej6SzcME12kM3H+j6z1LpP+2xA/P7tlA+tYXqmAynh4iE8UfkF4mVsw3wZN0Y9B38yDzPLKgY5TmyaeeUXy8dHviilL5V4u4zHQ3m6g77o/21tmpKf9Q/337X/uJP4SEPE5l3dH1tF7cHtj/ZjIYqrzequGg/F0eMqOx+xy/u2SxiXYPEERZJvQoJlhLnaaR3sYEncTxI9o8B31J893+Ud8WeqGWopbSYCrtXpZ/uAOpEFU3oFk/LYVP71gfXCJ85bCIv1K1vPxValE/NfblNk1Sz0sfsM/eZRYv4/rC1sPfnCcZe/0QqdclaT39E1RmBE26+H+GSWPxr8y8JXzj8J7ku9YUlxN2yyF3z+plo3xpWaYZpSFqSzULoLHZn3BmZ5i2P2t9IeZC+18v0cU6Nt7xEoZa7htBkbtruv9f+WGdykXE+JdyLtgeakV+EqMnYfOw3B4B/j1fGCbf5sPHyN5/UP8p+Qhp5/fh9f/AQ==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet -AccountMergeTest- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9f853eab-3558-4df4-bd42-2ae293089b13</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f6d33c2-2a48-4ec4-ba4a-33ae5a3714d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad1f317b-4652-4757-bf15-d3899c73c3e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="f762a215-211a-4f53-8b01-8fd418ede8e5"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="f97b9c44-53b3-4d0d-86bd-d5f5b98cfd43"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status"));
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status"));
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));


//Set the SAML Details of the Full Users to the AccountMergeTest API

//def headers = new StringToStringMap()
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));
//
//testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="64bf98a6-b023-46bc-876f-ec4728111222"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",nodeId);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMerge");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountMerge" id="cb0e844a-24c4-43a1-a954-6692755fac4d"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{encodedSurvivingAccountID}/Merge/{encodedRetiredAccountID}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML_2}"/>
  &lt;con:entry key="Authorization" value="${#Project#SAML_1}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2011/08/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
     
</dece:AccountMerge>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="encodedRetiredAccountID" value="${#Project#RetiringAccID}"/>
  <con:entry key="encodedSurvivingAccountID" value="${#Project#SurvivingAccID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="a113c5f9-affa-40b7-acb7-b705bd26c815"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="b95bc18e-e971-4ecd-ad05-1b6a532156f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE36AE1AA4903498EE0401F0A05994921</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE36AE27DDD455401E0401F0A05994903</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:F92C565AF8306E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</con:value></con:property><con:property><con:name>user3Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user4Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user5Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user6Status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mergeUser6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survivingAccountUserAssertion</con:name><con:value>SAML2 assertion=nVfZburKEn3nKxD7ERGPDEZJpPYEBsxkRr8cGbttDJ5we4Kvv20S2CQ72TfnSJFIF9VVqwaqVj8jw/foLkAIxokbBlVFfKn902RtumNDowE7XKfBMpBsdDrNZsOiyHaLa1FGe2fVqgpCKVQClBhB8lKjSYppkB38tyBbXabVbbaeuE5Hr1VXMEbYNFZ5ImvVwvcC1L26famlcdANDeSibmD4EHUTs6sBddTFml3jhqn2+vyG8uowft0nSdQlCPPJgib0PPPJDH3imfig82yhruY6gZGkMXz3aaGX2vvdPM+fcuYpjB2CJkmSIDkC61jIdX7VXiu3y9BSAjt8OwtGEAauaXjuxShBqTDZh1YVeE4Yu8ne/8Y0RVBkaboBC7NhUmzwq0b8dnBF90NLH0DGyGigvUHdjM2hDWMYmLC6nCsvtV8/q+Db3UVsBMgOYx99Ov87SDDIoBdG0GqgW2Q3dD+3+EW6Xp+h2VUC00uRm8Fx2SaRYUJUncbQdouRi3DzWah6LX+1QLcOg+a/Kckz8YgTwya+yIzoOhAl/6Vej7V6s7IyvBS+Tj3Xc4Z5m59OdGEpDnM4Z3MShaHKvlwhPCq/gbqX+v38uVHvffV+acSscn/el5BYoPDALtJ5ehnlZECSS5lEwWnU8pmIZpC6kbeZwasAMkGcj9km4maxSs0oqZCJCT1Mhxep4tmHIobrw973Nn1tQ7Arem0Wo5SU0sQeZMhbjZjg2J6ODYdKTbeTqa40k44rOkJNnV6p7Q4R9fbCYDge8JWmmPVdJTlsyFNbUHSW08OX3zE9xlDGNYTna5Dl/5smyYlGYtwPQjkpbPzzTOCrqihCXRQEAAUH5AoPHIUfXcCYd46n/dHtcTnJg9lSBiI4q3OQi85WXM1mQym3VitPXymyzKu4DH2wFSv4C1EqVqK+GZDGWo+2tEzqGs9bm3m4YwaR1T/m/b05VhdqPl4oZ/UgFeOFRK6vMqfA54t6UKnJYslU1geeU+dSLuZXj6KU78f6eh5tl1xuXqSZCtgeoJaSsFf7C39Fmcx8bx6kkQqOVzm/V4XVSi2kBZhWeGe8wrEtBFmPTN+Kdr63fzDex8YXVm913vW8VL9IB1WQeoJ26mnKjhFn0gDMt8vdenU01nJWMftjsLt5dJuusQlzR+/k4mw7GIa6ss/MMZhJPD8DOF0kUJXeAIQ9HqgscIuLcOBboWDJOTGgUaXOeb3W5uyeNsjokZ5BdTrUdrRuTU8tUQrq+jDdHfbqfiNP6kPNypZcwl22KKtnLcOlzCKyZxupnwwLuz/TKrupWGzMft1yBoR34eRYbQ9AfDnvPdWZJ+vWBJ13rm2v+c2E9dq2pzLzyPbs6Izqi3B2jMkWDxma2J6zYVIBjsoD0DssD/xM5TtlUi0ln21V3gCylKTgcqCTIb11DfqZZ24ZEBbD9eRwfC+MJeYST+QzCbeVVOmIwCqL0NeWknwAS95xYt6RZH5mimC2VYb5Fudr2cfKn/MoX/PoSDyQGB20uH6FWZJcMkk0lgXngF8GMrdXT8Xaavlk+wSlkTaO2FxFYzvQ1+FR9d14Gafacjgcj4rdIu0dD3hW2aQ2zBi9ImXHCLjj4WJ/FEPRmEbbbRLVAzM2EyXyVaW4THR11Lg7nxzUmxQ/JUWzTS/9Xb7sGZI+jB2NGvbnwZRpcxWU2ue+Xz908nV9obWitiUEtng+E3q8IkMQyty8ebIKmj7ul/moldsDcNwZ9LjwOP7MSUN9Yebz2XCt+fVmpZmNRj55WRDsOJrkWi9npdmszlj8or9AUexu045TxJPAordG0sp0ctVyI+/I0elxwUbMyvFxsaaZFbXVaWXGbkzdd9qROSDmRAaktj1SeufdxbhE/sR8G6Cfp8Nd+DY/iMfJ8mH03EiHhrsVmsntWC4gRazKeCsYyd8JTClxrYZ9Ve1GJQtCCQyS2mt5qyQv3RRTHNfq4pXxdpaYFpColkABhmoznCyRLEnJJCCbHMdyJHdjOW8oPkEUwsB2S18lj3vbUn8HaPpdBAMLxo0sTM09RLW/WCzzVVWCOV6/YYDgIsQ8ETRpWZJJviNzzWanRfMYLCOyTaHd4SlWaNeq4zCZBJMY2AmMP3JE7gNHnEPTjVxYEslymyK8TlGCU3IysjTxqKfMeApgiqlmXLK9Ls12mgRy/ciDJWDCD63Ug0/RPromiEBvn3TDMNFVOpcW/yiacN3034b4+btbNrCO5ZYKqIyHh7ii8AvCy96C+TZoin4M+mYepJZbLnSc2iR2zTckH7/63TFlq9zbZTQC2vQG+q77s7tlRgTtH+q/X//zJvGXgIjPubw7sjL3we2N9WMii6nO660bTsbT6SnNsvRa/3ZJ42JsnqAIsk1o0EwxFzsvwiMMiLsJ4kc0+I76k+e7/CO+NNkHWoJHiY+7tXo9/uANpEFUvoEU/GsrfvrA+uAS5y2BRfKVTPDwU6lE/NfXlNk1Sz0snuKPPIx/B/6VrQc/OM5ydrqBU55K0nv+pinMEJt18fwM40fjXxn4yvlH4T3JdywJ7qZdmsDvv6mWg/GlZphmmAaJItaugsdhfcWZnCPY/a30h5kr7Xx/RxTo23fERh1peGz6Ru2u6/5/5YZ7bRcT4lvIvWJ5qRX4SYydB87DcngH+Od+AADvAoblOtKn/dC+J/BDJK9/iP+UPOT08+/h9X8=</con:value></con:property><con:property><con:name>RetiredAccountUserAssertion</con:name><con:value>SAML2 assertion=nVdbc6rKEn73V1iuR8tw9YKVpGoQUFQ0iHh72YUwXJSbDAj668+g0WWyknWyd5WlTtPT/XVP0/3NMzICn+4ChGCSelFYlYWX2j8dumnBLUc1tk3KbLAkCRvblk03LJKibdIyOq0WV6vKCGVQDlFqhOlLjSYppkF28GdOtrpMu8u2npgms6lVFzBB2DRWeSJr1SLwQ9S9uH2pZUnYjQzkoW5oBBB1U7OrAWXcxZpd44ap9vp8RXlxmLy6aRp3CcJ8sqAJfd98MqOAeCY+6DxbqKt5TmikWQLffVropfa+N8/zp5x5ihKHoEmSJEiOwDoW8pxftdfKbTO05NCOruueEUahZxq+dzZKUApM3ciqAt+JEi91g29MUwRFlqYbsDAbJsWGv2rEbwcXdD+09AFkgowGcg3qZmwGbZjA0IRVfSa/1H797ASve+eJESI7SgL0af3vIMHwCP0ohlYD3SK7ofu5xS/S9foMza4cmn6GvCOclGUSGyZE1bcE2l4x9hAuPgtVL8dfLdCtwqD5b47kmXjEiWETX2RG8ByI0v9yXo9ndbWyMPwMvq77zAkuGIWWiZA+9uPNCh2kqGeIlv5ygfCofAV1P+r39edCvdfV+6b1qRgsV4ne4erkvK2rm4DThvm03zzw0sLrT8PQVwctbXIK8+mcUjrhKQn7IVyEfF7nJGHviv2mlLBtTkd2JWG37OwkTxxWoUCSSowjLZcqvVDds5zXvfU2FN18JivhMR2JwzqbESGoB6SGzDOXuLMFWOizIa9OlbZBVVKNsAd1JO3YzUrTh/65E738jukxhjKuETxdgiz/r5okJxipcV/0yk5h49czha+KLPfqQq8HYM8BucwDR+bHZzDhnf3B3Xt9Lid5oOoSEMBJmYFccNbCQlVHYm4tFv5mIUsSr8zYfADWQgU/EMRiIWxWQ9JYbuI1LZEbjeet1SzaMsPYGuzzgWtOlLmST+bySdmJxWQuksuLzCnw+qzsFGo615nKcsdzykzMhfziURBzd7JZzuK1zuXmWVQVwPYBpYs9VxnMgwVlMjPX3IljBewvct5VeouFUohz8FbhnckCxzbvSZvYDKx4G/jug/EBNj63+ovTtu9nm7O4U3piv6cd+pq8ZQRVHILZWt8uF3tjKR0r5mACtjePXtMzVlHubDq5oK6Ho2gju0dzAlSR51WA00UCRe4PQdTngcICrzj3dnwr6llSTgxpVKlzfr+1OnmHFTL6pG9QnQ61Hi9bb4eWIIb1zSjb7lzFXUnT+kizjjqXcuc1OtaPLcOjzCK21ZU4SEeFPVC1yvZNKFbmoG45Q8I/c1KitIcgOZ9cX3Fm6bI1RaetZ9tLfjVl/bbtK8wstn21PqH6PFL3CdniIUMT69NxlFaAo/AA9Hf6jlcVvlMm1ZJzda3wBpDENAPnHZ2O6MVhODj65poBUTFaTnf794OxhFzkiVwVcVmJlY4ArPIQBpouSjug846T8I4o8aopAHUtj/I1zpc+wMqf8yhd8uiIPBCZDWhxgwqjk1w6TTWWBaeQ10OJc5VDsbRaAdk+QHGsTWI2V9DEDjfLaK8EXqInmaaPRpNxsZ1n/f0O9yqb1EZHZlMRj/sYeJPR3N0LkWC8xet1GtdDMzFTOQ4UuThPN2jX8bYBOaw3Kf6NFMw2rQfbXO8b4maUOBo1GszCN6bNVVBmnwZBfdfJl/W51orbVi+0hdOJ2CQLMgKRxM2aB6ug6b2r5+NWbg/BfmvQk8Ln+BMnjjZzM5+po6UW1JuV5nE8DsjznGAn8TTX+jkrqmqdsfj5YI7ixFtnHadIpqFFr420ddyQi5YX+3uOzvZzNmYWToAP6+1oxW3lraKyK3MTOO3YHBIz4gjEtj2W+6ft2TjHwdS8NtDP3eEuvPYP4rGzfGg9N9Kh4WqFZnpblgNIFqoSngpG+ncCU0o8q2FfVLtxyYJQCsO09lruKslLN8MUx7O6eGRc1yLTAiLdFgSh2WmyJCWS+EsiAdnkOJYjmRvLuaL4BLEXhbZX+ip53HVK/R2gGXQRDC2YNI5RZroQ1f5iscxXVQ5nePxGIYLzCPNESuRYQRIAJfAdCbDNHtnr9dqMwLIS2WtyVK11idJpOE2AncLkI0fkPnDEGTS92IMlkSynKcLjFKU4JQfjmKU+9XQ0nkKYYaqZlGyvS7OdJoG8IPZhCZgIIivz4VPsxpcEEej6SzcME12kM3H+j6z1LpP+2xA/P7tlA+tYXqmAynh4iE8UfkF4mVsw3wZN0Y9B38yDzPLKgY5TmyaeeUXy8dHviilL5V4u4zHQ3m6g77o/21tmpKf9Q/337X/uJP4SEPE5l3dH1tF7cHtj/ZjIYqrzequGg/F0eMqOx+xy/u2SxiXYPEERZJvQoJlhLnaaR3sYEncTxI9o8B31J893+Ud8WeqGWopbSYCrtXpZ/uAOpEFU3oFk/LYVP71gfXCJ85bCIv1K1vPxValE/NfblNk1Sz0sfsM/eZRYv4/rC1sPfnCcZe/0QqdclaT39E1RmBE26+H+GSWPxr8y8JXzj8J7ku9YUlxN2yyF3z+plo3xpWaYZpSFqSzULoLHZn3BmZ5i2P2t9IeZC+18v0cU6Nt7xEoZa7htBkbtruv9f+WGdykXE+JdyLtgeakV+EqMnYfOw3B4B/j1fGCbf5sPHyN5/UP8p+Qhp5/fh9f/AQ==</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>602143e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>64bf98a6-b023-46bc-876f-ec4728111222</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="339faab1-f318-4e51-82c3-011557180fa8"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="63acee57-8b41-45e9-8358-2b9c3e4dda98"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="779f190e-2fd9-40b1-8add-3d6bd0df55ca"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("Node_Id");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",nodeId);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="109dcce1-97eb-4c71-a531-f1955952a888"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{encodedSurvivingAccountID}/Merge/Undo" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false" id="42f4f8e5-fe2c-416d-8671-eca0a7bac04a" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_1}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="encodedSurvivingAccountID" value="${#Project#SurvivingAccID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="5a5582a3-d6fe-44ac-b7c5-35f0588ed5bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="fd58cda4-c8c3-4411-b217-9eb9b8b205e3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:E36AC681541124FEE0401F0A21996A7B</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE36AC681541124FEE0401F0A21996A7B</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeUndo</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>602143e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>779f190e-2fd9-40b1-8add-3d6bd0df55ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>109dcce1-97eb-4c71-a531-f1955952a888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API_If-Modified-Since" searchProperties="true" id="457a36a2-aa4c-4c51-b7b0-d7081d634203"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="681fa4fe-f8ee-484c-a45d-09e6da0ccec9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="adaa20c5-9d72-4505-99d2-b28791134ff8"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="b39ffb0d-51f4-46e1-a714-977d08a3f634"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="If-Modified-Since" value="${#Project#Account_Get_LastModified}"/>
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#Project#Account_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3ea6ec1a-e053-4426-9731-b171162369f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String cacheControl = null;
String etag = null;
String expires = null;
String lastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Cache-Control": 
			cacheControl = value[0]; 
			break;
		case "ETag": 
			etag = value[0]; 
			break;
		case "Expires": 
			expires = value[0]; 
			break;
		case "Last-Modified": 
			lastModified = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("httpCacheControl", cacheControl);
tC.setPropertyValue("httpEtag", etag);
tC.setPropertyValue("httpExpires", expires);
tC.setPropertyValue("httpLastModified", lastModified);

tP.setPropertyValue("Account_Get_LastModified", lastModified);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("Account_Get_ETagPrior", tP.getPropertyValue('Account_Get_ETag'));
	tP.setPropertyValue("Account_Get_ETag", etag);

	log.info "Account_Get_ETag = "+tP.getPropertyValue('Account_Get_ETag')+ ", Account_Get_ETagPrior = "+tP.getPropertyValue('Account_Get_ETagPrior');

	assert tP.getPropertyValue('Account_Get_ETag') != tP.getPropertyValue('Account_Get_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	
	tP.setPropertyValue("Account_Get_ETagPrior", tP.getPropertyValue('Account_Get_ETag'));
	tP.setPropertyValue("Account_Get_ETag", etag);

	log.info "Account_Get_ETag = "+tP.getPropertyValue('Account_Get_ETag')+ ", Account_Get_ETagPrior = "+tP.getPropertyValue('Account_Get_ETagPrior');

	assert tP.getPropertyValue('Account_Get_ETag') == tP.getPropertyValue('Account_Get_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8ba8a1f-2f44-4d71-ba35-a68a80abf262"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def streamcount = context.expand( '${#Project#StreamCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;

     case "304_Not_Modified":
	     expectHTTPstatus = "HTTP/1.1 304 Not Modified";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		XMLbodynull        = true;
     break;
     
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == streamcount;
		def totalStream = 12;
		def AvailableStreams = totalStream.toInteger() - streamcount.toInteger();
		assert myXML.AvailableStreams == AvailableStreams;
		assert myXML.UserList.size() > 0;
		assert myXML.UserList.UserReference.size().toString() == usercount;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:EDD15C81A65F754AE0401F0A05990381" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>Ashwin_Acc_Create_20131218_102154</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:EDD15C81A667754AE0401F0A05990381</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:EDD15C01E2B02213E0401F0A21990509</UserReference>
   </UserList>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-18T15:21:51.402Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T15:21:48.508Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1136</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserCount</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - AccountGet - AccountUpdate_If_Un Modified Since_AccountGet-If-modified-Since- 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E23D997E5D8EF2E2E0401F0A21994DAE"</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>httpCacheControl</con:name><con:value>max-age=86400</con:value></con:property><con:property><con:name>httpEtag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EDD15C81A69D754AE0401F0A05990381:44153C64"</con:value></con:property><con:property><con:name>httpExpires</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Thu, 19 Dec 2013 15:21:55 GMT</con:value></con:property><con:property><con:name>httpLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Wed, 18 Dec 2013 15:21:55 GMT</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE38366F552D01218E0401F0A059951A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5c6ae69f-3e09-4d51-a2a3-4c85c35795d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Get_API_If-Modified_Since" searchProperties="true" id="2096921f-26c4-4982-9cd3-9441efddb0c1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="770a42dd-a6f5-4cdc-a146-c6db7b1e3abf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="38afb690-aa5e-475e-8ecc-0216cc0aaec9"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Get");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get" id="92ad5c54-e3cd-436c-8596-dd0881b0857a"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="0d647a5c-fada-4b21-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="If-Modified-Since" value="${#Project#User_Get_LastModified}"/>
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#Project#User_Get_ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#TestCase#NodeUserId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="db9de055-a3ee-4c69-b704-cc91331d2eff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

	tP.setPropertyValue("User_Get_ETagPrior", tP.getPropertyValue('User_Get_ETag'));
	tP.setPropertyValue("User_Get_ETag", etag);

	log.info "User_Get_ETag = "+tP.getPropertyValue('User_Get_ETag')+ ", User_Get_EtagPrior = "+tP.getPropertyValue('User_Get_ETagPrior');

	assert tP.getPropertyValue('User_Get_ETag') != tP.getPropertyValue('User_Get_ETagPrior')
	}

else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
	

	tP.setPropertyValue("User_Get_ETagPrior", tP.getPropertyValue('User_Get_ETag'));
	tP.setPropertyValue("User_Get_ETag", etag);

	log.info "User_Get_ETag = "+tP.getPropertyValue('User_Get_ETag')+ ", User_Get_EtagPrior = "+tP.getPropertyValue('User_Get_ETagPrior');

	assert tP.getPropertyValue('User_Get_ETag') == tP.getPropertyValue('User_Get_ETagPrior')
} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
	log.info "Not Validating the Etag.....";
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="49efdd6e-d86b-47b3-95a6-a859c6509119"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;

 	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;

      case "304_Not_Modified":
	     expectHTTPstatus = "HTTP/1.1 304 Not Modified";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		XMLbodynull        = true;
     break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Verify the response headers and body11" disabled="true" id="16889dbb-b287-412d-8fbd-0d3a699b9fe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;

 	case "UNAUTHORIZED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
     break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

// NOt Validating fo Cache Response - specific  to this project
/*
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 304 Not Modified</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>304_Not_Modified</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountUpdate_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn:dece:userid:org:dece:F92C5583EE12F282E0401F0A05997A0E</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>Match</con:value></con:property><con:property><con:name>SecondUser</con:name><con:value>Yes</con:value></con:property><con:property><con:name>Etag_Update_Delete</con:name><con:value>Yes</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e29cce0-d04a-4367-b690-165597caf13c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c112d7e9-edec-43e6-a2ed-979383edf9f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Update_API_If-UnModified-Since" searchProperties="true" id="8f51f6c3-3b9c-4020-8775-651c05f1fd32"><con:settings/><con:testStep type="groovy" name="UserName_Gen" id="1ae26fb8-83f3-4092-8cf1-c99360f798da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();


def today= "User_create_" + new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue ("UserName", today);

tC.setPropertyValue ("Password", "Password1");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="f257e412-4794-40e4-8fbb-7e6104aca22e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="7cd2a3a6-f827-4d67-8bfb-455ba2291447"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="963088a2-fae7-4a8f-90db-5f5535e13d77"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate_PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="7911d39c-d7fa-4537-abd8-4fa853f221cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Unmodified-Since" value="${#Project#User_Get_LastModified}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" UserID="urn:dece:userid:org:dece:${#Project#NODEUSERIDFULL}" xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>${#TestCase#UserName}</GivenName>
      <SurName>${#TestCase#UserName}</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail>
         <Value>${#Project#PrimaryEmail}</Value>
         <ConfirmationEndpoint>Coordinator-Confirmed</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>${#Project#AlternateEmail}</Value>
      </AlternateEmail>
      <TelephoneNumber>
         <Value>+1.7033453434</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7033453434</Value>
      </MobileTelephoneNumber>      
   </ContactInfo>
   <Languages>
      <Language primary="true">en-gb</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">${#Project#ADULT_DOB_XML}</DateOfBirth>
   <Credentials>
      <Username>${#TestCase#UserName}</Username>
       <Password>${#TestCase#Password}</Password> 
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="cdc27196-ee56-446e-bf38-e490ede48c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body11" id="d408f5bb-1b5d-4d11-8974-4cc0e4effae7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull     = true;
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - UserUpdate_If_Un Modified Since_UserGet-If-modified-Since- 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>UserName</con:name><con:value>User_create_20140512_08135</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>Raju</con:value></con:property><con:property><con:name>SurName</con:name><con:value>Alluri</con:value></con:property><con:property><con:name>Etag</con:name><con:value>"E38253748CACB2A7E0401F0A21990BE2"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9502db6b-c711-4d04-9372-64700bfdfead</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete_API_If-UnModified-Since" searchProperties="true" id="edd6f9fd-e645-4f63-a9cc-c3793b8528eb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="36e2c75f-2ea3-455c-9927-01efa4ea5dd9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="2c0ebf3c-13e9-4f6e-81c0-2cfcab632591"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Delete" id="c6258112-cf7a-4431-9469-83360838b4e4"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="User_Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Delete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Unmodified-Since" value="${#Project#User_Get_LastModified}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="UserID" value="${#TestCase#NODEUSERID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="7b2351de-8a4c-4c4b-8347-620119ef5563"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Delete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="a81df3e9-d0f9-4113-80dc-0b124d36baec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		//errorReason = "The supplied UserID is invalid.";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	//errorReason = "The supplied UserID was not found.";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		//errorReason = "The user has already been removed.";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

	case "LAST_FULL_USER":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The last remaining full-access user in an account cannot be removed.";
			errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
	break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		//errorReason = "Requestor privilege is not sufficient to delete full access users in the account";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		//errorReason = "User cannot be deleted as he is CLG to other users in the account";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";
		//errorReason = "The requesting member cannot delete the member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

		tP.setPropertyValue("fileName",fileName);
		def testCaseName = testRunner.testCase.name;

		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91155</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - UserDelete_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:F92C5580FAE35D97E0401F0A0799216F</con:value></con:property><con:property><con:name>Etag</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQjx0M4Bsw1RmO1l6q9kVt6+2XTgxR0wNBSVDsrz8JFqrW9nrujDNOls3usy95di8ZDAPTcRnDMScRVbx2Q32tGXbZtsyKVqtbda1im4ZmG6av4Vp1gvwaQlMLq4rHWII9yjikvKGaulHR9KpmmCPDdIyyY+glvVp+UZUnHDNhWqiUdFVJw4AyJ3PbUJOYOhFkhDkUhpg5HDlDt99zhKYDc0xq83KLMnMYN+ecLxwAUMnHCAcBKqEoBJdgT+fSZ86QzCjkSYw/fPqsoX7cXa/XpXW5FMUzYOq6DnQbCB2fkdm52jzLL2Pfo9Noe25BGlGCYEDeoQTVx3we+YobzKKY8Hn4jWkDGLo0reEUacio0HMVfDrI0J1oaQ9kzKDG5tDIjQ3wFMeYIqw8DryGen5aBbd3RzGkbBrFITs4/x0kTFc4iBbY11geWY7udItH0tW8xMjxKAoSRlb4VrbJAiLMlPsYT0naI0w0n8+UrPxKysSP5F2G0d+U5RLsYhXQwZHstMkMM/5/arZbr62VJxgkuNl+WPSt5TWdQDD5B85qllerx6Pp1a3NGhmEXeUtqKLcH+fDZi166+PS9M54vLilT5vN8G1Zv54MZ23/ZfQGqG8vfoE3eguqF731o/s4WKL74SitMVQbANercm90f9FzNx6Py57V8iutf8+SaPye3nar5bcbA3S99cUz9qc3/dbk4mYcjG8212E6mI37m/VqPOlV3vnkufvQtq2X9cMsHARtt4sm8fi5t0YmTs+Wz5Py6pnNDNQ11p1+9/qKNT5j2o1hX5hTwjCZvGHE86NsD6+tdES9IP+ZXqSE+No0U3UWkqMYx5SrTXlLUouTCAIiviOKuT13bLNVrVp6x70qV9t2/Uqv6EZHd/W6LR5YrZNz0BbFAcRWRKdE+pIsu+2fnwGi0GGY+jjWVlGC5pipP1hsQw4Vjw7E44gow6NIsHjFN/XAqFjLBUmC8ryS+uy3Xa+ZqnIb8Tt6F7tTjuN95q7uMfcAI7IgWNK77G8mGpxxkYolXCU8MEorWKI4EQMglhzsmBWrChgJFwGWQEEY+UmAS4v5IksMYNt/U4OIZdLB1Sh7d9+Gdfgtz4DQ8YlUYDKWX1hUER8ZQXoeyPcBW7sB5+bdxCfyeYl08pigLZL9T59dItujaBER0Wtr+GrkuAv1k69/vQl+AAUO81E48ldkx20+S8V4EOTRzKu5hKVlKVmtkqx+dUmMsTAPBD8aYIhRIthtM4p+YwoKE+Ck4VKgPvBcyPfxJXxOhxxyHIpuU7LjCZvFEDO5WXjilaSnri17LkXeOE75MVkrEAuIRPzjjoIcJPWE+F78raPY/yzXEVs7fkScYp3ghM7kSY6RzTdNgSJhlgjei+Jd48cMHHO+LyySXGDhopsmCcfff1EkoTVUiFCUUO611UywS7IZTr5ZYOdT6YuZjMg/JnPKvp3M435vKOguhGqhS/5bWSNZuyCxlwr9DEtDTcWiKZzT2Q6pfwA8wuv1Tqtc1y3bLXi9att117CKBO5F0vwi/irZyenhe2j+AQ==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0bf82b90-98b1-4f22-b5f2-fee31bde8abe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>437753d1-2ec7-450f-9e67-a3f918bb35b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1e5408f-2815-47d2-a35a-ce700b37f9a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API_If-UnModified-Since" searchProperties="true" id="a0290236-fe92-400b-9cee-24e2a3878ca3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="218dc238-baf3-46f2-95a7-8c5d18c2e9ea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="69ffceed-20fe-4ff7-a7f4-a3997d2eaaf2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="d36a32a9-64db-4d97-b028-c9f9f8215af5"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Unmodified-Since" value="${#Project#Account_Get_LastModified}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8788cb1f-624d-442e-9fdd-2cd6d6204a64"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d7e94c14-462f-4449-b705-652ca969e12d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
//
////Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90259</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountDelete_If_Un Modified Since_UserGet-If-modified-Since- 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f2f9735c-4db0-436a-9efa-4ef2b80a65d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Update_API_If-UnModified-Since" searchProperties="true" id="b638faa2-311b-424f-a950-4a2b891b1017"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="904f2e62-1157-4b42-8a91-f75d7e77762c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="e8af84c9-7851-4796-ab15-f3119eca321c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName_Gen" id="1808264f-dbf9-44b9-a0a8-ab7eae4426f7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>0174dbe8-e670-4578-8b66-e1ed5f587123</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:returnProperties><con:entry>tName</con:entry><con:entry>sName</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="AccountUpdate" id="7c6d5b1b-1e57-4e19-a0c1-fa373e05c763"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountUpdate" id="758d0cd6-9d3d-42d8-a6b1-a3d503080e09" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Unmodified-Since" value="${#Project#Account_Get_LastModified}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <DisplayName>${#Project#DisplayName_New}</DisplayName> 
  <Country>${#TestCase#Country}</Country>
  ${#TestCase#ResourceStatus}
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="4ad60afd-6d33-484b-854e-1053d3e81451"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="5c7c4b5c-312b-43c2-afa5-c6f2b232113d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def Node_Id        = tC.getPropertyValue("Node_Id");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The country code is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "The member's user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACC_ID_INVALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountIDNotValid";
		errorReason = "The account ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIDNotValid";
	break;

	case "CANNOT_UPDATE_COUNTRY":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CountryCannotBeChangedOnceSet";
		errorReason = "The country cannot be changed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;


     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;	

     case "STS_UPDT_NOT_ALLWD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;


	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
	/*else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
	
	}*/
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>90174</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountUpdate_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0481e2d-e8d8-4999-9afc-b864b3924d0f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>12e16ac3-d4f1-4b81-b219-bfad2b2e9cde</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Resource_Property_Query_POST" searchProperties="true" id="d77f7c76-4ec1-4eab-96a7-88a163df0155"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="12ed4b04-a74c-492f-a4e9-18b5d5b67885"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="75488257-2c63-4ef4-967a-b6b28c84b6f6"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("Resource_Property_Query_POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="Resource_Property_Query_POST" id="b29cc233-bf88-4976-8b82-004b72673413"><con:settings/><con:config service="Resource_Property_Query" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/${#Project#URL}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Resource_Property_Query_POST" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem" id="94958a11-30e1-4d61-b9f8-97616f2953a7" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#xmlRequestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Details" id="c501997c-adba-4efa-89e3-ff8978c1195c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Resource_Property_Query_POST');
def expXML = tStep.httpRequest.response.getResponseContent();
log.info "Extracting Response Details"

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

log.info "End of Extracting Response Details"


</script></con:config></con:testStep><con:testStep type="groovy" name="Validating_Response_Details" id="cc28854b-d048-40ed-a83f-6cafcbe7287f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "Validating Response Details"

def expectHTTPstatus = context.expand( '${#TestCase#expectedHTTPstatus}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

log.info "expectedHTTPstatus" + expectHTTPstatus;

switch (expectHTTPstatus) {
	case "FOUND":
		//expectHTTPstatus   = "HTTP/1.1 302 Found";
		expectHTTPstatus   =  "HTTP/1.1 302 Moved Temporarily"

	break;

	case "MULTIPLE_CHOICES":
	     expectHTTPstatus   = "HTTP/1.1 300 Multiple Choices";
	break;

	case "INVALID_NODE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	break;

	case "NOT_FOUND":
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
	break;
	
	case "FORBIDDEN":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	break;

	case "INVALID_METHOD":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	break;
	
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;
	
	case "INVALID_EXPRESSION":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	break;
	case "EMAIL_SHORT":
		//expectHTTPstatus   = "The primary email address is too short.";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	break;
	
		
}


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

if (context.expand( '${#TestCase#expectedHTTPstatus}') == "SUCCESS" ) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	assert myXML.size() == 1;
		  assert myXML.UserReference.size().toString() == usercount;
		
		  for(def i = 0;i&lt;myXML.UserReference.size();i++)
		   {
		     assert myXML.UserReference[i].text().matches("urn:dece:userid:org:dece:[0-9,A-F]*");
		     this.log.info "Valid User Reference :  " + myXML.UserReference[i].text();
		   }
}

log.info "End of Validating Response Details"

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<UserList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <UserReference>urn:dece:userid:org:dece:E500E56B5BFF3E21E0401F0A21995611</UserReference>
   <UserReference>urn:dece:userid:org:dece:E500E522353A94A3E0401F0A059924E7</UserReference>
   <UserReference>urn:dece:userid:org:dece:E500DC884F76F65EE0401F0A05991414</UserReference>
   <UserReference>urn:dece:userid:org:dece:E500DC88504BF65EE0401F0A05991414</UserReference>
</UserList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">657</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectedHTTPstatus</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\dececs_concat.pem</con:value></con:property><con:property><con:name>UserCount</con:name><con:value>4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5494c3c1-dbe6-46fc-920c-c50e51cdcbf0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c14c26f-1596-43b7-a42a-7d5fbce28027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2586a2bd-66ed-4054-a657-8e349d87e6c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreatePost" searchProperties="true" id="2a27c2a9-dbbb-43d2-bac0-8efee4136bab"><con:settings/><con:testStep type="groovy" name="Set Pem" id="9e15be4a-c786-4f7f-8b7d-affd5c64f174"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" id="622a3310-9a66-433b-9359-6411b122157b"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePOST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#CoordinatorSchema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.21/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#TestCase#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenID}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="549fbb4e-e240-4e4a-8a2c-5b59b7e09562"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="c8758334-767e-4321-9c88-985a01ac2b0b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = true;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/RightsToken/DiscreteMediaRight/urn:dece:discretemediatokenid:org:dece:[0-9,A-F]*");
		
	def url1 = URLDecoder.decode(urlStr,"UTF-8");
	log.info url1;

	int lastSlash = url1.lastIndexOf('/');
	
	//int lastColon = url1.lastIndexOf(':');
	
	dmrtid     = url1.substring(lastSlash + 1);
	log.info dmrtid;
	     
	tC.setPropertyValue("DiscreteMediaTokenOid",dmrtid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Get DiscreteMediaTokenOid" id="3859d698-1100-4227-a528-9bbf8b216216"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("TSuiteName")).getTestCaseByName(testCase.getPropertyValue("TCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", URLEncoder.encode(testCase.getPropertyValue("DiscreteMediaTokenOid"), "UTF-8"));
</script></con:config></con:testStep><con:properties><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>E25657DD42E09F9EE0401F0A21992E81</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12CDFD6B652A3E0401F0A07991D20</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>State</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-11-04T02:30:57</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AF8F12CDFD6B652A3E0401F0A07991D20</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn:dece:userid:org:dece:F8F12CDD0B688AEFE0401F0A05995484</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>DECECacheTestScenario - UserGet - DiscreteMediaRightLeaseCreate- Verify with old Etag - 304 Not Modified</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F92C565AF70E6E0EE0401F0A05997A10/RightsToken/urn:dece:rightstokenid:org:dece:F8F12CDFD6B652A3E0401F0A07991D20/DiscreteMediaRight/urn:dece:discretemediatokenid:org:dece:F92C565AF7206E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD1A38822C951A3E0401F0A21992197</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5256796d-b7a1-4c5c-8af7-15643fb8022a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8758334-767e-4321-9c88-985a01ac2b0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>549fbb4e-e240-4e4a-8a2c-5b59b7e09562</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightGet" searchProperties="true" id="47d30cb3-02a4-4c12-8dd4-9db0ae6892a2"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6a9fb215-a204-4218-9fe0-2126962d389e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightGet" id="429811b7-6b5f-42d3-a71b-73001339e6cc"><con:settings/><con:config service="DiscreteMediaRightGet" resourcePath="/rest/1/21/Account/{NodeAccountId}/RightsToken/{RightsTokenID}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightGet" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="f864cc2e-c6ae-47b5-83e6-4a3e11179326"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DiscreteMediaRightGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag": 
			etag = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tP.setPropertyValue("DMR_Get_ETag", etag);

</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P2_TestCases_mi</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00003_DiscreteMediaRightCreate_METH_Invocation_with_method_GET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>E216EBB96E6E7A42E0401F0A2199687E</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD191A75E10E511E0401F0A2199790A</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-11-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4D55E615AF19457E0401F0A21991EBB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD1B569357FBBBDE0401F0A05994F7B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AEDD191A75E10E511E0401F0A2199790A</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken State="urn:dece:type:state:discretemediaright:available" DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:EDD1B569357FBBBDE0401F0A05994F7B" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:EDD191A75E10E511E0401F0A2199790A</RightsTokenID>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T15:29:25.304Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Active</Description>
      </Current>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1328</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a56bbf96-ba77-4d11-8760-e3ca13bb245f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a60f6f7a-5254-411b-af65-8bcba000f8b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a9fb215-a204-4218-9fe0-2126962d389e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDelete" searchProperties="true" id="4217b631-a933-4282-a3f3-902336db6781"><con:settings/><con:testStep type="groovy" name="Set Pem" id="8dce2d21-f797-4a26-a657-7029bc085960"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDelete" id="fc410e45-1220-4a0a-b23e-6ef3f960da8c"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenID}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDelete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="${#Project#DMR_Get_ETag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD1B569357FBBBDE0401F0A05994F7B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD191A75E10E511E0401F0A2199790A</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AEDD191A75E10E511E0401F0A2199790A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dce2d21-f797-4a26-a657-7029bc085960</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>429811b7-6b5f-42d3-a71b-73001339e6cc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightLeaseCreatePost" searchProperties="true" id="5c78c14f-7626-4052-ac9d-9cc5b26b5030"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="b2491014-7548-4c7c-b91c-5dbeb2878263"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="1d6bde7f-9b6d-4d54-a8b9-9aaf37f57334"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightLeaseCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightLeaseCreatePost" id="3145a2d8-8d13-411d-a4ed-7b41ef1f702d"><con:settings/><con:config service="DiscreteMediaRightLeaseCreate" resourcePath="/rest/1/21/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenId}/{DiscreteMediaProfile}/Lease" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightLeaseCreatePost" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ContentProfile" value="${#Project#ContentProfile_decoded}"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#RightsTokenID}"/>
  <con:entry key="DiscreteMediaProfile" value="${#Project#DiscreteMediaProfile_decoded}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="d25c2e87-c36f-40fa-98f5-4b8b77cfd518"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DiscreteMediaRightLeaseCreatePost');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightLeaseCreate" disabled="true" id="9ea3cd72-41d2-45ef-b514-3460c974b0ec"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	responseStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.responseHeaders["#status#"][0]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connectionStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.responseHeaders["Connection"][0];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentTypeAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.responseHeaders["Content-Type"][0];	
}
catch(Throwable e)
{
	log.info e;
}

def host = testProject.getPropertyValue("HOST");
def port = testProject.getPropertyValue("PORT");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

def hostError = "qa.q.uvuu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

switch (errorResponse) 
{
	case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "application/xml;charset=UTF-8";
        connectionStatusExp = "close";
        break;
}

boolean iFailed = false;

try
{
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

assert iFailed == false;

/*if(resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

discreteMediaTokenId = myXML.@DiscreteMediaTokenID.text;

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);*/

log.info 'Woohoo!';
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="72302e20-116a-470a-a4ad-1f3ab5bf92a5"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="7574aed1-c20b-4210-b7f0-6ae87dfade04"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">End To End_P0_TestCases_mi</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00125_DiscreteMediaRightCreate_DMRCreate_DMRLeaseCreate_DMRLeaseRenew_DMRUpdate</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>E255E083B825932AE0401F0A059979FD</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1A38822BA51A3E0401F0A21992197</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD1A38822C951A3E0401F0A21992197</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AEDD1A38822BA51A3E0401F0A21992197</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DiscreteMediaRightExpireLimitReached">
      <Reason Language="en">The discrete media right has expired.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:EDD1AAFF85DA4AFAE0401F0A059924A1/RightsToken/urn:dece:rightstokenid:org:dece:EDD1A38822BA51A3E0401F0A21992197/urn:dece:type:mediaprofile:hd/DiscreteMediaRight/urn:dece:discretemediatokenid:org:dece:EDD1A38822C951A3E0401F0A21992197/urn:dece:type:discretemediaformat:bluray:packaged/Lease</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#DiscreteMediaRightExpireLimitReached</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>994</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>72502df2-6598-4afc-ad7c-a6a3e7357e7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6bde7f-9b6d-4d54-a8b9-9aaf37f57334</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d25c2e87-c36f-40fa-98f5-4b8b77cfd518</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUserMAC" searchProperties="true" id="46ba5278-12bb-477b-ac3b-4a5aa7a21949"><con:settings/><con:testStep type="groovy" name="Set pem" id="86ddb3a3-77d8-4250-9a8d-92ce40ad5425"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");


soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="4d4bafc1-05b2-485e-94a7-ced08cc34bf3"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded)

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded)

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" disabled="true" id="8185b867-8123-4b54-a8ed-7dbd75c5e83c"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>https://qa.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20111024/html</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-2151-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3ATermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" disabled="true" id="166ca6ff-8f53-4849-9ed0-4e2b1cef398d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#CoordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="3ce0f705-71c0-4b75-97ed-057ca94f8099"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    
<dece:Policy>       
<dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>       
<dece:Resource>${#TestCase#NODEACCOUNTIDDecoded}</dece:Resource>       
<dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>       
<!--<dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>       
<dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->         
<!--<dece:RequestingEntity>urn:dece:org:org:dece:o:pjgdevicetoken:testing</dece:RequestingEntity>-->       
<dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       
<dece:ResourceStatus>          
<dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">             
<dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       
</dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713111b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn%3Adece%3Auserid%3Aorg%3Adece%3A${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="b245a593-1c50-47c9-8212-97a177bd9fe7"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="b514ecd2-a692-4f2e-a29f-f47efce09d32"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#CoordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_Id}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AUserDataUsageConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - ManageAccountConsent- Verify with old Etag - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F92C565A5D6EDF58E0401F0A05997A0A</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F8F12D18246ED52DE0401F0A07991D24</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b21-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>721eff09-f96a-455f-b117-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token_Exchange" searchProperties="true" id="5a392365-8420-411a-b9e1-a26f40891ecc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ee0a835e-824a-40a2-97d6-2a283613b0ae" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="9bb5ab59-41b8-4be5-9de3-04892e347c5c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("TokenExchange");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="TokenExchange" id="1d8f7d53-c4b9-4f34-b0f8-498641cd4bcb"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{AssertionUUID}/?tokentype={tokentype}" methodName="Post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TokenExchange" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokentype" value="urn%3Adece%3Atype%3Atokentype%3Asaml2"/>
  <con:entry key="AssertionUUID" value="${#TestCase#AssertionUUID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="cc2a8249-03b2-429a-9f0a-2152396cc6d7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('TokenExchange');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

//if (contentLength[0].toInteger() > 0) {
//	rawResp = new ByteArrayOutputStream();
//    def rawResp = tStep.httpRequest.response.getRawResponseData();
//     strVal  = new String(rawResp);
//      log.info strVal[0];
//
//    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
//
//    	//XMLbody =  strVal.tokenize('\n').last();
//
//	String XMLbody  = strVal.substring(startAssert, strVal.size());
//     
//	tC.setPropertyValue("XMLbody", XMLbody);
//}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="474532ec-4099-4238-a15f-432b5dcf9ef6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//
////Content-Length
//if (contentLengthZero) {
//	assert tC.getPropertyValue("contentLength").toInteger() == 0;
//} else {
//	assert tC.getPropertyValue("contentLength").toInteger() > 0;
//}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set pem 1" id="49a35943-7ef8-4c40-97ff-b21c11b52175"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String Node_Id = testProject.getPropertyValue("Node_Id");
log.info "Node_Id:"+Node_Id;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("Node_Id",Node_Id);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS" id="217d9c69-6521-46de-a003-bca2b3dcaa9e"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="73fc0fc6-d965-4972-a7d4-c080d7bf9b4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="6bb83980-73f7-43c8-a020-a5aa720ed494"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML", "SAML2 Assertion="+ base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="016abdb6-1bee-4bca-99c5-8f1dda139564"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
 
def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");
 
if (expectErrType == "" || expectErrType == "SUCCESS") {
if (XMLbody.length() > 0) {
            def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

		   // Verify response sizes...
		   assert myXML.size() == 1;
		
		   /*
		   String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
		   String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
		   */
		   String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
		   String userId    = myXML."saml2:Subject"."saml2:NameID";
		   
		   this.log.info "accountId [$accountId]";
		   this.log.info "userId [$userId]";
		
		  // tC.setPropertyValue("",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
		   //tC.setPropertyValue("",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
		   tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(accountId, "UTF-8"));
		   tP.setPropertyValue("NODEUSERID",URLEncoder.encode(userId, "UTF-8"));
		   
		   this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
		   this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
		   
		} else {
            return false;
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Return AssertionUUID" id="f693c603-44d7-478f-bddf-f0d40c3d01d1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

log.info "callTC  " + callTC;
callTC.setPropertyValue("AssertionUUID",testCase.getPropertyValue("assertionUUID"));
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A21990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtU+o6EP7ur+jUj07pCy3QjjADIh5UfOHteP1yJ6YLRNu0NGlBf/1Jiq2A6PXcGWaYbDe7z+4+eZJThsLA8tqMQcJJRJV+t6n+azk148m2LK3RQDPNbhiu5lozV7N9H88sw8Q2qqlKn7EU+pRxRHlTFWZbMxzNtMam5YmfXa+YtfqjqkwhYSK0cKkYqrIOA8q8PG1TTRPqRYgR5lEUAvM49kbtwbUnPD1UYFJbpxuUecKkteA89nQdV3zAEAS4gqNQP9V3fE595o3InCKeJvCe02dN9X3varWqrKqVKJnrlmEYuuHqwsdnZH6sto6KzeD36SzarM8QjSjBKCBvSIIaAF9EvtIO5lFC+CL8IrSpm4YMrcEaa9i06bGqfyTI0f0w0g7IhCGNLZBZBBvCDBKgGJTJsN9Uj382wc3ecYIom0VJyPbWfwcJaAZBFIOvsaKyAt3PIx5oV+sUsNenOEgZyeBG0iRGGJhyl8CMrK8JE+TzmZKPX1kz8SMFywD/zVhO9W2sArp+oDtdMgfG/8/Mtue1iTJFQQqtO2c0epgMni4v9fj85faELNNpcB6j5fCfZg5h23kDqhz3+3qfrCW33jeNos6kGuDopLcwb8bstjHJTrIwuwJ22XPhFiWTsf1Sy37ddxuBnTXMy99uR2f3/C1ZAbkfroPphPG6P3q9ca6O/OkrXNG0XXeW4zir/n6os/UQ393wt9XjXa03HgxI9WR40e1dh4/dNak+LmoXC4PErmHF6XQVnnRGD8milt08d6ZHJ7+epvz5ujE00FvvAk2M83bzo6btGnaNhSSM0qdnwLxYSnr0u0pPzAvx7+VFWoivzXJXL5YaxThQrrbkLiktXioEiPieGOZm3XOtM6fmnNtutdfpGPa5YRtmz2gbjuvW26ZVaNAGxR7Es4jOiMwlVXbDn+8B4tBjQH1ItCxK8QKY+k3ELuJI6dOhOBwRZTCOhIqbL0sUgJ2tHN/JTI7duR/VDSOsV1XlJuK39DZpzzgku9rt7Gj3EDCJCUiBlwxnguKMi2YsUZbywKxkqEIhFVdAIlXYs+yGozMSxgFIqHoY+WkAlXgR563R2ebf0hBmuXV4Ps5P3peF7X8reiB8fCIdmKylA2KOcOASqhaFfCrYOXhZFeHbqU/kARMN5QnBGyS7nz54IglSkkRUVEAuPfcNO1H1/YLKRH5GcMn08ooWCi/Of6sYxxJVlpU0y9J8AHWpbYkIrwuJM/UR4FQI1Os4egGqlyH0H90PJeq9zKV9F1/KF3TEEYdQ0EXJlz94HIyAycdBXxB9/dOXx05K0TcOa37IdhaIN4RE/O0zA3tY+gnznfhbRYn/Ma4DsbbyiDrFi4ATOpcreRO8fkEKHImwREhXlGwHPxTgUPJdY9nkEgsXbHpKOXz9RZGa1FQRxlFKeb+r5oZtncxx8tcYvA+nT2FyLX6/XNfsy8v1YXA9EooVIrX0Jf/trJGcLhhUeYfnWJrqWrwVRXI639Lld4CfpNlpGL12u+F03XopzXXXtcxar2zgTiWtT+bPlq2e7p+H1h8=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_2560b422-88af-4809-92f9-4ddcf201c4a6</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2560b422-88af-4809-92f9-4ddcf201c4a6</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A21990CC5</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value/></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A21990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20111110_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>User_create_20130822_214039</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A21990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2917</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_2560b422-88af-4809-92f9-4ddcf201c4a6</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_2560b422-88af-4809-92f9-4ddcf201c4a6" IssueInstant="2014-05-12T12:12:47.167Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_2560b422-88af-4809-92f9-4ddcf201c4a6">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>P5SSXUMbJJ/pEkO+iquVlEpaqRY=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
SoBU3lco+Fh1NTsO8Uv+vmvKesJF9eOarUT4k6vHQD8l4v81JW9B/sQtzrweiQRxlVUst7dSyN5K
dVyeKnuA75qTpv3WX7sxRcPNtzwZP6FTMMi3+RGDFLmZDxi3Zh6Gh0ip902puVwm+BSXrh6vNjBV
+HbVtjL8R0azFGaU0EA=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F92C565E493FBB04E0401F0A05997A12</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1kqale4vw5d5v1tc9gdo700m73" NotOnOrAfter="2014-05-12T15:12:47.167Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-05-12T12:12:37.167Z" NotOnOrAfter="2015-05-12T12:12:47.167Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_2560b422-88af-4809-92f9-4ddcf201c4a6</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-05-12T12:12:47.167Z" SessionIndex="_2560b422-88af-4809-92f9-4ddcf201c4a6"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F92C5580FAA85D97E0401F0A0799216F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>DECECacheTestScenario - UserGet - AccountMerge - Verify with old Etag -200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserGet</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>801173c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-411e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" id="e3d69969-201a-4c2d-ae59-58d882659653" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="dde0eade-1d69-45a2-824a-ed40a58e08dc" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set Properties" id="d32f5ae7-e188-4c61-9025-721e238de67b"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMajor","1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
tP.setPropertyValue("DBHost","LP1");
tP.setPropertyValue("Country","US");

def v2 = context.expand( '${#Project#versionMinor}' )

if (v2!='02')
{
	           tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
                tP.setPropertyValue("Encoded_NodeAcc_Id","urn%3Adece%3Aaccountid%3Aorg%3Adece%3A");
                tP.setPropertyValue("Encoded_NodeUser_Id","urn%3Adece%3Auserid%3Aorg%3Adece%3A");
                tP.setPropertyValue("Encoded_PolicyClass","urn%3Adece%3Atype%3Apolicy%3A");
                tP.setPropertyValue("urntokenType_userpassword","urn%3Adece%3Atype%3Atokentype%3Ausernamepassword");

}
else
{
	           tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2011/08/coordinator" );
                tP.setPropertyValue("Encoded_NodeAcc_Id","urn:dece:accountid:org:dece:");
                tP.setPropertyValue("Encoded_NodeUser_Id","urn:dece:userid:org:dece:");
                tP.setPropertyValue("Encoded_PolicyClass","urn:dece:type:policy:");
                tP.setPropertyValue("urntokenType_userpassword","urn:dece:type:tokentype:usernamepassword");

}

def neustarVM = context.expand( '${#Project#NeustarVM}' )

if (neustarVM =="YES")
{
                tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEQA1_APP/lp1db_23@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com");
                tP.setPropertyValue("JDBCDriver","oracle.jdbc.driver.OracleDriver");
                log.info "Certificates path" + context.expand( '${#Project#certspath_Windows}' );
                log.info "We are running in Linux environment";
}
else
{
                tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
                tP.setPropertyValue("JDBCDriver","DECEOracle");
                log.info "Certificates path" + context.expand( '${#Project#certspath_Windows}' );
			 log.info "We are running in Windows environment";
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Setup_Node" id="ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("Node_Setup");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Node_Role","urn:dece:role:retailer");
//tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="60324ceb-b9ae-4285-a113-e9d79367221c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="57100200-80ad-4429-b054-c9c5bc20096e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="6a3e0118-a7a0-4be8-8d2c-39540c05acc2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="9c9f42c9-23c7-4942-a8a7-14e703ea1943"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="ad2ebec4-c400-4d5b-afd9-f4de7bc113ef" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="54e78513-d465-44df-8252-92ee0978500c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="AccountGet" id="a27182fe-500c-4e26-993d-4cb19e21c90d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountUpdate" id="c2b11ca0-8a78-484a-8a80-4f7e90347f6d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_SAU1" id="37b32451-bdd1-4bf2-8926-976a7d1361b4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

//def NODEUSERIDFULLDecoded = URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
//tC.setPropertyValue("LegalGuardian",NODEUSERIDFULLDecoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDSAU1",nodeuseridstandard);

</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_SAU1" id="8fa0af99-986c-4e0e-b456-ab093d385bc0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlstandard = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLSAU1","SAML2 Assertion="+samlstandard); 

</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_SAU1" id="0bcd18d2-e5a2-4bc0-9ce0-4d733266cc91" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet" id="de4341f4-5493-487f-9230-f65f6a55948f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGetList" id="e5868ed5-35fd-411e-b5a1-de87621471fc" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet1" id="a1adeb6b-cdb1-4626-b4e7-f9e0a0183d3e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserUpdate" id="ca9cafd2-27b4-4550-b9d4-a3db56428b1a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("GivenName","Raju");
myTC.setPropertyValue("SurName","Alluri");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet_SAU1" id="7db88c19-231b-43f2-94b8-bb5b7c90387e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDSAU1"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGetList 1" id="e2d6d738-2e6e-4dde-8f2a-8fc6336dfdda" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_BAU1" id="03fed95b-2b03-4be0-a370-b942c71565c8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#CHILD_DOB_XML}'));

def NODEUSERIDFULLDecoded = URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
tC.setPropertyValue("LegalGuardian",NODEUSERIDFULLDecoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU1",nodeuseridbasic);

</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_BAU1" id="4f6f150c-c986-4c9b-8795-24c3fffc1d54" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlbasic = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLBAU1","SAML2 Assertion="+samlbasic);

   </script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_BAU1" id="53a36455-4e2e-4148-9dbf-f29ccf9ce76c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserGetList2" id="cdae7e2a-7170-419e-bc22-f1c923e6450b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","3");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet_for_User_Delete" id="c979bfff-1f78-4e6b-8918-15c2b7a131cb" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserDelete" id="fba942a3-9a63-4ca6-8e70-bec8c08037e3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserValidationTokenCreate_User Name" id="de1a7ae9-1b21-485a-b5da-ea3ca399f4c0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserValidationTokenCreate_Account_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("TokenType","urn%3Adece%3Atype%3Atoken%3AResetPassword");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserValidationTokenCreate_PrimaryEmail" id="925ed3f0-6ad8-4874-8b19-626ff7eac7e9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserValidationTokenCreate_PrimaryEmail")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("TokenType","urn%3Adece%3Atype%3Atoken%3AResetPassword");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="AccountGet_for_Acct_Delete" id="34ab57d8-3b8f-411e-8680-2321b8738d02" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountDelete" id="08854fcf-8c23-4d91-8cb0-6eeba6e67202" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Raju_user_create_20132126_04254</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-21-29</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A2199731F</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:E268F1ACA479A0F5E0401F0A05995EE4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08854fcf-8c23-4d91-8cb0-6eeba6e67202</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2b11ca0-8a78-484a-8a80-4f7e90347f6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ab57d8-3b8f-411e-8680-2321b8738d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a1adeb6b-cdb1-4626-b4e7-f9e0a0183d3e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c979bfff-1f78-4e6b-8918-15c2b7a131cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fba942a3-9a63-4ca6-8e70-bec8c08037e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e2d6d738-2e6e-4dde-8f2a-8fc6336dfdda</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cdae7e2a-7170-419e-bc22-f1c923e6450b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts" id="79580e8c-bdce-43ac-8751-04d211a2040b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="f8742d3f-2162-48fc-929f-c63e51dc960f"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="3a4ad998-92fd-4247-af12-97e692bc407b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)};

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		scriptLibrary = tP.getPropertyValue("scriptsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		scriptLibrary = tP.getPropertyValue("scriptsPath_Linux");
	}

log.info  " ScriptLibrary     ... " + scriptLibrary;

com.eviware.soapui.SoapUI.settings.setString( "Script Library", scriptLibrary);

log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="7dc477c8-6c54-4a69-ac8f-9f20a45224de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="2d4f13d6-84e6-4a6d-a3c1-8d9bf01c8552"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="14a454cf-a4c8-4919-8331-d4830d1209ae"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="07083d4e-9105-4ca1-8d1c-c5f048e9494b"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="176cc3b4-77ea-487a-90d2-1567099599d4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140218</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>176cc3b4-77ea-487a-90d2-1567099599d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="AccountGet" id="6c4c8bc6-84bc-45cc-809e-1bd4c8141f24"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">E:\Praveen_backup\e\Cache_Reports\Build_111-002\R5</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountDelete - 403 Forbidden" searchProperties="true" id="3f9b6569-97b5-4139-b88e-2bce36761e96"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="a210e2f2-5321-4b5d-8e94-65d67bb09830"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="d5f43181-7e8b-48b2-8568-7a02e09dae23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2f54f99b-3e8b-454c-80dd-0de0201523a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="2f23cc65-9b05-4c59-b27f-fa19981cf7a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="ca3a350c-e828-40d5-ba4a-159302043d4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="ac34feb3-864c-4032-b2d0-e4bffd384399"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Delete_API" id="301d6eeb-bedd-4ec9-8826-e3f4ac5703d2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="5822c1f0-8526-4203-859c-e2c0fc7aa822"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114045</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_e8451061-0208-4f60-8539-c8f1ba863931</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountUpdate- Verify with old Etag - 200 OK" searchProperties="true" id="2bcb94f2-be38-4172-b0a0-e3b9bc0fa6bd"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="84c90186-6aae-4794-8803-a4b7c4c601ea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="959a19fe-e97d-4c41-8229-57b94a73f920"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="af512a2e-1d04-49d8-94f4-97f7a1183c17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="339b42cb-f01d-43b0-b83d-fedb298ebc0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="094ae2cd-abb0-43ca-ae2d-2b68f9d22a11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="aedba20a-b72d-4236-884b-a98fa01385ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Update_API" id="1db1ff7e-269c-4115-b440-6b157a4234b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="a70012ad-4f72-4d22-be94-8e3d2ed5be4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_11410</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_80a1b1fe-970b-40f0-8056-b985ef0224c7</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - Account _ResourceStatusUpdate - Verify with old Etag - 403 Forbidden" searchProperties="true" id="be3a8b56-2009-4102-aa71-363f84634eb3"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="77b1474f-64f6-4984-be70-6c7199c010b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="d1fe274b-61d8-439e-970c-4096bc9e0e28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="ea559977-8e8f-4433-b0e1-e4e02888f0dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d16191a3-df43-4845-8816-7e13022ebf5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="99d15a41-3c0c-4ca8-b374-d322e60131cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="fbd8c23d-f669-4404-acfe-a121a9c65385"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for DECE_CS" id="95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdDECECS"));

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("NODEACCOUNTID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_For_Dece_CS" id="98511cb7-8ca6-471d-a6b8-bc2319d73b16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_AccountResourceStatusUpdate_API" id="a6bf3aaf-9f5b-4c6b-bd47-f9f873d7d334"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountStatusUpdate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("status", "suspended");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer 1" id="9576e1d3-d1b0-4d86-ba7c-9e92f0acebe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("SAML", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("NODEACCOUNTID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="ff03e9d4-6e39-4cdd-9987-c8eab2dc26ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","ACCT_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_11417</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_7ec7568e-0fb9-4a66-865a-86430334af8a</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9576e1d3-d1b0-4d86-ba7c-9e92f0acebe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fbd8c23d-f669-4404-acfe-a121a9c65385</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - User _ResourceStatusUpdate - Verify with Old Etag - 403 Forbidden" searchProperties="true" id="8832f3a5-78d6-47e5-89c4-57092278f3c6"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="1ef77d2f-af89-4bad-8627-36894a19ff98"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="74a89142-68ba-4326-baa7-c74215e7d340"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="c8ce8700-3164-475b-9aa0-cec617f7fc47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="655d2fa3-440d-41d2-bc91-de9096c5f473"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="e5e11b61-a915-440b-98a6-c409afdbcaad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="acd91d7e-c48f-4432-98f4-4a6d19c0de3a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for DECE_CS" id="45b31184-19e0-4b69-b5c5-63d0a6a303f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdDECECS"));

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("NODEACCOUNTID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_For_Dece_CS" id="ba0d4035-12b6-48ad-925e-4973d6025274"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="54cba450-3212-4f72-9974-d67b89d93b5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserResourceStatusUpdate_API" id="b0a4c1a1-658a-4d85-8b78-a1fb9bcaa040"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserStatusUpdate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));
myTC.setPropertyValue("status", "suspended");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer 1" id="eaf34153-5d5c-497e-b344-c8511136ba32"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("SAML", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("NODEACCOUNTID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="7120dbcc-5acd-40a9-8a41-1df884e3f0b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","USER_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114117</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_88dec0a6-e69e-40ce-895f-99550059685d</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaf34153-5d5c-497e-b344-c8511136ba32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>acd91d7e-c48f-4432-98f4-4a6d19c0de3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54cba450-3212-4f72-9974-d67b89d93b5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserCreate- Verify with old Etag - 200 OK" searchProperties="true" id="cf13a11e-2ad2-4920-8143-369fa1ba8f77"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="db8f1d56-e20a-4dc9-938f-4fe09f42c0c2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="8f8affc1-5c9d-4824-90d7-69d538d69376"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="01390a80-3973-4961-bf84-00ebc4f152e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="58b9d133-f270-4d4c-8d87-e3b41c4d5ed5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="0e228dff-d5ec-45c8-9170-bb41f6e88986"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="d9021bb9-a872-43b0-999c-eb6162acf347"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="29c3aea0-aeb1-4f01-8e7f-831d9018b7bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="ca2ed478-e550-4c1c-8dbc-fe1db452ae80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140509_114131</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_14ee6751-bbea-4d84-97f7-464859a27895</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserDelete- Verify with old Etag - 200 OK" searchProperties="true" id="a4d4e2af-0fcc-4cbe-aec5-7cadc4d237da"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="3e109fdd-0df1-4242-b761-8e1e88ea89b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="aeea5ab0-1164-4d6a-91ea-3d2d441bfef2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="76116c79-f218-4a99-905b-43261ad012c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="51cd7fa5-f0ff-4c6d-beb1-0da362e122fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="bd5eac61-e2b3-4a31-bf1e-970522c51708"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="096b811a-0ac6-4370-ad3f-b2b3cdba4391"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="d5902ea8-e934-46a7-ac81-9cbd75a55278"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="cf3e2217-1d8e-4d6c-b768-651204dc58f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="aae3221f-a533-440b-ad01-11f83bd79f91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="d941af83-4fab-491f-98e5-4c75a987da5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID2"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserDelete" id="97a2f5d0-491f-4a94-bf2d-964112721155"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERID2}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="72579cc0-69a9-435f-bce9-5d14ec230d7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140509_114138</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_a9ff1c2f-1c1c-425b-b6a4-6619eee10e21</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d941af83-4fab-491f-98e5-4c75a987da5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - LastUserDelete - Verify with old Etag - 304 Not Modified" searchProperties="true" id="3499aa04-b1c8-4f0d-863f-77baef21e299"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="b547408f-66c0-4bb3-8047-f244cee732e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ae766018-3cae-4d99-8ff4-a9575b58c415"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="72e93005-b2f7-4b36-b3f2-2a72a4234d61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="bc1c1f73-f4e6-4c81-a446-a521621c78d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="69aa3121-c6bb-47ef-960d-a431b4fec384"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="cff8285f-eb4c-4199-91a3-ab248f2103be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="a1fc8a15-77c4-4448-9d22-cad67bee5f4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserDelete" id="21a98c2f-125a-4295-b64c-ce109a1a9585"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERIDFULL}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML"));
myTC.setPropertyValue("ResponseType","LAST_FULL_USER");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="f7389dd1-9d7b-4e75-bc6d-0182a9034e42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114144</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_d551fdc3-f9b0-4292-b85b-ca2c8c8e7dee</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a1fc8a15-77c4-4448-9d22-cad67bee5f4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserUpdate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="6c63dc54-d1e2-4572-98d2-cda9db0157cd"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="57aaf01f-6223-471f-912f-99a96e95effa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="5eebdcba-dda7-4ba9-be0b-313dade6e380"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="ae874856-b0dc-4521-9873-9d24462b5d79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b8553803-f5f1-42ed-9a58-c215bd6e5470"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="8597081b-21dd-4588-a789-e1c47126fef5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="db39c635-37a2-4103-9df8-34146960d0d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="887537fd-2c59-4997-8242-b42cab2ed56a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="c033f162-a45a-4c04-a18f-71cb23d44482"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="63fbf147-80fe-4c54-83d4-310415dde2c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Failure");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114156</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_b3881df2-9f3e-4469-8109-66c8e94addb3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - EnableUserDataUsageConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="0312de4f-850f-427f-887c-1b70b7dd7274"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="10d8c879-2776-4fe2-91d2-79cd221f8ae5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="eb3d4580-6218-4860-bf9f-29320df656b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="ce6f8e91-8486-42f6-a9e2-fc211d8e60ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="a114cc04-e353-41b1-8118-199da504ab2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="92a27dc2-c781-43dd-88bb-ae3e6f861119"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="2512eccd-e427-4f59-9520-736cefa990a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_EUDUC" id="ac6a6c62-18b7-4e36-a4d6-e14aff821e62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '103'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="3df2649e-2da5-4e96-bc1f-0580444ce084"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="11a808f7-78ff-4d97-95ee-f12d6847d521"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114158</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_2f36b993-16f7-4af0-b884-c034a804c01c</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - LockerViewALLConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="d6119dca-c4fa-4182-aedc-abef1a570b56"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="a7fde4ef-3d63-4bc5-b82b-baef328af2e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ff6da337-4dfe-4a3c-8e31-2fae8f617b03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="24841c5f-f7b7-4bd1-9274-390b1c9fdf21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="6286b3a6-7e1f-404f-818b-d1c11eed47d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="99d2142c-d039-492c-9444-698b43e58585"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="7b1e4a0f-b83f-43d7-9ca8-84c38af81ad3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_LVAC" id="cf976b8f-9cc0-49b8-915e-fc85678ab74b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '100'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="ef23751f-f010-4e2f-83d3-2b464162c185"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="58236621-1ee4-4bf1-91bf-19f40ff86ea5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114339</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_6eaa800c-e197-4c02-9322-30a238ae6348</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - EnableManageUserConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="9ed35ae9-fd8a-4d68-a98e-f10c5e0a7a67"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="b1e91ff9-8422-479f-a8bf-ada9a13cf9b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="a15750c3-ffce-42ee-8195-5ca2485121ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="5692db4b-3f4c-4382-a211-56a71000c5eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="8585a84d-7402-41c1-b9f2-c504f8108458"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="509a8ab9-aff0-4bd3-af69-58325fc4a4a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="8c8f37dd-f21d-44a7-8dde-40d943862d63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_EMUC" id="dbac3c08-d135-432f-a1c4-7fae214d6dd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '104'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="bab05182-7391-4a5d-b9b1-cda260961cde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="118c1adc-7cb6-45d5-bade-0c8aca0904e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_11452</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_667ae47a-eaa4-401b-93a5-f7ff04195e1f</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - ManageAccountConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="78d37a92-b8b4-4699-8a75-3e13c8511311"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="a98571e6-66ed-4f4d-976a-432100e70f4d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="1c117b60-c33c-4c9f-af4e-c3dfecad179b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="ab2fb704-9d9f-4c66-9b94-d32893444472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="82104ed3-93d0-4c3f-9d28-d3cbdda94a1b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="bb901947-9ed8-4f74-b24d-89349e570d6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="298249ec-79da-4d81-b0aa-b83dedc15db0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_MAC" id="b4deee63-cb6e-4b53-bb70-bfcc2eb4df46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '105'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="c6cc3815-144e-44bd-9bfa-fd8f99d212b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="086e30a0-347c-4efc-bc3f-bdee54b7ab11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","NO_MNG_ACC_CNST");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114630</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_aeb12ef9-1f5f-40fd-b26f-3b9c4acb05f0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - ManageUserConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="1102158b-c1dc-437c-ae05-0a3727ceccf3"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="7cc9c5e6-57a3-4013-b8ab-d8ca48889358"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="50f4cfec-d542-4479-8aad-62b6c7305d5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="e1df99c9-120e-4bfb-b2d2-ce05edda6f75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="38e6cb55-de8a-4a7f-b3ed-d81fb993bf8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="9dc41b6b-8ea1-4603-9867-5e4464788bd6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="5dd32d34-fe5f-44db-9177-d34eb23feaca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_MUC" id="d0166df9-a103-4308-9e5d-5022f8ad9210"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '200'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="e2b6321b-3983-4e7a-a50a-7ef75135ed1b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="3d43687d-2574-4bf8-8ba2-cfd4ceb9c883"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","NO_MNG_ACC_CNST");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114758</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_19e0a024-ec1a-463b-9b34-8758a34fd4b5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserDataUsageConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="e0025f5c-91f5-43bb-b92a-d629e2c105c5"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="ea702149-1162-4a24-885f-ab73409d994d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="2414cba1-63c0-4768-86a1-5dcf0ebd02e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="c6bde244-9ea8-405e-881a-83f9e82e6157"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="227d2724-b800-4867-b923-20c86005f259"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="75ce52d0-c8d1-4f97-bd59-2b050967c1e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="c4fe7c61-da62-462a-9e05-fdec248f9121"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_ULC" id="1294561b-464b-4ddc-a62d-b8536c50bc66"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '201'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="4e72e8c4-63bd-4bb4-92ac-0419ff3877bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="cf638a18-0519-4505-8970-905090d6df21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_114925</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_a847129b-6557-4efa-9c1f-5251c4ff3e0c</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserLinkConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="2a1e4f7a-fb6c-4221-949f-2e6a43db462f"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="c0ba51f9-882e-43b4-8c55-c3701daa8f9a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="7a6b8902-d583-4693-921b-6de0aa8d83a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2e2c4548-36f2-4bf1-b2d3-338d8958b127"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="e28c0455-b54d-4c03-8662-53594ecd423f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="454c7fab-193c-4ff6-9598-0134a014bc56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="10947bfe-036e-4ccf-922a-c292e1a21bfb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_ULC" id="5e0fbbc3-54c4-4968-a476-ca893adce999"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '203'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="7d6f98b0-41c8-42bd-b50d-c28a237f5438"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="d7bbc041-5cb8-445e-8849-0ef28a3f08c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_115236</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_b3d8364d-b888-42fd-b98b-e1d3eedb9075</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - StreamCreate - 200 Ok" searchProperties="true" id="3c2a1976-e83e-44ee-8982-da937eb3dc5d"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="ada286bc-24a9-4e94-bf31-95af3454d271"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue ("audience", "urn%3Adece%3Aorg%3Aorg%3Adece%3ALLASP");
tP.setPropertyValue ("audience", "urn:dece:org:org:dece:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="6f0d9a28-fcde-4381-85f6-bd557dd590fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="c2563591-cae3-49a2-bf3b-c99896aa8b5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d9c93561-eb72-494d-a775-6451a0ab3da2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="0860b9e1-8487-4730-8691-fb2b5e747c85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="48de51bb-9bb2-4f6c-8e52-3bb17bd18d6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="a4be395a-9761-4e8e-9875-63dbfe1cee1d"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Create" id="d145d196-9183-4acc-94f5-d25ac208b84a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","LLASP");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERID")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="9258bcb1-005d-4450-88b8-a29efa843424"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("StreamCount","1");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

//tP.setPropertyValue ("audience", null);
//tP.setPropertyValue("StreamCount","0");</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_11545</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F12D6EF6DE715EE0401F0A059975AD</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F8F12CDF24C9E841E0401F0A0599548E</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F8F12CDF24C9E841E0401F0A0599548E</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12D6EF6DE715EE0401F0A059975AD</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F8F12CDF24C9E841E0401F0A0599548E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12D6EF6DE715EE0401F0A059975AD</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F4D4C215DA567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F8F4D4C215DA567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>394</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:F8F12D6EF6DE715EE0401F0A059975AD</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F8F4D45E0575913EE0401F0A05991C36</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F8F4D45E0575913EE0401F0A05991C36</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_a745d22f-f533-4dea-b0f6-f12fd1144fb8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - StreamDelete - 200 Ok" searchProperties="true" id="fce0ee1c-c2f3-48a9-9026-dc1326f52859"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="fc8c469f-ca6e-41c0-a210-db63fd232c86"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue ("audience", "urn%3Adece%3Aorg%3Aorg%3Adece%3ALLASP");
tP.setPropertyValue ("audience", "urn:dece:org:org:dece:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="b9d4fd6b-2163-41bd-a911-914d30425af0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="65331a8e-0860-46ed-a1a7-9baa320e1623"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="0221ab14-e1b7-4526-b24c-5ec9134560b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="96a5fb0d-160a-4440-a2ce-e5ba313b6fe1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="c15c0a61-ed33-4eb0-9303-b08c6e6e697f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("StreamCount","0");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="16ee0986-281b-4327-87b9-d213df24e4b5"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Create" id="ed8d3979-1e89-48fe-a732-da9056e65708"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","LLASP");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERID")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Delete" id="82159739-5aab-4570-a82e-e38dc2d19b18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamDelete API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="0cef4c21-8b1e-4395-a1c4-cfa9bdd402d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_115416</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F4D4429B5498A8E0401F0A07993CA2</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F8F12C80CE768B44E0401F0A0599757C</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F8F12C80CE768B44E0401F0A0599757C</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F4D4429B5498A8E0401F0A07993CA2</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F8F12C80CE768B44E0401F0A0599757C</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F4D4429B5498A8E0401F0A07993CA2</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12C6513E5D6BFE0401F0A0599756F</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F8F12C6513E5D6BFE0401F0A0599756F</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>648</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:F8F4D4429B5498A8E0401F0A07993CA2</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F8F4D4662FAAF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F8F4D4662FAAF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_65601f95-2ab7-4793-b1cf-2ba07b2b23dd</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>82159739-5aab-4570-a82e-e38dc2d19b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet 121- UserCreate 121-AccountGet 111 Verify with Old Etag - 200 OK" searchProperties="true" id="c2543771-88f9-4581-8294-d36e84ba1056"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="6c1301a2-e692-4c0f-b6e8-6b74a0026d8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="a6f35a46-041d-42c2-a357-024da2a3df93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="8a91f1da-e4b6-4134-88ad-b3646cf68254"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="f7f16c21-f0d1-4a0e-bad3-fda9d6430917"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="1fe661c0-00e1-4336-bd21-b344188de881"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="e389bfdf-72b8-4429-ad96-087bdcb2c605"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="85aa601c-9aab-4ced-9684-c95d8ae265fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="f2fe2d02-b570-40c7-a9b8-f212e35a8818"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="4a683c09-21cd-4dcc-afc2-942b36667a0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="2a01029a-e3a3-4d3b-b3e0-3b5c529e4977"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140509_115427</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_1bb0320c-1dce-4a1b-bc34-1bc26658f17e</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet 121- UserCreate 111-AccountGet 121 Verify with Old Etag - 200 OK" searchProperties="true" id="878a0cfd-c651-450f-8412-104537edcdf8"><con:settings/><con:testStep type="groovy" name="Copy of Set versionMinor Property to 21" id="5088722c-6d6e-4b8f-a221-c9d01636a583"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="4e84d63e-fa27-4d25-ba78-ffa88f86ead5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="e0db2bc2-f92e-4a41-9314-b5aaa53aa829"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="385f3c4a-7286-4a3d-b39b-108bbd3924f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="8d7feec5-a41b-4f99-9920-42bf6b6509ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="4e8b3a11-12c2-4f09-a86c-f75ae9f49316"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="b8d39059-615e-43c1-b091-dfee53f2b0db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="ea1d5408-2330-44f2-83b1-0858991b5659"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="a311644e-0139-45f2-9899-b46642b1c98c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="d6462aae-3219-4c03-b7ce-793bbf08af8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="003a7087-ff6e-485d-9e8b-34669815c3f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_100541</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_2351d26f-8155-44cc-97da-7dcadde534a3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea1d5408-2330-44f2-83b1-0858991b5659</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6462aae-3219-4c03-b7ce-793bbf08af8b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5088722c-6d6e-4b8f-a221-c9d01636a583</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet 121- UserUpdate 121-AccountGet 111 Verify with Old Etag - 304 Not Modified" searchProperties="true" id="60a47286-2abc-4ea3-8e61-6c1cc7ee40c9"><con:settings/><con:testStep type="groovy" name="Copy of Set versionMinor Property to 21" id="c9875200-4031-405e-a23b-ba8f6b997ec8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="992e5cac-633b-40fc-84f6-c20a2f01b817"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="343bd9e8-988c-4218-bd45-40b623d47de2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="5dfaa8c8-6bbb-4596-aa7a-5a5f4b538c2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="49fc2e7d-022c-4a7b-bb35-dc13f7a0a5f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="516aec4c-4770-4972-be7a-c7087eec1f42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="4c5dabe0-d911-471e-91bd-d786fa269864"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="db46f9ae-96a8-4822-aae9-3ffd80ee4f37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="d397c6bb-1419-4169-942d-3eadc17255cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="e992ca86-2eb9-47b2-869e-5c7d08bddab0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="f2ae0498-237f-4b68-9fab-27b080f98112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="ee0205ea-567d-43f6-a7fd-e30d4ad5328c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100549</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_39a7a411-17f2-48e8-bc69-36fc5fef32b4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e992ca86-2eb9-47b2-869e-5c7d08bddab0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db46f9ae-96a8-4822-aae9-3ffd80ee4f37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c9875200-4031-405e-a23b-ba8f6b997ec8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet 121- UserUpdate 111-AccountGet 121 Verify with Old Etag - 304 Not Modified" searchProperties="true" id="99a8e1ff-10ec-46fb-87b9-d174450a0d55"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="157bd3b0-8e81-457a-81cf-8d0099f87e53"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="9ba24344-cfd1-46c5-bb27-1ce22afb4c1d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="05f95cf5-b94a-4270-a3d0-6c1f8f35100e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);


assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="65f50296-b6fc-4342-a621-2825f364c125"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d8d6d68e-37aa-431b-af7f-7a6e8a3da3d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="bae055c3-69ad-47aa-b4f4-f993e14e3a5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="5cce8b99-f3de-4a2c-9699-33d746d99ed9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(nodeaccountidencoded,"UTF-8"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nodeuseridencoded = tP.getPropertyValue("NODEUSERIDFULL");
myTC.setPropertyValue("NodeUserId",URLEncoder.encode(nodeuseridencoded,"UTF-8"));

myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="1e85e895-338c-4f41-af53-6ad8340127af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

def nodeuseridencoded = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERID",nodeuseridencoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

tP.setPropertyValue("NODEUSERID",nodeuseridencoded);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="db4b6cab-b681-41ff-bf1a-eaa7d03822ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/11/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="7dba3280-875e-451b-83be-210e6cedd3d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100551</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_59167e30-82de-40f7-888f-21f500998f63</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5cce8b99-f3de-4a2c-9699-33d746d99ed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - RightsTokenCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="8474fa3c-afa4-44c9-99fc-904695221be8"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="d38cb3ed-9642-4498-9422-f702f11119ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ba4bf03e-3e1b-4575-b47e-c5e7b901bdd9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="64cfe2c6-beb6-4172-bf8a-bdb6d7b9bac5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="7aef8421-a88b-4aa1-82b0-a12fbab72d34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d50be764-286f-4c03-879a-b7456834f4a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="6dff32ac-59c3-4f8d-b565-efdb9cb857e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="53857d86-2198-4f7e-9b45-cf3639b0f469"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="33a8e8c4-bf2a-40a5-ac12-3b4d64eb382f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100557</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD14A1F9E569D51E0401F0A05995852</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD15C819FCE754AE0401F0A05990381</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD15C819FCE754AE0401F0A05990381</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD14A1F9E569D51E0401F0A05995852</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD15C819FCE754AE0401F0A05990381</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD14A1F9E569D51E0401F0A05995852</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD15C0E3A020394E0401F0A0599038F</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD15C0E3A020394E0401F0A0599038F</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>376</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_e9e9c6a2-20e2-497d-937c-85625b019527</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - RightsTokenDelete- Verify with old Etag - 304 Not Modified" searchProperties="true" id="de5c0ad2-b2cd-4393-9716-7a651be011fe"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="90cdb979-820d-4b6f-a0f6-3ce76832151b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="7054e410-dc35-4ec1-88eb-031be1f76863"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="a674a1a4-261a-4b67-9a9b-fa3196c82cbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="911e2eb5-d300-44bb-b6b6-f9934d34fe6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="853b35a4-fc76-44af-8de5-7af9bced6923"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="4c33a4d8-23f2-4d9e-8ddf-2827d3595496"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="8337ac8e-503c-4f7b-966e-a89c0c01f8a7"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Get" id="f0d56c58-d578-452b-abb2-b7ec0e95b5c7"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Delete" id="acd1feb5-5a27-4611-b3e0-a5deee98f691"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenDelete Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="41d9f5f4-4a63-43dd-8352-ec1ad5c61da2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10063</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A084754AE0401F0A05990381</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD15C0166B8A852E0401F0A21990514</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD15C0166B8A852E0401F0A21990514</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A084754AE0401F0A05990381</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD15C0166B8A852E0401F0A21990514</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD15C81A084754AE0401F0A05990381</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD15C016780A852E0401F0A21990514</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD15C016780A852E0401F0A21990514</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:EDD15C016780A852E0401F0A21990514" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T15:06:12.668Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-18T15:06:12.674Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>326</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_74ec737c-c9fe-4b11-b84d-3a12db68288d</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8337ac8e-503c-4f7b-966e-a89c0c01f8a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>acd1feb5-5a27-4611-b3e0-a5deee98f691</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - RightsTokenUpdate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="a73421e2-6be3-4ca5-bcfa-00ec9a7892e4"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="6eb4fa8f-c510-4ef1-a788-163c12b12e4d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="032853d0-cfff-46da-9fde-a3bf345e82de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="00d398c5-bc8a-43dd-a74f-78adaae254e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="11168301-ba51-48ce-8e49-7716a3ad25f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="24a54590-6a0a-40b8-b55a-1967d2111ce7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="5697ec03-79c6-4441-9c67-b4d6ce7ce511"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="2f5ea15c-c869-47cb-938f-2799fb8fd430"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Get" id="6cf009bc-7a49-44ea-b5b6-5127b84aa819"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Update" id="78df497c-46a8-4195-8258-3f0cb1892246"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenUpdate Request");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

def rlid = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API").getPropertyValue("RightsLockerID");

testCase.setPropertyValue("RightsLockerID",rlid);
testCase.setPropertyValue("ALID","urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt");
testCase.setPropertyValue("SoldAsBundleID","");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");

def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","RetailerTransaction_1_node2199_RetailerNode");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTUpdate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="3e03a7c5-2f3f-4132-a505-056419446749"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100624</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node2199_RetailerNode</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD15C043F65C1AEE0401F0A21990516</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD15C01DE6E2213E0401F0A21990509</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD15C01DE6E2213E0401F0A21990509</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD15C043F65C1AEE0401F0A21990516</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD15C01DE6E2213E0401F0A21990509</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD15C043F65C1AEE0401F0A21990516</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD15CD0555C1C32E0401F0A0599037F</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD15CD0555C1C32E0401F0A0599037F</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:EDD15CD0555C1C32E0401F0A0599037F" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T15:06:29.424Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-18T15:06:29.430Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>253</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:EDD15C01DE762213E0401F0A21990509</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_f1cb37a5-7bf9-438c-99ad-9838f0d43839</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cf009bc-7a49-44ea-b5b6-5127b84aa819</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountMergeTest- Verify with old Etag - 304 Not Modified" searchProperties="true" id="0884e4a5-8ac4-4182-bc6c-6ab8e8399693"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="1593f198-3237-4f8a-bbf0-4631b18a6170"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="f4e3bc1d-5916-419a-8d72-c60d2732ff23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="9f48be4a-6492-47de-ba77-70e22d64967d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="7d755d0d-e166-4aeb-8d81-38420bf1b314"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="858d5c93-a18b-4298-bb59-bc6cb056a9c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="1e88e603-dc49-4bc4-b3ba-30840e7ff370"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="6a74cba1-4d72-4fcc-b483-5b0d82040118"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="df0c4d9c-1ec8-46bd-9e5e-8acadac84b16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="c55150bc-3d0a-4175-b0e8-028e67a6fa78"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="a7eb6532-f4fd-4259-971c-847264e2ccca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeTest API" id="c8548fd5-3321-4321-a475-28644fd2219f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeTestRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304_Not_Modified" id="22e328fb-a35b-457a-9fb2-b9d86204e5e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","Failure");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100645</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD14A1FA08A9D51E0401F0A05995852</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD15C01DF202213E0401F0A21990509</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_8350fe3a-ce0d-4879-88af-e40ad13802df</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountMerge- Verify with old Etag -200 OK" searchProperties="true" id="5f495610-a889-422b-acbb-e33bc18ebadd"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="f033720a-4dff-4881-9409-1ef7bd220595"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="896ca5ae-cdf5-4e9b-a645-664e3cd94b1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="6381b666-c299-4ca1-846a-dab1f7682f95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="3257c333-7a42-436b-b73d-1498f1149785"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="1d351aea-d5b3-4181-8575-bc8273604b38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="2db5e5a4-c05e-46a6-951c-fdb366fdc186"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="980b91f2-3f5f-4eeb-b10e-3621edf21311"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="25cdc295-5820-4573-99cf-a7a7e9dff78b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="eb4e9f9b-4215-48ef-857a-4a6d4cfd42a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="2dc40ea0-a090-4f27-a671-f2ec2bca100b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMerge API" id="21b94432-a5fa-4ab2-ac85-66b4bc4f73e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="beea0bd3-b417-446a-9c03-af5dd951f6a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100657</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD15C01DFA02213E0401F0A21990509</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD15C0441ABC1AEE0401F0A21990516</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_b561f527-9aad-4662-a27f-d1785cfd20af</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountMergeUndo- Verify with old Etag -200 OK" searchProperties="true" id="bece021b-e299-4913-a683-6fe28a1ca658"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="58eada60-73e1-4729-b111-374be2d0c9db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="28291b61-6f96-4253-bb21-d6d17ecae526"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="0f866ef7-6e9c-4793-8a12-2237b1870daa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="34880ca8-081e-489b-ab34-9c155030a11d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="27adbd94-10e5-43bb-a64d-3dcb29c9bfa3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="2544fe4e-90c2-4ac0-94e1-194f54bd9626"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="9e468b21-a27d-4041-b0fb-fb0c64fbd84f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="9b7abb93-cd8d-4767-b785-21d580afa227"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="5382e2ca-458a-461d-8fdb-8c5767744874"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="f7a46c23-bb28-4bbc-a64a-eb4601f69d65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="AccountMerge API" id="911f1fc9-f177-41d0-90b5-467b9760cc90"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="984d447e-d5dc-4e7e-b381-5d17f8961aee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML_1"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("SurvivingAccID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeUndo API" id="51994679-76eb-48bd-80d3-cc88d6a22c57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeUndoRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="320a452f-f00b-446e-bb96-65374d5d2af0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML_1", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("SurvivingAccID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="d2c24de3-0a24-4ba1-8db3-4c80bacfc243"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10219</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD15C04420DC1AEE0401F0A21990516</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD164EBDEA8E1F4E0401F0A219918F5</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_555974e0-e689-4594-954f-79cf50e56142</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>984d447e-d5dc-4e7e-b381-5d17f8961aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320a452f-f00b-446e-bb96-65374d5d2af0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>911f1fc9-f177-41d0-90b5-467b9760cc90</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountMergeUndo- AccountGet with Invalid Account ID- Verify with old Etag -403 Forbidden" searchProperties="true" id="86d0b3ba-d775-4c1f-8705-dea05d443147"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="739d8866-c047-4d5d-be7f-b51bfb928199"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="3f1912ee-2457-4125-80d2-9c5596435590"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="d1d25565-0400-4d61-a54d-64825a86009f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="9acc7765-ff74-4963-a991-d25c0a4ccc47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="cb6127f2-101e-40a8-8603-1177df63a94b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="77a246f6-b622-43b9-a637-b8d79248aa8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="b845fe15-be23-4a78-9fde-479243cc953c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="88cf703a-756d-4f6f-bfde-991503cd0be4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="e6553155-172b-4a9d-8bd4-2dda5377df65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="de9b60ac-4410-4cf5-a793-8868fa7319fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="AccountMerge API" id="262b1eda-8beb-4cfa-9dc2-5b111f528412"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="dee2bc4a-23c5-4339-9972-b321bd11a80a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML_1"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("SurvivingAccID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeUndo API" id="ecd80400-c621-49a1-9df1-3ec5568008cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeUndoRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="b797fc11-3271-4040-bbae-8d1cd351d867"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML_1", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("SurvivingAccID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_403 Forbidden" id="47f18760-fb51-41a6-9a8c-d3d008faf272"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID","urn:dece:accountid:org:dece:E500E56B5A723E21E0401F0A21995611");
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","ACC_NOT_MATCH_TOKEN");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102120</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD164EBDEE4E1F4E0401F0A219918F5</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A485754AE0401F0A05990381</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_e788d9ea-73d4-429c-a2fe-6888ed0b3b06</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>984d447e-d5dc-4e7e-b381-5d17f8961aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320a452f-f00b-446e-bb96-65374d5d2af0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>911f1fc9-f177-41d0-90b5-467b9760cc90</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserUpdate_If_Un Modified Since_AccountGet-If-modified-Since- 304 Not Modified" searchProperties="true" id="9f9be90a-3c30-4572-9ace-e7e2569bf108"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="25f3802d-2df8-42da-ac83-13345bd483c9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="873ce64a-6e32-4f05-99d8-fe55cf84a768"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="63ea22f1-f6a9-4991-985d-2fb5a43a8f21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="cef59e74-af37-4b17-811b-240083970c00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="0381792d-7ab4-4a7f-bccb-8cbd517ea105"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="b952de85-6df9-4297-a98e-f2da8fbf1d38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="8b0b2f8d-1736-4441-8404-5a53f7d2d94f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="29eca915-4ff8-40ea-838a-73bdc1a0adc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="6d8f46de-9633-4b72-b196-73817d657543"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102127</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_a3dc83aa-9b17-496b-8a61-67646e80d996</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - UserDelete_If_Un Modified Since_AccountGet-If-modified-Since- 200 OK" searchProperties="true" id="878c7ec2-5c9d-4d69-bf45-df26d51fcac7"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="bf257fae-50f4-424a-80ec-be126e8db55e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ff7e01ca-1a15-4a4a-b1d3-8945033e255f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="c83bd58f-a7a3-4847-88de-6b578d85a77e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b46ef76c-0c7f-45f3-84a7-7ad70e3c5e20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="0f2c429b-911d-4c57-b124-a6614b8bb19e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="f85c0b02-a5d1-4a59-9ca2-f02760e05c97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="794eca3e-99a0-4a6a-8715-b76f7c02cd33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="32bf74a3-195d-4567-a0bd-1db7aabb4950"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="d17fb53c-6dca-451b-bc1b-2e6692154f98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML1",tP.getPropertyValue("SAML"));

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID2"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML1"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserDelete" id="e05b489f-5518-4f30-a811-9455e81b48d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERID2}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));
myTC.setPropertyValue("ResponseType","SUCCESS");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="61f43225-82a3-41f9-a01f-d8cf469f39a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_102140</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_7bcd9f44-d9b8-47f9-b55c-6eb8a97a7c1f</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f85c0b02-a5d1-4a59-9ca2-f02760e05c97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>794eca3e-99a0-4a6a-8715-b76f7c02cd33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountDelete_If_Un Modified Since_AccountGet-If-modified-Since- 200 OK" searchProperties="true" id="1a557ad8-9f01-485b-a35e-40d387331ef6"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="f25d9a9c-e8cc-4ddd-8e11-85acbeadbbc7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="1a3d893c-89a2-411a-be63-6f13c4ef6bd9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2dfc3a1c-68b8-49c6-bb67-fd1d81634dd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="a4da7409-41bb-4e7f-ba52-be858f5b5dc4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="e9ff576d-216c-411b-bdfb-49021841c29a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="53bd52ec-0283-4b5c-bb7c-5a9a65403e86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Delete" id="dc33e217-9717-4395-afab-9e4a213e6e90"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="21b780e4-11be-4656-89e3-6288905c540b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102146</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_e60fe3c6-709b-4a3b-bd4c-1946935ab7b1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f85c0b02-a5d1-4a59-9ca2-f02760e05c97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>794eca3e-99a0-4a6a-8715-b76f7c02cd33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - AccountUpdate_If_Un Modified Since_AccountGet-If-modified-Since- 200 OK" searchProperties="true" id="36611056-f0eb-49af-b4d2-976febc05a91"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="5db481b9-215b-489d-96cf-04f0cb246646"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="65f27d38-137e-4a66-ab04-bd1f16bfba6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="7c39f842-c95f-4d9b-9c49-868f1d65a0d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="15277533-2760-4591-bd80-9cf735a9a028"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="ba42d9ea-ff20-4f14-b9a0-1bf2d574dd55"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="68a97378-1128-4aef-b1e5-81bdd5964999"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Update" id="db563c3f-ec13-47df-9221-df42502cfbff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="0055ef48-0bed-426c-8e67-1bd58023458c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102148</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_dce99537-048a-4514-bd72-c10dccc91d8e</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f85c0b02-a5d1-4a59-9ca2-f02760e05c97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>794eca3e-99a0-4a6a-8715-b76f7c02cd33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGetSelf _for_Child_and_Again_ AccountGet _for_NonCLG - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="33d31315-8d27-44f2-a352-9dece6fb1e43"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="18273050-dc57-450a-a857-356ba4f91cd4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="4ea72665-64aa-4594-ba1f-18b81e518049"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="f482df73-ee89-41ee-a277-b01faab29ec8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

tC.setPropertyValue("UserName_CLG",tC.getPropertyValue("UserName"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="37280a6d-b778-4351-8f87-e1ca356a9cd7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def saml = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAML_FULL",saml);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="59a3d3cc-2ba9-4fe0-909c-f7db5d72a4c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="c35456bd-3695-4b35-9889-1e524b7beab2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_UserCreate" id="42afd199-1d37-4c67-adfd-603d3f414a5f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="6f28d233-ab96-4781-ace3-6a7733dd1e88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="bec75d3c-67c1-46ca-a5d9-b1bba9b09110"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Child_UserCreate" id="a3eb2c51-b165-4022-b45e-66962c3b7045"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#CHILD_DOB_XML}'));

def NODEUSERIDFULLDecoded = URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
tC.setPropertyValue("LegalGuardian",NODEUSERIDFULLDecoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU1",nodeuseridbasic);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_ChildUser" id="bfd479fe-323a-448e-9769-9d34219c408f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlbasic = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLBAU1",samlbasic);

   </script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Child_User" id="e4cdb0ac-ba88-498f-aefa-985580e593a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_Child_API" id="904c7f95-38f1-4a7a-ac7b-7e4e0fde27c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def saml = tP.getPropertyValue("SAMLBAU1");
tP.setPropertyValue("SAML",saml);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","3");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="c12dbc08-4d3f-4490-9aae-4dc73577da81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def saml = tP.getPropertyValue("SAML2");
tP.setPropertyValue("SAML",saml);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","3");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_10080</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-23</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A6A1754AE0401F0A05990381</con:value></con:property><con:property><con:name>UserName_CLG</con:name><con:value>Full_User_create_20131218_102155</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_03b8cf7a-9a0b-4e9f-9518-a5d6763ceb08</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1175301-1034-47d2-b176-7589f99631fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c0cbc32-e68b-41f2-a804-e76a94e30fe2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a1fc046-cb53-432c-87f7-8c246cc1e9f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8fd0ad4-63e8-4b60-bde2-39f00bd21f46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c35456bd-3695-4b35-9889-1e524b7beab2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42afd199-1d37-4c67-adfd-603d3f414a5f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f28d233-ab96-4781-ace3-6a7733dd1e88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bec75d3c-67c1-46ca-a5d9-b1bba9b09110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>904c7f95-38f1-4a7a-ac7b-7e4e0fde27c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGetSelf_for_Child_and_Again_AccountGet_for_CLG - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="00e7839c-7864-4183-959c-b18b9d4f5c14"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="11143e49-77e1-43d1-bf4e-0ba267eb24ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="a0202ee9-bafa-4453-89c4-f117baad1fe5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="f7363a0f-04da-4ea3-a4d4-4c21bb21e0c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

tC.setPropertyValue("UserName_CLG",tC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="a5a92fc5-ef27-4375-a12a-fe47a26cb5c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def saml = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAML_FULL",saml);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="5f6cfb9f-4bba-45e4-b139-1cb113ff2a66"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" disabled="true" id="149b0ba0-7de3-4e98-b737-2eb9af5b63f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_UserCreate" id="616a3a57-9bc2-4ecc-ae97-7d6a3b1fca84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="f10e2150-5170-4016-b3a8-9b03df719822"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="28452800-1c9c-478c-9a8f-225d16f38dc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Child_UserCreate" id="be9f8467-7ccb-464b-a305-b1f1fe9f2f05"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#CHILD_DOB_XML}'));

def NODEUSERIDFULLDecoded = URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
tC.setPropertyValue("LegalGuardian",NODEUSERIDFULLDecoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU1",nodeuseridbasic);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_ChildUser" id="a7f055ef-1415-4a17-9319-496002c37f33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlbasic = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLBAU1",samlbasic);

   </script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Child_User" id="83e7ebf4-63f5-4d2b-80a3-6f51883bd0aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_Child_API" id="f32af7f4-aeb8-4048-9147-2e4e261882b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def saml = tP.getPropertyValue("SAMLBAU1");
tP.setPropertyValue("SAML",saml);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","3");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_200 OK" id="a2340258-c77b-473b-b1fd-50904b9499a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def saml = tP.getPropertyValue("SAML_FULL");
tP.setPropertyValue("SAML",saml);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","3");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_100811</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-23</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A726754AE0401F0A05990381</con:value></con:property><con:property><con:name>UserName_CLG</con:name><con:value>Full_User_create_20131218_10086</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_89c26218-32ad-4c81-a191-12cb906c1bda</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1175301-1034-47d2-b176-7589f99631fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c0cbc32-e68b-41f2-a804-e76a94e30fe2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a1fc046-cb53-432c-87f7-8c246cc1e9f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8fd0ad4-63e8-4b60-bde2-39f00bd21f46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c35456bd-3695-4b35-9889-1e524b7beab2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42afd199-1d37-4c67-adfd-603d3f414a5f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f28d233-ab96-4781-ace3-6a7733dd1e88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bec75d3c-67c1-46ca-a5d9-b1bba9b09110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f32af7f4-aeb8-4048-9147-2e4e261882b5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - DiscreteMediaRightCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="6699aefa-da14-4230-8b5b-87005cc2cf7a"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="af09c597-6c2f-497e-bdfa-350ee5c5b7b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="644297e5-e9e2-4e84-8a9e-3975c116782f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="fb5e65ca-256e-4733-95e8-913d73a1251c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b41ce9e5-1b79-45e3-9b84-6aa4217bf112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d29a4d7c-6b64-4c1e-845e-521abf0c6c3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="b5c92d0f-6bfd-469e-95a9-cc899af5a287"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="4aa7dcde-c4b8-4dde-a2fc-698411876ce8"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="43f116a2-8286-400e-80f2-c7e02948ea8f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="08936032-1b47-48ac-be69-d8bfb93302c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100815</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD15C0E3F840394E0401F0A0599038F</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD164EBE1B9E1F4E0401F0A219918F5</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD164EBE1B9E1F4E0401F0A219918F5</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD15C0E3F840394E0401F0A0599038F</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD164EBE1B9E1F4E0401F0A219918F5</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD15C0E3F840394E0401F0A0599038F</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD14A1FA3F19D51E0401F0A05995852</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD14A1FA3F19D51E0401F0A05995852</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>500</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD164EBE20CE1F4E0401F0A219918F5</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD164EBE20CE1F4E0401F0A219918F5</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_0f2f59fe-d751-4739-820b-0e8936c54349</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43f116a2-8286-400e-80f2-c7e02948ea8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - DiscreteMediaRightDelete- Verify with old Etag - 304 Not Modified" searchProperties="true" id="21a746ee-f2d4-421a-bc44-0d472f4d666c"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="26f02c44-649e-4f78-9d55-559732c55cc9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3022973a-d66a-424b-9720-74b0a82d3e3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="eae17b16-f75f-4025-9a22-fc686b4c9092"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d6c03f1d-a214-4326-b456-e8e9debfc123"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d6f98e28-6539-451b-9c42-54c157a9c1dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="e9bd8eeb-1c54-427a-a9c5-2a703b2a9ff1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="d7355637-ffee-4e61-8b56-98b3623e5c1b"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="8a2fc202-8fb8-4004-84e6-f66a29e1e697"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet" id="8b8ad446-e7cb-4267-a9ce-1d3f58686211"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDelete" id="1a6b3ce9-49c3-455e-be45-51955c7e11c9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightDelete');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="8dbe11a3-af33-478e-81a7-a10594d43ab2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100824</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD14A1FA40B9D51E0401F0A05995852</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD15C0E3FF60394E0401F0A0599038F</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD15C0E3FF60394E0401F0A0599038F</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD14A1FA40B9D51E0401F0A05995852</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD15C0E3FF60394E0401F0A0599038F</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD14A1FA40B9D51E0401F0A05995852</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD15C58BFBDDB36E0401F0A0599038D</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD15C58BFBDDB36E0401F0A0599038D</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>443</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD14A1FA49F9D51E0401F0A05995852</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD14A1FA49F9D51E0401F0A05995852</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_541b2c23-5a5f-4e81-8d34-a79035bd44db</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcfef636-c58b-4da6-9545-ad73f56ba93d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a6b3ce9-49c3-455e-be45-51955c7e11c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b8ad446-e7cb-4267-a9ce-1d3f58686211</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - AccountGet - DiscreteMediaRightLeaseCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="74395a9d-c256-48c4-a20a-3f2672e0edc4"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="31b3dc0a-ce76-4754-b872-9c25b5305edb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="1f4820d0-b0dc-4828-a097-7f516e10f825"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="a51f0bf7-eec0-4476-94c7-823a51fe721a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="11355fb6-48e4-475a-86ca-264c809dae52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="0b22798b-4ee8-455c-b34c-be129d49a299"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="3bb5993a-ecbf-4fb4-833a-81362338599c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="511bd395-608a-4179-afa8-97a9ac44b9fa"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="26ef2521-e044-40d5-b4c0-a9db764d3d8f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreate" id="0c139326-420a-4b99-b011-0587f4fdbebf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API_304 Not Modified" id="7896bd1d-732c-4d53-a894-f8f303adce25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_100833</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A85E754AE0401F0A05990381</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD15C81A852754AE0401F0A05990381</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD15C81A852754AE0401F0A05990381</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD15C81A85E754AE0401F0A05990381</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD15C81A852754AE0401F0A05990381</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD15C81A85E754AE0401F0A05990381</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD15C81A8A5754AE0401F0A05990381</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD15C81A8A5754AE0401F0A05990381</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>534</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD15C01E4AE2213E0401F0A21990509</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD15C01E4AE2213E0401F0A21990509</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_1af73d46-a7d8-44bd-a723-0987a8bfe6cc</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43f116a2-8286-400e-80f2-c7e02948ea8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c139326-420a-4b99-b011-0587f4fdbebf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26ef2521-e044-40d5-b4c0-a9db764d3d8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="UserGet" id="ad5580d9-58e9-405e-8b83-317da8bde7a3"><con:settings><con:setting id="GeneratableJUnitReport@Folder">E:\Praveen_backup\e\Cache_Reports\Build_111-002\R5</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountDelete- Verify with old Etag - 403 Forbidden" searchProperties="true" id="038332e7-6749-445d-a946-f7a18e01e5d7" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="5d122afd-b346-4359-a9f3-8f00a5a6b89c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="acd29835-97ad-4c12-9aa1-e42f0d15d0e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="67b33377-8cd1-46cb-a0db-2a0bddb246fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="c5124bbe-bf9c-4138-a77c-9e112df14721"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="785083e4-fc34-4b0d-914e-f8d6f1ea7eab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="56a08456-ab7b-4628-bd7c-ba9bb758385d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="dea515b0-b23d-47b6-b2a1-ceb0e11a78a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Delete_API" id="a2b6e17a-a650-455f-a299-f01e62858d48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_403 Forbidden" id="af390499-9b69-4bf4-9bdd-e30c6ab3bde2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_013436</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_3d4cea24-e8b0-42d2-b992-ff680fa12e6a</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dea515b0-b23d-47b6-b2a1-ceb0e11a78a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ec6aefce-5dc8-4b7f-8cae-3cb111990db7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountUpdate - Verify with old Etag -304 Not Modified" searchProperties="true" id="b8ba1ea7-ed47-424b-bd1f-8c50915bcce4"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="dfaf71eb-2177-4ade-973f-aec47fe5a18f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="6534cf8f-6371-486e-b411-ab7a2da39ef5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="c590c2f6-9c2e-49cc-9636-4f84e899adfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="da9b65d7-0364-4191-a6b5-43d3c77e7763"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="045fd59b-46cc-4aac-b130-47d665771405"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="ba70f8b7-1554-4f37-90c2-4115662accad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="219f3ac8-fff7-4795-af02-5669d5be372e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Update_API" id="e5c16e0a-bedb-4bd6-8b08-f459237d09b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="1c8bfd89-68aa-4ae1-b56c-e1cbc81f528e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124157</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_e3ff1811-0453-47a7-a4ae-6c20740339d4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>219f3ac8-fff7-4795-af02-5669d5be372e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - Account _ResourceStatusUpdate - Verify with Old Etag - 403 Forbidden" searchProperties="true" id="df0e37ca-1898-44cc-9929-ad8ab5150cd6" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="446c314d-7dd3-403e-a33a-5ece5f7f4c68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="6f7c8dc9-8a20-4d61-9249-e4ef8f36b140"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="c6898ae9-72f8-4568-b9a0-a449b27e2d28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="afc0c275-b62a-4e3f-9fdf-50d82f6844ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="219d330a-4ee4-40d7-b8a0-49f3bad4f262"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="bc94d636-b640-4387-ba93-15b66711567f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for DECE_CS" id="cba96d23-2959-4e52-b20f-63f844fd8bb3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdDECECS"));

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("NODEACCOUNTID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_For_Dece_CS" id="c482a5b0-bdb1-4353-9570-a7d025305f97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="86966f49-c5f0-4c6c-8232-588bae2a3c8f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_AccountResourceStatusUpdate_API" id="c8e7b4f7-3b11-45d7-86dc-0e127218946f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountStatusUpdate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("status", "suspended");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="dbf1146b-15b2-4193-b614-86997e0fed96"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("NODEACCOUNTID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_403_Forbidden" id="2f88e516-281f-4932-a005-d94127909aa2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","ACCT_INACTIVE");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_12422</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_1de1756e-26a8-4228-8cf6-0f6d3a744f77</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9576e1d3-d1b0-4d86-ba7c-9e92f0acebe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>86966f49-c5f0-4c6c-8232-588bae2a3c8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc94d636-b640-4387-ba93-15b66711567f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dbf1146b-15b2-4193-b614-86997e0fed96</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - User _ResourceStatusUpdate - Verify with Old Etag - 200 OK" searchProperties="true" id="0848e03b-2f5d-4371-9247-ae52714d1c27" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="de19f964-829c-403a-a127-0f5c7ca26c86"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="f178ae90-e78b-4adf-a1b9-abdd94aa1564"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2d467b0b-33e9-4ee2-b563-70ded3872fea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="396d26db-eef5-4215-ba18-66c63cc2ea98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="ef2a3477-f3fa-4eed-8e0f-c85cca926578"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="2d8b1678-39f5-49d0-991d-6e05683d6db5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_For_RET_CS" id="8121219f-7b9d-44a8-b9a7-1e6d81887a52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="3915518e-2d6f-4c49-988f-f99f99ce1ae1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserResourceStatusUpdate_API" id="c79551c4-9cb8-45c6-8b82-e2e7fa90cdc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserStatusUpdate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("status", "suspended");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_200 OK" id="e5fc4541-8472-4f1f-bc56-4a9efb98f90e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_12427</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_fb01884c-5dda-4052-85bd-d4382f8372a2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaf34153-5d5c-497e-b344-c8511136ba32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3915518e-2d6f-4c49-988f-f99f99ce1ae1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserCreate- Verify with Old Etag - 304 Not Modified" searchProperties="true" id="c1d1dceb-db94-4431-afef-6cfa74418a8a"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="22dda43a-af93-45c1-8a1c-76d1d18a6b35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="9116b687-6d46-44cd-8849-f93527e02db6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="41fe5a4a-38d7-44ba-9f1e-8d1ad2f6c97b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="052874c7-427f-4a77-a8ad-9167c6f9f7d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="8ac09e4e-cc74-4908-b570-39e030d4b421"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="d3b15212-7054-4adc-bdff-e978d7d761cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="b474705e-6083-43b5-abe3-12d62cbd051a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="62fc8612-da23-4fa8-a418-02dbb18bc688"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140512_124215</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_0c41d221-52c1-41c2-93da-b81432016804</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserDelete- Verify with Old Etag - 304 Not Modified" searchProperties="true" id="9a2f139d-8e4c-41c9-aa7d-5f375cddd9bd"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="6adf290b-509d-4968-9881-e3e88b25b2af"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3705d4ef-5111-4c67-afa9-eb89150110d2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="1dd87382-7ff2-4170-83fe-5b568270d514"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="7f2778f1-61db-4c7c-abaa-80eaaa130905"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="a2f6c3e5-9a4c-4bad-9c7c-cac5a0a21ea9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="ec151cb6-bfd9-4350-8792-641867eaca73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="e02dbc61-b5bd-4124-ac82-08b41d5e944c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="47e9d0ac-8115-40ee-bdef-cda55ebc32ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_First_User_Get_API" id="d0e1476c-e6d7-4395-b8e0-10a8e5649e6c"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("FirstUser_Get_ETag",tP.getPropertyValue("User_Get_ETag"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_User_Get_API" id="b1175301-1034-47d2-b176-7589f99631fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID2"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_UserDelete" id="60f3adb6-5278-46e3-8b58-eadba6d45737"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERID2}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_First_User_Get_API_304_Not_Modified" id="8f6dbe6f-aeb3-4aa2-a209-3151b956d626"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("User_Get_ETag",tP.getPropertyValue("FirstUser_Get_ETag"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140512_124219</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_ccb81dec-77e6-4491-be68-525624f85d3b</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1175301-1034-47d2-b176-7589f99631fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - LastUserDelete - Verify with old Etag - 304 Not Modified" searchProperties="true" id="b3ef392b-b6ae-4df3-ad09-70843a0292f7"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="efa0e662-7704-488a-a081-cb5be1413f3c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="c45b0a76-3af5-42ff-a745-446c5e9be297"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="b6796a17-3b97-4b8b-8a70-3da033e59d1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b4e38b24-91d0-45b5-942a-adb9032b8609"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="14661beb-1bf6-4be0-af46-0daa3ea3b5a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="4352131d-e3e3-412d-96c2-b36bece9b204"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserDelete" id="2e27a1d6-cc53-479f-a0e4-3fb1c032ff5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERIDFULL}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("ResponseType","LAST_FULL_USER");
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="aca012a4-2c2e-4855-9abc-159491622c62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124223</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_3d75c67a-a81d-48cb-9db4-ece994d78614</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserUpdate- Verify with old Etag - 200 OK" searchProperties="true" id="f90e1a93-997e-44d7-8465-cbc8128b221f"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="169e4239-e661-4501-a1c2-1bf42510265c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="8bb0b979-1ae8-4b1a-936b-729bcc0fcaa7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="4040ceac-dc7c-45cc-ab96-f98785258435"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="37df8fda-93a2-47fc-9753-2cda44243924"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="cd0250ef-02b2-4481-8d5e-d124e7a15a1f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="9a91120b-ffef-4432-b776-db9088fb671b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="f4b675f6-355d-4b3a-a4a4-dae603a60fa5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_200 OK" id="3e591105-f385-40e1-9f6e-fcbeb383672a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124230</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_57e2341b-3983-4a77-a0d7-4c6793d15771</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - EnableUserDataUsageConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="a3c14c79-e382-404e-b58e-e4e2b8fb4c11"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="4532381c-25a0-49d8-a4dc-b47e220bb400"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="6256b394-267c-4a7e-85ad-7da4cbdaab09"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="3c2b64dd-da7f-4ed4-bbc0-fa6cefc89c6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="2b5027d6-4a03-43c5-b16e-eb8b5118b724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="3bc59d6e-9272-433b-ae13-f0bcfb66c3d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="3a7c359f-ff15-4e9c-856f-13e46ee843ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_EUDUC" id="2adae186-a2d3-42ad-9161-f283c16f8692"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);

def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '103'""";

log.info sql;
def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="72f49a6b-fe7f-4e31-8f59-37217638027f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="26349cab-b4e9-423e-9b58-c2c92b5aaddb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));



</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124232</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_b5a73dc0-7b1f-493b-87ff-bc49f48e0632</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - LockerViewALLConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="90ad60ff-5bbe-42a0-bffb-d90956da6342"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="a6d60c51-e9fe-4c31-ac61-6914830af356"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="b7e6ec7b-accd-4b43-8716-44e58ccf163f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="627a7241-81ec-4e49-98a7-5f91cc64b712"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="95be5fb6-491f-4b20-b57f-2eb6d5cb75b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="41be3cbf-689b-4371-a1b9-b460968da479"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="ec6aefce-5dc8-4b7f-8cae-3cb111990db7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_LVAC" id="718b9eee-3cb5-4dc1-aca2-5d85bfc5b8a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '100'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="6c6f9b47-57e2-4a4d-ae77-7e73ee9da719"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="4f159108-c278-42cc-8daf-abcfa80edaf9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));



</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_12446</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_57684603-1d8e-4068-98b7-db8f812cb58a</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - EnableManageUserConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="763b9cd9-0edf-4d32-98c2-6218b3053117"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="610a5cd5-0969-48b6-87ec-1a54ac04095a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ef3d56c9-d114-4a01-b954-e65613addc5f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="f9214677-fade-46ba-9005-f5a96a68a6f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="ec9f0483-dad7-477e-9563-973494ddaaab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="a40f9725-312c-4170-aa16-a4f535ffe03f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="a50d15f3-49d4-4520-a6a4-23493e281c21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_EMUC" id="c6bc04a0-cf19-4d30-a380-0052704f7cc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '104'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="6b51f34d-9ac0-4b4e-9248-35c67ab15662"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_403 Forbidden" id="7edf80e4-aa46-4f7a-872e-c0af59e38386"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","NO_ENABLE_MNG_USR_CNST");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));



</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124528</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_4b9ae4d0-6e16-4484-966b-e68fa7d17582</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - ManageAccountConsent- Verify with old Etag - 200 OK" searchProperties="true" id="f3fc7c54-02e7-4f2a-a584-fbf83456b814"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="4e1ab1a9-ea84-4a5e-a92f-590d2e7754db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="b8bcc01b-1240-421a-bb4a-035cd163ecbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="25508054-2dfe-4bf2-ab20-5003d2842fea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="fb8bfd93-8ccf-4294-b4c7-5d6cfc21cab0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="3847a948-2df4-4246-94ba-78d3b75a2eca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="a8fd0ad4-63e8-4b60-bde2-39f00bd21f46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_MUC" id="e48121c0-5d11-43f7-a2fa-cb87218ffcbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '200'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="d5433b1b-f2d2-4fa1-9350-1975d4309ed0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Polices_MUC" id="3ad97ac8-2f11-43a4-beea-20cb23fcb1c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUserMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_200 OK" id="f74d212c-f1d9-470f-9faa-b210f8cfdbd4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));



</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124647</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_f745d6e4-2324-4caf-905a-87bab2ff0c7b</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3ad97ac8-2f11-43a4-beea-20cb23fcb1c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - ManageUserConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="6bd5c0b6-e314-482d-b59a-7ed0f799a138"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="1210ecc0-6742-47bc-9c59-eae37d094921"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="03a5f7a8-1051-438c-98f6-fa95fb4bd092"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="21a64e4c-6375-4446-a38e-18095fb79777"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);


assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="be203a37-2c22-411e-a697-8f664cbb1a86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="6f70a905-6467-4809-9117-638a996d1fe1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="305c54d7-ddf2-44a5-bfa9-382454e325ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_MUC" id="b9282d1a-1e61-479c-924d-083af3193a6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '200'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="7690e1ed-c700-47a3-86a6-e28b2de3f891"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_403_Forbidden" id="a53e04fa-cfdf-4d50-864a-7ec5b51cc345"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","NO_MNG_USR_CNST");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_12487</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_5fd398b2-1e8c-4d00-aef0-2d2abe23241a</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserDataUsageConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="00041c8b-0562-48d6-8040-57fb8c1005c7"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="af2a00ee-56f8-4410-b71b-0c9fb495ab8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="110123f3-021d-4ff9-94e9-fb41a636e9d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="396ff008-467f-4652-9c63-52d4eb2ba136"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d6aa271b-24c1-4030-bcb3-eecfcc2f1127"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="18a4cba1-f3f9-4d78-8e78-36e8562c4b81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="8f724ae7-f3ac-4794-a1af-3eda15ef7d14"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_ULC" id="488959f9-ef78-4dcb-b8f5-39a964e8e8e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '201'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="6d011a3e-3b20-4699-a3c4-ae0af6204f73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="14109b65-a285-497d-a17a-81dcf4593cf8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_124926</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_601cc543-1bca-443f-9a3d-8ba91eeef49c</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserLinkConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="58cbc03b-f249-41db-b94d-be7a8a43590d"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="c1e41590-b29d-45ec-894b-755ce1699cf0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="6024a3dd-9de5-4d68-ba8d-89ae0d08b4ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="809bf87c-8322-4a23-8604-d082661c8ee4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="0ab368be-f003-44f5-9c32-ddae447ddd78"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="0999b027-9c10-41a5-b7c3-81f8a458bcf1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="d14c4919-8c72-4a62-a77e-d0ac6fdbfd2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_ULC" id="4c7716c0-ef76-4b9c-94f8-921ec0ed525a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '203'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="90fc91a1-a832-4fcc-8bd5-96ba0a9c4d19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_403 Forbidden" id="e47b73cb-d29b-46a8-a09e-1ee91d35e4a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_125210</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_623bb816-3476-4b3e-a39f-28ac79aadcad</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - StreamCreate - 304 Not Modified" searchProperties="true" id="ad68debe-298e-4025-8d28-50c2db9f1943"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="85615800-be39-4ff2-a2e5-8d12af94f2a1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue ("audience", "urn%3Adece%3Aorg%3Aorg%3Adece%3ALLASP");
tP.setPropertyValue ("audience", "urn:dece:org:org:dece:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="24c01c49-655b-4289-8d40-78016ed7f145"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="96d4ad63-bb5b-429e-ba1e-3ba60ce3e3c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="55eb5316-39b1-4416-98c7-a2138dc24844"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="4c69e7de-42df-46f2-9fab-439c6c14cc51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="8bf24338-5767-4e38-ad4a-64ed66231a72"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="eddf2267-5323-447d-97fb-60ecaa813575"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Create" id="38e605f8-6749-4535-88da-7b6c6902ee22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","LLASP");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERID")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="a1160226-6670-42ca-99b4-ec6755e9eec6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081140</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F4D466F9A0F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C565B52AFE980E0401F0A07992167</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C565B52AFE980E0401F0A07992167</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F4D466F9A0F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C565B52AFE980E0401F0A07992167</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F4D466F9A0F2E1E0401F0A05991C52</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12D182C03D52DE0401F0A07991D24</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F8F12D182C03D52DE0401F0A07991D24</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>655</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:F8F4D466F9A0F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F92C569A511FEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F92C569A511FEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_743f1258-710a-4176-b42d-8e9978bdfee1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - StreamDelete - 304 Not Modified" searchProperties="true" id="65b02501-04e9-4bad-b593-ceb5e480fe51"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="e31893ae-2492-4e49-a4b2-ad2fe7fcef1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue ("audience", "urn%3Adece%3Aorg%3Aorg%3Adece%3ALLASP");
tP.setPropertyValue ("audience", "urn:dece:org:org:dece:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="7dd12130-7dcf-49d8-b5e3-127c39605267"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="cb5fd744-e695-43cf-beb8-339e312eb20d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="49342641-d42c-462e-8211-85c5774bbe88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="66378eea-171d-432a-9ef2-bf4bd419a5c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="bdda934e-0d0f-42b3-9493-1855797fbc98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="37f9781d-4b8d-4511-abe1-63c981017284"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Create" id="e691c571-9bba-4879-a4d7-c7b532e5dfc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","LLASP");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERID")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Delete" id="46e6f2b9-b959-4630-9b7e-cae7e3737a5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamDelete API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="a273bf8b-6108-4a7f-87a4-9216d65dd5e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081145</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F92C565B52C1E980E0401F0A07992167</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C5743B8404D0EE0401F0A05997A16</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C5743B8404D0EE0401F0A05997A16</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F92C565B52C1E980E0401F0A07992167</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C5743B8404D0EE0401F0A05997A16</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F92C565B52C1E980E0401F0A07992167</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12D327AEDD98EE0401F0A07991D37</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F8F12D327AEDD98EE0401F0A07991D37</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>357</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:F92C565B52C1E980E0401F0A07992167</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F8F4D4C2E20B567EE0401F0A05991C4A</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_2db2ce81-0d9e-45d9-9673-3560056fc1e4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>82159739-5aab-4570-a82e-e38dc2d19b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet 107 - UserCreate 111- UserGet 107-Verify with old Etag - 304 Not Modified" searchProperties="true" id="2bd551d7-f692-4cda-a415-4be6cf583ba3"><con:settings/><con:testStep type="groovy" name="Set versionMinor Property to 11" id="ba533d53-5a24-4b43-8768-e266205dc6d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="01b8cd61-0017-4765-9bfa-10cd21de1e52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="5f7d5c81-c928-489a-9ab8-79b1150c3551"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="96fc8d77-e1c4-4d7a-9c10-09090fce88d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="96b48b08-a91c-4b10-8b75-a8db43012c13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="109dffbe-7f43-4192-a848-a3a9790d981d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="78ffe97f-4c04-4674-98b1-19bf4a139291"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="62327597-7594-40ba-a266-a87023de54e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 07" id="01e9ea2b-03d7-4bef-b925-da9973f16df5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","07");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="4d1161c4-d0e6-4e86-8f4c-9437c84fa8f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nodeuseridencoded = tP.getPropertyValue("NODEUSERIDFULL");
myTC.setPropertyValue("NodeUserId",nodeuseridencoded);

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140512_081152</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_6fd7399a-fb6d-4fd3-90f5-44461a3455ef</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ba533d53-5a24-4b43-8768-e266205dc6d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01e9ea2b-03d7-4bef-b925-da9973f16df5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet 111 - UserCreate 107- UserGet 111-Verify with old Etag - 304 Not Modified" searchProperties="true" id="e92d8f58-6280-4d26-b05f-933fc9b0d685"><con:settings/><con:testStep type="groovy" name="Set versionMinor Property to 07" id="522a5384-835e-4510-98f8-e5e4ca5b4fcb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","07");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="9db7f16b-e959-4fa3-923a-2b7f9b1a0e62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="78932d21-aef4-47de-8b4d-ce6761d46588"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="50e9f1d4-2146-48a6-a4a7-ae5e0011625c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="502d26ab-99f8-4ea2-becc-7d8622ccf257"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="53923773-d6dd-41df-8b11-85376611bbaf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="2f9011e4-66c0-435a-928e-362386d964c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="57e3eca7-7808-4446-b83a-6ce2ad1a54e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="d469090d-bda6-46a8-b29c-ef3d25280271"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="cd288398-8f04-4639-81ac-3ad00b24e8a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140512_081157</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_e8c4c7d6-431e-4ad6-bed1-b5aa45ce4d16</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea1d5408-2330-44f2-83b1-0858991b5659</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6462aae-3219-4c03-b7ce-793bbf08af8b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>522a5384-835e-4510-98f8-e5e4ca5b4fcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet 107 - UserUpdate 111- UserGet 107-Verify with old Etag - 200 OK" searchProperties="true" id="d521f123-ecf8-4e59-9c72-f0eb7a2711db"><con:settings/><con:testStep type="groovy" name="Set versionMinor Property to 11" id="3bcda5de-58c8-45bf-8cab-fed0b4e2cdba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="de4ecd19-25d0-40f8-a987-ce2943eaa087"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="71a9b48a-9209-4f2c-8bd7-76b55df95656"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="352243cd-231e-4143-aaea-8a2682ed54b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="6f254035-2249-46a3-bcaa-9df3db44d502"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="fe5c42cc-3598-4161-a01b-1ee419d586b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="33031ed3-dfc4-4c77-80b1-c17746719ce0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="ada90046-0d5f-4e86-865c-a58a5803a0d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 07" id="659b56c9-d01a-4913-9bcb-20496e892b22"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","07");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_200 OK" id="4e922268-88c5-448d-8171-2911aec3efb5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nodeuseridencoded = tP.getPropertyValue("NODEUSERIDFULL");
myTC.setPropertyValue("NodeUserId",nodeuseridencoded);

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_08121</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_66198a0c-bf4d-404d-be4f-793a79d7de3c</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e992ca86-2eb9-47b2-869e-5c7d08bddab0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3bcda5de-58c8-45bf-8cab-fed0b4e2cdba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>659b56c9-d01a-4913-9bcb-20496e892b22</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet 111 - UserUpdate 107- UserGet 111-Verify with old Etag - 200 OK" searchProperties="true" id="fe20c13f-ff34-43ee-821d-95591bea7116"><con:settings/><con:testStep type="groovy" name="Set versionMinor Property to 07" id="4aced0d6-4c1b-44cd-8f5f-0ac3b33f743c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","07");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="3fd42373-0c2a-4a4d-aee5-fdd3848137ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="7c3f6181-e522-4f45-a55d-fa29cd84f0a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="43eef34e-2ccd-4ce8-b588-481e1ddfe4fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);


assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="00a35c72-64a7-4322-91ab-3cacfa03c982"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="af19f25b-c947-42de-9b91-74c3c261736b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="14350ec4-c3e9-4e93-b050-1be44d96f8db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="262858f9-1449-420f-8bd1-0c5fc50ab942"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

def nodeuseridencoded = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERID",nodeuseridencoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

tP.setPropertyValue("NODEUSERID",nodeuseridencoded);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="b0c35d5a-fb36-4193-a5f5-3843522b996f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_200 OK" id="5622ed92-50d5-4594-b8bf-2696595f1432"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_08126</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_34885b42-b56c-4a07-88e5-09355d401a88</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4aced0d6-4c1b-44cd-8f5f-0ac3b33f743c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - RightsTokenCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="b0f2234a-a20f-479f-9172-68ab42283b6b"><con:settings/><con:testStep type="groovy" name="Set versionMinor Property to 11" id="5170ba23-d2dd-42b1-9311-ad8bb93d3c53"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer" id="0cd6e5b6-bbcb-44ae-871c-b3451a2b9f00"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="d3916553-0a97-4fd8-af5d-a67758b95610"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="00cdc649-2a4f-4f30-aa94-5c04629dee57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="40ce42c7-87f0-4016-bed4-381f0e24b69b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="bca6adfe-8751-4d0b-93d7-3ab5958383f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="66420a7f-d859-4521-b146-b523ebafff7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="4ef14eb8-425e-4e3e-a97f-9130bf37aaca"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="937a80d5-ae9b-45fd-8526-708f67dbb51f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081753</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD7E352A3E0401F0A07991D20</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCD376EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCD376EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD7E352A3E0401F0A07991D20</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C565CCD376EAEE0401F0A0799215B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12CDFD7E352A3E0401F0A07991D20</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F92C565CE53A4136E0401F0A05997A0C</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F92C565CE53A4136E0401F0A05997A0C</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>283</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_8c078907-5a84-4ffa-80ac-8f5119ab91c5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5170ba23-d2dd-42b1-9311-ad8bb93d3c53</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - RightsTokenDelete- Verify with old Etag - 304 Not Modified" searchProperties="true" id="b46cbc54-515f-43f4-a45d-d021651453a5"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="5ab51c46-5c09-45f2-9da0-dd768a1b0583"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="af1db9e4-e6dc-4b04-ac76-3ed3a8821f37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="815a5abd-902b-4b38-9dd0-f74efdcb5c31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="1e00c256-4a23-4c79-bfe8-640d048c3b92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="2d24bfcd-c2d7-492b-98e8-ab84113c13ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="ba6b4598-254a-4d30-b9dc-70eeb55f345d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="371052ae-f288-42ce-b3df-434cac983a62"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Get" id="39d290ff-149f-4ea1-9a6b-47a5f98a7acb"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Delete" id="71cb200c-addf-4fe9-b769-b7c30f7d66da"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenDelete Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="65eaf645-9ce2-41c4-94c2-d5d40875e8f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_08127</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD5E952A3E0401F0A07991D20</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C5583ED90F282E0401F0A05997A0E</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C5583ED90F282E0401F0A05997A0E</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD5E952A3E0401F0A07991D20</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C5583ED90F282E0401F0A05997A0E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12CDFD5E952A3E0401F0A07991D20</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F92C565AF61B6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F92C565AF61B6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:F92C565AF61B6E0EE0401F0A05997A10" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-05-12T12:12:09.815Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-05-12T12:12:09.819Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>193</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_9b04042d-b5d1-49a3-a9c8-3991874e0336</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8337ac8e-503c-4f7b-966e-a89c0c01f8a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>acd1feb5-5a27-4611-b3e0-a5deee98f691</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>371052ae-f288-42ce-b3df-434cac983a62</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39d290ff-149f-4ea1-9a6b-47a5f98a7acb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71cb200c-addf-4fe9-b769-b7c30f7d66da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>475a222b-438b-4448-a5bc-e690f3d3f40a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - RightsTokenUpdate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="4eab53bd-bf6b-41ef-8c60-2957a9cecd7d"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="334b43fa-7638-4370-895a-7f55758f8b78"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="22be9be5-2dc9-48b4-a0e0-69608b80e464"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="6b899c90-1fe8-4168-be46-66160a12fe2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="4c3ad459-fb38-43ba-aefb-31a32adebf70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="170e5f60-4409-4964-b747-b21f35fa1cac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="475a222b-438b-4448-a5bc-e690f3d3f40a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="33449983-60ec-4e16-9fba-3a37e3bd8863"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="c4ba8e55-4add-4248-b166-b3082fb3a273"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Get" id="9a50df56-c234-4026-b218-152c964712b4"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Update" id="22ea7dc9-c3d4-480b-b9d5-19f20f89b5f7"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenUpdate Request");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

def rlid = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API").getPropertyValue("RightsLockerID");

testCase.setPropertyValue("RightsLockerID",rlid);
testCase.setPropertyValue("ALID","urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt");
testCase.setPropertyValue("SoldAsBundleID","");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");

def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","RetailerTransaction_1_node2199_RetailerNode");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTUpdate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="8ec4c511-3326-4da5-9e58-6b2cf8cf1c50"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081221</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node2199_RetailerNode</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD60752A3E0401F0A07991D20</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD60752A3E0401F0A07991D20</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C565CCB9F6EAEE0401F0A0799215B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12CDFD60752A3E0401F0A07991D20</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F92C569A51AEEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F92C569A51AEEFB2E0401F0A0799216B</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:F92C569A51AEEFB2E0401F0A0799216B" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-05-12T12:12:25.395Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-05-12T12:12:25.400Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>163</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:F92C565CCBA76EAEE0401F0A0799215B</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_1675eb95-de97-439f-bd35-0c56069cc73d</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1bbe41c-eb90-4c2b-af84-e035bd33ab3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8ec4c511-3326-4da5-9e58-6b2cf8cf1c50</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b6b117-66ad-45b8-b5db-a6cffd03851d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet -AccountMergeTest- Verify with old Etag - 304 Not Modified" searchProperties="true" id="346492fb-e3e9-404a-9d49-1c60111fbbe1"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="3baa6bc5-db31-40b9-aa87-fc8783ad766c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="c86b1ac2-d721-4770-958b-6f6857d4fd4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="d9b5b03a-c629-48f3-b567-ddc1b9f110db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="8537d01c-ad34-4538-af90-0d64e5fa99f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="a1260bfc-3b7f-4e61-a52c-af991ce2192c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="25d213c5-d50f-46f4-9c74-aca758dd31c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="ce92834d-6a86-47e1-8b86-fcbe335a9bc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="bf055113-2ace-4d1f-87f9-cc45c550911e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="8a4e72b4-d19c-4f66-9cf9-90ceabb79833"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="94e62278-bbe9-42b4-bd2f-e28b57709515"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeTest API" id="3c1365ec-6d49-4d7f-9c53-b3b627d8c668"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeTestRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="1ec047af-aaf3-4d9f-ab8d-b4b16770ec95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL1"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081237</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:F8F12CE09BBB20F8E0401F0A07991D39</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:F8F12CD723196A81E0401F0A05995498</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_45c07717-e4d2-41e0-afe9-a6cf4ae68b65</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>25d213c5-d50f-46f4-9c74-aca758dd31c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountMerge - Verify with old Etag -200 OK" searchProperties="true" id="0298cf13-f05c-487a-8dcd-ac192235a0ec"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="e11363a4-180f-4483-bf7c-98e7fcccb9f5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="a9bdb1ec-e5bc-493f-b729-18204849eab7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="7636a32c-7e23-41e3-9293-d51ce3a9595a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="8a6f7e4c-de0a-4af7-a28c-a90f7fdc66a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="8e7efda2-6456-42b6-bc0c-1e343185cbeb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="dadd56de-4ec7-4fdc-b624-bf6f5c61a4d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="9c3c1d9c-8330-4bfe-9c5b-3cba23b2822b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="937f7e0d-8e66-454d-a2e0-130183c94957"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="c5cca15a-9392-40b2-a676-86b8b70ba511"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_Account_User_Get_API" id="2aab2cc2-3ebe-404c-a9c2-7b1c560da2ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_2"));
tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("RetiringAccID"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL2"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMerge API" id="aca58a73-a297-438e-9b1b-5ce3876ddbdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TokenExchange" id="7d7f8e4c-0f6f-45aa-9a9c-1c35517fce80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Token_Exchange")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("AssertionUUID",tC.getPropertyValue("AssertionUUID"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_User_Get_API_200 OK" id="27a329a9-4be1-4ba8-a7a0-782816fe119f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL2"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081243</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:F92C5743B8A44D0EE0401F0A05997A16</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:F92C565E493FBB04E0401F0A05997A12</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_2560b422-88af-4809-92f9-4ddcf201c4a6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aab2cc2-3ebe-404c-a9c2-7b1c560da2ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d7f8e4c-0f6f-45aa-9a9c-1c35517fce80</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountMergeUndo - Verify with old Etag -304 Not Modified" searchProperties="true" id="2180421f-c927-49a9-92c8-cbdb9950b5a3"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="2876ed7a-e5c5-42cf-84fe-2dce62e80804"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="3a5ce6f6-76a0-48b1-8041-0cf178304c09"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="374529cb-d9b9-452f-9e34-ded39aa38f21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="ed145687-feed-40e4-b20f-776afd773582"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="94859eee-012e-42f4-b75a-733cc19453ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="3aec2761-405f-4ce8-816e-f165c2498dbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="aefd8539-d2b3-4352-9653-aa4f6fce5d7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="54f529fb-838f-4d38-b733-29fd23c0aee3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="2b14b21d-b6ac-41f6-9eea-313a7419b7cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="537c43f9-8295-4f15-95d9-40cf690feb7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="AccountMerge API" id="a9a0d921-9577-4352-93f5-1721398edf11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="742a75de-ad67-416c-8375-6fbf72f3e44a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML_1"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("SurvivingAccID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeUndo API" id="7ffb0e5d-c426-4b09-b3cd-6bbe6ca7e311"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeUndoRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="42372549-2288-4d84-aedf-bd5b60383577"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML_1", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("SurvivingAccID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="3cf32dc9-cb3e-4d56-955d-adc8c149b5b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL1"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081251</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:F92C565B5331E980E0401F0A07992167</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:F92C57798A82472CE0401F0A07992169</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_59a87474-3d27-479c-8750-b0bf143b865e</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>984d447e-d5dc-4e7e-b381-5d17f8961aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320a452f-f00b-446e-bb96-65374d5d2af0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>911f1fc9-f177-41d0-90b5-467b9760cc90</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3aec2761-405f-4ce8-816e-f165c2498dbb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountMergeUndo - UserGet with Invalid User ID - Verify with old Etag -304 Not Modified" searchProperties="true" id="7a339957-12b6-4659-8d89-02146a13c303"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="5ffe25a6-9b34-481e-b22b-1bbde6abefff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="8da72421-1d98-4cf7-bf62-c6a0202dc9d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="61fd6595-d850-4dc5-a1bb-bd920d89eb24"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b04e42d8-b5e7-441f-85cc-903774045908"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="891a054e-ce1f-40ab-a17d-a61babf1a673"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="68748821-2605-4678-b8a1-8e5b23885045"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="ac46e67a-97a2-4d70-b830-cabace9b7547"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="884c2b6d-dc90-45f4-9a11-462bc75ff24b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="bb32d546-898f-4c9c-8b21-5182a4585762"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="1ee8b877-0313-47ce-af0a-8fbf1ed89a10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="AccountMerge API" id="f776c4d0-2d8c-4d57-897b-15fbc74af76f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="f2110bed-1139-44d3-a9bf-4496f59977dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML_1"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("SurvivingAccID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeUndo API" id="73c9b74c-18db-45f0-ba81-dd585337fc53"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeUndoRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="bc82415a-3cbb-47ae-832b-e8199a545536"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML_1", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("SurvivingAccID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="8e5bd3a3-57c6-4f80-b12b-bf0d9a346413"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("NodeUserId","E501A9DE7019CB21E0401F0A2199721F");
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","USER_NOT_VALID");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_082037</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:F92C565AF8306E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_4068653e-f916-476d-aeca-5e2cc257a75c</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>984d447e-d5dc-4e7e-b381-5d17f8961aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320a452f-f00b-446e-bb96-65374d5d2af0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>911f1fc9-f177-41d0-90b5-467b9760cc90</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3aec2761-405f-4ce8-816e-f165c2498dbb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserUpdate_If_Un Modified Since_UserGet-If-modified-Since- 200 OK" searchProperties="true" id="11ed6803-3633-49b3-8116-1100a0ce580e"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="847786a2-d5b9-42db-9ffd-8b387cba448d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="c81c9393-4040-455b-9109-3d763bfeaead"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="54c6d178-3648-4dda-b1a4-8662117caa01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="332bc2a5-abc8-4564-8584-13725fe19659"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="de6cd055-ac2e-4a00-95dc-0a2430215a1f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="1ce40bab-9889-4834-beb7-762604bc085c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="0549b939-2f72-4640-894a-460e0a4e8139"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_200 OK" id="8b031847-d46e-4271-a5eb-2ca27ea9a0e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-Modified_Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_08132</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_a79266d2-0ac4-4160-a0ee-af4696fc03d7</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - UserDelete_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified" searchProperties="true" id="848bde7d-ff08-4690-b16f-1d8630c5ddfb"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="89b4bd03-2bfa-41a3-8714-5b2e6bb0a5ea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="c6e257d9-5ae3-448a-a298-b5ac611a8193"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="9e0c042c-c8d0-49ae-a277-00f9f1d5c846"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d965aca9-2fde-4f21-b152-4364369a30f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="bc2f2ed5-5959-4fdf-b210-b444d0d1a78c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="ac39b28b-3209-47f8-8024-4ce7513557f1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="11c9b73c-d53a-4611-9ca5-5ad651051af7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="b5803cc2-6f93-47da-b677-259285e27a24"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_First_User_Get_API" id="7eed3cf7-7110-493b-bbcb-9c8e80eb9695"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("FirstUser_Get_ETag",tP.getPropertyValue("User_Get_ETag"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_User_Get_API" id="ad921b15-eb4b-40d6-8ef1-47413359aa2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML1",tP.getPropertyValue("SAML"));

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID2"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML1"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserDelete" id="c6a3bd8d-f6e5-40e1-b9ed-54b777a67026"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERID2}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));
myTC.setPropertyValue("ResponseType","SUCCESS");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="9e347e86-7d1a-45c7-9ff0-69ef5b7cab91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("User_Get_ETag",tP.getPropertyValue("FirstUser_Get_ETag"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-Modified_Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20140512_08139</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_9ab7bd4e-4c3b-4dbe-bf54-853b970986ea</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f85c0b02-a5d1-4a59-9ca2-f02760e05c97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>794eca3e-99a0-4a6a-8715-b76f7c02cd33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eed3cf7-7110-493b-bbcb-9c8e80eb9695</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountDelete_If_Un Modified Since_UserGet-If-modified-Since- 403 Forbidden" searchProperties="true" id="92f38700-0031-49d1-ae32-d48f954da15c"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="e1c5786e-27d1-484c-999c-800ba9999a9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="5fe86122-135d-4e32-9328-c7e0a340cf17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2f617277-ef05-4f79-aaa6-a5ebb7872afe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d37a884c-f641-4f08-bd34-18bb6f6d5a39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="5533f31d-f98f-46a1-8b55-1932f377b3ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="9b13ab6e-5324-49e2-bb31-feee88afea4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="0d62fc0d-16be-4048-8d22-25d97b2ca940"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Delete" id="6e1e0a6e-7f62-44f4-83d2-751ff7841a0a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_403 Forbidden" id="6d7ff102-1b12-48e1-a13e-c139fdf445dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-Modified_Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081312</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_28e6d395-422b-42a9-acb5-02a210d51c81</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f85c0b02-a5d1-4a59-9ca2-f02760e05c97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>794eca3e-99a0-4a6a-8715-b76f7c02cd33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b13ab6e-5324-49e2-bb31-feee88afea4f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d62fc0d-16be-4048-8d22-25d97b2ca940</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - AccountUpdate_If_Un Modified Since_UserGet-If-modified-Since- 304 Not Modified" searchProperties="true" id="daf2d364-2b1c-4c4f-81c0-2aaab55e3f43"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="b201804f-99ab-42aa-a914-15399ef1ad0a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="76e48771-3210-453e-b3e6-3ccb22116203"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="b04aaefe-1e2b-42c7-b9d5-f6a8151682c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b6d1d120-808e-453b-aa65-be53f5f68ccf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="222652d2-f9d4-4d5d-8143-cffbbfcbe054"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="3d8d3d85-84fd-43e6-8db5-0159b5dbadf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="c5803b5a-b8fc-49d6-a5fb-d4444b1bca1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Update" id="c2856c32-4b4e-4a7a-a9f7-d8992be24f88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API_If-UnModified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="50042437-6581-46a5-b148-47ea1d5704b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-Modified_Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081316</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_502cbd97-e9f9-4137-b0fe-d3d352e68df8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887537fd-2c59-4997-8242-b42cab2ed56a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f85c0b02-a5d1-4a59-9ca2-f02760e05c97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>794eca3e-99a0-4a6a-8715-b76f7c02cd33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657f9eb2-2b2c-4bea-bab4-1ed3f9ebdc1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d8d3d85-84fd-43e6-8db5-0159b5dbadf6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5803b5a-b8fc-49d6-a5fb-d4444b1bca1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - DiscreteMediaRightCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="c5422181-517a-4a94-a528-b133ec24a679"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="fa79ee59-01db-4924-9fdb-0fd87208d22a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="d966e986-b693-4aa4-9837-de0ec363aff7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="9f8da26a-4539-4118-811c-2f01f00d404e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="40b54bb8-c7c2-4ae5-b299-7095085c4496"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d1889785-3500-49de-9379-984d50fffb80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="f9fa89b4-123f-40f3-a74b-ec479d5bec1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="4b83f4c9-ae6e-4741-a604-eea3ffdf4934"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="636cf67e-4519-4ab8-b104-d26e8040dadf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="f11b7105-d8a0-4251-96de-f176483347df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081319</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F92C565AF6ED6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C5583EE2BF282E0401F0A05997A0E</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C5583EE2BF282E0401F0A05997A0E</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F92C565AF6ED6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C5583EE2BF282E0401F0A05997A0E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F92C565AF6ED6E0EE0401F0A05997A10</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12CD723AB6A81E0401F0A05995498</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F8F12CD723AB6A81E0401F0A05995498</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>212</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD188C0B79AC9C8E0401F0A2199667E</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD188C0B79AC9C8E0401F0A2199667E</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_ce21ab4e-d148-4ed4-be79-f187d4062c19</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43f116a2-8286-400e-80f2-c7e02948ea8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f9fa89b4-123f-40f3-a74b-ec479d5bec1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - DiscreteMediaRightDelete- Verify with old Etag - 304 Not Modified" searchProperties="true" id="75315e2c-fc76-4ef1-b9d4-5d18c2edb02d"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="c7621d31-1461-43b6-8cc4-a5120b869768"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ce427959-97b2-47d6-b332-7a625e6f7cdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="b46c569c-92f0-4411-b97f-d4b1ca2f3abd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="47ae271f-69ce-423c-a7bc-5ebd967d4385"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="c82499db-341c-442f-a22f-6897fd7d3732"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="50882c20-741e-4ff6-a846-28fe55f277b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="17967e01-6021-4abf-a500-36ebcb31100b"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="9d231818-3f65-4372-8c68-9cf888b89619"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet" id="7649b280-4a1c-4804-a3fa-e9899405bd74"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDelete" id="679f736e-d724-42ec-a7bb-3cd3d91b7ed1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightDelete');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="b8181d0f-ddbc-472c-ba3f-6922ab0548c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081323</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F92C565D62279A2AE0401F0A07992161</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C5545A0E1EF56E0401F0A0799215D</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C5545A0E1EF56E0401F0A0799215D</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F92C565D62279A2AE0401F0A07992161</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C5545A0E1EF56E0401F0A0799215D</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F92C565D62279A2AE0401F0A07992161</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F92C5582990BF11CE0401F0A0799215F</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F92C5582990BF11CE0401F0A0799215F</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>441</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD188C0B824C9C8E0401F0A2199667E</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD188C0B824C9C8E0401F0A2199667E</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_403b8c00-fbe7-4fbe-91c0-3e0fcac0f496</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcfef636-c58b-4da6-9545-ad73f56ba93d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a6b3ce9-49c3-455e-be45-51955c7e11c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b8ad446-e7cb-4267-a9ce-1d3f58686211</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50882c20-741e-4ff6-a846-28fe55f277b9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGet - DiscreteMediaRightLeaseCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="1748b6f7-6e09-4cde-bbb1-fb6d2f4cc178"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="d4d0f6f4-499d-46f7-b75d-1d02f3d7a5cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="2898421e-2e6a-4d1f-9c10-8dcc16966daa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2e4d7c63-f919-4811-abd5-d73017046ced"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="5b31d77c-44f8-4d0a-82be-021a6359092b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="6c009dc3-79de-4440-8ddc-68c39d8688db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="c37ed524-869d-4a8d-bb92-19d757432217"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="2a1b8715-4f71-4e8a-a64e-4111ae34a303"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="289117f6-fb03-47f4-9924-47f67b985e45"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreate" id="86053121-ab4f-4871-ada3-e852bdc38c3c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API_304 Not Modified" id="ffbdd177-3d67-4546-b114-648cfb881d45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140512_081327</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:F8F12CDD0B688AEFE0401F0A05995484</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:F92C565AF70E6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F92C565AF70E6E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F8F12CDD0B688AEFE0401F0A05995484</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F92C565AF70E6E0EE0401F0A05997A10</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F8F12CDD0B688AEFE0401F0A05995484</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F8F12CDFD6B652A3E0401F0A07991D20</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F8F12CDFD6B652A3E0401F0A07991D20</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>376</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD188B4ED914183E0401F0A21996674</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD188B4ED914183E0401F0A21996674</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_7c9f1e38-b0f8-4ede-85cd-e2e420458ec2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43f116a2-8286-400e-80f2-c7e02948ea8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c139326-420a-4b99-b011-0587f4fdbebf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26ef2521-e044-40d5-b4c0-a9db764d3d8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c37ed524-869d-4a8d-bb92-19d757432217</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="UserGetList" id="96472567-a4f7-44d7-90b7-649fd7e1da17"><con:settings><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">E:\Praveen_backup\e\Cache_Reports\Build_111-002\R5</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - AccountDelete- Verify with old Etag - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="417058b9-401e-41fe-921f-ec526cc0b092"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="aa545e90-426f-41e3-b5a5-5bcffa56ff60"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="22226ef1-c4c1-4c80-8408-920ae9f8c7d2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="679ff27e-d35d-48e2-97f1-81d901b77021"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="11d97726-59ce-4bca-8fff-278e6c5440bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="c8767366-86dd-4b6a-91ab-bf58d2835c0e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="a6544417-d258-4e04-b181-e5d4f5fa3946"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="f4602766-041a-4ed6-a894-287ed715e96e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Delete_API" id="2ec4d917-b660-4ac9-8b83-6a3394462c8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_403 Forbidden" id="f033b870-c51e-4924-85a2-c5b78b486e48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101723</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_9220d901-720f-4dd6-a674-37bd65b7b206</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dea515b0-b23d-47b6-b2a1-ceb0e11a78a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a6544417-d258-4e04-b181-e5d4f5fa3946</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b57125b-c34c-4aa7-b456-66277d2822d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2d098188-ae22-42d5-9134-0fe53f4321d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - AccountUpdate - Verify with old Etag -304 Not Modified" searchProperties="true" id="d7e7fccb-9f90-4596-aa2b-a311408fdb0d"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="edf5befe-8018-46ac-9fec-f44248892ff6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="adf0b61f-c9fb-4970-8f68-82d1e6ef81d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="54215ecf-d8fd-40fb-a1a6-87466ad3f50e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="78176816-f19e-4a5b-9a77-c5dc11241ffe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="2525da48-e6d6-4da7-8f86-b6009758e435"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="7b57125b-c34c-4aa7-b456-66277d2822d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="f1f57a51-72bf-49be-8a7d-7e9b491d32aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Update_API" id="df829c29-0308-4dc8-ae1d-5b965b2ac32f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="c38cb320-4bf1-4c83-b688-1d4f28612a12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101729</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_85948f11-1b35-4ff1-92d9-17d4b4668b72</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>219f3ac8-fff7-4795-af02-5669d5be372e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>414f7419-7192-485f-8da2-0871e2475b24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - Account _ResourceStatusUpdate - Verify with old Etag - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fa2ea190-3a70-42b7-991c-fd7c0d5985d6"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="6ac6f950-b83d-4d92-9633-a6f9e3419cd0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ea5ed44b-432e-46a4-89f4-11626d119fc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="695a1e3d-d7b1-429a-be45-0d235dcd300d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b6631e9a-c7ef-4cea-ad89-5a51f0caaf34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="4f468f50-ea01-456a-b383-616146c8990d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="1699fe5d-7cda-4a7e-8986-e26a474c3d5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for DECE_CS" id="8be6a918-987b-4b3d-8928-aa9af09fba6e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdDECECS"));

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("NODEACCOUNTID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_For_Dece_CS" id="583baa5b-6185-4937-844a-0bfedded23c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="4bdab2a4-17c7-4f61-8b8c-2abf5785c785"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_AccountResourceStatusUpdate_API" id="7aee42b1-9a13-442c-ad31-164ccfa70592"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountStatusUpdate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("status", "suspended");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="bebe7bf5-8b3d-4e1f-b52a-3bb6112b72e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("NODEACCOUNTID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_403 Forbidden" id="58050ef5-c26a-4209-941c-47ece427f553"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","ACCT_INACTIVE");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101734</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_fba1d059-c704-4cd1-9210-04c879c88106</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9576e1d3-d1b0-4d86-ba7c-9e92f0acebe1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>86966f49-c5f0-4c6c-8232-588bae2a3c8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc94d636-b640-4387-ba93-15b66711567f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dbf1146b-15b2-4193-b614-86997e0fed96</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1699fe5d-7cda-4a7e-8986-e26a474c3d5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - User _ResourceStatusUpdate - Verify with old Etag - 200 OK" searchProperties="true" id="6c6689f8-4170-4598-84e6-c9fc6a732ef9"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="4842021f-c46d-4959-a6b6-5bc41417854b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="ca5428e6-5697-40af-9fe4-0feaf7b21b6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="e5b21a16-98e9-4f8d-8e2a-8bcae81ff54b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="a2279bef-10c0-4c8e-93ca-28e31add7f9b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="1141e9c8-ff22-451f-800d-44d81a5aa08d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="aeff6d20-e63d-4405-98ee-0d55021a93ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_For_RET_CS" id="fe822801-09cd-4334-82c2-835451b61ce6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="2bcb5108-cba6-47ea-b5f2-20ea8c5dbb91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="a9fc4336-2ac5-4e48-ac9c-00d5fe9cece3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserResourceStatusUpdate_API" id="40e654d7-2162-41a0-9497-767de6d0f3a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserStatusUpdate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("status", "suspended");
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="fb48bb79-caf9-474c-924f-0511b78cd55a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101739</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_cd31764d-71a1-432e-803e-c806eb5c5b21</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaf34153-5d5c-497e-b344-c8511136ba32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3915518e-2d6f-4c49-988f-f99f99ce1ae1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3797684-708e-42e8-94d1-e459bea1af24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2bcb5108-cba6-47ea-b5f2-20ea8c5dbb91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9fc4336-2ac5-4e48-ac9c-00d5fe9cece3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - UserCreate- Verify with old Etag - 200 OK" searchProperties="true" id="cd15cb3a-19bd-4195-9b6a-3eb1884a975f"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="1219a4bd-1335-48c2-b03d-500b21edcb80"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="332d8d1e-eb43-4fc4-a3ce-eca6a516f718"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="7bc56222-a82e-4485-91c5-f679bd9ac0f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="d61de61a-b715-4cef-8b4f-d0a9c2e7f387"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="84933adc-5f3d-4368-a05f-eb74550fc9cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="85274614-e44e-4987-8d7d-9204a9be63d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="2124dd89-77f5-411b-8d08-27cfb95e0f3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="cb81ae89-2349-423f-95e8-cda9531162f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_101748</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_98c06f00-0680-4a0c-b7bd-a0af82e7eec8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85274614-e44e-4987-8d7d-9204a9be63d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - UserDelete- Verify with old Etag - 200 OK" searchProperties="true" id="af3d5743-a2c4-4eff-a5c3-f4c2cc5ae96e"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="d716b0a3-e856-4d71-8f7c-0e54d8eb3543"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="487ed702-6a45-47d9-9f3b-cdac93f0d0cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="8c811128-dff9-4b36-be00-0c0ae230bbf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="74764044-43bb-4a8e-8843-93e4a44afc2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="014f7ec6-5422-498b-82cb-b46e2ff549b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="64cd40c7-033f-46b5-ab43-7a483f391578"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_SecondUser" id="7ef7e6d5-6b4c-4fa0-b9c9-87898b9a28e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_second_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policies_For_Second_User" id="c9c2845c-58f0-47da-83bc-b94eed31e641"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForSecondUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="c62046b6-7d5a-4b45-96d7-f4973ee3049c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_User_Get_API" id="73d1b4f1-9526-423f-8917-a316b1a7a09c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERID2"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Second_UserDelete" id="64f1a796-7c02-462d-abd7-017798edd95d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERID2}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML2"));
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="95e674d8-53ca-4e2e-a355-79e159098dc5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_101753</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_11cf3297-216e-4a59-8e32-0ea818d66d06</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1175301-1034-47d2-b176-7589f99631fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c62046b6-7d5a-4b45-96d7-f4973ee3049c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - LastUserDelete - Verify with old Etag - 304 Not Modified" searchProperties="true" id="919019e3-a351-4e0b-8aa3-fbb1520b8927"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="7287d1ba-a4d9-4792-953a-331ac7722298"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="a14c42dd-ea9a-4527-b44e-0916e3846c44"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="f377cfaf-5684-44ac-b533-d88ef8b44b1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="0f3ab521-771f-4b5b-8035-87180a6df645"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="352625cf-1191-4810-a332-0966a01a717f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="ae84dbd5-7196-4d9b-a111-7a6a182911ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="a422a0ce-77a4-40d8-ad29-6d65b5002181"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserDelete" id="b88be7a8-5c52-48b8-be54-580b1ba4ac01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nODEUSERID2 = context.expand( '${#Project#NODEUSERIDFULL}' );

myTC.setPropertyValue("NODEUSERID",nODEUSERID2);
myTC.setPropertyValue("ResponseType","LAST_FULL_USER");
myTC.setPropertyValue("SAML",tP.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="1a387b75-041d-4e78-8ace-bbf0a3bf4895"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101758</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_9f51b7b2-2442-4d8b-b935-df09d8acdbc2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae84dbd5-7196-4d9b-a111-7a6a182911ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a422a0ce-77a4-40d8-ad29-6d65b5002181</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - UserUpdate- Verify with old Etag - 200 OK" searchProperties="true" id="60014b51-5c48-47ae-afe9-5a4818658277"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="12d9eb30-acfa-4b65-b8d7-c95b262bb1cc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="91a635d6-e0f9-4f0f-ad65-27a08ac1c539"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="eaf6621c-b87e-4859-a4d2-ae2845b6ef02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="48a724d3-5ee4-4e2f-a08e-d0e482054af4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="47e7ce56-3a41-4166-bc84-f88168bf6d01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="0badc7f8-04d6-42a1-9869-2548a10b559b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="41e797bd-89ce-45f3-9043-d2a021560546"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="7c2311fc-448a-43d5-853c-04dac72e716e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="c966890d-9cdf-42f0-b0cc-ab124f0decce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20140509_115736</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_40ea03f0-cade-43a8-8663-f75169a9b71d</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0badc7f8-04d6-42a1-9869-2548a10b559b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41e797bd-89ce-45f3-9043-d2a021560546</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - EnableUserDataUsageConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="c91f3102-21f4-4e14-a8d8-add35919d3a3"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="cc6e7ea2-c5eb-468d-bb52-2c0023202a87"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="79246e24-f346-4302-beed-8312e489b48e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="9df8b7cd-b0ad-404b-8e63-4c3da008392a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="98b82a25-9567-444e-a627-0f17d3b88eb0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="cfda08fb-7ab4-4583-8d1e-90470bb1974f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="19048095-c1f6-4e75-b9eb-9a3e4e020343"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_EUDUC" id="6f9da769-51db-4af6-aa68-418e994904db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);

def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '103'""";

log.info sql;
def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="41f141ff-98e0-4575-84dd-11ffed96db84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="4b9f4de0-8c83-4962-b3cc-ce28cd8bcbf8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101810</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_328d2e6b-7c1c-4ecf-8844-1022a85b655b</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19048095-c1f6-4e75-b9eb-9a3e4e020343</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - LockerViewALLConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="2d246902-3415-4b46-820d-7829357cbf3d"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="ec7b65dc-bc93-4450-b6a4-b5591c4f3431"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3b8a42e3-5ce9-4e9e-b808-2cb1ecd209e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="3e03734d-9231-466a-a6d0-5dfc515d57c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="5134b58c-0dd4-44db-81d7-8203eadce9f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="216b2887-97ac-48e8-84d2-483cafc61989"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="414f7419-7192-485f-8da2-0871e2475b24"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_LVAC" id="add6b123-c588-4f16-a0b0-87a12b04fb4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '100'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="69c21949-7e8e-450d-8643-9118da1382c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="f9c3d689-ff8b-4315-8a96-08d0496750d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_101913</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_2464fc23-1c1f-4513-b4fe-46cc7b549a64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - EnableManageUserConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="fefca1e5-d701-488d-8e0e-b22a514c1009"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="e21b1da6-66ba-4a66-a7ec-9281fd5ea4b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="cc95d62d-3019-4cda-a419-38a929ffc929"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="2ccd794f-175f-4933-8b7f-d3a152c6c604"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="792c2490-6e0f-4083-90bf-39a5c478c525"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="7ad2dffa-5ba6-47a4-ace2-fb47544df123"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="21a75a26-a8f5-46a1-83a9-dd934e16af03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_EMUC" id="f47f56fb-b862-48e6-8cd7-aae340da68d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '104'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="9ebb0a1e-d8f7-40cd-9d5f-0b93ee2092d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="70fa84f1-1332-431c-b8d0-9ef8c4a6fcee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10205</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_de5c3a91-0a29-4064-abb3-6fa79744fa8a</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - ManageAccountConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="32ffefe5-1a00-470e-852a-3104117a1778"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="75e4be39-9ccb-4766-ba4c-b55740b61afa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3f59e5e6-c721-4083-8590-d8fed6bd4d00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="a5654318-c5d9-4a95-91c0-73aea9f0f412"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="3a171952-9808-4337-bdf1-1e7f78d22f54"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d59a34a5-835d-4b11-a7de-5ab9a846ba3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="263572e5-2694-42e4-b89c-fd7eec118ad7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_MAC" id="eed05303-1d18-4227-9b1e-720cef6b5fc4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '105'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="5d1e57d3-dde6-4e6a-bcbb-6cfbf28e9a7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="7e65d351-3ca7-4482-b332-3a4254b134cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","NO_MNG_ACC_CNST");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10216</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_508a70fc-0c95-46c8-95f5-37686e368461</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>263572e5-2694-42e4-b89c-fd7eec118ad7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - ManageUserConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="1a53aa53-092a-4d32-a7f7-acfe45451abb"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="c3127576-d71c-42b5-8f1d-84733ac3bb69"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="34a79641-4529-4089-9894-f80fb8738a46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="d8bc4656-56d5-4fb0-811b-88c350bf15da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);


assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="28b6583f-a589-405e-b2f2-5db8be7e0240"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="7a3ab4ab-f6a6-4a6f-9782-1909733e31a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="02041916-2f7e-411a-b50e-6dee9119ba5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_MUC" id="9ac67d7a-aca8-444d-a344-0554651524f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '200'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="839ee32d-c45c-440b-a27e-3d03e8ac1051"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_403 Forbidden" id="42d14a12-18ce-4bdc-af8b-bc5fe9716f7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","NO_MNG_ACC_CNST");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10225</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_01d5ed44-63bf-436e-bbb0-e5a41b2a6e96</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - UserDataUsageConsent- Verify with old Etag - 304 Not Modified" searchProperties="true" id="4ead0c57-e3f2-445f-8310-e2f2dbb33779"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="3abc672c-2cc8-450a-a7f6-771398a8f226"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="6b7586ce-0bee-4d52-97b2-5876aa659880"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="fb1d67a0-faa2-4d23-989c-2a9c8f5b93a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="05fd6cca-a39c-47d4-be74-3b58ef25bf90"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="61c3937e-0d6b-421e-9f0d-17322cb88148"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="ed7ed1d7-ba51-4ee3-8eb8-fc25c704b3cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_ULC" id="134d4277-e2b8-48b9-aaf2-f3b6dca6fe9d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '201'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="74441d57-5017-4047-bf25-b8b4356c959b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="98dc19ce-82fd-4e83-903c-f0ac17bcf90e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10230</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_5aec30ef-2441-421e-ac15-c471fddc33b4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - UserLinkConsent- Verify with old Etag - 403 Forbidden" searchProperties="true" id="afd79fa6-5f2f-410a-b0f0-cca45e99373a"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="1675dcba-f454-411f-898e-5538b1219f61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3a9f4654-779c-41cc-9b65-859ef0462143"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="04521245-15a3-439f-aa12-830b76205803"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="edfa10e6-a8d4-44a6-b663-90c4e926cc9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="5754d8e5-8d2f-4b16-831e-5b05293a57cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="9b433c31-67b2-4d5f-a9d4-f30bcd5622b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_PolicyOID_For_ULC" id="08f57bdc-3c11-45b4-ae95-f8e26641e6f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c = new dbUtils.dbAccount(log,dbHost);


def userName1 = context.expand( '${#TestCase#UserName}' );

def userName = userName1.toLowerCase();
sql = """SELECT to_char(rawtohex(POLICY_OID)) POLICY_OID FROM POLICY WHERE CREATED_BY = (SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME = '$userName') AND POLICY_CLASS = '203'""";

def result = a.SelectFromDB(sql,dbHost);

   def myXML = new XmlSlurper().parseText(result);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;

   def POLICY_OID = myXML.ResultSet.Row[0].POLICY_OID.toString();

log.info "POLICY_OID" + POLICY_OID;

tP.setPropertyValue("POLICY_OID", POLICY_OID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy_Delete" id="4f93082e-68fe-49ee-840f-d6611d0eccc1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Policy_Delete")

myTC.setPropertyValue("ResponseType","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_403 Forbidden" id="110c7631-7e2d-4273-afc8-11ba611c9fbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","FAILURE");
myTC.setPropertyValue("ResponseType","UNAUTHORIZED");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102638</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_73092737-928a-4a20-9dbe-7dd05209c576</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>096b811a-0ac6-4370-ad3f-b2b3cdba4391</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5902ea8-e934-46a7-ac81-9cbd75a55278</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf3e2217-1d8e-4d6c-b768-651204dc58f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - StreamCreate - 304 Not Modified" searchProperties="true" id="0e00c8e4-d3e3-4435-8ef7-05bd1c4ecb3c"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="68e2b096-1d90-47ea-b854-b2ed5963263f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue ("audience", "urn%3Adece%3Aorg%3Aorg%3Adece%3ALLASP");
tP.setPropertyValue ("audience", "urn:dece:org:org:dece:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="815084c0-efb8-4b3b-9090-9d695392c13b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="483ff38a-d2ef-41c8-bf95-bc010a3a2aa0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="2b98af3a-2fbe-4231-b403-5cb0408117d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="d0d0bb9a-2b8a-4041-a37e-7598c6e920a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="4e109402-d580-402d-826a-f36355d2f8cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="c4ad10ee-6412-4a37-b5fd-be9a00a14267"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Create" id="7bcb0e09-a6cf-4854-adeb-a11cb63765d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","LLASP");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERID")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="7190be28-d8ff-448a-a057-46b447d17164"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102728</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A5327C8F7344E0401F0A21992193</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1A5327C837344E0401F0A21992193</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1A5327C837344E0401F0A21992193</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A5327C8F7344E0401F0A21992193</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1A5327C837344E0401F0A21992193</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A5327C8F7344E0401F0A21992193</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1A390F4E4CF0FE0401F0A059924A9</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1A390F4E4CF0FE0401F0A059924A9</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>301</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:EDD1A5327C8F7344E0401F0A21992193</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EDD1A390F4EFCF0FE0401F0A059924A9</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EDD1A390F4EFCF0FE0401F0A059924A9</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_6e6a1da0-ba04-4317-aef4-a906f70b37a0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - StreamDelete - 304 Not Modified" searchProperties="true" id="a865b77d-0805-4e33-878f-6bd66b31a0f8"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="8cc6eaa8-2abb-4ddb-90f3-9c44b85ff649"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue ("audience", "urn%3Adece%3Aorg%3Aorg%3Adece%3ALLASP");
tP.setPropertyValue ("audience", "urn:dece:org:org:dece:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3f8ca874-f38d-4a1b-a9be-1a3db65bb42c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="8433221e-65ea-4a00-b5f5-2b4cbcb9ac5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="357c9e30-fc97-4b02-b8c8-63ab22055a6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="aa3b83e4-e404-48d0-9041-024767c5c584"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="8e9cadd1-bbf3-40f0-859f-eedf38f218bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="35a797da-264f-4450-9edd-40e1efab3653"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Create" id="af3bbb2c-7eb8-46e1-ae86-6384d24fce37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","LLASP");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERID")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Stream_Delete" id="48e5b525-1b75-4da3-9370-5b52010dcfb0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamDelete API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="effbc541-af22-4b18-825d-cbe765b7e5a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102735</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A44F7F9A5912E0401F0A059924A5</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1A5327D087344E0401F0A21992193</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1A5327D087344E0401F0A21992193</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A44F7F9A5912E0401F0A059924A5</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1A5327D087344E0401F0A21992193</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A44F7F9A5912E0401F0A059924A5</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1A38446C36408E0401F0A2199218F</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1A38446C36408E0401F0A2199218F</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>570</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:EDD1A44F7F9A5912E0401F0A059924A5</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EDD1A44F80095912E0401F0A059924A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EDD1A44F80095912E0401F0A059924A5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_b69129c4-e93b-4eba-97d1-ec82c8d5e4c3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>82159739-5aab-4570-a82e-e38dc2d19b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList 121 - UserCreate 121- UserGetList 111-Verify with old Etag - 200 OK" searchProperties="true" id="243290f9-b336-4b22-a194-ef6d76358e28"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="b96ca1c1-fd82-43ae-bde0-fddd6be82e3b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="9ea00555-0f40-480f-9b57-bac6e863b046"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="f2cdd899-c7ca-41bb-b882-c81f08d6bbd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="b8be42c7-f160-4558-b60d-d81b78fa24a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="3961169a-e1f8-4a11-abd8-75d729ae95b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="32569e13-2483-4d77-abb4-47bfaa7db35f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="2d7b6c8e-febb-4249-8fca-0524187e25f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="53451bed-ae5e-43a0-b977-67d844e021a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="ef15cc2a-4c86-4df9-9d52-73dcf3feb84a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(nodeaccountidencoded,"UTF-8"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="ffd0f66c-be1c-4ab9-93ca-2ae31cf9c911"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>User_create_20131218_102746</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_b9332468-21bb-4ae5-8b4c-d9ec9024b8ea</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>32569e13-2483-4d77-abb4-47bfaa7db35f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef15cc2a-4c86-4df9-9d52-73dcf3feb84a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList 121 - UserCreate 111- UserGetList 121-Verify with old Etag - 200 OK" searchProperties="true" id="43127213-4a98-4453-b797-1e4977ad0be3"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="ca7e197c-8112-479a-8912-dbe41c2a9394"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="7bdf8b7e-20e8-4372-b3cd-c42a19e6e2b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="badda0ae-0e14-44f3-93ee-4368d650868a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="16bca0b1-26aa-4650-85a1-7bdb08b908e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="6f84636b-9d96-404f-b8c4-f8c404c85105"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="6048450a-eea2-4976-a03a-adb29671fc6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="584cc8f2-4d64-483f-a156-5d4e15529eae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="e7bb0a59-65fd-46b1-bf88-27b24fb8c34c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(nodeaccountidencoded,"UTF-8"));

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Full")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="b7f9a520-94fe-4901-bb43-cf8793c31e4e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="e2190323-8393-4c02-82d9-f755e56d41ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102747</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_389581a1-faea-4521-9c88-629e68f82859</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea1d5408-2330-44f2-83b1-0858991b5659</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6462aae-3219-4c03-b7ce-793bbf08af8b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6048450a-eea2-4976-a03a-adb29671fc6e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList 121 - UserUpdate 121- UserGetList 111-Verify with old Etag - 200 OK" searchProperties="true" id="6a13110c-a7d0-467c-8e2d-f4aece23d385"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="5484cf97-225c-4ff2-9d26-5bae245ed514"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="9b21447e-c611-4cd5-bbb7-16aca2f8161a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="025e9df5-52d4-49a4-b2d9-6e8b403b9b9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="21abbc87-2349-41e2-9db4-8417d891db0a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="18483687-01b0-445a-988c-6f13379377e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="701bd0a9-fd58-49b8-aee4-6e26ffc7e53e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="12d4f345-51e4-4d33-92ac-9fd6b8138f91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="1e639794-915c-45c4-b33d-6f219ce4ada5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="a250fc7c-8481-4a20-8186-10a5d6f59afc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="fd5c4b51-ac95-42bf-869b-5ef5262d64c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(nodeaccountidencoded,"UTF-8"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="dfb103d5-6f70-43bb-9a0d-c441bc4d6beb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102758</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_1cb4ab02-f9cc-42ca-9a0d-510614e2a4a8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e992ca86-2eb9-47b2-869e-5c7d08bddab0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>701bd0a9-fd58-49b8-aee4-6e26ffc7e53e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5c4b51-ac95-42bf-869b-5ef5262d64c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>12d4f345-51e4-4d33-92ac-9fd6b8138f91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList 121 - UserUpdate 111- UserGetList 121-Verify with old Etag - 200 OK" searchProperties="true" id="ea10e9cd-fc58-4173-966a-ba92ba8898c4"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="8855726c-a8f6-4933-8b69-ff4427bba928"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="5a702911-4a7a-41aa-911e-3aae04354c5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="6c18145b-a62e-4772-bce9-9e126990ece5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);


assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="500dc401-c8e1-4a66-bfbb-15c49cd3c97c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="1e6c0132-3cb3-4fc4-a364-6915d6c24f61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="f1925ae8-9916-44d5-8e21-a4231f3361db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 11" id="c9a748bc-3636-4579-bbb7-d3ac62cf1cdf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","11");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/10/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_Get_API" id="233728af-f38e-4b2e-8046-f3b001d8d545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(nodeaccountidencoded,"UTF-8"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def nodeuseridencoded = tP.getPropertyValue("NODEUSERIDFULL");
myTC.setPropertyValue("NodeUserId",URLEncoder.encode(nodeuseridencoded,"UTF-8"));

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserUpdate" id="2b42840c-669d-4f3c-b22a-9a62f026b86b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def nodeaccountidencoded = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID",URLEncoder.encode(nodeaccountidencoded,"UTF-8"));

def nodeuseridencoded = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERID",URLEncoder.encode(nodeuseridencoded,"UTF-8"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("NODEACCOUNTID",nodeaccountidencoded);

tP.setPropertyValue("NODEUSERID",nodeuseridencoded);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set versionMinor Property to 21" id="debcd3f2-5cb6-4e9b-b199-28cf03d84c67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");
//tP.setPropertyValue("CoordinatorSchema", "http://www.decellc.org/schema/2013/06/coordinator" );
tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_200 OK" id="4c8c4e12-238a-4370-94af-f6cafaa01e09"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102759</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_954b8625-a0d5-4d98-af76-d3c7f865328d</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1925ae8-9916-44d5-8e21-a4231f3361db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>233728af-f38e-4b2e-8046-f3b001d8d545</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - RightsTokenCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="ba9aa4ec-2149-488f-b3a9-48e57b09ae01"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="766f796e-a160-48e2-8dd0-7c3b1b5fba0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="529536f4-4876-42eb-a169-ca5230b7d942"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="ac820548-74b5-413e-899f-991658f4fc31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="ff67a7a6-721a-4546-80c9-c7eccaa5a502"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="54b19f50-2b4a-4d75-b6c9-435ab7ab266c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="2d098188-ae22-42d5-9134-0fe53f4321d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="da43f7cc-f1eb-4903-b7bb-eafba734fd45"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="a19f7bde-9153-4f77-8f9f-18945d2870c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10285</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A38447ED6408E0401F0A2199218F</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1A38447DC6408E0401F0A2199218F</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1A38447DC6408E0401F0A2199218F</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A38447ED6408E0401F0A2199218F</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1A38447DC6408E0401F0A2199218F</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A38447ED6408E0401F0A2199218F</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1A3881E1051A3E0401F0A21992197</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1A3881E1051A3E0401F0A21992197</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>538</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_621b709a-fa5a-40d9-85f8-086c7e6324af</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - RightsTokenDelete- Verify with old Etag - 304 Not Modified" searchProperties="true" id="d98332cd-dcf0-431e-8b6a-17c3de527344"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="849b424b-ad4b-41b7-84aa-2aed559144ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="bc0b90b8-37d3-4c24-b29a-039bf735359f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="d29426ff-f302-4fb9-9ad4-ab46978efdff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="651c03cb-1a24-475c-a830-23855e992ebc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="bc37820f-11c5-4561-8dae-4798a300434a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="aafca63f-18e6-4d9a-bf0b-a036d85b51a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="0dcebb89-8483-436c-aa72-0f001201c730"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Get" id="9b232d40-d14d-49af-958f-48f5973e7721"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Delete" id="785816a7-ac2b-424a-a64f-6c55a65ecb10"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenDelete Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="8a676864-6681-4429-9e41-7755cef6ee18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102811</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A44F82405912E0401F0A059924A5</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1A44F82335912E0401F0A059924A5</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1A44F82335912E0401F0A059924A5</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A44F82405912E0401F0A059924A5</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1A44F82335912E0401F0A059924A5</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A44F82405912E0401F0A059924A5</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1AAFF827D4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1AAFF827D4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:EDD1AAFF827D4AFAE0401F0A059924A1" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T15:28:18.238Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-18T15:28:18.244Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>327</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_af35e697-3cf4-4760-8fee-78aea2fc0396</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8337ac8e-503c-4f7b-966e-a89c0c01f8a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>acd1feb5-5a27-4611-b3e0-a5deee98f691</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>371052ae-f288-42ce-b3df-434cac983a62</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39d290ff-149f-4ea1-9a6b-47a5f98a7acb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71cb200c-addf-4fe9-b769-b7c30f7d66da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aafca63f-18e6-4d9a-bf0b-a036d85b51a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d0f62e44-77a7-4f59-9ad7-a13cdbb52d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - RightsTokenUpdate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="294dfe11-5729-4567-99cc-13e118ff657a"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="ea70480f-964f-4518-b910-9fbe8cd04c8e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="684a89af-6114-4c03-997f-7936d6f9c190"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="08717bbb-1950-4358-b15b-fb5f6e5bd58b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="7f9df1e2-08ab-4bd8-bfc1-c665d02b32a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="7cb47223-e2bc-45cc-a2cc-3f8b67c235c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Account_Get_API" id="bf3cedcc-ba25-450d-a1a7-cc8f945f1537"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="19f04205-6bbe-4dec-84bf-886d1daf2f7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="2aa8f174-ec28-4a21-9e01-4365f9a72f44"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Get" id="67dc2eaa-c508-42aa-aa66-194a53f476fa"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Update" id="a423e5ee-ea2f-4f34-bde0-3ff1e3571b01"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenUpdate Request");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

def rlid = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API").getPropertyValue("RightsLockerID");

testCase.setPropertyValue("RightsLockerID",rlid);
testCase.setPropertyValue("ALID","urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt");
testCase.setPropertyValue("SoldAsBundleID","");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");

def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","RetailerTransaction_1_node2199_RetailerNode");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTUpdate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="f297ad84-fc93-4d33-9d05-c92724f84931"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102825</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node2199_RetailerNode</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A38A3FCC7B00E0401F0A2199219B</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1A38A3FC21B00E0401F0A2199219B</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1A38A3FC21B00E0401F0A2199219B</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A38A3FCC7B00E0401F0A2199219B</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1A38A3FC21B00E0401F0A2199219B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A38A3FCC7B00E0401F0A2199219B</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1AAFF830F4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1AAFF830F4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:EDD1AAFF830F4AFAE0401F0A059924A1" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T15:28:31.369Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-18T15:28:31.378Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>391</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:EDD1A38A3FC87B00E0401F0A2199219B</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_8eed0fc5-2165-43ba-b324-680135702bc8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1bbe41c-eb90-4c2b-af84-e035bd33ab3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8ec4c511-3326-4da5-9e58-6b2cf8cf1c50</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b6b117-66ad-45b8-b5db-a6cffd03851d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19f04205-6bbe-4dec-84bf-886d1daf2f7d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf3cedcc-ba25-450d-a1a7-cc8f945f1537</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - AccountMergeTest- Verify with old Etag - 304 Not Modified" searchProperties="true" id="3433cf8f-575d-467d-b4be-4b4b8d1e2bd0"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="59c44a62-a628-4ac6-b619-e13a273ec7dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="ea020524-28a8-4c00-9a3d-f5ed55fcf996"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="b03ddfa6-de99-4c78-8621-113dacfb3c01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="3d71e726-1544-461b-8364-a0ec0a2d5a79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="b7cb1dde-71ab-4fba-8cae-6fd141e84bee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="36a73c58-b090-4ca5-afce-b61b97a14bed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="4d4e5cc3-69e0-4748-92df-451f31b88484"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="38a2b65f-c271-4361-956a-fb53c5218694"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="eee9b349-74aa-4cc5-b311-a4149f1b22f1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="88add5f9-3bf5-4a4a-a708-302f71b97115"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeTest API" id="cfe2f627-c8fc-4d6e-9b0f-db1c862c96aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeTestRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="3a4d231a-f5d0-484b-8711-a121c3e8b522"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102845</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD1AAFF83AC4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD191A75CA4E511E0401F0A2199790A</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_faf8ea17-eb38-4b38-9283-e7756ab9f2e4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>25d213c5-d50f-46f4-9c74-aca758dd31c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>36a73c58-b090-4ca5-afce-b61b97a14bed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ed7ed1d7-ba51-4ee3-8eb8-fc25c704b3cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - AccountMerge - Verify with old Etag -200 OK" searchProperties="true" id="eeef6d68-6dfb-4769-aff5-2d57622244bb"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="1c1461f8-62f0-4f40-acb7-f61fa5dfc2ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="37bbc8b9-78cb-48a5-abd4-83e31e7ecf31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="8e5cdee9-0108-40a5-afad-4598fc8055a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="dad5ab4f-b0aa-4f28-9f05-d02fa691fc91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="3553384a-5b60-46cf-949e-50498204091a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="48191be8-244a-4b65-823f-1ca6217a0d29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="432fbb37-e34f-41bb-a788-204680a4a52d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="8a8e9c68-cac4-42be-b171-c216abac8a1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="a8d96509-fd05-4984-8e49-97978d0dcd6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="74ede91e-21c0-4b1f-a7d6-128df6c53a7a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMerge API" id="201c80a7-f94e-4c53-ae3f-73290f4bff37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="61091d11-a644-4e1a-8f10-84ee9c1b7226"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102856</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD1A38A40BF7B00E0401F0A2199219B</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD177301899B77CE0401F0A21994101</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_6f955fca-d593-4d61-89f6-d31e09c42061</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aab2cc2-3ebe-404c-a9c2-7b1c560da2ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48191be8-244a-4b65-823f-1ca6217a0d29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>02041916-2f7e-411a-b50e-6dee9119ba5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - AccountMergeUndo - Verify with old Etag -200 OK" searchProperties="true" id="618793e0-22d3-4cd9-8bf9-5ba5393958df"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="41fad826-3098-40e1-b89c-357390b9d347"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_First_Account" id="1d110b29-dec5-49f4-8941-d8276470b396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("SurvivingAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="b799a738-5fd4-42b1-8cd0-2f84584d4bb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL1",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="fea59f41-0f7d-4188-b301-ae3ae68d2e83"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_1",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="41fd2135-64fb-4d7c-a0f4-ea4be212d0d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="88283a83-c919-4011-b4a6-baaf72b97a80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Second_Account" id="e8c43081-1156-4f12-b11a-eb922ee645aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nODEACCOUNTID = context.expand( '${#Project#NODEACCOUNTID}' )
tP.setPropertyValue("RetiringAccID",nODEACCOUNTID);</script></con:config></con:testStep><con:testStep type="groovy" name="Second_Account_First_UserCreate" id="fd18651e-84b1-4d55-87f6-53199e850082"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL2",nodeuseridfull);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_Second_Account_User" id="bcaac65d-8033-4e4b-9e56-1e6f90a2ef1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#Project#SAML}' )
tP.setPropertyValue("SAML_2",sAML);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices_Second_Account_User" id="9869f104-7fff-4560-914a-7d16f80d58c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="AccountMerge API" id="f70389c3-6e4d-4f44-8be8-20db615ab025"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//User Details for Merging two Accounts
tC.setPropertyValue("user1Status","active");
def mergeUser1=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL1"));
tC.setPropertyValue("mergeUser1",mergeUser1);

tC.setPropertyValue("user2Status","active");
def mergeUser2=URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL2"));
tC.setPropertyValue("mergeUser2",mergeUser2);

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for RET_CS" id="a284b5c6-0e5e-4d28-95f8-7f01342ce97b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id","RET_CS_1");

tP.setPropertyValue("SAML_RET", tP.getPropertyValue("SAML_1"));
tP.setPropertyValue("NODEACCOUNTID_RET", tP.getPropertyValue("SurvivingAccID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountMergeUndo API" id="5457dc3b-7b8b-44b1-9819-5d8114922640"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RTCRequest = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountMergeUndoRequest")

RTCRequest.setPropertyValue("TCaseName",tC.getName());
RTCRequest.setPropertyValue("TSuiteName",tS.getName());

//Set the Expected Value
tC.setPropertyValue("expectErrTypeAccountMergeTest","SUCCESS");

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Id for Retailer1" id="fb5be683-c395-4112-94f9-7b4e1fb811ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));

tP.setPropertyValue("SAML_1", tP.getPropertyValue("SAML_RET"));
tP.setPropertyValue("SurvivingAccID", tP.getPropertyValue("NODEACCOUNTID_RET"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="888eeb4c-90f3-46f0-9c4e-f0ec1add55ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

tP.setPropertyValue("NODEACCOUNTID",tP.getPropertyValue("SurvivingAccID"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_1"));
myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_10297</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:EDD191A75D43E511E0401F0A2199790A</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:EDD1AAFF84FF4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>expectErrTypeAccountMergeTest</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_cc165444-666e-4009-b04a-f1a358d2a484</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f5ea15c-c869-47cb-938f-2799fb8fd430</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78df497c-46a8-4195-8258-3f0cb1892246</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a74cba1-4d72-4fcc-b483-5b0d82040118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df0c4d9c-1ec8-46bd-9e5e-8acadac84b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55150bc-3d0a-4175-b0e8-028e67a6fa78</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7eb6532-f4fd-4259-971c-847264e2ccca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e88e603-dc49-4bc4-b3ba-30840e7ff370</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8548fd5-3321-4321-a475-28644fd2219f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>984d447e-d5dc-4e7e-b381-5d17f8961aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320a452f-f00b-446e-bb96-65374d5d2af0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>911f1fc9-f177-41d0-90b5-467b9760cc90</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3aec2761-405f-4ce8-816e-f165c2498dbb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88283a83-c919-4011-b4a6-baaf72b97a80</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b433c31-67b2-4d5f-a9d4-f30bcd5622b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - DiscreteMediaRightCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="57560245-4a88-434d-aa8c-052c72a34c2b"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="962f6f93-54f9-403f-ab22-6b87a49f1892"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="9de0e3b8-f123-4e0f-bfa0-7db9ef0551a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="a677ce04-bbee-4966-a600-5d22181e9d52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="130ee6e4-858f-4f67-abbe-f6417b3ad759"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="1448985a-4efc-48b9-8031-c86a84b5281e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="0a174416-a9a5-42dc-b92d-c2ecc5322f87"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="f7af2462-b05a-4ab1-99e9-e27d9f0e0e62"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="1ddb92c3-9423-414e-83ea-31f55f8c8f64"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="2aa0bb4c-99c4-4f33-8cf6-6bac12d0c9e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102913</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD18978DB32C4D7E0401F0A21996678</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1A38A42CD7B00E0401F0A2199219B</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1A38A42CD7B00E0401F0A2199219B</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD18978DB32C4D7E0401F0A21996678</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1A38A42CD7B00E0401F0A2199219B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD18978DB32C4D7E0401F0A21996678</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1A388218851A3E0401F0A21992197</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1A388218851A3E0401F0A21992197</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>226</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD18978DB90C4D7E0401F0A21996678</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD18978DB90C4D7E0401F0A21996678</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_2ca4e949-94e3-406b-b4f9-3f7140a9098b</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43f116a2-8286-400e-80f2-c7e02948ea8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f9fa89b4-123f-40f3-a74b-ec479d5bec1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a174416-a9a5-42dc-b92d-c2ecc5322f87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - DiscreteMediaRightDelete- Verify with old Etag - 304 Not Modified" searchProperties="true" id="6fe969f9-bb94-49fa-83b2-1fc9c3b111fc"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="b95e09ff-b864-4014-a58f-e326e5c12fb1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="7daa3794-5c8d-434e-8140-526f8cf38199"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="4db5b5fb-0aa4-4986-a9b9-64a2f921824a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="31516fd1-cb4f-4512-b65d-c9a18e148ca5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="fea86175-839b-44b1-977d-59ec7cb8ebfc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="90e8eeed-2c6c-4195-ac67-42f8db9c5a1b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="7e3caf0d-2b12-4ca4-a09f-5784d4d898dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="6f5228da-33ed-4c35-93ae-c67ad53bca91"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet" id="33ec76cd-28de-440a-b3c0-5302ab181d05"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDelete" id="021771ee-8620-4a26-bb61-f15bbda6fe32"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightDelete');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="65a0e743-bc25-4e11-830c-721d521c615c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102919</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A38821BC51A3E0401F0A21992197</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD18978DBA3C4D7E0401F0A21996678</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD18978DBA3C4D7E0401F0A21996678</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A38821BC51A3E0401F0A21992197</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD18978DBA3C4D7E0401F0A21996678</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A38821BC51A3E0401F0A21992197</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD191A75E10E511E0401F0A2199790A</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD191A75E10E511E0401F0A2199790A</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>425</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD1B569357FBBBDE0401F0A05994F7B</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD1B569357FBBBDE0401F0A05994F7B</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_5792a49d-9e8a-42cd-9bdc-72f3fe133797</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcfef636-c58b-4da6-9545-ad73f56ba93d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a6b3ce9-49c3-455e-be45-51955c7e11c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b8ad446-e7cb-4267-a9ce-1d3f58686211</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50882c20-741e-4ff6-a846-28fe55f277b9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>90e8eeed-2c6c-4195-ac67-42f8db9c5a1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DECECacheTestScenario - UserGetList - DiscreteMediaRightLeaseCreate- Verify with old Etag - 304 Not Modified" searchProperties="true" id="017cf2ef-97ca-4291-99f4-9e40f6ae6b42"><con:settings/><con:testStep type="groovy" name="Set Node Id for Retailer" id="de51e0e2-e3a6-4a0b-aaea-9380ae303e29"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("Node_Id",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account" id="3bde5ac5-3025-4774-8a59-e3982bce0150"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="First_UserCreate" id="a164d055-53c1-4180-b74d-5046c2924c08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS" id="49f90200-0562-47b4-9732-6174b3ff80c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Polices" id="539f011d-6477-436d-9955-c5dccdb26b57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API" id="7456b3b2-c82e-4771-b692-6fa852c857ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","UnMatch");
myTC.setPropertyValue("ResponseType","SUCCESS");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Rights_Token_Create" id="89fab8c1-a814-4a52-a2ba-8a45fb46ab9c"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-11-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="4def14b9-11b0-4a4c-a642-0d27cd254ce9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("TSuiteName", testSuite.getName());
commonTC.setPropertyValue("TCaseName", testCase.getName());

commonTC.setPropertyValue("NodeUserId",URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL")));
commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", "urn:dece:type:discretemediaformat:bluray:packaged");
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", "urn:dece:type:state:discretemediaright:available");
commonTC.setPropertyValue("LeaseExpiration", "2011-11-04T02:30:57");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreate" id="d45a4d93-6ac5-4e19-8d51-3ff6180c7039"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("End_To_End").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
commonTC.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
commonTC.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerCommonTC = commonTC.run(null, false);

assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_User_GetList_API_304 Not Modified" id="d0eca3ff-a960-46a3-aebe-6cb519fbdd30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API_If-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETagResponseType","Match");
myTC.setPropertyValue("ResponseType","304_Not_Modified");
myTC.setPropertyValue("UserCount","1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>Full_User_create_20131218_102927</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:EDD1A388226451A3E0401F0A21992197</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:EDD1AAFF85DA4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:EDD1AAFF85DA4AFAE0401F0A059924A1</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:EDD1A388226451A3E0401F0A21992197</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-11-24T15:12:03.000</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDD1AAFF85DA4AFAE0401F0A059924A1</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDD1A388226451A3E0401F0A21992197</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-11-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EDD1A38822BA51A3E0401F0A21992197</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EDD1A38822BA51A3E0401F0A21992197</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>270</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>urn:dece:discretemediatokenid:org:dece:EDD1A38822C951A3E0401F0A21992197</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AEDD1A38822C951A3E0401F0A21992197</con:value></con:property><con:property><con:name>AssertionUUID</con:name><con:value>_61df46cd-b1ec-45f3-9bb9-81a31aba74a0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4ba0537-30bc-4570-8cbd-5f1976c6e444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0aae6f3-0221-427d-a5a6-ce65ef7faf41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>292f447a-b04d-49f5-80e9-ea65ebd67573</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>541e490e-25b8-4711-b9f1-8d454a488a3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e64a5bfb-baa4-47c2-bac5-3c5d9af84c83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98511cb7-8ca6-471d-a6b8-bc2319d73b16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95cfdb5d-4fe7-4f62-a9fa-8ec33e0db283</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0e25f5d-5ed8-4737-bdd6-5f9ab0a8a9cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4b6cab-b681-41ff-bf1a-eaa7d03822ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53857d86-2198-4f7e-9b45-cf3639b0f469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43f116a2-8286-400e-80f2-c7e02948ea8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c139326-420a-4b99-b011-0587f4fdbebf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26ef2521-e044-40d5-b4c0-a9db764d3d8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c37ed524-869d-4a8d-bb92-19d757432217</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7456b3b2-c82e-4771-b692-6fa852c857ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements><con:requirement><con:id>Policy-1000</con:id><con:name>ViewControl trumps Parental Control</con:name><con:description>In cases where both a parental control policy and the ViewControl settings of a Rights Token are in conflict ViewControl shall take precedence over all other policies. For example, when a BlockUnratedContent policy is in effect and a RightsToken ViewControl property names the user involved in the policy evaluation step, the named user shall have access to the content identified by the rights token.,</con:description><con:status>In Scope</con:status><con:links/><con:testCases/></con:requirement></con:requirements><con:properties><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-24</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>24-Aug-99</con:value></con:property><con:property><con:name>xmlRequestBody</con:name><con:value>//User[ContactInfo/PrimaryEmail[Value='testing_+428@uvvutesting.biz']]</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>User_Get_LastModified</con:name><con:value>Mon, 12 May 2014 12:20:36 GMT</con:value></con:property><con:property><con:name>User_Get_ETagPrior</con:name><con:value>"F8F12D327DD4D98EE0401F0A07991D37:DDF929CC"</con:value></con:property><con:property><con:name>User_Get_ETag</con:name><con:value>"F8F12CD7254E6A81E0401F0A05995498:4301AF7B"</con:value></con:property><con:property><con:name>User_GetList_ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>User_GetList_ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>Raju_user_create_20132126_04256</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>Raju_user_create_20132126_04253</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>Raju_user_create_20132126_04255</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>Raju_user_create_20132126_04252</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>Raju_user_create_20132126_04257</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>User_create_20131218_100814</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Raju_user_create_20130801_023142</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>YES</con:value></con:property><con:property><con:name>URL</con:name><con:value>Info</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:8001</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:8001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>8001</con:value></con:property><con:property><con:name>targetport</con:name><con:value>8001</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:deqa1/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:8001</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>SurvivingAccID</con:name><con:value>urn:dece:accountid:org:dece:F92C55829AC4F11CE0401F0A0799215F</con:value></con:property><con:property><con:name>StreamCount</con:name><con:value>0</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\scripts\Scripts_Praveen</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>SAML_RET</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj6uQC4QmUUHKUuhJb9sCXbX7UjnOAG4TJ8QOl/31xw5NCpT2sEdCQp6MZ765+Js5YyiJLc9nDHJOUqoE5x312Y4itxm6WAsxnGot7Bqa69htrW3bbdsJUTMMsaoEjBUQUMYR5R3VMsyWZtiaaY1Ny7MMr9lqOE77t6r8gpwJ00KlYajKKokp80q3HbXIqZciRphHUQLM49gb+TfXntD0UIVJ7Z5tUJYO8+6M88zTddyIAEMc4wZOE/1M39E5i5g3IlOKeJHDm8+IddS3u8vlsrFsNtJ8qluGYeiGqwudiJHpN7V7Ul2GKKCTdHPuIZpSglFM/iAJ6gb4LI0UP56mOeGz5BPTpm4a0rQGK6xhs0W/qfq7gxLdkZZ2QOYMaWyGzMrYECaQA8WgPAyDjvrtuApu7o5zRNkkzRO2d/47SEAXEKcZRBqrIqvQHW/xQLq6Z4C9gOK4YGQBt7JNMoSBKXc5TMjqmjDRfBFTyvIrKyZ+pOoywH9TljN9G6uArh/IzjmZAuP/p2bb9dpY+YXiArpBny2ehsnab1+9Dq9ewuYyGzhk/gQXy04JYVt5A6ou99t5v1nr3nq79PS0vnOR83AR/7YHvX9+Lkdm1nsxe0XPn1+S0LywbGf+1ErXvDglaUpa48fXq8VltOIvr8Zg3Fyxq+8P+fiuhXh4snb0zMbBo/6jaRv95l0c3eP2zcv9vdm6iL6/6k/ZIn4YPwKyV+HDw5qnzbx1+Th2xg4C/3fQT3j/3mjm10v/Fz45T6KQGO5wtLwNKXnsRZbfeY9pO4ZdYUUJoyJ8Acyro2yP4FwZiHoh/jW9SAmJtEmp6mWSoxgHytWuvCWpxSsEAZHIE8XcnAeu1RPPxx84TaPdN/p9o2WYA8M3bNc99U2j4qANij2IvZROiPQlWXbTP18DxInHgEaQa4u0wDNg6hcWzxFHSkCH4nGklME4FSxuziZt7rTDddbGsem+xO5kZq8WKEOqcpvyn/Rn7k845Lvcbe9w9xAwyQhIgpcdzkSLMy6SMUeLgsdmY4EaFAoxAnLJwp7VcmydkSSLQULVkzQqYmhks6xMjc42/5aGMCulw/64fHmfBrb/rcqB0ImIVGAylh8g6ggHhpBVBfJ5wM52wJV5v4iIfGAioTwneINk99N7n8gGqZtERPTcGz2bFe5a/ejrH2/qX4DS9/NRO4oWZMttNU3FgBD00a2qOUeNeaNYLIqyfqeSGnNhXhcMaeojwIXgt/U4fQWq1yb0o8ZLjXrPcy3fxVfwGR1xxCER3aaUxyN2ixEwuVsE4p2sjl1cdlyKvHFY8UOyXixWEIn4yy0Fe1jqCfGd+FumefRergO2tvyIOMVCwQmdypMcJOtPmgKnwiwRzJfm28YPGTjkfFdYJ7nGwkU3hQWHz78oktI6KsI4LSgPztVSsE2zJU6+zsB7V/pgpqTyt9m8Yp/O5seb65EgvASptS75b2WNlO2CQZUrQImlo67Eqimc0+kWrb8B/MDstmO5fq81MM1ezeynrmuZ9qBO4E4k3Q/ij5KtnO6/h+6/</con:value></con:property><con:property><con:name>SAML_FULL</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VIHG4hKkhAaJseoBTYstuXyjgGvASbxg6X/vpjB5JyaXvYIyEhT8Yz38x8/uwbDheh7dY5x5EgjGq+V9VfnQqySzZwjLwNA6OAHGBAUAEGsNG4YpUQGAdQ13zOY+xTLiAVVd22QF46GMAZgqJrOfKXs53yi64944jL0NIlZ+naZhFS7iZpq3ocUZdBTrhL4QJzVyB3UO+0XenpwhSTXrvZoUwSRrWZEEvXNFEuwAiHIcohtjBvzCOfm4C7AzKlUMQR3ucMeFXf712v17l1PseiqWlblmVaFVP6BJxMr/XaVboZBz6dsN26CSmjBMGQvEMFqoPFjAVaPZyyiIjZ4ovQwASWCm3gDTIQKNBr3fxIkKC7MNIRyIhDg88gSIP18QRHmCKs/ez7Vf36sgnu9g4jSPmERQt+sv47SJiucMiWODB4WlmK7vKIn7SrdoOR61MUxpyscFfRZAkR5lovwhOyaRMuyRdwLRm/tuHyR1KWYfQ3Y7kxD7FK6OYn3fHIFHPxf2Z2OK9dlGcYxrj2Y57vly3WHolie8pC7z7f8ut394PRrVNNIBw670Bl496vT8macWu/qck3rR58sEcvImh2On+8N9Oj/qTT9vnIjOqCdhrh+12/J7zu8/ZhUO6Pe6PtAyrmgej/fnpojDabxznk1s+H7fJq7NyNrG0lCL15t9EY+cPxwI7f/3l6AfeoA0q9hQOHLKBtZC1LphPOtnz4w3e667fuiN7az/2WqKz6DdD/dbdyrsLtdj1/9Afr9pyuvQ773XuqftR0WMOxMZWEQTz+g5FIl4oevqfdynlB8b28KAsJjEni6i6VRnGBqdBrapeSFjeWAkQCVw5zt255Hig2HVAv26VysVBvWQUL3Fp1q1ipWHkHpBq0Q3ECscnohKhcSmV3/PkeIFq4HNMAR8aKxWiGuf5NRA8KqPm0Lw8HoxwPmVTxBgCFYsPxSqDlAK/eBOVis2LXvWKzrNZA17pMPNLHqD4RODpWcOdIwfsYkSXBSuYVz7kkOheyJW9wFYsQ5FYwR3EsL4JIabFrF5yiycliGWIF2FywIA5xbjlbJg0y+e7fNiDiibXfGibn78vyTr+lnZA+AVEOXNXSwHKa+OwqKrvFtJAvC7bBYcFp+HocEHXMZFtFRNAOyfGnD7YommRUkRW9NgevGSUy94u3n+80vwFlnvYjSxSsyEHa9E6V14QUkVo6zTeYe8vFq1WczK+sBDKS4U2pk8AcYBRLldsO2RxTMwthXnTJZKhPMmf2Y3yxmNGBgAIvJNu0ZHnBC2OAuXph+PK0bC59vhyllH0TeCM+szVD+RBRiL99qyAXKT9p7sm/NYuCj3F9Eusgj6xTPisEoVO1UtfJ9gtSICbDEql/LDoM/lmAz5IfG7MmZ1iEZNM4FvjrL5oStqoOEWIxFb6nJ4ZDsU1wiu0Sux9OZ2ESQd/f0Bv+5Q39q9MeSNlbQD3zJf/tbJCELgjr6iGQYKnqG/nglMnp9EDc9wDP9d1q5W+lqucrhRN9v80aeFRJ7cx8bjno6el5qP0L</con:value></con:property><con:property><con:name>SAML_5</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiaiVpIpNRUWj4MbNWzgMi7LJgKC//h00ekxOcr6835VOT0/30ws9zzwjM/DpLo8QTFIvCquK9FL7x4aAadlcu0GRHGw0LavdMLc029iyW7bN0luW5KxaVUEog0qIUjNMX2o0STENst2g2zpFdUmqy3BPTbpp1KpLmCBsGqs8kbVqEfgh6l7cvtSyJOxGJvJQNzQDiLop6Gq8Ou5iza55w1R7fb6ivDhMXt00jbsEAZ4sCKDvgycQBcQz8UHn2UJdzXNCM80S+O7TQi+197N5nj/lzFOUOARNkiRBdgisYyHP+VV7rdwOQ0sJ7ei6Fs0wCj1g+t7ZLEGpMHUjq8r7TpR4qRt8Y5oiKLI03YAFaACqGf6qEb8dXND90NIHkAkyG8g1qZuxObRhAkMAq4u58lL79bMKXs/qiRkiO0oC9Gn93yDB8Aj9KIZWA90iu6H7ucUv0vX6DEFXCYGfIe8IJ2WbxCaAqPqWQNsrxh7CzWeh6qX81QLdOgyC/1KSZ+IRJ4ZNfJEZyXMgSv+fej3W6mplafoZfJXHJGu1xLMy1PSWZC1XnrKVV0JvOFy8XCA8Kl9B3Uv9vv7cqPe+ej/kJuzas6L23HS1zWoeKc1+bz3OaacZijPDR0vkSH5ibPb1YgepWUdtu/slMyGWOWj22WUzqge+IagBn+zMSp5ao7OiIGPHqZYaAdYX4bku56Mtt3pbbIEsoHAxY9wW43WYDOSDXZ1ki2ldPBSGG01VLeo0sffVpJPrlZ4ShIwZj/L5wbCLk9le5S+/Y3qMoYxrBE+XIMv/a5bsSGZq3hdiOSls/Hmm8FVVFLEuiSIPRYfPFYF3FGF85ieCsz+4e6/fyUmBny16vMSf1DmfS85GWs5mIzm3lkvfWCq9nqDOm/mA30gVvCHJxVIy1kPSXBnxhu6RhiYI1noebZlhbA32+cAFE1VX84munNSdXEx0mVxdZE6B12d1p1JTfcFUVjuho87lXMovHiU5dyfGah5vFp0cnOWZyjf7PLWQRVcd6MGSAszcBTt5rPL7i1xwVXG5VAtZ598qgjNZ4th0sWfEILDibeC7D8YH2Lhu9Zenbd/PjLO8U0W5L2qHvqZsGWkmD/n5ZrFdLffmqnesgMGE3948eqxnrqPcMdq5NNsMR5GhuEcw4WeyIMx4nC6SV5X+kI/6Aq82ea84izuhFYlWLyeGNKrUO36/tT55hzUy+6RvUu02tRmvWm+HliSHdWOUbXeu6q570/pIs46LTto5b9CxfmyZHgWK2J6t5UE6KuzBTKts36RiDQZ1yxkS/rnTS1RuyCfnk+urzjxdtabotPVseyWsp02fs32Vmce2b8cnVNej2T4hWwJkaGJzOo7SCu+oAs/3d4udMFOFdplUS8lnG1Uw+Z6cZvx5R6cjenkYDo4+2DB8VIxW093+vTCWlMsCkc9k3FZypS3xVlmEgbaQezt+IThOIjhyT5gBiZ9tlFG+wflaDLDy5zz2Lnl0ZIGXGYNvdQYVZkF20mmqNZv8KRQWYa/jqodiZbUCkjtAeaxN4mauookdGqtorwZeskgybTEaTcbFVs/6+x2eVTapjY6MUZGP+5j3JiPd3UuRZL7Fm00a10OQgFSJA1UpzlMD7dreNiCHdZYS3kgJcPQi2OaLvikbo8TRqNFgHr4xXKeCMvs0COq7dr6q61or5iwxtKXTiTCSJRnxUa8zZw9WQdN7d5GPW7k95Pdbk54Ufkc4deSRoYN8PhuttKDOVtjjeByQZ51oTuJprvXzpjyb1RlL0Ac6ihNvk7WdIpmGFr0x09bRIJctL/b3HTrb682YWToBLtbb0Yo59a0ya66BEThcDIbEnDjyMmePlf5pezbPcTAF1wH6eTrchdf5QTxOlg+j50Y6NNytEKS3ZXkBKVK1h28FM/21gSklntWwL6rduGRBKIVhWnstT5XkpZthiuNZXXxlXNcyS5Iy2xJYkaQZmeRksklSPZInuU6HbVHUjeVcUXyCKEah7ZW+Sh53vaX+DhAEXQRDCyaNY5QBF6LaXyyW+aoq4Rxfv1GIoB5hntjiWpzEtUSRopmOJPEc7miWFXhSZDmabWG2N4nSaThNeDuFyUeO2PzAEecQeLEHSyJZ3qYIX6coxSk5mMcs9amno/kUwgxTzaRke1262WYJ5AWxD0vARBBZmQ+fYje+JIhA11+6YQJ0kc5l/R9FEy83/bchft67ZQPrWF6pgMp4BIgrCr8gvPQtmO+D5h6DvpnnM8srL3Sc2jTxwBXJx63fHVO2yr1dyqhE7Z97W9zVf3z8z5PEX0ARn/Nxd2QdvQe3N+aOySimK6+3ih7Mp8NTdjxmlxpyJRVLsHmCIkiO0CDIMJ866dEehsTdBPEjKntH/cnzXf4RX5a6oZbicRDgjqtelj94x2gQle8YBX8xxU8fSR9c4rylsEi/kok+fu6UiP/6IgJdUOph8Rv+yaPkd+Bf2Xrwg+Ms558XOuWqJK6nb5oCRNish2dglDwa/8rAV84/Cu9JvmNJcTdtsxR+v1Mth9tLzQQgysJUkWoXwePAveBMTzHs/lb6w8yFOr6/BQr21VtgrY41PPoCs3bX9f63csO7tAuA+BTyLlheagV+1mLnofMw4N8Bfjnjee6vM/5jJK9/iP+UPOT08/fw+i8=</con:value></con:property><con:property><con:name>SAML_4</con:name><con:value>SAML2 Assertion=nVfJcuLKEt3zFQS9JLBGBhG2IzSCAAFCYtzcEFJpAE2oNMHX3xI2GLvd/XzfCiorK/PkoKxTz9AIfLLPQgiS1IvCuiy8NP6xScLa96h2yybxdotmcKplkO1uq03s6XaHpm3QYxp1GcIMyCFMjTB9aZA4QbXwXovs6QTRx4k+ST6hg7tGfQUSiEwjlSe8US8DP4T9q9uXRpaE/ciAHuyHRgBgPzX7GqtM+kizb9wwNV6f31BeHSavbprGfQwznyxgAt83n8wowJ6xTzrPFuxrnhMaaZaAd58WfGm8ny2K4qmgnqLEwUgcxzGcwZCOBT3nV+O1djsMLDm0o7c1b4RR6JmG712MCpQCUjey6qzvRImXusEfTBMYgVemW6A0WyZBh78a2IeDK7ofWvoEMoFGC7oGcTO2ADZIQGiC+nIhvzR+/ayCb2f1xAihHSUB/LL+b5BAmAM/ioHVgrfIbuh+bvGbdL0+A7Mvh6afQS8H11pNYsMEsD5PgO2VEw+i5rNg/Vr+eglvHQbM/1KSZ+wRJ4KNfZMZwXMATP+fej3W6s3KyvAz8Lo3GHqQ7vXIbU6b67XIH7emhElLg8FfrhAeld9A3Uv9vv7aqPe+ej921HF2JkmFOZKWm233ZOIYT2TlZGCeyRVc9IY6DiVZxYpLmuQjJnDHAuYJ5/2gKdn+gl9bcdu3KXU6XdhUbeIxxrRjHykfWmDu7rvtab46LDbNqNxebIKbMUdOCaPxaG1E6TxpWt1pPhmzPpE4Sja+ZOrEprcdHqrueFMr12vfovyS3WoDg7Rcab19+YjpMYYqrjE4X4Os/m/aOCMYqXFf8NWksNHnmYJXRZb5psDzLOAdtpA51pG5yYWdcs7x5B69AVPgHKsuJVZgz8qCLQRnK6xUdSwW1mrl71ayJHHKgi6G7FaooQ1BLFfCbjPCjfUu3pISvtM4ztosoj01iq3hsRi65lTRlWKqy2flIJZTXcTXV5lTovVFOSjETF9StfWBY5SFWAjF1aMgFu50t17E2yVTmBdRVVh6wBJLkXeVoR6sCJNauOZBnCjs8SrnXIVfrZRS1Nl5jXOmKxSbzku72AyseB/47oPxITKuW4MVKqSf7S7iQeHFAa+dBpq8pwRVHLGL7XK/Xh2NtZTXzOGU3d88em3P2ESFs+sVgrodjaOd7ObmlFVFjlNZlC6cVeTBiI0GHKvQrFde+APXiXhLKrARCWtNxh90NmfvtIHGAPcNotcjtpN1Z37qCGLY3I2z/cFV3I00a441K18yKXPZwryZdwyPMMvYVjfiMB2X9lDVavu5UG7MYdNyRph/YaRE6Y7Y5HJ2fcVZpOvODJ73nm2vuc2M9ru2r1CL2Pbt+AybeqQeE7zDAYrEtud8nNZYR+FYdnBYHjhV4XpVUi25ULcKZ7CSmGbs5UCmY3J1Gg1z39xSbFSO17PD8b0wllCIHFaoImorsdYTWKsqwlBbitKBXXKOk3COKHGqKbDqVh4XW5Sv5RApf82jdM2jI3KsSO3YDjOsUUucSWepRtPsOeSWocS4yqlcW50A756AONGmMV0ocGqHu3V0VAIvWSaZthyPp5Nyr2eD4wHNKhvXxjm1q4n5MWa96Vh3j0IkGPN4u03jZmgmZirHgSKXl9kOHnrePsBHzTbBzXHB7JLLYF8sB4a4GyeORoyHi3BOdZkazOzzMGgeesW6qWuduGvxoS2cz9guWeERG0nMon2ySpI8usti0insEXvcG+S09BnuzIjjnW4WC3W81oJmu9bOJ5MAv+gYPY1nhTYoaFFVm5TF6UMdxom3zXpOmcxCi9waaSff4auOF/tHhsyOOh1TKydAxZrnVtxV5jWV3pi7wOnG5ghbYDkrdu2JPDjvL8YlDmbm2wD9Oh3uwrf5gT1Olk+j50Y6NNStwExvy+oCkoW6hG4FI/21gakkntWyr6r9uGJBMAVh2nitTlXkpZ8hiuNZfXRlvK3FNo4LfK/XxmlR6rRFEadxQsJZvM0wBE3QN5bzhuILRD4Kba/yVfG4t1vq7wDNoA9BaIGklUeZ6QLY+IvFKl91OVyg6zcKIdAjxBOpbrtH0HyX7vUohu91ul0B73Q4SuLbFNXjeo36NEpn4Sxh7RQknzki/YkjLoDpxR6oiGR1m0J0ncIUpeRk5FnqE0+58RSCDFHNpGJ7fZLutTHoBbEPKsBYEFmZD55iN74mCINvv2TLMOFVuhD1f2SNv970fwzx694tG0jH8ioFWMXDAVRR8A3hJW7B/Dno7mPQN/NsZnnVhY5Smyae+Ybk89ZHx1Stcm+XKipe+4e44b6r//j47yexv4DCvubj7sjKvQe3N+aOyCiiK6+3ip6Mp9NTlufZtYbdioolyDxGYHgX04CZIT511qMjCLG7CexHVPaO+ovnu/wzvix1Qy1F4yBAHVe/Ln/wjtEArN4xMvpiyp8+kj65RHlLQZl+J+N99NypEP/1RWT2zUoPiefop4gS66Nc39h68IPirOafFzrVqiKu5z80hRkhsx6agVHyaPw7A985/yy8J/mOJUXdtM9S8OedejXcXhqGaUZZmMpC4yp4HLhXnOk5Bv0Ppd/MXKnj+1ughH98C2yUiYZGX2A21rre/1Zuedd2MQE6Bb0rlpdGiZ61yHnoPAz4d4BfZ7zY7nBttktSIt69z/guw7Q7xMfH/CmS19/Ev0secvr1e3j9Fw==</con:value></con:property><con:property><con:name>SAML_3</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy0DCLJYSarYVFQ0Cq5fbuEwIsomw6a//g4ajcnJOW/uW2UVTtPT/fRCzzPPyPK9ZltECMaJGwZVTXmp/cNCm+dZhm2QfLPVYFgeNgSuxTd4W2CorU2xLbipVTWEUqgFKLGC5KXWJCka6zeavElRbRL/+CeSpde16hzGCJvGKk9krVr4XoDaF7cvtTQO2qGFXNQOLB+idgLahqgP21izbd0w1V6frygvDuPXXZJEbYIATzYE0PPAEwh94pn4pPNso7bhOoGVpDF892mjl9r73jzPn3L6KYwdokmSJEEKBNaxkev8qr1WbpuhrQXb8LqWrSAMXGB57tkqQekw2YV2VfScMHaTnf8H0xRBkaXpBixAA1BM8KtGfDi4oPuhpU8gY2Q10M6ibsamcAtjGABYnU21l9qvn1XwuteMrQBtw9hHX9b/DRIMMuiFEbQb6BbZDd3PLX6TrtdnCNpaALwUuRkclW0SWQCi6lsMt24xdBFuPhtVL+WvFujWYRD8l5I8E484MWzim8worgNR8v/U67FWVytzy0vha7cnbhRvxU27R8DBpNe36vPDcXwY0pOXC4RH5Suoe6nf118b9d5X75skY8QD11cW6/6UYFVmTI2cbqrHqzrZSugiyqZEa2zPN282ahrLkZYnuxkIOXjoNgcRo2lHhs0XUcGkco+r6M7WGhOZ0tPSgAoSKbZWK2sJBHnNC7w804qMo63eMO4A3eniTUu3a5EE49XzgR/zh/2hY46mx6xj5S5dsZfEgeKUpXU8aZZFh1oIXj5ieoyhjGsAT5cgy//LFikoVmLdF3I5Kbb480zgq65pcl2RZRHKjphrkuho0vAsjiTncNwd3K6Qk5I4mXVERTzpUzFXnJUyn0wGam7P5956rnU6kj5l8p64Uir4haIWc2W97JPWYh2tmh1ybUiSvZyGG7of2b1D3tuBkW7q+cjUTvpeLUamSi4uMqfA67O+16mxOaMri70k6FM1V/KLR0XNd6P1YhqtZkIOzupEF5muSM1Ueaf3TH9OAXq6A3t1qIuHi1za6fJ8rheqKb5VJGc0x7GZcmcdAd+ONr63ezDew8ZNuzs/bbpeuj6re11Wu7Jx7BrahlYmal+crmabxfxgLTpZBfRG4ubm0W251jLMnTWfK5NVfxCutV0GRuJElaSJiNNFirrW7YthVxJ1RnSLs7yX2FC2OznRb6JKXfC67PLkHpfI6pKeRfE8tRou2Lcjq6hBfT1IN/udvlt2xvWBYWczIRHOK5TVM9ZyKVBE28lS7SWDYtubGJXNm1IsQa9uO33COwudWOf6Ynw+7TzdmSYLdoxOG3e7XUjLMeNxW0+np9HW20YnVDfDySEmWQnSTWJ1ygZJRXR0SRS7+9lemugSXybV1vLJSpcssaMmqXjeN5NBc37s9zIPrGgxLAaL8f7wXhhbyVWJyCcqbiu1wiuiXRahZ8zUzl6cSY4TS47akSZAEScrbZCvcL5mPaz8NY+dSx4dVRJVei2yQq9Cz0ghGScGw4inQJoFHWGnH4uFzfokd4Tq0BhFTK6j0TZYL8KD7rvxLE6N2WAwGhYbM+0e9nhWbUljkNHripodItEdDczdQQkV6y1arZKoHoAYJFrk61pxHq/Rnnc3PtmvtyjpjVQA15z5m3zWtdT1IHYMatCbBm80J1RQuj31/Pqezxd102AjzpaDrXI6Eet4ToZi2BGmraNdNJuH3Swfsvm2Lx42VnNUeIJ0EtTB2gT5dDJYGH69VWllw6FPnk2CGUXj3OjmjDqZ1GlbMnsmimJ3lfJOEY8Du7myEjZbk3PWjbyD0EwPJhPRc8fHxXrL7IjT3yoTZgnWvsNFoE9MiUxUue1Q6542Z+sc+WNwHaBfp8NdeJ0fxONk+TR6bqTDwN0KQXJblgeQplQ7+FSwkr8TmFLi2o3tRbUdlSwIJTBIaq/lrpK8tFNMcVy7jY+M61ptkaQi8zzT4YQO21JVkiGpDimSLUGgGIq5sZwrii8Q5TDYuqWvksddT6m/AwR+G8HAhnEjC1Owg6j2F4tlvqpaMMXHbxggaIaYJ9IcRdFqB2OmWhi1IFOiJMu8zOIOJ5ssX6uOwmQcjGNxm8D4M0dkPnHEKQRu5MKSSJanKcLHKUpwSo5WliYe9ZRZTwFMMdWMS7bXbjJ8i0CuH3mwBEz4oZ168CnaRZcEEej6bDYsgC7SqWr+oxny5aT/Y4hf392ygXVst1RAZTwSxBWFvxFest26BfPnoLnHoG/mxdR2ywMdpzaJXXBF8vnVR8eUrXJvlzIq2fiHuuG+q/94++87ib+AIr7m4+7IztwHtzfmjskopiuvt4oerafjU5pl6aWGXEnFYmyeoAiSIwwIUsynTmZ4gAFxN0H8iMreUX/xfJd/xpcmu8BI8DjwccdVL8sf3GMMiMp7jIa/mOKnl6RPLnHeElgk38lkD193SsR/vRGBNij1sPgNP/Iwtj/K9Y2tBz84znL+uYFTrkrievpDU4AQm3XxDAzjR+PfGfjO+WfhPcl3LAnupk2awD+/qZbD7aVmARCmQaIptYvgceBecCanCLY/lH4zc6GO73eBAv3xLrDUhwYefb5Vu+u6/1u54V7aBUC8C7kXLC+1Al9rsfPAeRjw7wC/zni1xUotkWvSKsndZzwnCC2W+viYP0Xy+pv4d8lDTr9+D6//Ag==</con:value></con:property><con:property><con:name>SAML_2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQSxMuUUECAuek224vXJbuy8o4E+Jt4kDspLS/fu3QUKC0hz0SEvJkPPPNxd/MBUNJbLldxiDjJKWK77XVX7ZRb9adc9DCllnX7EY90BBgpDlgYWw5DdRwsKr4jOXgU8YR5W3VMkxbMxzNtMam5VqGe96oNazGT1WZQsaEaaFSM1RlncSUuaXbtppn1E0RI8ylKAHmcuyOutdXrtB0UYVJ7VxsUJYOs07E+dLVdVwLAEMc4xpOE/1C39O5CJg7IguKeJ7Bq8+AtdXXu09PT7Wn81qaLXTLMAzdaOlCJ2BkcaZ2vlSXIfBpmG7OfURTSjCKyQuSoK6BR2mgdONFmhEeJR+YNnXTkKY1WGMNmzY9U/U3ByW6Ey3tgcwY0liEzMrYPYSQAcWgTO79tnp2WgU3d8cZoixMs4QdnP8OEtAC4nQJgcaqyCp0p1s8kq7OBWDXpzjOGSngu2yTJcLAlNsMQrK+Ikw0X8CUsvzKmokfqboM8N+U5ULfxSqg60ey45EFMP5/arZbr42VKYpz6OQ/5xNncj55mc2DGZn+CMNvUR+v52Nz0i4h7CpvQG3L/Xo+bNZtb71eurYeYdabe4NVN7Auf9x9taczNM2vw7uvL7k9HTrcsy9ta7qOGi0Io8d/vt7+DhYLbzievJw/Ym8aTvnN8tvzdXOGvnim/3s2bqbszvi2tq0uufMLlE3Y4OrJNm5HNyMbmiu/mD1YD6mTLIOH1KTz6cB/uUrSl+Qu7X3HwcSaDKJi2vjSyqKfi5vl6l9T711e9octb9J+i2k3hn1hRQmjfP4bMK+Osj18TxmKeiH+Ob1ICQm0sFR1l5KjGAfK1Y68JanFzQUBkcAVxdych82hafUHlm17XtczegPDNsyh0TWcVsuxW1bFQRsUBxD7KQ2J9CVZdtM/nwPEicuABpBpRZrjCJj6iUUPcaT49F48jpQyGKeCxU27XmR5vVEw6xGZSesxzlbzyMbOWlW+p/yG3mTdkEO2z93OHnffAyZLApLgZYcz0eKMi2SsUJHz2KwVqEYhFyMgkyzsWnbT0RlJljFIqHqSBnkMtWW0LFOjs82/pSHMSun9YFy+vA8DO/xW5UDoBEQqMBlLD0Qd4cgQsqpAPg64uRtwZb6bB0Q+MJFQnhG8QbL/6a1PZINsm0RE9Ks/+mVWuLfqJ19/f1P/BJR+mI+to6AgO26raSoGhKCPTlXNFaqtanlR5GX9GpIaM2FeFwxp6iPAueC353H6CFTfmtBPGi9b1Aeet/J9fDmP6IgjDonoNqU8nrBbjIDJ3cIX72R96uKy51LkjcOaH5P1Y7GCSMSfbinYxVJPiG/F31OaBW/lOmJrx4+IUywUnNCFPMlB8vxBU+BUmCWC+dJs1/gxA8ec7wu3Sd5i4aKb5jmHj78oktLaKsI4zSn3PbUU7NJsiZM/L8F9U3pnpqTy19m8Zh/O5tn11UgQXoLUrS75b2WNlO2CQZUrQImlra7Fqimc08UOrb8C3GP2ltV36s7A7tmtXs+wd5m90TW3zL4fSeed+L1kJ6eH76HzBw==</con:value></con:property><con:property><con:name>SAML_1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj6uQC4QmUUHKUuhJb9sCXbX7UjnOAG4TJ8QOl/31xw5NCpT2sEdCQp6MZ765+Js5YyiJLc9nDHJOUqoE5x312Y4itxm6WAsxnGot7Bqa69htrW3bbdsJUTMMsaoEjBUQUMYR5R3VMsyWZtiaaY1Ny7MMr9lqOE77t6r8gpwJ00KlYajKKokp80q3HbXIqZciRphHUQLM49gb+TfXntD0UIVJ7Z5tUJYO8+6M88zTddyIAEMc4wZOE/1M39E5i5g3IlOKeJHDm8+IddS3u8vlsrFsNtJ8qluGYeiGqwudiJHpN7V7Ul2GKKCTdHPuIZpSglFM/iAJ6gb4LI0UP56mOeGz5BPTpm4a0rQGK6xhs0W/qfq7gxLdkZZ2QOYMaWyGzMrYECaQA8WgPAyDjvrtuApu7o5zRNkkzRO2d/47SEAXEKcZRBqrIqvQHW/xQLq6Z4C9gOK4YGQBt7JNMoSBKXc5TMjqmjDRfBFTyvIrKyZ+pOoywH9TljN9G6uArh/IzjmZAuP/p2bb9dpY+YXiArpBny2ehsnab1+9Dq9ewuYyGzhk/gQXy04JYVt5A6ou99t5v1nr3nq79PS0vnOR83AR/7YHvX9+Lkdm1nsxe0XPn1+S0LywbGf+1ErXvDglaUpa48fXq8VltOIvr8Zg3Fyxq+8P+fiuhXh4snb0zMbBo/6jaRv95l0c3eP2zcv9vdm6iL6/6k/ZIn4YPwKyV+HDw5qnzbx1+Th2xg4C/3fQT3j/3mjm10v/Fz45T6KQGO5wtLwNKXnsRZbfeY9pO4ZdYUUJoyJ8Acyro2yP4FwZiHoh/jW9SAmJtEmp6mWSoxgHytWuvCWpxSsEAZHIE8XcnAeu1RPPxx84TaPdN/p9o2WYA8M3bNc99U2j4qANij2IvZROiPQlWXbTP18DxInHgEaQa4u0wDNg6hcWzxFHSkCH4nGklME4FSxuziZt7rTDddbGsem+xO5kZq8WKEOqcpvyn/Rn7k845Lvcbe9w9xAwyQhIgpcdzkSLMy6SMUeLgsdmY4EaFAoxAnLJwp7VcmydkSSLQULVkzQqYmhks6xMjc42/5aGMCulw/64fHmfBrb/rcqB0ImIVGAylh8g6ggHhpBVBfJ5wM52wJV5v4iIfGAioTwneINk99N7n8gGqZtERPTcGz2bFe5a/ejrH2/qX4DS9/NRO4oWZMttNU3FgBD00a2qOUeNeaNYLIqyfqeSGnNhXhcMaeojwIXgt/U4fQWq1yb0o8ZLjXrPcy3fxVfwGR1xxCER3aaUxyN2ixEwuVsE4p2sjl1cdlyKvHFY8UOyXixWEIn4yy0Fe1jqCfGd+FumefRergO2tvyIOMVCwQmdypMcJOtPmgKnwiwRzJfm28YPGTjkfFdYJ7nGwkU3hQWHz78oktI6KsI4LSgPztVSsE2zJU6+zsB7V/pgpqTyt9m8Yp/O5seb65EgvASptS75b2WNlO2CQZUrQImlo67Eqimc0+kWrb8B/MDstmO5fq81MM1ezeynrmuZ9qBO4E4k3Q/ij5KtnO6/h+6/</con:value></con:property><con:property><con:name>SAMLSAU1</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwKYqVpGoQUFTcwPXmLRyGRdlk2PTXv2Cix+Qk58v7Xen09HQ/vdDzzDPWPZfuAoxRFDuBX5WFl9o/HZohGYo1G+ZeNxtNndw3Oi3TaOgGDdvQYBiTbtWqMsYJkn0c6378UqNJimmQ7QbNahTZbTFdmn1qs+yuVl2hCBemC5UnslbNPdfH3avbl1oS+d1Axw7u+rqHcDeGXRUo426h2dVvmGqvz28orw6jVzuOwy5BwCcDQeS68AkGHvFMfNB5NnBXdSxfj5MIvfs08Evt/WyWZU8Z8xREFkGTJEmQHFHoGNixftVeK7fDyJB9M3hb93Q/8B2ou85FL0EpKLYDowpcK4ic2Pa+MU0RFFmabqAcNiDV9H/ViN8Oruh+aOkDyAjrDWzr1M3YApkoQj5E1eVCfqn9+lkF385qke5jM4g8/Gn93yAhP0VuECKjgW+R3dD93OIX6Xp9RrAr+9BNsJOiSdkmoQ4Rrs4iZDr52MFF8xm4ei1/Nce3DkPwv5TkmXjEWcAmvsiM4FgIx/9PvR5r9WZlpbsJetUv00D1bUXbDEDPRcqWAtZKmNTVUfByhfCo/AbqXur39edGvffV+6FYMQZS7ruxeJyJZyPY1wmzQ4PdmmO2eXpMZ0duLqOFfUqBu4Qtjxk0T/VBOpxM6yvQIiSVkrY+Nbhk4wlf8aXRilzF/eUGSVMPjr0h5t2jTTi9Xb7aQFZtiuEgD7S17abszNpkdcSBdd2QElMZshvGjXeJfJa4iJnHlfl2sXGa7bwtXdpHQOA2FF9+x/QYQxnXCJ2vQZb/Ny2SE/RYvy965aQwi88zRq+KLPfqQq8HUM8CmcwDS+bHFzDhrePJPjp9LiN5MF9KQABnZQEywdoKq/l8JGbGauXuVrIk8cqimQ3AVqgUG4KYr4TdZkjq6124pSVyp/K8sVkEe2YYGoNjNrDhRNGUbKLJZ+Ug5hNNJNdXmZUX64tyUKiptmQq6wPPKQsxE7KrR0HM7MluvQi3Sy6DF3GugGYfUEuxZysDzVtRkFnY8CCOFXC8ynlb6a1WSi5qYFbhrcmqiE3rSbsQeka491z7wfigMK4Z/dV533eT3UU8KD2x31NPfVXeM8JcHILFdrlfr476WkorcDAB+5tHp+XomyCzdp1MmG+Ho2An2ymcgLnI83NQpIsEitwfgqDPA6UJnPzSO/Bs0DOkjBjSuFLn3D67OTunDdb7pKtTnQ61Ha/Z2YkVRL++GyX7g63YG2laH6lGuuRi7rLFaT1ldYeCeWjON+IgHuXmYK5W9jMh38BB3bCGhHvhpEhpD0F0OduuYi3iNTvF571jmmt+M226bdNVmEVoumZ4xnUtmB8jkuURQxPbczqKK8BSeAD6h+WBnyt8p0yqIWfzrcLrQBLjBFwOdDyiV6fhIHXhlgFBPlpPD8f3whhCJvJENheLthIrHQEYZREG6lKUDmDJW1bEW6LEz6EA5lt5lG2LfC0HhfLnPErXPFoiD0RmB1huUGGWJBdPY7XZBGefX/oSZyunfG2wHtk+IXGsTsJmpuCJ6e/WwVHxnGgZJepyNJqM872W9I+HYlaZpDpKmV1FTI8hcCYjzT4KgaDPwu02Dus+jGAsh54i55fpDh86zt4jh/UWxc9IAbbppbfPln1d3I0iS6VGg4U/Y9pcBSfmeeDVD51sXddUNmwbPd8UzmdiF63IAAQSt2idjJymj/YyG7OZOQTHvU5Pcpfjz5w42mkwW8xHa9WrtyqtdDz2yItGNCfhNFP7WVOcz+uMwWsDDYeRs011Vh5NfYPe6jGb7sgV64TukaOTo9YMmZXlFcWapUbYVmaVeXMDd57VDuGQWBApENvmWO6f9xf9EnpT+DZAP0+Hu/BtfhCPk+XD6LmRDrXoVgTj27K8gGShKhW3gh7/ncCUEsdomFfVbliyIBwjP669lqdK8tJNCorjGN3iynhbizTbkSjQA02BAqTUEskmSUkkIFsc1xLF5o3lvKH4BLEX+KZT+ip53Nst9XeA0Oti5BsoaqRBAm2Ea3+xWOarKvuL4voNfIy0oOSJVJNjBUloSSLHgjYPBJqj22QH0KJE9pherToJ4qk/jYAZo+gjR2Q+cMQFgk7ooJJIlrcpLq5THBcpOelpErvUU6o/+SgpqGZUsr0u3ey0COx4oYtKwIQXGImLnkI7vCaIwG+/dEOH+CpdiNo/stq73vTfhvh575aNQsdwSgVcxsOjoqLoC8JL3YL5Pmj2MeibeZAYTnmhF6mNIwe+Ifm49btjyla5t0sZVU/9h7rhvqv/+PifJ4m/gCI+5+PuyEidB7c35l6Q0YKuvN4qetKfTk9JmibXGrZLKhYV5gmKINuEimBS8KmzFhyRT9xNED+isnfUnzzf5R/xJbHtq3ExDryi46rX5Q/eMSrC5TtGLr6Y/KePpA8ui7zFKI+/kvXc4rlTIv7riwh2YalXiGfFTxZExu9yfWHrwU8RZzn/HN8qVyVxPX/TFDAozDrFDAyiR+NfGfjK+UfhPcl3LHHRTfskRt/vVMvh9lLTIQwSP5aF2lXwOHCvOONziLq/lf4wc6WO72+BHH/7FtgoY7UYfZ5eu+s6/1u54VzbBaLiFHauWF5qefGsLZz71sOAfwf49Yxnyb/N+I+RvP4h/lPykNPP38Prvw==</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3DpihWkqpBUFFREdz4cgthWJRNhkX99Xcw0WNykvPmvlVW4TQ93U8v9DzzjIzAp7sAIZikXhRWJeGl9g9NkUyTsdkGR1tWo8mRZqPTapuNVrNjddocw9CWWatKCGVQClFqhOlLjSYppkG2GzSrUWS3xXRJ+omjm3qtuoIJwqaxyhNZq54CP0Tdq9uXWpaE3chAHuqGRgBRNzW7KpAnXazZNW6Yaq/PbyivDpNXN03jLkGYTxY0oe+bT2YUEM/EB51nC3VVzwmNNEvgu08LvdTe9xZF8VQwT1HiEDRJkgTJEVjHQp7zq/ZauW2GlhTa0du6Z4RR6JmG712MEpQMUzeyqsB3osRL3eAb0xRBkaXpBjyZDZNqhr9qxG8HV3Q/tPQBZIKMBnIN6mZsAW2YwNCE1eVCeqn9+lkF3/ZqiREiO0oC9Gn93yDBMId+FEOrgW6R3dD93OIX6Xp9hmZXCk0/Q14Op2WbxIYJUXWeQNs7TTyEm89C1Wv5qyd11zBo/peSPBOPODFs4ovMCJ4DUfr/1OuxVm9WVoafwVevj1gPKJ6b04iAUJ3s1FZzqEvLnHy5QnhUfgN1L/X7+nOj3vvqfdN6bqSEBZMOs2jvopF2tMKztic6zIbn2ynpJuvOwV8P3H1byZgV0DtRC6w6hp1mbsfaovFsKPUUs5VmmV5UhrtYj5u62BJie3M5szg4P5CUKGHObSEuvItEDOu5Ph+dpY22OvZHk6NCFyw1c5nxKq8zQjSNmcne3fDqoNKbEgFlk8tx4bLF6LAe7A8vv2N6jKGMawzP1yDL/5sWyQlGatwXvXJS2PjzTOGrLEm9utDrAdhzQCHxwJH4yQVMeedwdA/egCtIHijLPhDAWV6AQnC2wkpRxmJhrVa+vpL6fV5eNIsh2AoV/EIQTytB34xIY63HW7pP6irPW5tFtGNGsTU8FEPXnMqaXEw16SzvxdNUE8n1Veac8Poi72Vqpi2ZynrPc/JCLITi6lEQC3eqrxfxdskV5kVUZNAcAGop9lx5qAUrymQWrrkXJzI4XOW8K/dWK/kkamBe4Z3pCsem9fp6bAZWvAt898H4EBvXrMHqvBv4mX4R93JPHPTU40CVdoygiCOw2C5369XBWPfzijmcgt3No9fyjE1UOHqnEJTtaBzpkpubU6CIPK8AnC4SyNJgBKIBD+Qm8E6X3p5no57VL4gRjSp1zh+wm7N33CBjQPoG1elQ28manR9ZQQzr+jjb7V3Z3fRn9bFq5Usu5S5blNdz1vAo8xTbykYcpuOTPVTUym4unDbmsG45I8K/cP1Ebo9Acjm7vuws0jU7Q+edZ9trfjNr+m3bl5lFbPt2fEZ1LVIOCcnykKGJ7TkfpxXgyDwAg/1yzysy3ymTakmFspV5A/TFNAOXPZ2O6dVxNMx9c8uA6DRez/aH98JYQiHyRKGIuK3ESkcAVlmEoboU+3uw5B0n4R2xzyumAJStNC62OF/LIVb+nMf+NY+OyAOR0QHLDSvMkuTSWao2m+Ac8suwz7ny8bS22IBsH6E4Uadxs5DR1A71dXSQAy9ZJpm6HI+nk9NOywaHPZ5VNqmOc0aviPkhBt50rLkHIRKMebzdpnE9NBMzleJAlk6XmY72HW8XkKN6i+LnpGC26WWwK5YDQ9THiaNS4+EinDNtroIy+zwM6vtOsa5rKhu3rV5oC+czoScrMgJRn1u0jtaJpg/uspiwhT0Ch51BT08+x585caxrZrFQxms1qLcqrXwyCciLRjSn8axQB0VTVJQ6Y/HaUENx4m2zjnNKZqFFb42UzXVyxXqxf+Do7KA1Y2blBLhY89yK2/K8ojQ3ph447dgcEQsiB2LbnkiD8+5iXOJgZr4N0M/T4S58mx/E42T5MHpupEPF3QrN9LYsDyBJqPbxqWCkfycwpcSzGvZVtRuXLAilMExrr+Wukrx0M0xxPKuLj4y3tUiznT4FeqDZ5gDZb4lkk6T6JCBbHNcSxeaN5byh+ASxF4W2V/oqedzbKfV3gGbQRTDEZ0MjjzLThaj2F4tlvqpSuMDHbxQiqEUlT+QolhVYXuzw/WaLonp9muqRPE3TPGj32XatOo3SWThLgJ3C5CNHZD5wxAU0vdiDJZEsT1OEj1OU4pQcjTxLfeopN55CmGGqmZRsr0s3Oy0CeUHswxIwEURW5sOn2I2vCSLQ25NuGCa6Shei9o+k9q4n/bchfn53ywbWsbxSAZXx8BBXFP5BeGn8ew/m+6DZx6Bv5kFmeeWBjlObJp75huTjq98dU7bKvV3KqHrqP9QN9139x9v/3En8BRTxOR93R1buPbi9MXdMRjFdeb1V9Gg8HZ+yPM+uNWyXVCzB5gmKINuECs0M86mzFh1gSNxNED+isnfUnzzf5R/xZakbqikeBwHuuOp1+YN7jApReY+R8Bdz+ukl6YNLnLcUntKvZD0fX3dKxH+9EZlds9TD4jl+FFFi/S7XF7Ye/OA4y/nnhU65Konr+ZumMCNs1sMzMEoejX9l4CvnH4X3JN+xpLibdlkKv39TLYfbS80wzSgLU0moXQWPA/eKMz3HsPtb6Q8zV+r4fhc4oW/vAht5ouLRFxi1u673v5Ub3rVdTIh3Ie+K5aV2wtda7Dx0Hgb8O8CvZzxL/m3Gf4zk9Q/xn5KHnH7+Hl7/BQ==</con:value></con:property><con:property><con:name>SAMLBAU1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6o1w6wkyBeuwWtwjoUV+cmKYQbdNL0gL++p0Ui4DoYZ+nTlbX5VuXfCvnFEShYTuUoozhmEjeoCM/N4NAs+CLrli++aLU2+2G0vaRr1gvoG6+NBtID6AseZTmyCOUAcI6sqHppqLrimZNddPWddsyama7+SRL9yij3DVXqWmytIxCQu0ybEfOM2LHgGJqExAhajNoT5zroc01bVBhkrvna5RlwKw7ZyyxVRXWfARRGMIajCP1XN3ROfepPcEzAlieoY+YPu3IH7aLxaK2MGtxNlMNTdNUra1yHZ/i2ancPamMke+RIF6f+4DEBEMQ4ncgQF0jNo99yQlncYbZPPrGta7qmnCtoCVUoF4np7L6GaBEd6SnHZAZBQqdA71yNkYByhCBSLobex359LgOrm2nGSA0iLOI7p3/DhIiBQrjhMegVWYVuuM9HihX9xxB2yMwzCku0G8xJgmAiEqjDAV4OcSUD59PpbL90pJWE4bg37TkXN3GyWGrByozwDNE2f/p13av1l7uQZijbj5X6+2ofWa8TbTHx4f0xsdZkF49oeljp4SwrbwGtWn1x3l/UDdz9WEUpGeL+3RkGa83T3H//t1QvfQ1HfSvVqTw6xeP79mq0QsaZ/4QOJfW9M0ze6PeW9K7m7/2E/8f/Z6Oo/HqsQG84eJE17RZmsK4BdUHk+D3mb4a3i6vHR3qr0O3SNqj4mHmPl2awaV5mbiw3Uhz8Mu6vPr39fb9rfh1O2qlLTi5DYw3/0RvjZppPxoVoXb2BDLPuLzrfOa0ncOusKKDSf7yiiCrjmI0vIF0wfsF2M/UIiTYV4JS1U4EP1GGCJO7wkrQip1z8sG+zZu5PrtOw+1rrmm0DL3VqFuuVtf0C83RrHa77rSMin/WKPYg9mMSYBFLMOx6fn4GCCObIuKjTCniHM4RlX/wOAAMSB4Z84sRE4qmMWfwvtO6MN3ewDAHPbfX1Fuuaza1C83qm03Dchuy9DtmN+QmcwKGsl32buyw9xhBnGAkKF7MOeWDThkvSQqKnIV6rQA1gnK+BDLBw7ZRb1kqxVESIgFYjWI/D1EtmSdlgVS6/hoKgLSUjt1pef++TW//X1UJruNjoUBFLj3Eu4kOrKF6lcj3Cbe3E67cO7mPxTXjZWUZhmsku78+p0WMyWZUeEbP/cmzXuHeqB9t/tVS/QGUul+PTSC/wFthq33KVwQnkW7VzRTU0lpeFHnZv6YgyIy7V3VVa6oTBHPOcqtp/IaIunGhHrVgNqj3Im/ku/hyNicTBhiK+LRJ5fGI18UEUfG68PhtWR77dNkJyevG0JIdkvVD/ggRiH98p0AbCj0uHvHPIs78z3Yd8LUVh+fJnxQMk5k4iXWy+mYoYMzdYs5/cbbt/JCDQ8F3hZsib7AwPk0vOUPf/5EEsXVkAGGcE+YN5FKwTbYlTrZKkP2p9MVNSegfG3pJv93QD9fDCae9CMgbXfzfygouxwUibkVxiaUjL/ljkwcnsy1y/wB4gN8Nt+dc9HXH2ON3bVPAnUy6X8RfJVs13b8P3T8=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQjx0M4Bsw1RmO1l6q9kVt6+2XTgxR0wNBSVDsrz8JFqrW9nrujDNOls3usy95di8ZDAPTcRnDMScRVbx2Q32tGXbZtsyKVqtbda1im4ZmG6av4Vp1gvwaQlMLq4rHWII9yjikvKGaulHR9KpmmCPDdIyyY+glvVp+UZUnHDNhWqiUdFVJw4AyJ3PbUJOYOhFkhDkUhpg5HDlDt99zhKYDc0xq83KLMnMYN+ecLxwAUMnHCAcBKqEoBJdgT+fSZ86QzCjkSYw/fPqsoX7cXa/XpXW5FMUzYOq6DnQbCB2fkdm52jzLL2Pfo9Noe25BGlGCYEDeoQTVx3we+YobzKKY8Hn4jWkDGLo0reEUacio0HMVfDrI0J1oaQ9kzKDG5tDIjQ3wFMeYIqw8DryGen5aBbd3RzGkbBrFITs4/x0kTFc4iBbY11geWY7udItH0tW8xMjxKAoSRlb4VrbJAiLMlPsYT0naI0w0n8+UrPxKysSP5F2G0d+U5RLsYhXQwZHstMkMM/5/arZbr62VJxgkuNl+WPSt5TWdQDD5B85qllerx6Pp1a3NGhmEXeUtqKLcH+fDZi166+PS9M54vLilT5vN8G1Zv54MZ23/ZfQGqG8vfoE3eguqF731o/s4WKL74SitMVQbANercm90f9FzNx6Py57V8iutf8+SaPye3nar5bcbA3S99cUz9qc3/dbk4mYcjG8212E6mI37m/VqPOlV3vnkufvQtq2X9cMsHARtt4sm8fi5t0YmTs+Wz5Py6pnNDNQ11p1+9/qKNT5j2o1hX5hTwjCZvGHE86NsD6+tdES9IP+ZXqSE+No0U3UWkqMYx5SrTXlLUouTCAIiviOKuT13bLNVrVp6x70qV9t2/Uqv6EZHd/W6LR5YrZNz0BbFAcRWRKdE+pIsu+2fnwGi0GGY+jjWVlGC5pipP1hsQw4Vjw7E44gow6NIsHjFN/XAqFjLBUmC8ryS+uy3Xa+ZqnIb8Tt6F7tTjuN95q7uMfcAI7IgWNK77G8mGpxxkYolXCU8MEorWKI4EQMglhzsmBWrChgJFwGWQEEY+UmAS4v5IksMYNt/U4OIZdLB1Sh7d9+Gdfgtz4DQ8YlUYDKWX1hUER8ZQXoeyPcBW7sB5+bdxCfyeYl08pigLZL9T59dItujaBER0Wtr+GrkuAv1k69/vQl+AAUO81E48ldkx20+S8V4EOTRzKu5hKVlKVmtkqx+dUmMsTAPBD8aYIhRIthtM4p+YwoKE+Ck4VKgPvBcyPfxJXxOhxxyHIpuU7LjCZvFEDO5WXjilaSnri17LkXeOE75MVkrEAuIRPzjjoIcJPWE+F78raPY/yzXEVs7fkScYp3ghM7kSY6RzTdNgSJhlgjei+Jd48cMHHO+LyySXGDhopsmCcfff1EkoTVUiFCUUO611UywS7IZTr5ZYOdT6YuZjMg/JnPKvp3M435vKOguhGqhS/5bWSNZuyCxlwr9DEtDTcWiKZzT2Q6pfwA8wuv1Tqtc1y3bLXi9att117CKBO5F0vwi/irZyenhe2j+AQ==</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIhaQhUUEK0AsjOrRAL6cvI+PsgNvEgdgG2q8/TmhSoKWHORIS8s722mtfvOwzhpLY8gPGIOMkpUqv21T/eGjiTkIbNBvXJ5odTkCbRI6tNZz6xHMNr3EKSFV6jAnoUcYR5U3VMkxbMxzNtMam5Zt133Brlmc8qco9ZExCS5eaoSrrJKbML8I2VZFRP0WMMJ+iBJjPsT8Krvu+9PRRyUltnW1YFgGz1ozzua/ruBYChjjGNZwm+pm+43MWMn9EphRxkcF7zJA11fe9q9WqtqrX0myqW4Zh6IanS5+QkelPtfWj3Axhj0bpZt1BNKUEo5i8oZzUNfBZGipBPE0zwmfJAWhTN40cWoM11rBp05+q/hGgYHck0g7JjCGNzZBZgg0hggwoBuVu2GuqP4/r4GbvOEOURWmWsL3131ECuoQ4nUOosTKzkt3xiF+Uq3UG2O9RHAtGlvA7H5M5wsCUmwwisu4TJocvZErRfmXN5I+UUwb4b9pypm9zldT1L6rTJVNg/P/0bLtfG5R7FAto3Udvb+Zrf/j0iE5OFvW4nkRXJ4Pn8V1iNAsK284bUlW739f7w1rN1vumAEX93sPtFXVWbsjsx98ndwM78MjwBay3y9NOOF8sdFsg6I49++ZcBKOrBbyO6sJoX3Vux6kROg83i+fz5/jX4IcjVu2b51kUGA/17Lwxtsmk/fzSXblt1DG8IR4kcHnj3q2DbnzLDdca3jr95dVT+0n0H+Y46lzas/uF13mc2XfeD/fq+iH+53U16DinD0Lcjt+mzY+ctnPYNZaSMBKTZ8C8XObj0esqF7JfiH8vL7mFhFpUuPrzXKMYB8rVVr4rlxZfSAEioS+buVlfeJak6bSduts99xrGuWEb5oURGK7nWeapW2rQhsUexU5KI5LHylV2Mz/fE8SJz4CGkGnLVOAZMPUbxC7iSOnRoTwcKWUwTqWKx9MJc+ZitTIQrtPpOsq8NOUWqMrvlA/oIAsiDtmucjs7yj0ETOYEcnnP55vJAWdclmKBloLHZm2JahSEvACyXIN9y244OiPJPIacqJ6koYihNp/Ni8LobPNvaQizwjo8Hxfn7mBa+9/KCkifkOQOLM+lDbKL8OkKsnynTORwwo3thEv4QIQkP16ynDwjeMNk99PHlOTjUY2IzOhPZ/THLHlX7kdv/7xT/4aUvl+PKlC4JFthy7tUXg9SPFplNxeotqiJ5VIU/XNzYcwkvC710dRHgIVUt9dx+gJUryD0oy6XivVe5Mq+y0/wGR1xxCGR06YUyyNeFiNg+cuiJ0/J+thny05IWTcOa/6VrRPLB0jO+Ns3CvZx7ifNN/JvlWbhR7u+wNqKI/OUzwlO6DRf5dfI64GhwKmEJVL30mwb/CuAr4LvGqsiV1y4nKaJ4HD4i5ILWlNFGKeC8l5XLQzbIlvw5K9z8D+cPsEUQv5+M6/ZwZv58bo/knKXILXyJf/trJFiXLBUN+lfcGmqa/nQlMHpdEvU3wl+0nWn4V506q7R8IJK1x3PcwOzURVwJ5PWJ/Nny1ZN989D618=</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj6uQC4QmUUHKUuhJb9sCXbX7UjnOAG4TJ8QOl/31xw5NCpT2sEdCQp6MZ765+Js5YyiJLc9nDHJOUqoE5x312Y4itxm6WAsxnGot7Bqa69htrW3bbdsJUTMMsaoEjBUQUMYR5R3VMsyWZtiaaY1Ny7MMr9lqOE77t6r8gpwJ00KlYajKKokp80q3HbXIqZciRphHUQLM49gb+TfXntD0UIVJ7Z5tUJYO8+6M88zTddyIAEMc4wZOE/1M39E5i5g3IlOKeJHDm8+IddS3u8vlsrFsNtJ8qluGYeiGqwudiJHpN7V7Ul2GKKCTdHPuIZpSglFM/iAJ6gb4LI0UP56mOeGz5BPTpm4a0rQGK6xhs0W/qfq7gxLdkZZ2QOYMaWyGzMrYECaQA8WgPAyDjvrtuApu7o5zRNkkzRO2d/47SEAXEKcZRBqrIqvQHW/xQLq6Z4C9gOK4YGQBt7JNMoSBKXc5TMjqmjDRfBFTyvIrKyZ+pOoywH9TljN9G6uArh/IzjmZAuP/p2bb9dpY+YXiArpBny2ehsnab1+9Dq9ewuYyGzhk/gQXy04JYVt5A6ou99t5v1nr3nq79PS0vnOR83AR/7YHvX9+Lkdm1nsxe0XPn1+S0LywbGf+1ErXvDglaUpa48fXq8VltOIvr8Zg3Fyxq+8P+fiuhXh4snb0zMbBo/6jaRv95l0c3eP2zcv9vdm6iL6/6k/ZIn4YPwKyV+HDw5qnzbx1+Th2xg4C/3fQT3j/3mjm10v/Fz45T6KQGO5wtLwNKXnsRZbfeY9pO4ZdYUUJoyJ8Acyro2yP4FwZiHoh/jW9SAmJtEmp6mWSoxgHytWuvCWpxSsEAZHIE8XcnAeu1RPPxx84TaPdN/p9o2WYA8M3bNc99U2j4qANij2IvZROiPQlWXbTP18DxInHgEaQa4u0wDNg6hcWzxFHSkCH4nGklME4FSxuziZt7rTDddbGsem+xO5kZq8WKEOqcpvyn/Rn7k845Lvcbe9w9xAwyQhIgpcdzkSLMy6SMUeLgsdmY4EaFAoxAnLJwp7VcmydkSSLQULVkzQqYmhks6xMjc42/5aGMCulw/64fHmfBrb/rcqB0ImIVGAylh8g6ggHhpBVBfJ5wM52wJV5v4iIfGAioTwneINk99N7n8gGqZtERPTcGz2bFe5a/ejrH2/qX4DS9/NRO4oWZMttNU3FgBD00a2qOUeNeaNYLIqyfqeSGnNhXhcMaeojwIXgt/U4fQWq1yb0o8ZLjXrPcy3fxVfwGR1xxCER3aaUxyN2ixEwuVsE4p2sjl1cdlyKvHFY8UOyXixWEIn4yy0Fe1jqCfGd+FumefRergO2tvyIOMVCwQmdypMcJOtPmgKnwiwRzJfm28YPGTjkfFdYJ7nGwkU3hQWHz78oktI6KsI4LSgPztVSsE2zJU6+zsB7V/pgpqTyt9m8Yp/O5seb65EgvASptS75b2WNlO2CQZUrQImlo67Eqimc0+kWrb8B/MDstmO5fq81MM1ezeynrmuZ9qBO4E4k3Q/ij5KtnO6/h+6/</con:value></con:property><con:property><con:name>RPQ_ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RPQ_ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Rights_Get_ETag</con:name><con:value>"F92C557CE2AF60ABE0401F0A07992165:38C9022B"</con:value></con:property><con:property><con:name>RetiringAccID</con:name><con:value>urn:dece:accountid:org:dece:F92C565E4B49BB04E0401F0A05997A12</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:8001</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:8001</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</con:value></con:property><con:property><con:name>POLICY_OID</con:name><con:value>F8F12D18247DD52DE0401F0A07991D24</con:value></con:property><con:property><con:name>Password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>Node_Role</con:name><con:value>urn:dece:role:dece:customersupport</con:value></con:property><con:property><con:name>Node_Id</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODEUSERIDSAU1</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE268F1ACA4D1A0F5E0401F0A05995EE4</con:value></con:property><con:property><con:name>NODEUSERIDFULL5</con:name><con:value>urn:dece:userid:org:dece:E500E56B5C023E21E0401F0A21995611</con:value></con:property><con:property><con:name>NODEUSERIDFULL4</con:name><con:value>urn:dece:userid:org:dece:E500DC88504EF65EE0401F0A05991414</con:value></con:property><con:property><con:name>NODEUSERIDFULL3</con:name><con:value>urn:dece:userid:org:dece:E500DC884F79F65EE0401F0A05991414</con:value></con:property><con:property><con:name>NODEUSERIDFULL2</con:name><con:value>urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</con:value></con:property><con:property><con:name>NODEUSERIDFULL1</con:name><con:value>urn:dece:userid:org:dece:F92C565AF8306E0EE0401F0A05997A10</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn:dece:userid:org:dece:F8F12CDFD7E352A3E0401F0A07991D20</con:value></con:property><con:property><con:name>NODEUSERIDBAU1</con:name><con:value>urn:dece:userid:org:dece:EA6EC0E328218645E0401F0A05994A82</con:value></con:property><con:property><con:name>NODEUSERID2</con:name><con:value>urn:dece:userid:org:dece:F92C5580FAE35D97E0401F0A0799216F</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:F8F12CE244DDAD0BE0401F0A05995492</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>NODEACCOUNTID_RET</con:name><con:value>urn:dece:accountid:org:dece:F92C55829AC4F11CE0401F0A0799215F</con:value></con:property><con:property><con:name>NODEACCOUNTID2</con:name><con:value>urn:dece:accountid:org:dece:F92C5587FC37089AE0401F0A05997A18</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn:dece:accountid:org:dece:F92C55829AC4F11CE0401F0A0799215F</con:value></con:property><con:property><con:name>NeustarVM</con:name><con:value/></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>FirstUser_Get_ETag</con:name><con:value>"F92C5580FADF5D97E0401F0A0799216F:1A44A0FA"</con:value></con:property><con:property><con:name>fileName</con:name><con:value>Caching_new_1120140512_124226</con:value></con:property><con:property><con:name>fileKeyStorePath</con:name><con:value>C:\certs</con:value></con:property><con:property><con:name>eTag</con:name><con:value>*</con:value></con:property><con:property><con:name>Encoded_PolicyId</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>Encoded_PolicyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3A</con:value></con:property><con:property><con:name>Encoded_NodeUser_Id</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>Encoded_NodeAcc_Id</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>DMR_Get_ETag</con:name><con:value>"EDD1AAFF85B04AFAE0401F0A059924A1:A28ED9CA"</con:value></con:property><con:property><con:name>DisplayName_New</con:name><con:value>Ashwin_Acc_Create_20140512_081318</con:value></con:property><con:property><con:name>DiscreteMediaProfile_decoded</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:8001</con:value></con:property><con:property><con:name>Decoded_PolicyId</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>Decoded_PolicyClass</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>deqa1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>dec2010</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>CoordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>ContentProfile_decoded</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-23</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>23-Aug-02</con:value></con:property><con:property><con:name>certspath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-25</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>25-Aug-94</con:value></con:property><con:property><con:name>Account_Get_LastModified</con:name><con:value>Mon, 12 May 2014 12:13:18 GMT</con:value></con:property><con:property><con:name>Account_Get_ETagPrior</con:name><con:value>"F92C565AF6DF6E0EE0401F0A05997A10:D3EB4F56"</con:value></con:property><con:property><con:name>Account_Get_ETag</con:name><con:value>"F92C565CCC4B6EAEE0401F0A0799215B:5496501C"</con:value></con:property><con:property><con:name>AccountDisplayName</con:name><con:value>Raju_Acc_Create_20130820_044213</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>